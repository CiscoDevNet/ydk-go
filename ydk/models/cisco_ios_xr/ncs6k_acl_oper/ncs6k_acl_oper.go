// This module contains a collection of YANG definitions
// for Cisco IOS-XR ncs6k-acl package operational data.
// 
// This module contains definitions
// for the following management objects:
//   access-list-hardware: Root class of accesslist hardware
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ncs6k_acl_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ncs6k_acl_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ncs6k-acl-oper access-list-hardware}", reflect.TypeOf(AccessListHardware{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware", reflect.TypeOf(AccessListHardware{}))
}

// SsePfilterAddr represents Address types
type SsePfilterAddr string

const (
    // IPv4
    SsePfilterAddr_ipv4 SsePfilterAddr = "ipv4"

    // IPv6
    SsePfilterAddr_ipv6 SsePfilterAddr = "ipv6"
)

// SseGrant represents ACL grant
type SseGrant string

const (
    // Grant permit
    SseGrant_permit SseGrant = "permit"

    // Grant deny
    SseGrant_deny SseGrant = "deny"
)

// AccessListHardware
// Root class of accesslist hardware
type AccessListHardware struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accesslist nodes.
    Nodes AccessListHardware_Nodes
}

func (accessListHardware *AccessListHardware) GetEntityData() *types.CommonEntityData {
    accessListHardware.EntityData.YFilter = accessListHardware.YFilter
    accessListHardware.EntityData.YangName = "access-list-hardware"
    accessListHardware.EntityData.BundleName = "cisco_ios_xr"
    accessListHardware.EntityData.ParentYangName = "Cisco-IOS-XR-ncs6k-acl-oper"
    accessListHardware.EntityData.SegmentPath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware"
    accessListHardware.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accessListHardware.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accessListHardware.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accessListHardware.EntityData.Children = make(map[string]types.YChild)
    accessListHardware.EntityData.Children["nodes"] = types.YChild{"Nodes", &accessListHardware.Nodes}
    accessListHardware.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(accessListHardware.EntityData)
}

// AccessListHardware_Nodes
// Accesslist nodes
type AccessListHardware_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accesslist node. The type is slice of AccessListHardware_Nodes_Node.
    Node []AccessListHardware_Nodes_Node
}

func (nodes *AccessListHardware_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "access-list-hardware"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = make(map[string]types.YChild)
    nodes.EntityData.Children["node"] = types.YChild{"Node", nil}
    for i := range nodes.Node {
        nodes.EntityData.Children[types.GetSegmentPath(&nodes.Node[i])] = types.YChild{"Node", &nodes.Node[i]}
    }
    nodes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodes.EntityData)
}

// AccessListHardware_Nodes_Node
// Accesslist node
type AccessListHardware_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Node name. The type is string with pattern:
    // b'([a-zA-Z0-9_]*\\d+/){1,2}([a-zA-Z0-9_]*\\d+)'.
    NodeName interface{}

    // Accesslist direction egress.
    Egress AccessListHardware_Nodes_Node_Egress

    // Accesslist direction ingress.
    Ingress AccessListHardware_Nodes_Node_Ingress
}

func (node *AccessListHardware_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = make(map[string]types.YChild)
    node.EntityData.Children["egress"] = types.YChild{"Egress", &node.Egress}
    node.EntityData.Children["ingress"] = types.YChild{"Ingress", &node.Ingress}
    node.EntityData.Leafs = make(map[string]types.YLeaf)
    node.EntityData.Leafs["node-name"] = types.YLeaf{"NodeName", node.NodeName}
    return &(node.EntityData)
}

// AccessListHardware_Nodes_Node_Egress
// Accesslist direction egress
type AccessListHardware_Nodes_Node_Egress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accesslist version IPv4.
    Ipv4 AccessListHardware_Nodes_Node_Egress_Ipv4

    // Accesslist version IPv6.
    Ipv6 AccessListHardware_Nodes_Node_Egress_Ipv6
}

func (egress *AccessListHardware_Nodes_Node_Egress) GetEntityData() *types.CommonEntityData {
    egress.EntityData.YFilter = egress.YFilter
    egress.EntityData.YangName = "egress"
    egress.EntityData.BundleName = "cisco_ios_xr"
    egress.EntityData.ParentYangName = "node"
    egress.EntityData.SegmentPath = "egress"
    egress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    egress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    egress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    egress.EntityData.Children = make(map[string]types.YChild)
    egress.EntityData.Children["ipv4"] = types.YChild{"Ipv4", &egress.Ipv4}
    egress.EntityData.Children["ipv6"] = types.YChild{"Ipv6", &egress.Ipv6}
    egress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(egress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4
// Accesslist version IPv4
type AccessListHardware_Nodes_Node_Egress_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses
}

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "egress"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = make(map[string]types.YChild)
    ipv4.EntityData.Children["accesses"] = types.YChild{"Accesses", &ipv4.Accesses}
    ipv4.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access.
    Access []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "ipv4"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = make(map[string]types.YChild)
    accesses.EntityData.Children["access"] = types.YChild{"Access", nil}
    for i := range accesses.Access {
        accesses.EntityData.Children[types.GetSegmentPath(&accesses.Access[i])] = types.YChild{"Access", &accesses.Access[i]}
    }
    accesses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(accesses.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = make(map[string]types.YChild)
    access.EntityData.Children["implicit"] = types.YChild{"Implicit", &access.Implicit}
    access.EntityData.Children["sequence-details"] = types.YChild{"SequenceDetails", &access.SequenceDetails}
    access.EntityData.Children["sequence-briefs"] = types.YChild{"SequenceBriefs", &access.SequenceBriefs}
    access.EntityData.Leafs = make(map[string]types.YLeaf)
    access.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", access.AccessListName}
    return &(access.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetEntityData() *types.CommonEntityData {
    implicit.EntityData.YFilter = implicit.YFilter
    implicit.EntityData.YangName = "implicit"
    implicit.EntityData.BundleName = "cisco_ios_xr"
    implicit.EntityData.ParentYangName = "access"
    implicit.EntityData.SegmentPath = "implicit"
    implicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicit.EntityData.Children = make(map[string]types.YChild)
    implicit.EntityData.Children["implicit-acl"] = types.YChild{"ImplicitAcl", nil}
    for i := range implicit.ImplicitAcl {
        implicit.EntityData.Children[types.GetSegmentPath(&implicit.ImplicitAcl[i])] = types.YChild{"ImplicitAcl", &implicit.ImplicitAcl[i]}
    }
    implicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetEntityData() *types.CommonEntityData {
    implicitAcl.EntityData.YFilter = implicitAcl.YFilter
    implicitAcl.EntityData.YangName = "implicit-acl"
    implicitAcl.EntityData.BundleName = "cisco_ios_xr"
    implicitAcl.EntityData.ParentYangName = "implicit"
    implicitAcl.EntityData.SegmentPath = "implicit-acl"
    implicitAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitAcl.EntityData.Children = make(map[string]types.YChild)
    implicitAcl.EntityData.Children["common-acl-implicit"] = types.YChild{"CommonAclImplicit", &implicitAcl.CommonAclImplicit}
    implicitAcl.EntityData.Children["interface-acl-implicit"] = types.YChild{"InterfaceAclImplicit", &implicitAcl.InterfaceAclImplicit}
    implicitAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetEntityData() *types.CommonEntityData {
    commonAclImplicit.EntityData.YFilter = commonAclImplicit.YFilter
    commonAclImplicit.EntityData.YangName = "common-acl-implicit"
    commonAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    commonAclImplicit.EntityData.ParentYangName = "implicit-acl"
    commonAclImplicit.EntityData.SegmentPath = "common-acl-implicit"
    commonAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclImplicit.EntityData.Children = make(map[string]types.YChild)
    commonAclImplicit.EntityData.Children["implicit-ndna-permit"] = types.YChild{"ImplicitNdnaPermit", &commonAclImplicit.ImplicitNdnaPermit}
    commonAclImplicit.EntityData.Children["implicit-ndns-permit"] = types.YChild{"ImplicitNdnsPermit", &commonAclImplicit.ImplicitNdnsPermit}
    commonAclImplicit.EntityData.Children["implicit-deny"] = types.YChild{"ImplicitDeny", &commonAclImplicit.ImplicitDeny}
    commonAclImplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(commonAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnaPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief}
    implicitNdnaPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnaPermit.AceDetail {
        implicitNdnaPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnaPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnaPermit.AceDetail[i]}
    }
    implicitNdnaPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnsPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief}
    implicitNdnsPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnsPermit.AceDetail {
        implicitNdnsPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnsPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnsPermit.AceDetail[i]}
    }
    implicitNdnsPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "common-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = make(map[string]types.YChild)
    implicitDeny.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitDeny.AceBrief}
    implicitDeny.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitDeny.AceDetail {
        implicitDeny.EntityData.Children[types.GetSegmentPath(&implicitDeny.AceDetail[i])] = types.YChild{"AceDetail", &implicitDeny.AceDetail[i]}
    }
    implicitDeny.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetEntityData() *types.CommonEntityData {
    interfaceAclImplicit.EntityData.YFilter = interfaceAclImplicit.YFilter
    interfaceAclImplicit.EntityData.YangName = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclImplicit.EntityData.ParentYangName = "implicit-acl"
    interfaceAclImplicit.EntityData.SegmentPath = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclImplicit.EntityData.Children = make(map[string]types.YChild)
    interfaceAclImplicit.EntityData.Children["implicit-ndna-permit"] = types.YChild{"ImplicitNdnaPermit", &interfaceAclImplicit.ImplicitNdnaPermit}
    interfaceAclImplicit.EntityData.Children["implicit-ndns-permit"] = types.YChild{"ImplicitNdnsPermit", &interfaceAclImplicit.ImplicitNdnsPermit}
    interfaceAclImplicit.EntityData.Children["implicit-deny"] = types.YChild{"ImplicitDeny", &interfaceAclImplicit.ImplicitDeny}
    interfaceAclImplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnaPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief}
    implicitNdnaPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnaPermit.AceDetail {
        implicitNdnaPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnaPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnaPermit.AceDetail[i]}
    }
    implicitNdnaPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnsPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief}
    implicitNdnsPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnsPermit.AceDetail {
        implicitNdnsPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnsPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnsPermit.AceDetail[i]}
    }
    implicitNdnsPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "interface-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = make(map[string]types.YChild)
    implicitDeny.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitDeny.AceBrief}
    implicitDeny.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitDeny.AceDetail {
        implicitDeny.EntityData.Children[types.GetSegmentPath(&implicitDeny.AceDetail[i])] = types.YChild{"AceDetail", &implicitDeny.AceDetail[i]}
    }
    implicitDeny.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetEntityData() *types.CommonEntityData {
    sequenceDetails.EntityData.YFilter = sequenceDetails.YFilter
    sequenceDetails.EntityData.YangName = "sequence-details"
    sequenceDetails.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetails.EntityData.ParentYangName = "access"
    sequenceDetails.EntityData.SegmentPath = "sequence-details"
    sequenceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetails.EntityData.Children = make(map[string]types.YChild)
    sequenceDetails.EntityData.Children["sequence-detail"] = types.YChild{"SequenceDetail", nil}
    for i := range sequenceDetails.SequenceDetail {
        sequenceDetails.EntityData.Children[types.GetSegmentPath(&sequenceDetails.SequenceDetail[i])] = types.YChild{"SequenceDetail", &sequenceDetails.SequenceDetail[i]}
    }
    sequenceDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sequenceDetails.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetEntityData() *types.CommonEntityData {
    sequenceDetail.EntityData.YFilter = sequenceDetail.YFilter
    sequenceDetail.EntityData.YangName = "sequence-detail"
    sequenceDetail.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetail.EntityData.ParentYangName = "sequence-details"
    sequenceDetail.EntityData.SegmentPath = "sequence-detail" + "[sequence-number='" + fmt.Sprintf("%v", sequenceDetail.SequenceNumber) + "']"
    sequenceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetail.EntityData.Children = make(map[string]types.YChild)
    sequenceDetail.EntityData.Children["common-acl-detail"] = types.YChild{"CommonAclDetail", nil}
    for i := range sequenceDetail.CommonAclDetail {
        sequenceDetail.EntityData.Children[types.GetSegmentPath(&sequenceDetail.CommonAclDetail[i])] = types.YChild{"CommonAclDetail", &sequenceDetail.CommonAclDetail[i]}
    }
    sequenceDetail.EntityData.Children["interface-acl-detail"] = types.YChild{"InterfaceAclDetail", nil}
    for i := range sequenceDetail.InterfaceAclDetail {
        sequenceDetail.EntityData.Children[types.GetSegmentPath(&sequenceDetail.InterfaceAclDetail[i])] = types.YChild{"InterfaceAclDetail", &sequenceDetail.InterfaceAclDetail[i]}
    }
    sequenceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    sequenceDetail.EntityData.Leafs["sequence-number"] = types.YLeaf{"SequenceNumber", sequenceDetail.SequenceNumber}
    return &(sequenceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetEntityData() *types.CommonEntityData {
    commonAclDetail.EntityData.YFilter = commonAclDetail.YFilter
    commonAclDetail.EntityData.YangName = "common-acl-detail"
    commonAclDetail.EntityData.BundleName = "cisco_ios_xr"
    commonAclDetail.EntityData.ParentYangName = "sequence-detail"
    commonAclDetail.EntityData.SegmentPath = "common-acl-detail"
    commonAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclDetail.EntityData.Children = make(map[string]types.YChild)
    commonAclDetail.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &commonAclDetail.AceBrief}
    commonAclDetail.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range commonAclDetail.AceDetail {
        commonAclDetail.EntityData.Children[types.GetSegmentPath(&commonAclDetail.AceDetail[i])] = types.YChild{"AceDetail", &commonAclDetail.AceDetail[i]}
    }
    commonAclDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(commonAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "common-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "common-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetEntityData() *types.CommonEntityData {
    interfaceAclDetail.EntityData.YFilter = interfaceAclDetail.YFilter
    interfaceAclDetail.EntityData.YangName = "interface-acl-detail"
    interfaceAclDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclDetail.EntityData.ParentYangName = "sequence-detail"
    interfaceAclDetail.EntityData.SegmentPath = "interface-acl-detail"
    interfaceAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclDetail.EntityData.Children = make(map[string]types.YChild)
    interfaceAclDetail.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &interfaceAclDetail.AceBrief}
    interfaceAclDetail.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range interfaceAclDetail.AceDetail {
        interfaceAclDetail.EntityData.Children[types.GetSegmentPath(&interfaceAclDetail.AceDetail[i])] = types.YChild{"AceDetail", &interfaceAclDetail.AceDetail[i]}
    }
    interfaceAclDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "interface-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "interface-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetEntityData() *types.CommonEntityData {
    sequenceBriefs.EntityData.YFilter = sequenceBriefs.YFilter
    sequenceBriefs.EntityData.YangName = "sequence-briefs"
    sequenceBriefs.EntityData.BundleName = "cisco_ios_xr"
    sequenceBriefs.EntityData.ParentYangName = "access"
    sequenceBriefs.EntityData.SegmentPath = "sequence-briefs"
    sequenceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBriefs.EntityData.Children = make(map[string]types.YChild)
    sequenceBriefs.EntityData.Children["sequence-brief"] = types.YChild{"SequenceBrief", nil}
    for i := range sequenceBriefs.SequenceBrief {
        sequenceBriefs.EntityData.Children[types.GetSegmentPath(&sequenceBriefs.SequenceBrief[i])] = types.YChild{"SequenceBrief", &sequenceBriefs.SequenceBrief[i]}
    }
    sequenceBriefs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sequenceBriefs.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetEntityData() *types.CommonEntityData {
    sequenceBrief.EntityData.YFilter = sequenceBrief.YFilter
    sequenceBrief.EntityData.YangName = "sequence-brief"
    sequenceBrief.EntityData.BundleName = "cisco_ios_xr"
    sequenceBrief.EntityData.ParentYangName = "sequence-briefs"
    sequenceBrief.EntityData.SegmentPath = "sequence-brief" + "[sequence-number='" + fmt.Sprintf("%v", sequenceBrief.SequenceNumber) + "']"
    sequenceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBrief.EntityData.Children = make(map[string]types.YChild)
    sequenceBrief.EntityData.Children["common-acl"] = types.YChild{"CommonAcl", nil}
    for i := range sequenceBrief.CommonAcl {
        sequenceBrief.EntityData.Children[types.GetSegmentPath(&sequenceBrief.CommonAcl[i])] = types.YChild{"CommonAcl", &sequenceBrief.CommonAcl[i]}
    }
    sequenceBrief.EntityData.Children["interface-acl"] = types.YChild{"InterfaceAcl", nil}
    for i := range sequenceBrief.InterfaceAcl {
        sequenceBrief.EntityData.Children[types.GetSegmentPath(&sequenceBrief.InterfaceAcl[i])] = types.YChild{"InterfaceAcl", &sequenceBrief.InterfaceAcl[i]}
    }
    sequenceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    sequenceBrief.EntityData.Leafs["sequence-number"] = types.YLeaf{"SequenceNumber", sequenceBrief.SequenceNumber}
    return &(sequenceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetEntityData() *types.CommonEntityData {
    commonAcl.EntityData.YFilter = commonAcl.YFilter
    commonAcl.EntityData.YangName = "common-acl"
    commonAcl.EntityData.BundleName = "cisco_ios_xr"
    commonAcl.EntityData.ParentYangName = "sequence-brief"
    commonAcl.EntityData.SegmentPath = "common-acl"
    commonAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAcl.EntityData.Children = make(map[string]types.YChild)
    commonAcl.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &commonAcl.NextHopAddress}
    commonAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    commonAcl.EntityData.Leafs["grant"] = types.YLeaf{"Grant", commonAcl.Grant}
    commonAcl.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", commonAcl.LoggingEnabled}
    commonAcl.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", commonAcl.PerAceIcmpEnabled}
    commonAcl.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", commonAcl.NextHopEnabled}
    commonAcl.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", commonAcl.DefaultNextHopEnabled}
    commonAcl.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", commonAcl.TotalTcamEntries}
    commonAcl.EntityData.Leafs["hits"] = types.YLeaf{"Hits", commonAcl.Hits}
    commonAcl.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", commonAcl.NpuId}
    return &(commonAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "common-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetEntityData() *types.CommonEntityData {
    interfaceAcl.EntityData.YFilter = interfaceAcl.YFilter
    interfaceAcl.EntityData.YangName = "interface-acl"
    interfaceAcl.EntityData.BundleName = "cisco_ios_xr"
    interfaceAcl.EntityData.ParentYangName = "sequence-brief"
    interfaceAcl.EntityData.SegmentPath = "interface-acl"
    interfaceAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAcl.EntityData.Children = make(map[string]types.YChild)
    interfaceAcl.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &interfaceAcl.NextHopAddress}
    interfaceAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceAcl.EntityData.Leafs["grant"] = types.YLeaf{"Grant", interfaceAcl.Grant}
    interfaceAcl.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", interfaceAcl.LoggingEnabled}
    interfaceAcl.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", interfaceAcl.PerAceIcmpEnabled}
    interfaceAcl.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", interfaceAcl.NextHopEnabled}
    interfaceAcl.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", interfaceAcl.DefaultNextHopEnabled}
    interfaceAcl.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", interfaceAcl.TotalTcamEntries}
    interfaceAcl.EntityData.Leafs["hits"] = types.YLeaf{"Hits", interfaceAcl.Hits}
    interfaceAcl.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", interfaceAcl.NpuId}
    return &(interfaceAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "interface-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6
// Accesslist version IPv6
type AccessListHardware_Nodes_Node_Egress_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses
}

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "egress"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = make(map[string]types.YChild)
    ipv6.EntityData.Children["accesses"] = types.YChild{"Accesses", &ipv6.Accesses}
    ipv6.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access.
    Access []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "ipv6"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = make(map[string]types.YChild)
    accesses.EntityData.Children["access"] = types.YChild{"Access", nil}
    for i := range accesses.Access {
        accesses.EntityData.Children[types.GetSegmentPath(&accesses.Access[i])] = types.YChild{"Access", &accesses.Access[i]}
    }
    accesses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(accesses.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = make(map[string]types.YChild)
    access.EntityData.Children["implicit"] = types.YChild{"Implicit", &access.Implicit}
    access.EntityData.Children["sequence-details"] = types.YChild{"SequenceDetails", &access.SequenceDetails}
    access.EntityData.Children["sequence-briefs"] = types.YChild{"SequenceBriefs", &access.SequenceBriefs}
    access.EntityData.Leafs = make(map[string]types.YLeaf)
    access.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", access.AccessListName}
    return &(access.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetEntityData() *types.CommonEntityData {
    implicit.EntityData.YFilter = implicit.YFilter
    implicit.EntityData.YangName = "implicit"
    implicit.EntityData.BundleName = "cisco_ios_xr"
    implicit.EntityData.ParentYangName = "access"
    implicit.EntityData.SegmentPath = "implicit"
    implicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicit.EntityData.Children = make(map[string]types.YChild)
    implicit.EntityData.Children["implicit-acl"] = types.YChild{"ImplicitAcl", nil}
    for i := range implicit.ImplicitAcl {
        implicit.EntityData.Children[types.GetSegmentPath(&implicit.ImplicitAcl[i])] = types.YChild{"ImplicitAcl", &implicit.ImplicitAcl[i]}
    }
    implicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetEntityData() *types.CommonEntityData {
    implicitAcl.EntityData.YFilter = implicitAcl.YFilter
    implicitAcl.EntityData.YangName = "implicit-acl"
    implicitAcl.EntityData.BundleName = "cisco_ios_xr"
    implicitAcl.EntityData.ParentYangName = "implicit"
    implicitAcl.EntityData.SegmentPath = "implicit-acl"
    implicitAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitAcl.EntityData.Children = make(map[string]types.YChild)
    implicitAcl.EntityData.Children["common-acl-implicit"] = types.YChild{"CommonAclImplicit", &implicitAcl.CommonAclImplicit}
    implicitAcl.EntityData.Children["interface-acl-implicit"] = types.YChild{"InterfaceAclImplicit", &implicitAcl.InterfaceAclImplicit}
    implicitAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetEntityData() *types.CommonEntityData {
    commonAclImplicit.EntityData.YFilter = commonAclImplicit.YFilter
    commonAclImplicit.EntityData.YangName = "common-acl-implicit"
    commonAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    commonAclImplicit.EntityData.ParentYangName = "implicit-acl"
    commonAclImplicit.EntityData.SegmentPath = "common-acl-implicit"
    commonAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclImplicit.EntityData.Children = make(map[string]types.YChild)
    commonAclImplicit.EntityData.Children["implicit-ndna-permit"] = types.YChild{"ImplicitNdnaPermit", &commonAclImplicit.ImplicitNdnaPermit}
    commonAclImplicit.EntityData.Children["implicit-ndns-permit"] = types.YChild{"ImplicitNdnsPermit", &commonAclImplicit.ImplicitNdnsPermit}
    commonAclImplicit.EntityData.Children["implicit-deny"] = types.YChild{"ImplicitDeny", &commonAclImplicit.ImplicitDeny}
    commonAclImplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(commonAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnaPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief}
    implicitNdnaPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnaPermit.AceDetail {
        implicitNdnaPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnaPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnaPermit.AceDetail[i]}
    }
    implicitNdnaPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnsPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief}
    implicitNdnsPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnsPermit.AceDetail {
        implicitNdnsPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnsPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnsPermit.AceDetail[i]}
    }
    implicitNdnsPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "common-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = make(map[string]types.YChild)
    implicitDeny.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitDeny.AceBrief}
    implicitDeny.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitDeny.AceDetail {
        implicitDeny.EntityData.Children[types.GetSegmentPath(&implicitDeny.AceDetail[i])] = types.YChild{"AceDetail", &implicitDeny.AceDetail[i]}
    }
    implicitDeny.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetEntityData() *types.CommonEntityData {
    interfaceAclImplicit.EntityData.YFilter = interfaceAclImplicit.YFilter
    interfaceAclImplicit.EntityData.YangName = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclImplicit.EntityData.ParentYangName = "implicit-acl"
    interfaceAclImplicit.EntityData.SegmentPath = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclImplicit.EntityData.Children = make(map[string]types.YChild)
    interfaceAclImplicit.EntityData.Children["implicit-ndna-permit"] = types.YChild{"ImplicitNdnaPermit", &interfaceAclImplicit.ImplicitNdnaPermit}
    interfaceAclImplicit.EntityData.Children["implicit-ndns-permit"] = types.YChild{"ImplicitNdnsPermit", &interfaceAclImplicit.ImplicitNdnsPermit}
    interfaceAclImplicit.EntityData.Children["implicit-deny"] = types.YChild{"ImplicitDeny", &interfaceAclImplicit.ImplicitDeny}
    interfaceAclImplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnaPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief}
    implicitNdnaPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnaPermit.AceDetail {
        implicitNdnaPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnaPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnaPermit.AceDetail[i]}
    }
    implicitNdnaPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnsPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief}
    implicitNdnsPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnsPermit.AceDetail {
        implicitNdnsPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnsPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnsPermit.AceDetail[i]}
    }
    implicitNdnsPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "interface-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = make(map[string]types.YChild)
    implicitDeny.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitDeny.AceBrief}
    implicitDeny.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitDeny.AceDetail {
        implicitDeny.EntityData.Children[types.GetSegmentPath(&implicitDeny.AceDetail[i])] = types.YChild{"AceDetail", &implicitDeny.AceDetail[i]}
    }
    implicitDeny.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetEntityData() *types.CommonEntityData {
    sequenceDetails.EntityData.YFilter = sequenceDetails.YFilter
    sequenceDetails.EntityData.YangName = "sequence-details"
    sequenceDetails.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetails.EntityData.ParentYangName = "access"
    sequenceDetails.EntityData.SegmentPath = "sequence-details"
    sequenceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetails.EntityData.Children = make(map[string]types.YChild)
    sequenceDetails.EntityData.Children["sequence-detail"] = types.YChild{"SequenceDetail", nil}
    for i := range sequenceDetails.SequenceDetail {
        sequenceDetails.EntityData.Children[types.GetSegmentPath(&sequenceDetails.SequenceDetail[i])] = types.YChild{"SequenceDetail", &sequenceDetails.SequenceDetail[i]}
    }
    sequenceDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sequenceDetails.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetEntityData() *types.CommonEntityData {
    sequenceDetail.EntityData.YFilter = sequenceDetail.YFilter
    sequenceDetail.EntityData.YangName = "sequence-detail"
    sequenceDetail.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetail.EntityData.ParentYangName = "sequence-details"
    sequenceDetail.EntityData.SegmentPath = "sequence-detail" + "[sequence-number='" + fmt.Sprintf("%v", sequenceDetail.SequenceNumber) + "']"
    sequenceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetail.EntityData.Children = make(map[string]types.YChild)
    sequenceDetail.EntityData.Children["common-acl-detail"] = types.YChild{"CommonAclDetail", nil}
    for i := range sequenceDetail.CommonAclDetail {
        sequenceDetail.EntityData.Children[types.GetSegmentPath(&sequenceDetail.CommonAclDetail[i])] = types.YChild{"CommonAclDetail", &sequenceDetail.CommonAclDetail[i]}
    }
    sequenceDetail.EntityData.Children["interface-acl-detail"] = types.YChild{"InterfaceAclDetail", nil}
    for i := range sequenceDetail.InterfaceAclDetail {
        sequenceDetail.EntityData.Children[types.GetSegmentPath(&sequenceDetail.InterfaceAclDetail[i])] = types.YChild{"InterfaceAclDetail", &sequenceDetail.InterfaceAclDetail[i]}
    }
    sequenceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    sequenceDetail.EntityData.Leafs["sequence-number"] = types.YLeaf{"SequenceNumber", sequenceDetail.SequenceNumber}
    return &(sequenceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetEntityData() *types.CommonEntityData {
    commonAclDetail.EntityData.YFilter = commonAclDetail.YFilter
    commonAclDetail.EntityData.YangName = "common-acl-detail"
    commonAclDetail.EntityData.BundleName = "cisco_ios_xr"
    commonAclDetail.EntityData.ParentYangName = "sequence-detail"
    commonAclDetail.EntityData.SegmentPath = "common-acl-detail"
    commonAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclDetail.EntityData.Children = make(map[string]types.YChild)
    commonAclDetail.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &commonAclDetail.AceBrief}
    commonAclDetail.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range commonAclDetail.AceDetail {
        commonAclDetail.EntityData.Children[types.GetSegmentPath(&commonAclDetail.AceDetail[i])] = types.YChild{"AceDetail", &commonAclDetail.AceDetail[i]}
    }
    commonAclDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(commonAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "common-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "common-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetEntityData() *types.CommonEntityData {
    interfaceAclDetail.EntityData.YFilter = interfaceAclDetail.YFilter
    interfaceAclDetail.EntityData.YangName = "interface-acl-detail"
    interfaceAclDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclDetail.EntityData.ParentYangName = "sequence-detail"
    interfaceAclDetail.EntityData.SegmentPath = "interface-acl-detail"
    interfaceAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclDetail.EntityData.Children = make(map[string]types.YChild)
    interfaceAclDetail.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &interfaceAclDetail.AceBrief}
    interfaceAclDetail.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range interfaceAclDetail.AceDetail {
        interfaceAclDetail.EntityData.Children[types.GetSegmentPath(&interfaceAclDetail.AceDetail[i])] = types.YChild{"AceDetail", &interfaceAclDetail.AceDetail[i]}
    }
    interfaceAclDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "interface-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "interface-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetEntityData() *types.CommonEntityData {
    sequenceBriefs.EntityData.YFilter = sequenceBriefs.YFilter
    sequenceBriefs.EntityData.YangName = "sequence-briefs"
    sequenceBriefs.EntityData.BundleName = "cisco_ios_xr"
    sequenceBriefs.EntityData.ParentYangName = "access"
    sequenceBriefs.EntityData.SegmentPath = "sequence-briefs"
    sequenceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBriefs.EntityData.Children = make(map[string]types.YChild)
    sequenceBriefs.EntityData.Children["sequence-brief"] = types.YChild{"SequenceBrief", nil}
    for i := range sequenceBriefs.SequenceBrief {
        sequenceBriefs.EntityData.Children[types.GetSegmentPath(&sequenceBriefs.SequenceBrief[i])] = types.YChild{"SequenceBrief", &sequenceBriefs.SequenceBrief[i]}
    }
    sequenceBriefs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sequenceBriefs.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetEntityData() *types.CommonEntityData {
    sequenceBrief.EntityData.YFilter = sequenceBrief.YFilter
    sequenceBrief.EntityData.YangName = "sequence-brief"
    sequenceBrief.EntityData.BundleName = "cisco_ios_xr"
    sequenceBrief.EntityData.ParentYangName = "sequence-briefs"
    sequenceBrief.EntityData.SegmentPath = "sequence-brief" + "[sequence-number='" + fmt.Sprintf("%v", sequenceBrief.SequenceNumber) + "']"
    sequenceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBrief.EntityData.Children = make(map[string]types.YChild)
    sequenceBrief.EntityData.Children["common-acl"] = types.YChild{"CommonAcl", nil}
    for i := range sequenceBrief.CommonAcl {
        sequenceBrief.EntityData.Children[types.GetSegmentPath(&sequenceBrief.CommonAcl[i])] = types.YChild{"CommonAcl", &sequenceBrief.CommonAcl[i]}
    }
    sequenceBrief.EntityData.Children["interface-acl"] = types.YChild{"InterfaceAcl", nil}
    for i := range sequenceBrief.InterfaceAcl {
        sequenceBrief.EntityData.Children[types.GetSegmentPath(&sequenceBrief.InterfaceAcl[i])] = types.YChild{"InterfaceAcl", &sequenceBrief.InterfaceAcl[i]}
    }
    sequenceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    sequenceBrief.EntityData.Leafs["sequence-number"] = types.YLeaf{"SequenceNumber", sequenceBrief.SequenceNumber}
    return &(sequenceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetEntityData() *types.CommonEntityData {
    commonAcl.EntityData.YFilter = commonAcl.YFilter
    commonAcl.EntityData.YangName = "common-acl"
    commonAcl.EntityData.BundleName = "cisco_ios_xr"
    commonAcl.EntityData.ParentYangName = "sequence-brief"
    commonAcl.EntityData.SegmentPath = "common-acl"
    commonAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAcl.EntityData.Children = make(map[string]types.YChild)
    commonAcl.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &commonAcl.NextHopAddress}
    commonAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    commonAcl.EntityData.Leafs["grant"] = types.YLeaf{"Grant", commonAcl.Grant}
    commonAcl.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", commonAcl.LoggingEnabled}
    commonAcl.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", commonAcl.PerAceIcmpEnabled}
    commonAcl.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", commonAcl.NextHopEnabled}
    commonAcl.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", commonAcl.DefaultNextHopEnabled}
    commonAcl.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", commonAcl.TotalTcamEntries}
    commonAcl.EntityData.Leafs["hits"] = types.YLeaf{"Hits", commonAcl.Hits}
    commonAcl.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", commonAcl.NpuId}
    return &(commonAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "common-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetEntityData() *types.CommonEntityData {
    interfaceAcl.EntityData.YFilter = interfaceAcl.YFilter
    interfaceAcl.EntityData.YangName = "interface-acl"
    interfaceAcl.EntityData.BundleName = "cisco_ios_xr"
    interfaceAcl.EntityData.ParentYangName = "sequence-brief"
    interfaceAcl.EntityData.SegmentPath = "interface-acl"
    interfaceAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAcl.EntityData.Children = make(map[string]types.YChild)
    interfaceAcl.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &interfaceAcl.NextHopAddress}
    interfaceAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceAcl.EntityData.Leafs["grant"] = types.YLeaf{"Grant", interfaceAcl.Grant}
    interfaceAcl.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", interfaceAcl.LoggingEnabled}
    interfaceAcl.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", interfaceAcl.PerAceIcmpEnabled}
    interfaceAcl.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", interfaceAcl.NextHopEnabled}
    interfaceAcl.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", interfaceAcl.DefaultNextHopEnabled}
    interfaceAcl.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", interfaceAcl.TotalTcamEntries}
    interfaceAcl.EntityData.Leafs["hits"] = types.YLeaf{"Hits", interfaceAcl.Hits}
    interfaceAcl.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", interfaceAcl.NpuId}
    return &(interfaceAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "interface-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress
// Accesslist direction ingress
type AccessListHardware_Nodes_Node_Ingress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accesslist version IPv4.
    Ipv4 AccessListHardware_Nodes_Node_Ingress_Ipv4

    // Accesslist version IPv6.
    Ipv6 AccessListHardware_Nodes_Node_Ingress_Ipv6
}

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetEntityData() *types.CommonEntityData {
    ingress.EntityData.YFilter = ingress.YFilter
    ingress.EntityData.YangName = "ingress"
    ingress.EntityData.BundleName = "cisco_ios_xr"
    ingress.EntityData.ParentYangName = "node"
    ingress.EntityData.SegmentPath = "ingress"
    ingress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ingress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ingress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ingress.EntityData.Children = make(map[string]types.YChild)
    ingress.EntityData.Children["ipv4"] = types.YChild{"Ipv4", &ingress.Ipv4}
    ingress.EntityData.Children["ipv6"] = types.YChild{"Ipv6", &ingress.Ipv6}
    ingress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ingress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4
// Accesslist version IPv4
type AccessListHardware_Nodes_Node_Ingress_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses
}

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "ingress"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = make(map[string]types.YChild)
    ipv4.EntityData.Children["accesses"] = types.YChild{"Accesses", &ipv4.Accesses}
    ipv4.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access.
    Access []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "ipv4"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = make(map[string]types.YChild)
    accesses.EntityData.Children["access"] = types.YChild{"Access", nil}
    for i := range accesses.Access {
        accesses.EntityData.Children[types.GetSegmentPath(&accesses.Access[i])] = types.YChild{"Access", &accesses.Access[i]}
    }
    accesses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(accesses.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = make(map[string]types.YChild)
    access.EntityData.Children["implicit"] = types.YChild{"Implicit", &access.Implicit}
    access.EntityData.Children["sequence-details"] = types.YChild{"SequenceDetails", &access.SequenceDetails}
    access.EntityData.Children["sequence-briefs"] = types.YChild{"SequenceBriefs", &access.SequenceBriefs}
    access.EntityData.Leafs = make(map[string]types.YLeaf)
    access.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", access.AccessListName}
    return &(access.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetEntityData() *types.CommonEntityData {
    implicit.EntityData.YFilter = implicit.YFilter
    implicit.EntityData.YangName = "implicit"
    implicit.EntityData.BundleName = "cisco_ios_xr"
    implicit.EntityData.ParentYangName = "access"
    implicit.EntityData.SegmentPath = "implicit"
    implicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicit.EntityData.Children = make(map[string]types.YChild)
    implicit.EntityData.Children["implicit-acl"] = types.YChild{"ImplicitAcl", nil}
    for i := range implicit.ImplicitAcl {
        implicit.EntityData.Children[types.GetSegmentPath(&implicit.ImplicitAcl[i])] = types.YChild{"ImplicitAcl", &implicit.ImplicitAcl[i]}
    }
    implicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetEntityData() *types.CommonEntityData {
    implicitAcl.EntityData.YFilter = implicitAcl.YFilter
    implicitAcl.EntityData.YangName = "implicit-acl"
    implicitAcl.EntityData.BundleName = "cisco_ios_xr"
    implicitAcl.EntityData.ParentYangName = "implicit"
    implicitAcl.EntityData.SegmentPath = "implicit-acl"
    implicitAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitAcl.EntityData.Children = make(map[string]types.YChild)
    implicitAcl.EntityData.Children["common-acl-implicit"] = types.YChild{"CommonAclImplicit", &implicitAcl.CommonAclImplicit}
    implicitAcl.EntityData.Children["interface-acl-implicit"] = types.YChild{"InterfaceAclImplicit", &implicitAcl.InterfaceAclImplicit}
    implicitAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetEntityData() *types.CommonEntityData {
    commonAclImplicit.EntityData.YFilter = commonAclImplicit.YFilter
    commonAclImplicit.EntityData.YangName = "common-acl-implicit"
    commonAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    commonAclImplicit.EntityData.ParentYangName = "implicit-acl"
    commonAclImplicit.EntityData.SegmentPath = "common-acl-implicit"
    commonAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclImplicit.EntityData.Children = make(map[string]types.YChild)
    commonAclImplicit.EntityData.Children["implicit-ndna-permit"] = types.YChild{"ImplicitNdnaPermit", &commonAclImplicit.ImplicitNdnaPermit}
    commonAclImplicit.EntityData.Children["implicit-ndns-permit"] = types.YChild{"ImplicitNdnsPermit", &commonAclImplicit.ImplicitNdnsPermit}
    commonAclImplicit.EntityData.Children["implicit-deny"] = types.YChild{"ImplicitDeny", &commonAclImplicit.ImplicitDeny}
    commonAclImplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(commonAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnaPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief}
    implicitNdnaPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnaPermit.AceDetail {
        implicitNdnaPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnaPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnaPermit.AceDetail[i]}
    }
    implicitNdnaPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnsPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief}
    implicitNdnsPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnsPermit.AceDetail {
        implicitNdnsPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnsPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnsPermit.AceDetail[i]}
    }
    implicitNdnsPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "common-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = make(map[string]types.YChild)
    implicitDeny.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitDeny.AceBrief}
    implicitDeny.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitDeny.AceDetail {
        implicitDeny.EntityData.Children[types.GetSegmentPath(&implicitDeny.AceDetail[i])] = types.YChild{"AceDetail", &implicitDeny.AceDetail[i]}
    }
    implicitDeny.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetEntityData() *types.CommonEntityData {
    interfaceAclImplicit.EntityData.YFilter = interfaceAclImplicit.YFilter
    interfaceAclImplicit.EntityData.YangName = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclImplicit.EntityData.ParentYangName = "implicit-acl"
    interfaceAclImplicit.EntityData.SegmentPath = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclImplicit.EntityData.Children = make(map[string]types.YChild)
    interfaceAclImplicit.EntityData.Children["implicit-ndna-permit"] = types.YChild{"ImplicitNdnaPermit", &interfaceAclImplicit.ImplicitNdnaPermit}
    interfaceAclImplicit.EntityData.Children["implicit-ndns-permit"] = types.YChild{"ImplicitNdnsPermit", &interfaceAclImplicit.ImplicitNdnsPermit}
    interfaceAclImplicit.EntityData.Children["implicit-deny"] = types.YChild{"ImplicitDeny", &interfaceAclImplicit.ImplicitDeny}
    interfaceAclImplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnaPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief}
    implicitNdnaPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnaPermit.AceDetail {
        implicitNdnaPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnaPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnaPermit.AceDetail[i]}
    }
    implicitNdnaPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnsPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief}
    implicitNdnsPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnsPermit.AceDetail {
        implicitNdnsPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnsPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnsPermit.AceDetail[i]}
    }
    implicitNdnsPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "interface-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = make(map[string]types.YChild)
    implicitDeny.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitDeny.AceBrief}
    implicitDeny.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitDeny.AceDetail {
        implicitDeny.EntityData.Children[types.GetSegmentPath(&implicitDeny.AceDetail[i])] = types.YChild{"AceDetail", &implicitDeny.AceDetail[i]}
    }
    implicitDeny.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetEntityData() *types.CommonEntityData {
    sequenceDetails.EntityData.YFilter = sequenceDetails.YFilter
    sequenceDetails.EntityData.YangName = "sequence-details"
    sequenceDetails.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetails.EntityData.ParentYangName = "access"
    sequenceDetails.EntityData.SegmentPath = "sequence-details"
    sequenceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetails.EntityData.Children = make(map[string]types.YChild)
    sequenceDetails.EntityData.Children["sequence-detail"] = types.YChild{"SequenceDetail", nil}
    for i := range sequenceDetails.SequenceDetail {
        sequenceDetails.EntityData.Children[types.GetSegmentPath(&sequenceDetails.SequenceDetail[i])] = types.YChild{"SequenceDetail", &sequenceDetails.SequenceDetail[i]}
    }
    sequenceDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sequenceDetails.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetEntityData() *types.CommonEntityData {
    sequenceDetail.EntityData.YFilter = sequenceDetail.YFilter
    sequenceDetail.EntityData.YangName = "sequence-detail"
    sequenceDetail.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetail.EntityData.ParentYangName = "sequence-details"
    sequenceDetail.EntityData.SegmentPath = "sequence-detail" + "[sequence-number='" + fmt.Sprintf("%v", sequenceDetail.SequenceNumber) + "']"
    sequenceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetail.EntityData.Children = make(map[string]types.YChild)
    sequenceDetail.EntityData.Children["common-acl-detail"] = types.YChild{"CommonAclDetail", nil}
    for i := range sequenceDetail.CommonAclDetail {
        sequenceDetail.EntityData.Children[types.GetSegmentPath(&sequenceDetail.CommonAclDetail[i])] = types.YChild{"CommonAclDetail", &sequenceDetail.CommonAclDetail[i]}
    }
    sequenceDetail.EntityData.Children["interface-acl-detail"] = types.YChild{"InterfaceAclDetail", nil}
    for i := range sequenceDetail.InterfaceAclDetail {
        sequenceDetail.EntityData.Children[types.GetSegmentPath(&sequenceDetail.InterfaceAclDetail[i])] = types.YChild{"InterfaceAclDetail", &sequenceDetail.InterfaceAclDetail[i]}
    }
    sequenceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    sequenceDetail.EntityData.Leafs["sequence-number"] = types.YLeaf{"SequenceNumber", sequenceDetail.SequenceNumber}
    return &(sequenceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetEntityData() *types.CommonEntityData {
    commonAclDetail.EntityData.YFilter = commonAclDetail.YFilter
    commonAclDetail.EntityData.YangName = "common-acl-detail"
    commonAclDetail.EntityData.BundleName = "cisco_ios_xr"
    commonAclDetail.EntityData.ParentYangName = "sequence-detail"
    commonAclDetail.EntityData.SegmentPath = "common-acl-detail"
    commonAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclDetail.EntityData.Children = make(map[string]types.YChild)
    commonAclDetail.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &commonAclDetail.AceBrief}
    commonAclDetail.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range commonAclDetail.AceDetail {
        commonAclDetail.EntityData.Children[types.GetSegmentPath(&commonAclDetail.AceDetail[i])] = types.YChild{"AceDetail", &commonAclDetail.AceDetail[i]}
    }
    commonAclDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(commonAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "common-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "common-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetEntityData() *types.CommonEntityData {
    interfaceAclDetail.EntityData.YFilter = interfaceAclDetail.YFilter
    interfaceAclDetail.EntityData.YangName = "interface-acl-detail"
    interfaceAclDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclDetail.EntityData.ParentYangName = "sequence-detail"
    interfaceAclDetail.EntityData.SegmentPath = "interface-acl-detail"
    interfaceAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclDetail.EntityData.Children = make(map[string]types.YChild)
    interfaceAclDetail.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &interfaceAclDetail.AceBrief}
    interfaceAclDetail.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range interfaceAclDetail.AceDetail {
        interfaceAclDetail.EntityData.Children[types.GetSegmentPath(&interfaceAclDetail.AceDetail[i])] = types.YChild{"AceDetail", &interfaceAclDetail.AceDetail[i]}
    }
    interfaceAclDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "interface-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "interface-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetEntityData() *types.CommonEntityData {
    sequenceBriefs.EntityData.YFilter = sequenceBriefs.YFilter
    sequenceBriefs.EntityData.YangName = "sequence-briefs"
    sequenceBriefs.EntityData.BundleName = "cisco_ios_xr"
    sequenceBriefs.EntityData.ParentYangName = "access"
    sequenceBriefs.EntityData.SegmentPath = "sequence-briefs"
    sequenceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBriefs.EntityData.Children = make(map[string]types.YChild)
    sequenceBriefs.EntityData.Children["sequence-brief"] = types.YChild{"SequenceBrief", nil}
    for i := range sequenceBriefs.SequenceBrief {
        sequenceBriefs.EntityData.Children[types.GetSegmentPath(&sequenceBriefs.SequenceBrief[i])] = types.YChild{"SequenceBrief", &sequenceBriefs.SequenceBrief[i]}
    }
    sequenceBriefs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sequenceBriefs.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetEntityData() *types.CommonEntityData {
    sequenceBrief.EntityData.YFilter = sequenceBrief.YFilter
    sequenceBrief.EntityData.YangName = "sequence-brief"
    sequenceBrief.EntityData.BundleName = "cisco_ios_xr"
    sequenceBrief.EntityData.ParentYangName = "sequence-briefs"
    sequenceBrief.EntityData.SegmentPath = "sequence-brief" + "[sequence-number='" + fmt.Sprintf("%v", sequenceBrief.SequenceNumber) + "']"
    sequenceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBrief.EntityData.Children = make(map[string]types.YChild)
    sequenceBrief.EntityData.Children["common-acl"] = types.YChild{"CommonAcl", nil}
    for i := range sequenceBrief.CommonAcl {
        sequenceBrief.EntityData.Children[types.GetSegmentPath(&sequenceBrief.CommonAcl[i])] = types.YChild{"CommonAcl", &sequenceBrief.CommonAcl[i]}
    }
    sequenceBrief.EntityData.Children["interface-acl"] = types.YChild{"InterfaceAcl", nil}
    for i := range sequenceBrief.InterfaceAcl {
        sequenceBrief.EntityData.Children[types.GetSegmentPath(&sequenceBrief.InterfaceAcl[i])] = types.YChild{"InterfaceAcl", &sequenceBrief.InterfaceAcl[i]}
    }
    sequenceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    sequenceBrief.EntityData.Leafs["sequence-number"] = types.YLeaf{"SequenceNumber", sequenceBrief.SequenceNumber}
    return &(sequenceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetEntityData() *types.CommonEntityData {
    commonAcl.EntityData.YFilter = commonAcl.YFilter
    commonAcl.EntityData.YangName = "common-acl"
    commonAcl.EntityData.BundleName = "cisco_ios_xr"
    commonAcl.EntityData.ParentYangName = "sequence-brief"
    commonAcl.EntityData.SegmentPath = "common-acl"
    commonAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAcl.EntityData.Children = make(map[string]types.YChild)
    commonAcl.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &commonAcl.NextHopAddress}
    commonAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    commonAcl.EntityData.Leafs["grant"] = types.YLeaf{"Grant", commonAcl.Grant}
    commonAcl.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", commonAcl.LoggingEnabled}
    commonAcl.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", commonAcl.PerAceIcmpEnabled}
    commonAcl.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", commonAcl.NextHopEnabled}
    commonAcl.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", commonAcl.DefaultNextHopEnabled}
    commonAcl.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", commonAcl.TotalTcamEntries}
    commonAcl.EntityData.Leafs["hits"] = types.YLeaf{"Hits", commonAcl.Hits}
    commonAcl.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", commonAcl.NpuId}
    return &(commonAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "common-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetEntityData() *types.CommonEntityData {
    interfaceAcl.EntityData.YFilter = interfaceAcl.YFilter
    interfaceAcl.EntityData.YangName = "interface-acl"
    interfaceAcl.EntityData.BundleName = "cisco_ios_xr"
    interfaceAcl.EntityData.ParentYangName = "sequence-brief"
    interfaceAcl.EntityData.SegmentPath = "interface-acl"
    interfaceAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAcl.EntityData.Children = make(map[string]types.YChild)
    interfaceAcl.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &interfaceAcl.NextHopAddress}
    interfaceAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceAcl.EntityData.Leafs["grant"] = types.YLeaf{"Grant", interfaceAcl.Grant}
    interfaceAcl.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", interfaceAcl.LoggingEnabled}
    interfaceAcl.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", interfaceAcl.PerAceIcmpEnabled}
    interfaceAcl.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", interfaceAcl.NextHopEnabled}
    interfaceAcl.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", interfaceAcl.DefaultNextHopEnabled}
    interfaceAcl.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", interfaceAcl.TotalTcamEntries}
    interfaceAcl.EntityData.Leafs["hits"] = types.YLeaf{"Hits", interfaceAcl.Hits}
    interfaceAcl.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", interfaceAcl.NpuId}
    return &(interfaceAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "interface-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6
// Accesslist version IPv6
type AccessListHardware_Nodes_Node_Ingress_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses
}

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "ingress"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = make(map[string]types.YChild)
    ipv6.EntityData.Children["accesses"] = types.YChild{"Accesses", &ipv6.Accesses}
    ipv6.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access.
    Access []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "ipv6"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = make(map[string]types.YChild)
    accesses.EntityData.Children["access"] = types.YChild{"Access", nil}
    for i := range accesses.Access {
        accesses.EntityData.Children[types.GetSegmentPath(&accesses.Access[i])] = types.YChild{"Access", &accesses.Access[i]}
    }
    accesses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(accesses.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = make(map[string]types.YChild)
    access.EntityData.Children["implicit"] = types.YChild{"Implicit", &access.Implicit}
    access.EntityData.Children["sequence-details"] = types.YChild{"SequenceDetails", &access.SequenceDetails}
    access.EntityData.Children["sequence-briefs"] = types.YChild{"SequenceBriefs", &access.SequenceBriefs}
    access.EntityData.Leafs = make(map[string]types.YLeaf)
    access.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", access.AccessListName}
    return &(access.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetEntityData() *types.CommonEntityData {
    implicit.EntityData.YFilter = implicit.YFilter
    implicit.EntityData.YangName = "implicit"
    implicit.EntityData.BundleName = "cisco_ios_xr"
    implicit.EntityData.ParentYangName = "access"
    implicit.EntityData.SegmentPath = "implicit"
    implicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicit.EntityData.Children = make(map[string]types.YChild)
    implicit.EntityData.Children["implicit-acl"] = types.YChild{"ImplicitAcl", nil}
    for i := range implicit.ImplicitAcl {
        implicit.EntityData.Children[types.GetSegmentPath(&implicit.ImplicitAcl[i])] = types.YChild{"ImplicitAcl", &implicit.ImplicitAcl[i]}
    }
    implicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetEntityData() *types.CommonEntityData {
    implicitAcl.EntityData.YFilter = implicitAcl.YFilter
    implicitAcl.EntityData.YangName = "implicit-acl"
    implicitAcl.EntityData.BundleName = "cisco_ios_xr"
    implicitAcl.EntityData.ParentYangName = "implicit"
    implicitAcl.EntityData.SegmentPath = "implicit-acl"
    implicitAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitAcl.EntityData.Children = make(map[string]types.YChild)
    implicitAcl.EntityData.Children["common-acl-implicit"] = types.YChild{"CommonAclImplicit", &implicitAcl.CommonAclImplicit}
    implicitAcl.EntityData.Children["interface-acl-implicit"] = types.YChild{"InterfaceAclImplicit", &implicitAcl.InterfaceAclImplicit}
    implicitAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetEntityData() *types.CommonEntityData {
    commonAclImplicit.EntityData.YFilter = commonAclImplicit.YFilter
    commonAclImplicit.EntityData.YangName = "common-acl-implicit"
    commonAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    commonAclImplicit.EntityData.ParentYangName = "implicit-acl"
    commonAclImplicit.EntityData.SegmentPath = "common-acl-implicit"
    commonAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclImplicit.EntityData.Children = make(map[string]types.YChild)
    commonAclImplicit.EntityData.Children["implicit-ndna-permit"] = types.YChild{"ImplicitNdnaPermit", &commonAclImplicit.ImplicitNdnaPermit}
    commonAclImplicit.EntityData.Children["implicit-ndns-permit"] = types.YChild{"ImplicitNdnsPermit", &commonAclImplicit.ImplicitNdnsPermit}
    commonAclImplicit.EntityData.Children["implicit-deny"] = types.YChild{"ImplicitDeny", &commonAclImplicit.ImplicitDeny}
    commonAclImplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(commonAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnaPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief}
    implicitNdnaPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnaPermit.AceDetail {
        implicitNdnaPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnaPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnaPermit.AceDetail[i]}
    }
    implicitNdnaPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnsPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief}
    implicitNdnsPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnsPermit.AceDetail {
        implicitNdnsPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnsPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnsPermit.AceDetail[i]}
    }
    implicitNdnsPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "common-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = make(map[string]types.YChild)
    implicitDeny.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitDeny.AceBrief}
    implicitDeny.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitDeny.AceDetail {
        implicitDeny.EntityData.Children[types.GetSegmentPath(&implicitDeny.AceDetail[i])] = types.YChild{"AceDetail", &implicitDeny.AceDetail[i]}
    }
    implicitDeny.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetEntityData() *types.CommonEntityData {
    interfaceAclImplicit.EntityData.YFilter = interfaceAclImplicit.YFilter
    interfaceAclImplicit.EntityData.YangName = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclImplicit.EntityData.ParentYangName = "implicit-acl"
    interfaceAclImplicit.EntityData.SegmentPath = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclImplicit.EntityData.Children = make(map[string]types.YChild)
    interfaceAclImplicit.EntityData.Children["implicit-ndna-permit"] = types.YChild{"ImplicitNdnaPermit", &interfaceAclImplicit.ImplicitNdnaPermit}
    interfaceAclImplicit.EntityData.Children["implicit-ndns-permit"] = types.YChild{"ImplicitNdnsPermit", &interfaceAclImplicit.ImplicitNdnsPermit}
    interfaceAclImplicit.EntityData.Children["implicit-deny"] = types.YChild{"ImplicitDeny", &interfaceAclImplicit.ImplicitDeny}
    interfaceAclImplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnaPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief}
    implicitNdnaPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnaPermit.AceDetail {
        implicitNdnaPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnaPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnaPermit.AceDetail[i]}
    }
    implicitNdnaPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = make(map[string]types.YChild)
    implicitNdnsPermit.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief}
    implicitNdnsPermit.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitNdnsPermit.AceDetail {
        implicitNdnsPermit.EntityData.Children[types.GetSegmentPath(&implicitNdnsPermit.AceDetail[i])] = types.YChild{"AceDetail", &implicitNdnsPermit.AceDetail[i]}
    }
    implicitNdnsPermit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "interface-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = make(map[string]types.YChild)
    implicitDeny.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &implicitDeny.AceBrief}
    implicitDeny.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range implicitDeny.AceDetail {
        implicitDeny.EntityData.Children[types.GetSegmentPath(&implicitDeny.AceDetail[i])] = types.YChild{"AceDetail", &implicitDeny.AceDetail[i]}
    }
    implicitDeny.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetEntityData() *types.CommonEntityData {
    sequenceDetails.EntityData.YFilter = sequenceDetails.YFilter
    sequenceDetails.EntityData.YangName = "sequence-details"
    sequenceDetails.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetails.EntityData.ParentYangName = "access"
    sequenceDetails.EntityData.SegmentPath = "sequence-details"
    sequenceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetails.EntityData.Children = make(map[string]types.YChild)
    sequenceDetails.EntityData.Children["sequence-detail"] = types.YChild{"SequenceDetail", nil}
    for i := range sequenceDetails.SequenceDetail {
        sequenceDetails.EntityData.Children[types.GetSegmentPath(&sequenceDetails.SequenceDetail[i])] = types.YChild{"SequenceDetail", &sequenceDetails.SequenceDetail[i]}
    }
    sequenceDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sequenceDetails.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetEntityData() *types.CommonEntityData {
    sequenceDetail.EntityData.YFilter = sequenceDetail.YFilter
    sequenceDetail.EntityData.YangName = "sequence-detail"
    sequenceDetail.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetail.EntityData.ParentYangName = "sequence-details"
    sequenceDetail.EntityData.SegmentPath = "sequence-detail" + "[sequence-number='" + fmt.Sprintf("%v", sequenceDetail.SequenceNumber) + "']"
    sequenceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetail.EntityData.Children = make(map[string]types.YChild)
    sequenceDetail.EntityData.Children["common-acl-detail"] = types.YChild{"CommonAclDetail", nil}
    for i := range sequenceDetail.CommonAclDetail {
        sequenceDetail.EntityData.Children[types.GetSegmentPath(&sequenceDetail.CommonAclDetail[i])] = types.YChild{"CommonAclDetail", &sequenceDetail.CommonAclDetail[i]}
    }
    sequenceDetail.EntityData.Children["interface-acl-detail"] = types.YChild{"InterfaceAclDetail", nil}
    for i := range sequenceDetail.InterfaceAclDetail {
        sequenceDetail.EntityData.Children[types.GetSegmentPath(&sequenceDetail.InterfaceAclDetail[i])] = types.YChild{"InterfaceAclDetail", &sequenceDetail.InterfaceAclDetail[i]}
    }
    sequenceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    sequenceDetail.EntityData.Leafs["sequence-number"] = types.YLeaf{"SequenceNumber", sequenceDetail.SequenceNumber}
    return &(sequenceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetEntityData() *types.CommonEntityData {
    commonAclDetail.EntityData.YFilter = commonAclDetail.YFilter
    commonAclDetail.EntityData.YangName = "common-acl-detail"
    commonAclDetail.EntityData.BundleName = "cisco_ios_xr"
    commonAclDetail.EntityData.ParentYangName = "sequence-detail"
    commonAclDetail.EntityData.SegmentPath = "common-acl-detail"
    commonAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclDetail.EntityData.Children = make(map[string]types.YChild)
    commonAclDetail.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &commonAclDetail.AceBrief}
    commonAclDetail.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range commonAclDetail.AceDetail {
        commonAclDetail.EntityData.Children[types.GetSegmentPath(&commonAclDetail.AceDetail[i])] = types.YChild{"AceDetail", &commonAclDetail.AceDetail[i]}
    }
    commonAclDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(commonAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "common-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "common-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetEntityData() *types.CommonEntityData {
    interfaceAclDetail.EntityData.YFilter = interfaceAclDetail.YFilter
    interfaceAclDetail.EntityData.YangName = "interface-acl-detail"
    interfaceAclDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclDetail.EntityData.ParentYangName = "sequence-detail"
    interfaceAclDetail.EntityData.SegmentPath = "interface-acl-detail"
    interfaceAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclDetail.EntityData.Children = make(map[string]types.YChild)
    interfaceAclDetail.EntityData.Children["ace-brief"] = types.YChild{"AceBrief", &interfaceAclDetail.AceBrief}
    interfaceAclDetail.EntityData.Children["ace-detail"] = types.YChild{"AceDetail", nil}
    for i := range interfaceAclDetail.AceDetail {
        interfaceAclDetail.EntityData.Children[types.GetSegmentPath(&interfaceAclDetail.AceDetail[i])] = types.YChild{"AceDetail", &interfaceAclDetail.AceDetail[i]}
    }
    interfaceAclDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "interface-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = make(map[string]types.YChild)
    aceBrief.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &aceBrief.NextHopAddress}
    aceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    aceBrief.EntityData.Leafs["grant"] = types.YLeaf{"Grant", aceBrief.Grant}
    aceBrief.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled}
    aceBrief.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled}
    aceBrief.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled}
    aceBrief.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled}
    aceBrief.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries}
    aceBrief.EntityData.Leafs["hits"] = types.YLeaf{"Hits", aceBrief.Hits}
    aceBrief.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", aceBrief.NpuId}
    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "interface-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail"
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = make(map[string]types.YChild)
    aceDetail.EntityData.Children["ipv4tcam"] = types.YChild{"Ipv4Tcam", &aceDetail.Ipv4Tcam}
    aceDetail.EntityData.Children["ipv6tcam"] = types.YChild{"Ipv6Tcam", &aceDetail.Ipv6Tcam}
    aceDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    aceDetail.EntityData.Leafs["entry-id"] = types.YLeaf{"EntryId", aceDetail.EntryId}
    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetEntityData() *types.CommonEntityData {
    ipv4Tcam.EntityData.YFilter = ipv4Tcam.YFilter
    ipv4Tcam.EntityData.YangName = "ipv4tcam"
    ipv4Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4Tcam.EntityData.ParentYangName = "ace-detail"
    ipv4Tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv4Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv4Tcam.TcamEntry}
    ipv4Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", value.SourceAddress}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", value.Dscp}
    value.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", value.Ttl}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", value.DestinationAddress}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", mask.SourceAddress}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", mask.Dscp}
    mask.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", mask.Ttl}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", mask.DestinationAddress}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", result.SourceAddress}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", result.Dscp}
    result.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", result.Ttl}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", result.DestinationAddress}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetEntityData() *types.CommonEntityData {
    ipv6Tcam.EntityData.YFilter = ipv6Tcam.YFilter
    ipv6Tcam.EntityData.YangName = "ipv6tcam"
    ipv6Tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6Tcam.EntityData.ParentYangName = "ace-detail"
    ipv6Tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6Tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Tcam.EntityData.Children = make(map[string]types.YChild)
    ipv6Tcam.EntityData.Children["tcam-entry"] = types.YChild{"TcamEntry", &ipv6Tcam.TcamEntry}
    ipv6Tcam.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = make(map[string]types.YChild)
    tcamEntry.EntityData.Children["value"] = types.YChild{"Value", &tcamEntry.Value}
    tcamEntry.EntityData.Children["mask"] = types.YChild{"Mask", &tcamEntry.Mask}
    tcamEntry.EntityData.Children["result"] = types.YChild{"Result", &tcamEntry.Result}
    tcamEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    tcamEntry.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", tcamEntry.SourceAddress}
    tcamEntry.EntityData.Leafs["source-address-mask"] = types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask}
    tcamEntry.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress}
    tcamEntry.EntityData.Leafs["destination-address-mask"] = types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask}
    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = make(map[string]types.YChild)
    value.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &value.TcpFlags}
    value.EntityData.Leafs = make(map[string]types.YLeaf)
    value.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", value.AclId}
    value.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", value.Protocol}
    value.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort}
    value.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort}
    value.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", value.SourceRangeId}
    value.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", value.DestinationRangeId}
    value.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", value.DestinationHeader}
    value.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader}
    value.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader}
    value.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", value.Fragment}
    value.EntityData.Leafs["tos"] = types.YLeaf{"Tos", value.Tos}
    value.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", value.PacketLengthRange}
    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = make(map[string]types.YChild)
    mask.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &mask.TcpFlags}
    mask.EntityData.Leafs = make(map[string]types.YLeaf)
    mask.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", mask.AclId}
    mask.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", mask.Protocol}
    mask.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort}
    mask.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort}
    mask.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", mask.SourceRangeId}
    mask.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", mask.DestinationRangeId}
    mask.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", mask.DestinationHeader}
    mask.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader}
    mask.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader}
    mask.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", mask.Fragment}
    mask.EntityData.Leafs["tos"] = types.YLeaf{"Tos", mask.Tos}
    mask.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", mask.PacketLengthRange}
    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = make(map[string]types.YChild)
    result.EntityData.Children["tcp-flags"] = types.YChild{"TcpFlags", &result.TcpFlags}
    result.EntityData.Leafs = make(map[string]types.YLeaf)
    result.EntityData.Leafs["acl-id"] = types.YLeaf{"AclId", result.AclId}
    result.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", result.Protocol}
    result.EntityData.Leafs["layer4-source-port"] = types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort}
    result.EntityData.Leafs["layer4-destination-port"] = types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort}
    result.EntityData.Leafs["source-range-id"] = types.YLeaf{"SourceRangeId", result.SourceRangeId}
    result.EntityData.Leafs["destination-range-id"] = types.YLeaf{"DestinationRangeId", result.DestinationRangeId}
    result.EntityData.Leafs["destination-header"] = types.YLeaf{"DestinationHeader", result.DestinationHeader}
    result.EntityData.Leafs["receive-transition-gap-header"] = types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader}
    result.EntityData.Leafs["authentication-header"] = types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader}
    result.EntityData.Leafs["fragment"] = types.YLeaf{"Fragment", result.Fragment}
    result.EntityData.Leafs["tos"] = types.YLeaf{"Tos", result.Tos}
    result.EntityData.Leafs["packet-length-range"] = types.YLeaf{"PacketLengthRange", result.PacketLengthRange}
    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = make(map[string]types.YChild)
    tcpFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    tcpFlags.EntityData.Leafs["urgent"] = types.YLeaf{"Urgent", tcpFlags.Urgent}
    tcpFlags.EntityData.Leafs["acknowledge"] = types.YLeaf{"Acknowledge", tcpFlags.Acknowledge}
    tcpFlags.EntityData.Leafs["push"] = types.YLeaf{"Push", tcpFlags.Push}
    tcpFlags.EntityData.Leafs["reset"] = types.YLeaf{"Reset", tcpFlags.Reset}
    tcpFlags.EntityData.Leafs["synchronization"] = types.YLeaf{"Synchronization", tcpFlags.Synchronization}
    tcpFlags.EntityData.Leafs["finish"] = types.YLeaf{"Finish", tcpFlags.Finish}
    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetEntityData() *types.CommonEntityData {
    sequenceBriefs.EntityData.YFilter = sequenceBriefs.YFilter
    sequenceBriefs.EntityData.YangName = "sequence-briefs"
    sequenceBriefs.EntityData.BundleName = "cisco_ios_xr"
    sequenceBriefs.EntityData.ParentYangName = "access"
    sequenceBriefs.EntityData.SegmentPath = "sequence-briefs"
    sequenceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBriefs.EntityData.Children = make(map[string]types.YChild)
    sequenceBriefs.EntityData.Children["sequence-brief"] = types.YChild{"SequenceBrief", nil}
    for i := range sequenceBriefs.SequenceBrief {
        sequenceBriefs.EntityData.Children[types.GetSegmentPath(&sequenceBriefs.SequenceBrief[i])] = types.YChild{"SequenceBrief", &sequenceBriefs.SequenceBrief[i]}
    }
    sequenceBriefs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sequenceBriefs.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetEntityData() *types.CommonEntityData {
    sequenceBrief.EntityData.YFilter = sequenceBrief.YFilter
    sequenceBrief.EntityData.YangName = "sequence-brief"
    sequenceBrief.EntityData.BundleName = "cisco_ios_xr"
    sequenceBrief.EntityData.ParentYangName = "sequence-briefs"
    sequenceBrief.EntityData.SegmentPath = "sequence-brief" + "[sequence-number='" + fmt.Sprintf("%v", sequenceBrief.SequenceNumber) + "']"
    sequenceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBrief.EntityData.Children = make(map[string]types.YChild)
    sequenceBrief.EntityData.Children["common-acl"] = types.YChild{"CommonAcl", nil}
    for i := range sequenceBrief.CommonAcl {
        sequenceBrief.EntityData.Children[types.GetSegmentPath(&sequenceBrief.CommonAcl[i])] = types.YChild{"CommonAcl", &sequenceBrief.CommonAcl[i]}
    }
    sequenceBrief.EntityData.Children["interface-acl"] = types.YChild{"InterfaceAcl", nil}
    for i := range sequenceBrief.InterfaceAcl {
        sequenceBrief.EntityData.Children[types.GetSegmentPath(&sequenceBrief.InterfaceAcl[i])] = types.YChild{"InterfaceAcl", &sequenceBrief.InterfaceAcl[i]}
    }
    sequenceBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    sequenceBrief.EntityData.Leafs["sequence-number"] = types.YLeaf{"SequenceNumber", sequenceBrief.SequenceNumber}
    return &(sequenceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetEntityData() *types.CommonEntityData {
    commonAcl.EntityData.YFilter = commonAcl.YFilter
    commonAcl.EntityData.YangName = "common-acl"
    commonAcl.EntityData.BundleName = "cisco_ios_xr"
    commonAcl.EntityData.ParentYangName = "sequence-brief"
    commonAcl.EntityData.SegmentPath = "common-acl"
    commonAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAcl.EntityData.Children = make(map[string]types.YChild)
    commonAcl.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &commonAcl.NextHopAddress}
    commonAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    commonAcl.EntityData.Leafs["grant"] = types.YLeaf{"Grant", commonAcl.Grant}
    commonAcl.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", commonAcl.LoggingEnabled}
    commonAcl.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", commonAcl.PerAceIcmpEnabled}
    commonAcl.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", commonAcl.NextHopEnabled}
    commonAcl.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", commonAcl.DefaultNextHopEnabled}
    commonAcl.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", commonAcl.TotalTcamEntries}
    commonAcl.EntityData.Leafs["hits"] = types.YLeaf{"Hits", commonAcl.Hits}
    commonAcl.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", commonAcl.NpuId}
    return &(commonAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "common-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetEntityData() *types.CommonEntityData {
    interfaceAcl.EntityData.YFilter = interfaceAcl.YFilter
    interfaceAcl.EntityData.YangName = "interface-acl"
    interfaceAcl.EntityData.BundleName = "cisco_ios_xr"
    interfaceAcl.EntityData.ParentYangName = "sequence-brief"
    interfaceAcl.EntityData.SegmentPath = "interface-acl"
    interfaceAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAcl.EntityData.Children = make(map[string]types.YChild)
    interfaceAcl.EntityData.Children["next-hop-address"] = types.YChild{"NextHopAddress", &interfaceAcl.NextHopAddress}
    interfaceAcl.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceAcl.EntityData.Leafs["grant"] = types.YLeaf{"Grant", interfaceAcl.Grant}
    interfaceAcl.EntityData.Leafs["logging-enabled"] = types.YLeaf{"LoggingEnabled", interfaceAcl.LoggingEnabled}
    interfaceAcl.EntityData.Leafs["per-ace-icmp-enabled"] = types.YLeaf{"PerAceIcmpEnabled", interfaceAcl.PerAceIcmpEnabled}
    interfaceAcl.EntityData.Leafs["next-hop-enabled"] = types.YLeaf{"NextHopEnabled", interfaceAcl.NextHopEnabled}
    interfaceAcl.EntityData.Leafs["default-next-hop-enabled"] = types.YLeaf{"DefaultNextHopEnabled", interfaceAcl.DefaultNextHopEnabled}
    interfaceAcl.EntityData.Leafs["total-tcam-entries"] = types.YLeaf{"TotalTcamEntries", interfaceAcl.TotalTcamEntries}
    interfaceAcl.EntityData.Leafs["hits"] = types.YLeaf{"Hits", interfaceAcl.Hits}
    interfaceAcl.EntityData.Leafs["npu-id"] = types.YLeaf{"NpuId", interfaceAcl.NpuId}
    return &(interfaceAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "interface-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = make(map[string]types.YChild)
    nextHopAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHopAddress.EntityData.Leafs["address-type"] = types.YLeaf{"AddressType", nextHopAddress.AddressType}
    nextHopAddress.EntityData.Leafs["ipv4-address"] = types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address}
    nextHopAddress.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address}
    return &(nextHopAddress.EntityData)
}

