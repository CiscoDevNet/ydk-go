// This module contains a collection of YANG definitions
// for Cisco IOS-XR iedge4710 package operational data.
// 
// This module contains definitions
// for the following management objects:
//   subscriber: Subscriber operational data
//   iedge-license-manager: iedge license manager
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package iedge4710_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package iedge4710_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-iedge4710-oper subscriber}", reflect.TypeOf(Subscriber{}))
    ydk.RegisterEntity("Cisco-IOS-XR-iedge4710-oper:subscriber", reflect.TypeOf(Subscriber{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-iedge4710-oper iedge-license-manager}", reflect.TypeOf(IedgeLicenseManager{}))
    ydk.RegisterEntity("Cisco-IOS-XR-iedge4710-oper:iedge-license-manager", reflect.TypeOf(IedgeLicenseManager{}))
}

// AaaTunnelProto represents Tunnel protocol types
type AaaTunnelProto string

const (
    // None
    AaaTunnelProto_none AaaTunnelProto = "none"

    // Point-to-point tunneling protocol
    AaaTunnelProto_pptp AaaTunnelProto = "pptp"

    // Layer 2 forwarding
    AaaTunnelProto_l2f AaaTunnelProto = "l2f"

    // Layer 2 tunneling protocol
    AaaTunnelProto_l2tp AaaTunnelProto = "l2tp"

    // Ascend tunnel management protocol
    AaaTunnelProto_atmp AaaTunnelProto = "atmp"

    // VLAN trunk protocol
    AaaTunnelProto_vtp AaaTunnelProto = "vtp"

    // Authentication header
    AaaTunnelProto_ah AaaTunnelProto = "ah"

    // IP over IP
    AaaTunnelProto_ip_over_ip AaaTunnelProto = "ip-over-ip"

    // Minimum IP over IP
    AaaTunnelProto_minimum_ip_over_ip AaaTunnelProto = "minimum-ip-over-ip"

    // Encapsulating security payload
    AaaTunnelProto_esp AaaTunnelProto = "esp"

    // Generic routing encapsulation
    AaaTunnelProto_gre AaaTunnelProto = "gre"

    // Bay dial virtual services
    AaaTunnelProto_bay_dvs AaaTunnelProto = "bay-dvs"

    // IP in IP
    AaaTunnelProto_ip_in_ip AaaTunnelProto = "ip-in-ip"

    // VLAN
    AaaTunnelProto_vlan AaaTunnelProto = "vlan"
)

// AaaTerminateCause represents AAA terminate cause types
type AaaTerminateCause string

const (
    // None
    AaaTerminateCause_none AaaTerminateCause = "none"

    // User request
    AaaTerminateCause_user_request AaaTerminateCause = "user-request"

    // Lost carrier
    AaaTerminateCause_lost_carrier AaaTerminateCause = "lost-carrier"

    // Lost service
    AaaTerminateCause_lost_service AaaTerminateCause = "lost-service"

    // Idle timeout
    AaaTerminateCause_idle_timeout AaaTerminateCause = "idle-timeout"

    // Session timeout
    AaaTerminateCause_session_timeout AaaTerminateCause = "session-timeout"

    // Admin reset
    AaaTerminateCause_admin_reset AaaTerminateCause = "admin-reset"

    // Admin reboot
    AaaTerminateCause_admin_reboot AaaTerminateCause = "admin-reboot"

    // Port error
    AaaTerminateCause_port_error AaaTerminateCause = "port-error"

    // NAS error
    AaaTerminateCause_nas_error AaaTerminateCause = "nas-error"

    // NAS request
    AaaTerminateCause_nas_request AaaTerminateCause = "nas-request"

    // NAS reboot
    AaaTerminateCause_nas_reboot AaaTerminateCause = "nas-reboot"

    // Port unneeded
    AaaTerminateCause_port_unneeded AaaTerminateCause = "port-unneeded"

    // Port preempted
    AaaTerminateCause_port_preempted AaaTerminateCause = "port-preempted"

    // Port suspended
    AaaTerminateCause_port_suspended AaaTerminateCause = "port-suspended"

    // Service unavailable
    AaaTerminateCause_service_unavailable AaaTerminateCause = "service-unavailable"

    // Callback
    AaaTerminateCause_callback AaaTerminateCause = "callback"

    // User error
    AaaTerminateCause_user_error AaaTerminateCause = "user-error"

    // Host request
    AaaTerminateCause_host_request AaaTerminateCause = "host-request"

    // Supplicant restart
    AaaTerminateCause_supplicant_restart AaaTerminateCause = "supplicant-restart"

    // Reauthorization failure
    AaaTerminateCause_reauthorization_failure AaaTerminateCause = "reauthorization-failure"

    // Port reinitialized
    AaaTerminateCause_port_reinitialized AaaTerminateCause = "port-reinitialized"

    // Admin disabled
    AaaTerminateCause_admin_disabled AaaTerminateCause = "admin-disabled"
)

// SubscriberAuthorStateFilterFlag represents Subscriber author state filter flag
type SubscriberAuthorStateFilterFlag string

const (
    // UnAuthorized
    SubscriberAuthorStateFilterFlag_un_authorized SubscriberAuthorStateFilterFlag = "un-authorized"

    // Authorized
    SubscriberAuthorStateFilterFlag_authorized SubscriberAuthorStateFilterFlag = "authorized"
)

// IedgeOperSessionState represents Subscriber session states
type IedgeOperSessionState string

const (
    // Initialize
    IedgeOperSessionState_initialize IedgeOperSessionState = "initialize"

    // Connecting
    IedgeOperSessionState_connecting IedgeOperSessionState = "connecting"

    // Connected
    IedgeOperSessionState_connected IedgeOperSessionState = "connected"

    // Activated
    IedgeOperSessionState_activated IedgeOperSessionState = "activated"

    // Idle
    IedgeOperSessionState_idle IedgeOperSessionState = "idle"

    // Disconnecting
    IedgeOperSessionState_disconnecting IedgeOperSessionState = "disconnecting"

    // End
    IedgeOperSessionState_end IedgeOperSessionState = "end"
)

// IedgeOperSessionAfState represents Subscriber session address family state
type IedgeOperSessionAfState string

const (
    // Not started
    IedgeOperSessionAfState_not_started IedgeOperSessionAfState = "not-started"

    // Down
    IedgeOperSessionAfState_down IedgeOperSessionAfState = "down"

    // Up Pending
    IedgeOperSessionAfState_up_pending IedgeOperSessionAfState = "up-pending"

    // Up
    IedgeOperSessionAfState_up IedgeOperSessionAfState = "up"
)

// SubscriberStateFilterFlag represents Subscriber state filter flag
type SubscriberStateFilterFlag string

const (
    // Initializing
    SubscriberStateFilterFlag_initializing SubscriberStateFilterFlag = "initializing"

    // Connecting
    SubscriberStateFilterFlag_connecting SubscriberStateFilterFlag = "connecting"

    // Connected
    SubscriberStateFilterFlag_connected SubscriberStateFilterFlag = "connected"

    // Activated
    SubscriberStateFilterFlag_activated SubscriberStateFilterFlag = "activated"

    // Idle
    SubscriberStateFilterFlag_idle SubscriberStateFilterFlag = "idle"

    // Disconnecting
    SubscriberStateFilterFlag_disconnecting SubscriberStateFilterFlag = "disconnecting"

    // End
    SubscriberStateFilterFlag_end SubscriberStateFilterFlag = "end"
)

// AaaAuthService represents AAA authorization service types
type AaaAuthService string

const (
    // None
    AaaAuthService_none AaaAuthService = "none"

    // Login
    AaaAuthService_login AaaAuthService = "login"

    // Framed
    AaaAuthService_framed AaaAuthService = "framed"

    // Callback login
    AaaAuthService_callback_login AaaAuthService = "callback-login"

    // Callback framed
    AaaAuthService_callback_framed AaaAuthService = "callback-framed"

    // Outbound
    AaaAuthService_outbound AaaAuthService = "outbound"

    // Administrator
    AaaAuthService_administrator AaaAuthService = "administrator"

    // Prompt
    AaaAuthService_prompt AaaAuthService = "prompt"

    // Authentication only
    AaaAuthService_authentication_only AaaAuthService = "authentication-only"

    // Callback NAS prompt
    AaaAuthService_callback_nas_prompt AaaAuthService = "callback-nas-prompt"

    // Call check
    AaaAuthService_call_check AaaAuthService = "call-check"

    // Callback administrator
    AaaAuthService_callback_administrator AaaAuthService = "callback-administrator"

    // Voice
    AaaAuthService_voice AaaAuthService = "voice"

    // Fax
    AaaAuthService_fax AaaAuthService = "fax"

    // Modem relay
    AaaAuthService_modem_relay AaaAuthService = "modem-relay"

    // EAP over UDP
    AaaAuthService_eap_over_udp AaaAuthService = "eap-over-udp"
)

// AaaInterface represents AAA interface types
type AaaInterface string

const (
    // None
    AaaInterface_none AaaInterface = "none"

    // Primary rate
    AaaInterface_primary_rate AaaInterface = "primary-rate"

    // Basic rate
    AaaInterface_basic_rate AaaInterface = "basic-rate"

    // Serial
    AaaInterface_serial AaaInterface = "serial"

    // Asynchronous
    AaaInterface_asynchronous AaaInterface = "asynchronous"

    // VTY
    AaaInterface_vty AaaInterface = "vty"

    // ATM
    AaaInterface_atm AaaInterface = "atm"

    // Ethernet
    AaaInterface_ethernet AaaInterface = "ethernet"

    // PPP over ATM
    AaaInterface_ppp_over_atm AaaInterface = "ppp-over-atm"

    // PPPoE over ATM
    AaaInterface_pppoe_over_atm AaaInterface = "pppoe-over-atm"

    // PPPoE over ethernet
    AaaInterface_pppoe_over_ethernet AaaInterface = "pppoe-over-ethernet"

    // PPP over VLAN
    AaaInterface_ppp_over_vlan AaaInterface = "ppp-over-vlan"

    // PPP over Q in Q
    AaaInterface_ppp_over_qinq AaaInterface = "ppp-over-qinq"

    // V120
    AaaInterface_v120 AaaInterface = "v120"

    // V110
    AaaInterface_v110 AaaInterface = "v110"

    // PHS internet access forum standard
    AaaInterface_piafs AaaInterface = "piafs"

    // X75
    AaaInterface_x75 AaaInterface = "x75"

    // IP sec
    AaaInterface_ip_sec AaaInterface = "ip-sec"

    // Other
    AaaInterface_other AaaInterface = "other"

    // Virtual PPPoE over ethernet
    AaaInterface_virtual_pppoe_over_ethernet AaaInterface = "virtual-pppoe-over-ethernet"

    // Virtual PPPoE over VLAN
    AaaInterface_virtual_pppoe_over_vlan AaaInterface = "virtual-pppoe-over-vlan"

    // Virtual PPPoE over Q in Q
    AaaInterface_virtual_pppoe_over_qinq AaaInterface = "virtual-pppoe-over-qinq"

    // IPoE over ethernet
    AaaInterface_ipo_e_over_ethernet AaaInterface = "ipo-e-over-ethernet"

    // IPoE over VLAN
    AaaInterface_ipo_e_over_vlan AaaInterface = "ipo-e-over-vlan"

    // IPoE over Q in Q
    AaaInterface_ipo_e_over_qinq AaaInterface = "ipo-e-over-qinq"

    // Virtual IPoE over ethernet
    AaaInterface_virtual_i_po_e_over_ethernet AaaInterface = "virtual-i-po-e-over-ethernet"

    // Virtual IPoE over VLAN
    AaaInterface_virtual_i_po_e_over_vlan AaaInterface = "virtual-i-po-e-over-vlan"

    // Virtual IPoE over Q in Q
    AaaInterface_virtual_i_po_e_over_qinq AaaInterface = "virtual-i-po-e-over-qinq"
)

// SubscriberAuthenStateFilterFlag represents Subscriber authen state filter flag
type SubscriberAuthenStateFilterFlag string

const (
    // UnAuthenticated
    SubscriberAuthenStateFilterFlag_un_authenticated SubscriberAuthenStateFilterFlag = "un-authenticated"

    // Authenticated
    SubscriberAuthenStateFilterFlag_authenticated SubscriberAuthenStateFilterFlag = "authenticated"
)

// IedgeOperSession represents Subscriber session types
type IedgeOperSession string

const (
    // Unknown
    IedgeOperSession_unknown IedgeOperSession = "unknown"

    // PPPoE/PPP client
    IedgeOperSession_pppoe IedgeOperSession = "pppoe"

    // PPP serial client
    IedgeOperSession_ppp IedgeOperSession = "ppp"

    // IP subscriber - packet trigger
    IedgeOperSession_ip_packet_trigger IedgeOperSession = "ip-packet-trigger"

    // IP subscriber - DHCP trigger
    IedgeOperSession_ip_packet_dhcp_trigger IedgeOperSession = "ip-packet-dhcp-trigger"
)

// AaaTunnelMedium represents Tunnel medium types
type AaaTunnelMedium string

const (
    // None
    AaaTunnelMedium_none AaaTunnelMedium = "none"

    // IPv4
    AaaTunnelMedium_ipv4 AaaTunnelMedium = "ipv4"

    // IPv6
    AaaTunnelMedium_ipv6 AaaTunnelMedium = "ipv6"

    // NSAP
    AaaTunnelMedium_nsap AaaTunnelMedium = "nsap"

    // HDLC
    AaaTunnelMedium_hdlc AaaTunnelMedium = "hdlc"

    // BBN
    AaaTunnelMedium_bbn AaaTunnelMedium = "bbn"

    // ALL 802
    AaaTunnelMedium_all802 AaaTunnelMedium = "all802"
)

// IedgePppSub represents PPPoE sub types
type IedgePppSub string

const (
    // PPP termination and aggregation
    IedgePppSub_pta IedgePppSub = "pta"

    // L2TP access controller
    IedgePppSub_lac IedgePppSub = "lac"
)

// SubscriberAddressFamilyFilterFlag represents Subscriber address family filter flag
type SubscriberAddressFamilyFilterFlag string

const (
    // IPv4 only
    SubscriberAddressFamilyFilterFlag_ipv4_only SubscriberAddressFamilyFilterFlag = "ipv4-only"

    // IPv6 only
    SubscriberAddressFamilyFilterFlag_ipv6_only SubscriberAddressFamilyFilterFlag = "ipv6-only"

    // IPv4 all
    SubscriberAddressFamilyFilterFlag_ipv4_all SubscriberAddressFamilyFilterFlag = "ipv4-all"

    // IPv6 all
    SubscriberAddressFamilyFilterFlag_ipv6_all SubscriberAddressFamilyFilterFlag = "ipv6-all"

    // Dual all
    SubscriberAddressFamilyFilterFlag_dual_all SubscriberAddressFamilyFilterFlag = "dual-all"

    // Dual part up
    SubscriberAddressFamilyFilterFlag_dual_part_up SubscriberAddressFamilyFilterFlag = "dual-part-up"

    // Dual up
    SubscriberAddressFamilyFilterFlag_dual_up SubscriberAddressFamilyFilterFlag = "dual-up"

    // LAC
    SubscriberAddressFamilyFilterFlag_lac SubscriberAddressFamilyFilterFlag = "lac"
)

// Subscriber
// Subscriber operational data
type Subscriber struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber manager operational data.
    Manager Subscriber_Manager

    // Subscriber session operational data.
    Session Subscriber_Session
}

func (subscriber *Subscriber) GetFilter() yfilter.YFilter { return subscriber.YFilter }

func (subscriber *Subscriber) SetFilter(yf yfilter.YFilter) { subscriber.YFilter = yf }

func (subscriber *Subscriber) GetGoName(yname string) string {
    if yname == "manager" { return "Manager" }
    if yname == "session" { return "Session" }
    return ""
}

func (subscriber *Subscriber) GetSegmentPath() string {
    return "Cisco-IOS-XR-iedge4710-oper:subscriber"
}

func (subscriber *Subscriber) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "manager" {
        return &subscriber.Manager
    }
    if childYangName == "session" {
        return &subscriber.Session
    }
    return nil
}

func (subscriber *Subscriber) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["manager"] = &subscriber.Manager
    children["session"] = &subscriber.Session
    return children
}

func (subscriber *Subscriber) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriber *Subscriber) GetBundleName() string { return "cisco_ios_xr" }

func (subscriber *Subscriber) GetYangName() string { return "subscriber" }

func (subscriber *Subscriber) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriber *Subscriber) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriber *Subscriber) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriber *Subscriber) SetParent(parent types.Entity) { subscriber.parent = parent }

func (subscriber *Subscriber) GetParent() types.Entity { return subscriber.parent }

func (subscriber *Subscriber) GetParentYangName() string { return "Cisco-IOS-XR-iedge4710-oper" }

// Subscriber_Manager
// Subscriber manager operational data
type Subscriber_Manager struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber manager list of nodes.
    Nodes Subscriber_Manager_Nodes
}

func (manager *Subscriber_Manager) GetFilter() yfilter.YFilter { return manager.YFilter }

func (manager *Subscriber_Manager) SetFilter(yf yfilter.YFilter) { manager.YFilter = yf }

func (manager *Subscriber_Manager) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (manager *Subscriber_Manager) GetSegmentPath() string {
    return "manager"
}

func (manager *Subscriber_Manager) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &manager.Nodes
    }
    return nil
}

func (manager *Subscriber_Manager) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &manager.Nodes
    return children
}

func (manager *Subscriber_Manager) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (manager *Subscriber_Manager) GetBundleName() string { return "cisco_ios_xr" }

func (manager *Subscriber_Manager) GetYangName() string { return "manager" }

func (manager *Subscriber_Manager) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (manager *Subscriber_Manager) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (manager *Subscriber_Manager) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (manager *Subscriber_Manager) SetParent(parent types.Entity) { manager.parent = parent }

func (manager *Subscriber_Manager) GetParent() types.Entity { return manager.parent }

func (manager *Subscriber_Manager) GetParentYangName() string { return "subscriber" }

// Subscriber_Manager_Nodes
// Subscriber manager list of nodes
type Subscriber_Manager_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber manager operational data for a particular node. The type is
    // slice of Subscriber_Manager_Nodes_Node.
    Node []Subscriber_Manager_Nodes_Node
}

func (nodes *Subscriber_Manager_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *Subscriber_Manager_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *Subscriber_Manager_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *Subscriber_Manager_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *Subscriber_Manager_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Manager_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *Subscriber_Manager_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *Subscriber_Manager_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *Subscriber_Manager_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *Subscriber_Manager_Nodes) GetYangName() string { return "nodes" }

func (nodes *Subscriber_Manager_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *Subscriber_Manager_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *Subscriber_Manager_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *Subscriber_Manager_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *Subscriber_Manager_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *Subscriber_Manager_Nodes) GetParentYangName() string { return "manager" }

// Subscriber_Manager_Nodes_Node
// Subscriber manager operational data for a
// particular node
type Subscriber_Manager_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Node name. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // Subscriber manager statistics.
    Statistics Subscriber_Manager_Nodes_Node_Statistics
}

func (node *Subscriber_Manager_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *Subscriber_Manager_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *Subscriber_Manager_Nodes_Node) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "statistics" { return "Statistics" }
    return ""
}

func (node *Subscriber_Manager_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
}

func (node *Subscriber_Manager_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "statistics" {
        return &node.Statistics
    }
    return nil
}

func (node *Subscriber_Manager_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["statistics"] = &node.Statistics
    return children
}

func (node *Subscriber_Manager_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = node.NodeName
    return leafs
}

func (node *Subscriber_Manager_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *Subscriber_Manager_Nodes_Node) GetYangName() string { return "node" }

func (node *Subscriber_Manager_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *Subscriber_Manager_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *Subscriber_Manager_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *Subscriber_Manager_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *Subscriber_Manager_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *Subscriber_Manager_Nodes_Node) GetParentYangName() string { return "nodes" }

// Subscriber_Manager_Nodes_Node_Statistics
// Subscriber manager statistics
type Subscriber_Manager_Nodes_Node_Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AAA statistics.
    Aaa Subscriber_Manager_Nodes_Node_Statistics_Aaa

    // Aggregate summary of statistics.
    AggregateSummary Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary

    // Geo Redundancy statistics.
    Srg Subscriber_Manager_Nodes_Node_Statistics_Srg
}

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetFilter() yfilter.YFilter { return statistics.YFilter }

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) SetFilter(yf yfilter.YFilter) { statistics.YFilter = yf }

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetGoName(yname string) string {
    if yname == "aaa" { return "Aaa" }
    if yname == "aggregate-summary" { return "AggregateSummary" }
    if yname == "srg" { return "Srg" }
    return ""
}

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetSegmentPath() string {
    return "statistics"
}

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aaa" {
        return &statistics.Aaa
    }
    if childYangName == "aggregate-summary" {
        return &statistics.AggregateSummary
    }
    if childYangName == "srg" {
        return &statistics.Srg
    }
    return nil
}

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["aaa"] = &statistics.Aaa
    children["aggregate-summary"] = &statistics.AggregateSummary
    children["srg"] = &statistics.Srg
    return children
}

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetYangName() string { return "statistics" }

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) SetParent(parent types.Entity) { statistics.parent = parent }

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetParent() types.Entity { return statistics.parent }

func (statistics *Subscriber_Manager_Nodes_Node_Statistics) GetParentYangName() string { return "node" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa
// AAA statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Aggregate accounting statistics.
    AggregateAccounting Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting

    // Authentication statistics.
    Authentication Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication

    // Aggregate mobility statistics.
    AggregateMobility Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility

    // Aggregate authentication statistics.
    AggregateAuthentication Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication

    // Display all subscriber management statistics.
    AccountingStatsAll Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll

    // Change of authorization (COA) statistics.
    ChangeOfAuthorization Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization

    // Authorization statistics.
    Authorization Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization

    // Aggregate authorization statistics.
    AggregateAuthorization Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization

    // Display all subscriber management total statistics.
    AggregateAccountingStatsAll Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll

    // Accounting statistics.
    Accounting Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting

    // Mobility statistics.
    Mobility Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility

    // Aggregate change of authorization (COA) statistics.
    AggregateChangeOfAuthorization Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization
}

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetFilter() yfilter.YFilter { return aaa.YFilter }

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) SetFilter(yf yfilter.YFilter) { aaa.YFilter = yf }

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetGoName(yname string) string {
    if yname == "aggregate-accounting" { return "AggregateAccounting" }
    if yname == "authentication" { return "Authentication" }
    if yname == "aggregate-mobility" { return "AggregateMobility" }
    if yname == "aggregate-authentication" { return "AggregateAuthentication" }
    if yname == "accounting-stats-all" { return "AccountingStatsAll" }
    if yname == "change-of-authorization" { return "ChangeOfAuthorization" }
    if yname == "authorization" { return "Authorization" }
    if yname == "aggregate-authorization" { return "AggregateAuthorization" }
    if yname == "aggregate-accounting-stats-all" { return "AggregateAccountingStatsAll" }
    if yname == "accounting" { return "Accounting" }
    if yname == "mobility" { return "Mobility" }
    if yname == "aggregate-change-of-authorization" { return "AggregateChangeOfAuthorization" }
    return ""
}

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetSegmentPath() string {
    return "aaa"
}

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aggregate-accounting" {
        return &aaa.AggregateAccounting
    }
    if childYangName == "authentication" {
        return &aaa.Authentication
    }
    if childYangName == "aggregate-mobility" {
        return &aaa.AggregateMobility
    }
    if childYangName == "aggregate-authentication" {
        return &aaa.AggregateAuthentication
    }
    if childYangName == "accounting-stats-all" {
        return &aaa.AccountingStatsAll
    }
    if childYangName == "change-of-authorization" {
        return &aaa.ChangeOfAuthorization
    }
    if childYangName == "authorization" {
        return &aaa.Authorization
    }
    if childYangName == "aggregate-authorization" {
        return &aaa.AggregateAuthorization
    }
    if childYangName == "aggregate-accounting-stats-all" {
        return &aaa.AggregateAccountingStatsAll
    }
    if childYangName == "accounting" {
        return &aaa.Accounting
    }
    if childYangName == "mobility" {
        return &aaa.Mobility
    }
    if childYangName == "aggregate-change-of-authorization" {
        return &aaa.AggregateChangeOfAuthorization
    }
    return nil
}

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["aggregate-accounting"] = &aaa.AggregateAccounting
    children["authentication"] = &aaa.Authentication
    children["aggregate-mobility"] = &aaa.AggregateMobility
    children["aggregate-authentication"] = &aaa.AggregateAuthentication
    children["accounting-stats-all"] = &aaa.AccountingStatsAll
    children["change-of-authorization"] = &aaa.ChangeOfAuthorization
    children["authorization"] = &aaa.Authorization
    children["aggregate-authorization"] = &aaa.AggregateAuthorization
    children["aggregate-accounting-stats-all"] = &aaa.AggregateAccountingStatsAll
    children["accounting"] = &aaa.Accounting
    children["mobility"] = &aaa.Mobility
    children["aggregate-change-of-authorization"] = &aaa.AggregateChangeOfAuthorization
    return children
}

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetBundleName() string { return "cisco_ios_xr" }

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetYangName() string { return "aaa" }

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) SetParent(parent types.Entity) { aaa.parent = parent }

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetParent() types.Entity { return aaa.parent }

func (aaa *Subscriber_Manager_Nodes_Node_Statistics_Aaa) GetParentYangName() string { return "statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting
// Aggregate accounting statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Active sessions. The type is interface{} with range: 0..4294967295.
    ActiveSessions interface{}

    // Started sessions. The type is interface{} with range:
    // 0..18446744073709551615.
    StartedSessions interface{}

    // Stopped sessions. The type is interface{} with range:
    // 0..18446744073709551615.
    StoppedSessions interface{}

    // Policy plane errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    PolicyPlaneErroredRequests interface{}

    // Policy plane unknown requests. The type is interface{} with range:
    // 0..18446744073709551615.
    PolicyPlaneUnknownRequests interface{}

    // Start statistics.
    Start Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start

    // Stop statistics.
    Stop Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop

    // Interim statistics.
    Interim Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim

    // Pass-through statistics.
    PassThrough Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough

    // Update statistics.
    Update Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update

    // Interim inflight details.
    InterimInflight Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight
}

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetFilter() yfilter.YFilter { return aggregateAccounting.YFilter }

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) SetFilter(yf yfilter.YFilter) { aggregateAccounting.YFilter = yf }

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetGoName(yname string) string {
    if yname == "active-sessions" { return "ActiveSessions" }
    if yname == "started-sessions" { return "StartedSessions" }
    if yname == "stopped-sessions" { return "StoppedSessions" }
    if yname == "policy-plane-errored-requests" { return "PolicyPlaneErroredRequests" }
    if yname == "policy-plane-unknown-requests" { return "PolicyPlaneUnknownRequests" }
    if yname == "start" { return "Start" }
    if yname == "stop" { return "Stop" }
    if yname == "interim" { return "Interim" }
    if yname == "pass-through" { return "PassThrough" }
    if yname == "update" { return "Update" }
    if yname == "interim-inflight" { return "InterimInflight" }
    return ""
}

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetSegmentPath() string {
    return "aggregate-accounting"
}

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "start" {
        return &aggregateAccounting.Start
    }
    if childYangName == "stop" {
        return &aggregateAccounting.Stop
    }
    if childYangName == "interim" {
        return &aggregateAccounting.Interim
    }
    if childYangName == "pass-through" {
        return &aggregateAccounting.PassThrough
    }
    if childYangName == "update" {
        return &aggregateAccounting.Update
    }
    if childYangName == "interim-inflight" {
        return &aggregateAccounting.InterimInflight
    }
    return nil
}

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["start"] = &aggregateAccounting.Start
    children["stop"] = &aggregateAccounting.Stop
    children["interim"] = &aggregateAccounting.Interim
    children["pass-through"] = &aggregateAccounting.PassThrough
    children["update"] = &aggregateAccounting.Update
    children["interim-inflight"] = &aggregateAccounting.InterimInflight
    return children
}

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-sessions"] = aggregateAccounting.ActiveSessions
    leafs["started-sessions"] = aggregateAccounting.StartedSessions
    leafs["stopped-sessions"] = aggregateAccounting.StoppedSessions
    leafs["policy-plane-errored-requests"] = aggregateAccounting.PolicyPlaneErroredRequests
    leafs["policy-plane-unknown-requests"] = aggregateAccounting.PolicyPlaneUnknownRequests
    return leafs
}

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetYangName() string { return "aggregate-accounting" }

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) SetParent(parent types.Entity) { aggregateAccounting.parent = parent }

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetParent() types.Entity { return aggregateAccounting.parent }

func (aggregateAccounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start
// Start statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetFilter() yfilter.YFilter { return start.YFilter }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) SetFilter(yf yfilter.YFilter) { start.YFilter = yf }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetSegmentPath() string {
    return "start"
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = start.ReceivedRequests
    leafs["errored-requests"] = start.ErroredRequests
    leafs["aaa-errored-requests"] = start.AaaErroredRequests
    leafs["aaa-sent-requests"] = start.AaaSentRequests
    leafs["aaa-succeeded-responses"] = start.AaaSucceededResponses
    leafs["aaa-failed-responses"] = start.AaaFailedResponses
    return leafs
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetBundleName() string { return "cisco_ios_xr" }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetYangName() string { return "start" }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) SetParent(parent types.Entity) { start.parent = parent }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetParent() types.Entity { return start.parent }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Start) GetParentYangName() string { return "aggregate-accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop
// Stop statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetFilter() yfilter.YFilter { return stop.YFilter }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) SetFilter(yf yfilter.YFilter) { stop.YFilter = yf }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetSegmentPath() string {
    return "stop"
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = stop.ReceivedRequests
    leafs["errored-requests"] = stop.ErroredRequests
    leafs["aaa-errored-requests"] = stop.AaaErroredRequests
    leafs["aaa-sent-requests"] = stop.AaaSentRequests
    leafs["aaa-succeeded-responses"] = stop.AaaSucceededResponses
    leafs["aaa-failed-responses"] = stop.AaaFailedResponses
    return leafs
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetBundleName() string { return "cisco_ios_xr" }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetYangName() string { return "stop" }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) SetParent(parent types.Entity) { stop.parent = parent }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetParent() types.Entity { return stop.parent }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Stop) GetParentYangName() string { return "aggregate-accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim
// Interim statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetFilter() yfilter.YFilter { return interim.YFilter }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) SetFilter(yf yfilter.YFilter) { interim.YFilter = yf }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetSegmentPath() string {
    return "interim"
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = interim.ReceivedRequests
    leafs["errored-requests"] = interim.ErroredRequests
    leafs["aaa-errored-requests"] = interim.AaaErroredRequests
    leafs["aaa-sent-requests"] = interim.AaaSentRequests
    leafs["aaa-succeeded-responses"] = interim.AaaSucceededResponses
    leafs["aaa-failed-responses"] = interim.AaaFailedResponses
    return leafs
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetBundleName() string { return "cisco_ios_xr" }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetYangName() string { return "interim" }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) SetParent(parent types.Entity) { interim.parent = parent }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetParent() types.Entity { return interim.parent }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Interim) GetParentYangName() string { return "aggregate-accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough
// Pass-through statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetFilter() yfilter.YFilter { return passThrough.YFilter }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) SetFilter(yf yfilter.YFilter) { passThrough.YFilter = yf }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetSegmentPath() string {
    return "pass-through"
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = passThrough.ReceivedRequests
    leafs["errored-requests"] = passThrough.ErroredRequests
    leafs["aaa-errored-requests"] = passThrough.AaaErroredRequests
    leafs["aaa-sent-requests"] = passThrough.AaaSentRequests
    leafs["aaa-succeeded-responses"] = passThrough.AaaSucceededResponses
    leafs["aaa-failed-responses"] = passThrough.AaaFailedResponses
    return leafs
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetBundleName() string { return "cisco_ios_xr" }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetYangName() string { return "pass-through" }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) SetParent(parent types.Entity) { passThrough.parent = parent }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetParent() types.Entity { return passThrough.parent }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_PassThrough) GetParentYangName() string { return "aggregate-accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update
// Update statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetSegmentPath() string {
    return "update"
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = update.ReceivedRequests
    leafs["errored-requests"] = update.ErroredRequests
    leafs["aaa-errored-requests"] = update.AaaErroredRequests
    leafs["aaa-sent-requests"] = update.AaaSentRequests
    leafs["aaa-succeeded-responses"] = update.AaaSucceededResponses
    leafs["aaa-failed-responses"] = update.AaaFailedResponses
    return leafs
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetYangName() string { return "update" }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetParent() types.Entity { return update.parent }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_Update) GetParentYangName() string { return "aggregate-accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight
// Interim inflight details
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Quota exhausts. The type is interface{} with range: 0..4294967295.
    QuotaExhausts interface{}

    // Denied requests. The type is interface{} with range: 0..4294967295.
    DeniedRequests interface{}

    // Accepted requests. The type is interface{} with range: 0..4294967295.
    AcceptedRequests interface{}

    // Total quota of requests. The type is interface{} with range: 0..4294967295.
    TotalQuotaOfRequests interface{}

    // Remaining quota of requests. The type is interface{} with range:
    // 0..4294967295.
    RemainingQuotaOfRequests interface{}

    // Low water mark quota of requests. The type is interface{} with range:
    // 0..4294967295.
    LowWaterMarkQuotaOfRequests interface{}
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetFilter() yfilter.YFilter { return interimInflight.YFilter }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) SetFilter(yf yfilter.YFilter) { interimInflight.YFilter = yf }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetGoName(yname string) string {
    if yname == "quota-exhausts" { return "QuotaExhausts" }
    if yname == "denied-requests" { return "DeniedRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "total-quota-of-requests" { return "TotalQuotaOfRequests" }
    if yname == "remaining-quota-of-requests" { return "RemainingQuotaOfRequests" }
    if yname == "low-water-mark-quota-of-requests" { return "LowWaterMarkQuotaOfRequests" }
    return ""
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetSegmentPath() string {
    return "interim-inflight"
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["quota-exhausts"] = interimInflight.QuotaExhausts
    leafs["denied-requests"] = interimInflight.DeniedRequests
    leafs["accepted-requests"] = interimInflight.AcceptedRequests
    leafs["total-quota-of-requests"] = interimInflight.TotalQuotaOfRequests
    leafs["remaining-quota-of-requests"] = interimInflight.RemainingQuotaOfRequests
    leafs["low-water-mark-quota-of-requests"] = interimInflight.LowWaterMarkQuotaOfRequests
    return leafs
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetBundleName() string { return "cisco_ios_xr" }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetYangName() string { return "interim-inflight" }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) SetParent(parent types.Entity) { interimInflight.parent = parent }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetParent() types.Entity { return interimInflight.parent }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccounting_InterimInflight) GetParentYangName() string { return "aggregate-accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication
// Authentication statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Requests sent to radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    SentRequests interface{}

    // Request accepted by Radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    AcceptedRequests interface{}

    // Requests which are successful. The type is interface{} with range:
    // 0..18446744073709551615.
    SuccessfulRequests interface{}

    // Requests rejected by radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    RejectedRequests interface{}

    // Radius server not available. The type is interface{} with range:
    // 0..18446744073709551615.
    UnreachableRequests interface{}

    // Unexpected errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // Incomplete requests - missing attributes. The type is interface{} with
    // range: 0..18446744073709551615.
    IncompleteRequests interface{}

    // Requests terminated by disconnect. The type is interface{} with range:
    // 0..18446744073709551615.
    TerminatedRequests interface{}
}

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetGoName(yname string) string {
    if yname == "sent-requests" { return "SentRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "successful-requests" { return "SuccessfulRequests" }
    if yname == "rejected-requests" { return "RejectedRequests" }
    if yname == "unreachable-requests" { return "UnreachableRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "incomplete-requests" { return "IncompleteRequests" }
    if yname == "terminated-requests" { return "TerminatedRequests" }
    return ""
}

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-requests"] = authentication.SentRequests
    leafs["accepted-requests"] = authentication.AcceptedRequests
    leafs["successful-requests"] = authentication.SuccessfulRequests
    leafs["rejected-requests"] = authentication.RejectedRequests
    leafs["unreachable-requests"] = authentication.UnreachableRequests
    leafs["errored-requests"] = authentication.ErroredRequests
    leafs["incomplete-requests"] = authentication.IncompleteRequests
    leafs["terminated-requests"] = authentication.TerminatedRequests
    return leafs
}

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetYangName() string { return "authentication" }

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authentication) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility
// Aggregate mobility statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Request send success. The type is interface{} with range:
    // 0..18446744073709551615.
    SendRequestSuccesses interface{}

    // Request send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    SendRequestFailures interface{}

    // Response receive success. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceiveResponseSuccesses interface{}

    // Response receive failures. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceiveResponseFailures interface{}
}

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetFilter() yfilter.YFilter { return aggregateMobility.YFilter }

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) SetFilter(yf yfilter.YFilter) { aggregateMobility.YFilter = yf }

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetGoName(yname string) string {
    if yname == "send-request-successes" { return "SendRequestSuccesses" }
    if yname == "send-request-failures" { return "SendRequestFailures" }
    if yname == "receive-response-successes" { return "ReceiveResponseSuccesses" }
    if yname == "receive-response-failures" { return "ReceiveResponseFailures" }
    return ""
}

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetSegmentPath() string {
    return "aggregate-mobility"
}

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["send-request-successes"] = aggregateMobility.SendRequestSuccesses
    leafs["send-request-failures"] = aggregateMobility.SendRequestFailures
    leafs["receive-response-successes"] = aggregateMobility.ReceiveResponseSuccesses
    leafs["receive-response-failures"] = aggregateMobility.ReceiveResponseFailures
    return leafs
}

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetYangName() string { return "aggregate-mobility" }

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) SetParent(parent types.Entity) { aggregateMobility.parent = parent }

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetParent() types.Entity { return aggregateMobility.parent }

func (aggregateMobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateMobility) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication
// Aggregate authentication statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Requests sent to radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    SentRequests interface{}

    // Request accepted by Radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    AcceptedRequests interface{}

    // Requests which are successful. The type is interface{} with range:
    // 0..18446744073709551615.
    SuccessfulRequests interface{}

    // Requests rejected by radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    RejectedRequests interface{}

    // Radius server not available. The type is interface{} with range:
    // 0..18446744073709551615.
    UnreachableRequests interface{}

    // Unexpected errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // Incomplete requests - missing attributes. The type is interface{} with
    // range: 0..18446744073709551615.
    IncompleteRequests interface{}

    // Requests terminated by disconnect. The type is interface{} with range:
    // 0..18446744073709551615.
    TerminatedRequests interface{}
}

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetFilter() yfilter.YFilter { return aggregateAuthentication.YFilter }

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) SetFilter(yf yfilter.YFilter) { aggregateAuthentication.YFilter = yf }

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetGoName(yname string) string {
    if yname == "sent-requests" { return "SentRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "successful-requests" { return "SuccessfulRequests" }
    if yname == "rejected-requests" { return "RejectedRequests" }
    if yname == "unreachable-requests" { return "UnreachableRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "incomplete-requests" { return "IncompleteRequests" }
    if yname == "terminated-requests" { return "TerminatedRequests" }
    return ""
}

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetSegmentPath() string {
    return "aggregate-authentication"
}

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-requests"] = aggregateAuthentication.SentRequests
    leafs["accepted-requests"] = aggregateAuthentication.AcceptedRequests
    leafs["successful-requests"] = aggregateAuthentication.SuccessfulRequests
    leafs["rejected-requests"] = aggregateAuthentication.RejectedRequests
    leafs["unreachable-requests"] = aggregateAuthentication.UnreachableRequests
    leafs["errored-requests"] = aggregateAuthentication.ErroredRequests
    leafs["incomplete-requests"] = aggregateAuthentication.IncompleteRequests
    leafs["terminated-requests"] = aggregateAuthentication.TerminatedRequests
    return leafs
}

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetYangName() string { return "aggregate-authentication" }

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) SetParent(parent types.Entity) { aggregateAuthentication.parent = parent }

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetParent() types.Entity { return aggregateAuthentication.parent }

func (aggregateAuthentication *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthentication) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll
// Display all subscriber management
// statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of stats for accounting.
    AccountingStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics

    // List of stats for authentication.
    AuthenticationStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics

    // List of stats for authorization.
    AuthorizationStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics

    // List of stats for COA.
    ChangeOfAuthorizationStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics

    // List of stats for Mobility.
    MobilityStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics
}

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetFilter() yfilter.YFilter { return accountingStatsAll.YFilter }

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) SetFilter(yf yfilter.YFilter) { accountingStatsAll.YFilter = yf }

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetGoName(yname string) string {
    if yname == "accounting-statistics" { return "AccountingStatistics" }
    if yname == "authentication-statistics" { return "AuthenticationStatistics" }
    if yname == "authorization-statistics" { return "AuthorizationStatistics" }
    if yname == "change-of-authorization-statistics" { return "ChangeOfAuthorizationStatistics" }
    if yname == "mobility-statistics" { return "MobilityStatistics" }
    return ""
}

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetSegmentPath() string {
    return "accounting-stats-all"
}

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accounting-statistics" {
        return &accountingStatsAll.AccountingStatistics
    }
    if childYangName == "authentication-statistics" {
        return &accountingStatsAll.AuthenticationStatistics
    }
    if childYangName == "authorization-statistics" {
        return &accountingStatsAll.AuthorizationStatistics
    }
    if childYangName == "change-of-authorization-statistics" {
        return &accountingStatsAll.ChangeOfAuthorizationStatistics
    }
    if childYangName == "mobility-statistics" {
        return &accountingStatsAll.MobilityStatistics
    }
    return nil
}

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["accounting-statistics"] = &accountingStatsAll.AccountingStatistics
    children["authentication-statistics"] = &accountingStatsAll.AuthenticationStatistics
    children["authorization-statistics"] = &accountingStatsAll.AuthorizationStatistics
    children["change-of-authorization-statistics"] = &accountingStatsAll.ChangeOfAuthorizationStatistics
    children["mobility-statistics"] = &accountingStatsAll.MobilityStatistics
    return children
}

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetBundleName() string { return "cisco_ios_xr" }

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetYangName() string { return "accounting-stats-all" }

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) SetParent(parent types.Entity) { accountingStatsAll.parent = parent }

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetParent() types.Entity { return accountingStatsAll.parent }

func (accountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics
// List of stats for accounting
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Active sessions. The type is interface{} with range: 0..4294967295.
    ActiveSessions interface{}

    // Started sessions. The type is interface{} with range:
    // 0..18446744073709551615.
    StartedSessions interface{}

    // Stopped sessions. The type is interface{} with range:
    // 0..18446744073709551615.
    StoppedSessions interface{}

    // Policy plane errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    PolicyPlaneErroredRequests interface{}

    // Policy plane unknown requests. The type is interface{} with range:
    // 0..18446744073709551615.
    PolicyPlaneUnknownRequests interface{}

    // Start statistics.
    Start Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start

    // Stop statistics.
    Stop Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop

    // Interim statistics.
    Interim Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim

    // Pass-through statistics.
    PassThrough Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough

    // Update statistics.
    Update Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update

    // Interim inflight details.
    InterimInflight Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetFilter() yfilter.YFilter { return accountingStatistics.YFilter }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) SetFilter(yf yfilter.YFilter) { accountingStatistics.YFilter = yf }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetGoName(yname string) string {
    if yname == "active-sessions" { return "ActiveSessions" }
    if yname == "started-sessions" { return "StartedSessions" }
    if yname == "stopped-sessions" { return "StoppedSessions" }
    if yname == "policy-plane-errored-requests" { return "PolicyPlaneErroredRequests" }
    if yname == "policy-plane-unknown-requests" { return "PolicyPlaneUnknownRequests" }
    if yname == "start" { return "Start" }
    if yname == "stop" { return "Stop" }
    if yname == "interim" { return "Interim" }
    if yname == "pass-through" { return "PassThrough" }
    if yname == "update" { return "Update" }
    if yname == "interim-inflight" { return "InterimInflight" }
    return ""
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetSegmentPath() string {
    return "accounting-statistics"
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "start" {
        return &accountingStatistics.Start
    }
    if childYangName == "stop" {
        return &accountingStatistics.Stop
    }
    if childYangName == "interim" {
        return &accountingStatistics.Interim
    }
    if childYangName == "pass-through" {
        return &accountingStatistics.PassThrough
    }
    if childYangName == "update" {
        return &accountingStatistics.Update
    }
    if childYangName == "interim-inflight" {
        return &accountingStatistics.InterimInflight
    }
    return nil
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["start"] = &accountingStatistics.Start
    children["stop"] = &accountingStatistics.Stop
    children["interim"] = &accountingStatistics.Interim
    children["pass-through"] = &accountingStatistics.PassThrough
    children["update"] = &accountingStatistics.Update
    children["interim-inflight"] = &accountingStatistics.InterimInflight
    return children
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-sessions"] = accountingStatistics.ActiveSessions
    leafs["started-sessions"] = accountingStatistics.StartedSessions
    leafs["stopped-sessions"] = accountingStatistics.StoppedSessions
    leafs["policy-plane-errored-requests"] = accountingStatistics.PolicyPlaneErroredRequests
    leafs["policy-plane-unknown-requests"] = accountingStatistics.PolicyPlaneUnknownRequests
    return leafs
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetYangName() string { return "accounting-statistics" }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) SetParent(parent types.Entity) { accountingStatistics.parent = parent }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetParent() types.Entity { return accountingStatistics.parent }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics) GetParentYangName() string { return "accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start
// Start statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetFilter() yfilter.YFilter { return start.YFilter }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) SetFilter(yf yfilter.YFilter) { start.YFilter = yf }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetSegmentPath() string {
    return "start"
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = start.ReceivedRequests
    leafs["errored-requests"] = start.ErroredRequests
    leafs["aaa-errored-requests"] = start.AaaErroredRequests
    leafs["aaa-sent-requests"] = start.AaaSentRequests
    leafs["aaa-succeeded-responses"] = start.AaaSucceededResponses
    leafs["aaa-failed-responses"] = start.AaaFailedResponses
    return leafs
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetBundleName() string { return "cisco_ios_xr" }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetYangName() string { return "start" }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) SetParent(parent types.Entity) { start.parent = parent }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetParent() types.Entity { return start.parent }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Start) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop
// Stop statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetFilter() yfilter.YFilter { return stop.YFilter }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) SetFilter(yf yfilter.YFilter) { stop.YFilter = yf }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetSegmentPath() string {
    return "stop"
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = stop.ReceivedRequests
    leafs["errored-requests"] = stop.ErroredRequests
    leafs["aaa-errored-requests"] = stop.AaaErroredRequests
    leafs["aaa-sent-requests"] = stop.AaaSentRequests
    leafs["aaa-succeeded-responses"] = stop.AaaSucceededResponses
    leafs["aaa-failed-responses"] = stop.AaaFailedResponses
    return leafs
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetBundleName() string { return "cisco_ios_xr" }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetYangName() string { return "stop" }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) SetParent(parent types.Entity) { stop.parent = parent }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetParent() types.Entity { return stop.parent }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Stop) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim
// Interim statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetFilter() yfilter.YFilter { return interim.YFilter }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) SetFilter(yf yfilter.YFilter) { interim.YFilter = yf }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetSegmentPath() string {
    return "interim"
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = interim.ReceivedRequests
    leafs["errored-requests"] = interim.ErroredRequests
    leafs["aaa-errored-requests"] = interim.AaaErroredRequests
    leafs["aaa-sent-requests"] = interim.AaaSentRequests
    leafs["aaa-succeeded-responses"] = interim.AaaSucceededResponses
    leafs["aaa-failed-responses"] = interim.AaaFailedResponses
    return leafs
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetBundleName() string { return "cisco_ios_xr" }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetYangName() string { return "interim" }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) SetParent(parent types.Entity) { interim.parent = parent }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetParent() types.Entity { return interim.parent }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Interim) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough
// Pass-through statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetFilter() yfilter.YFilter { return passThrough.YFilter }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) SetFilter(yf yfilter.YFilter) { passThrough.YFilter = yf }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetSegmentPath() string {
    return "pass-through"
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = passThrough.ReceivedRequests
    leafs["errored-requests"] = passThrough.ErroredRequests
    leafs["aaa-errored-requests"] = passThrough.AaaErroredRequests
    leafs["aaa-sent-requests"] = passThrough.AaaSentRequests
    leafs["aaa-succeeded-responses"] = passThrough.AaaSucceededResponses
    leafs["aaa-failed-responses"] = passThrough.AaaFailedResponses
    return leafs
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetBundleName() string { return "cisco_ios_xr" }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetYangName() string { return "pass-through" }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) SetParent(parent types.Entity) { passThrough.parent = parent }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetParent() types.Entity { return passThrough.parent }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_PassThrough) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update
// Update statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetSegmentPath() string {
    return "update"
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = update.ReceivedRequests
    leafs["errored-requests"] = update.ErroredRequests
    leafs["aaa-errored-requests"] = update.AaaErroredRequests
    leafs["aaa-sent-requests"] = update.AaaSentRequests
    leafs["aaa-succeeded-responses"] = update.AaaSucceededResponses
    leafs["aaa-failed-responses"] = update.AaaFailedResponses
    return leafs
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetYangName() string { return "update" }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetParent() types.Entity { return update.parent }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_Update) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight
// Interim inflight details
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Quota exhausts. The type is interface{} with range: 0..4294967295.
    QuotaExhausts interface{}

    // Denied requests. The type is interface{} with range: 0..4294967295.
    DeniedRequests interface{}

    // Accepted requests. The type is interface{} with range: 0..4294967295.
    AcceptedRequests interface{}

    // Total quota of requests. The type is interface{} with range: 0..4294967295.
    TotalQuotaOfRequests interface{}

    // Remaining quota of requests. The type is interface{} with range:
    // 0..4294967295.
    RemainingQuotaOfRequests interface{}

    // Low water mark quota of requests. The type is interface{} with range:
    // 0..4294967295.
    LowWaterMarkQuotaOfRequests interface{}
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetFilter() yfilter.YFilter { return interimInflight.YFilter }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) SetFilter(yf yfilter.YFilter) { interimInflight.YFilter = yf }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetGoName(yname string) string {
    if yname == "quota-exhausts" { return "QuotaExhausts" }
    if yname == "denied-requests" { return "DeniedRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "total-quota-of-requests" { return "TotalQuotaOfRequests" }
    if yname == "remaining-quota-of-requests" { return "RemainingQuotaOfRequests" }
    if yname == "low-water-mark-quota-of-requests" { return "LowWaterMarkQuotaOfRequests" }
    return ""
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetSegmentPath() string {
    return "interim-inflight"
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["quota-exhausts"] = interimInflight.QuotaExhausts
    leafs["denied-requests"] = interimInflight.DeniedRequests
    leafs["accepted-requests"] = interimInflight.AcceptedRequests
    leafs["total-quota-of-requests"] = interimInflight.TotalQuotaOfRequests
    leafs["remaining-quota-of-requests"] = interimInflight.RemainingQuotaOfRequests
    leafs["low-water-mark-quota-of-requests"] = interimInflight.LowWaterMarkQuotaOfRequests
    return leafs
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetBundleName() string { return "cisco_ios_xr" }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetYangName() string { return "interim-inflight" }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) SetParent(parent types.Entity) { interimInflight.parent = parent }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetParent() types.Entity { return interimInflight.parent }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AccountingStatistics_InterimInflight) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics
// List of stats for authentication
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Requests sent to radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    SentRequests interface{}

    // Request accepted by Radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    AcceptedRequests interface{}

    // Requests which are successful. The type is interface{} with range:
    // 0..18446744073709551615.
    SuccessfulRequests interface{}

    // Requests rejected by radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    RejectedRequests interface{}

    // Radius server not available. The type is interface{} with range:
    // 0..18446744073709551615.
    UnreachableRequests interface{}

    // Unexpected errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // Incomplete requests - missing attributes. The type is interface{} with
    // range: 0..18446744073709551615.
    IncompleteRequests interface{}

    // Requests terminated by disconnect. The type is interface{} with range:
    // 0..18446744073709551615.
    TerminatedRequests interface{}
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetFilter() yfilter.YFilter { return authenticationStatistics.YFilter }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) SetFilter(yf yfilter.YFilter) { authenticationStatistics.YFilter = yf }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetGoName(yname string) string {
    if yname == "sent-requests" { return "SentRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "successful-requests" { return "SuccessfulRequests" }
    if yname == "rejected-requests" { return "RejectedRequests" }
    if yname == "unreachable-requests" { return "UnreachableRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "incomplete-requests" { return "IncompleteRequests" }
    if yname == "terminated-requests" { return "TerminatedRequests" }
    return ""
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetSegmentPath() string {
    return "authentication-statistics"
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-requests"] = authenticationStatistics.SentRequests
    leafs["accepted-requests"] = authenticationStatistics.AcceptedRequests
    leafs["successful-requests"] = authenticationStatistics.SuccessfulRequests
    leafs["rejected-requests"] = authenticationStatistics.RejectedRequests
    leafs["unreachable-requests"] = authenticationStatistics.UnreachableRequests
    leafs["errored-requests"] = authenticationStatistics.ErroredRequests
    leafs["incomplete-requests"] = authenticationStatistics.IncompleteRequests
    leafs["terminated-requests"] = authenticationStatistics.TerminatedRequests
    return leafs
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetYangName() string { return "authentication-statistics" }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) SetParent(parent types.Entity) { authenticationStatistics.parent = parent }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetParent() types.Entity { return authenticationStatistics.parent }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthenticationStatistics) GetParentYangName() string { return "accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics
// List of stats for authorization
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Requests sent to radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    SentRequests interface{}

    // Request accepted by Radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    AcceptedRequests interface{}

    // Requests which are successful. The type is interface{} with range:
    // 0..18446744073709551615.
    SuccessfulRequests interface{}

    // Requests rejected by radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    RejectedRequests interface{}

    // Radius server not available. The type is interface{} with range:
    // 0..18446744073709551615.
    UnreachableRequests interface{}

    // Unexpected errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // Incomplete requests - missing attributes. The type is interface{} with
    // range: 0..18446744073709551615.
    IncompleteRequests interface{}

    // Requests terminated by disconnect. The type is interface{} with range:
    // 0..18446744073709551615.
    TerminatedRequests interface{}
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetFilter() yfilter.YFilter { return authorizationStatistics.YFilter }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) SetFilter(yf yfilter.YFilter) { authorizationStatistics.YFilter = yf }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetGoName(yname string) string {
    if yname == "sent-requests" { return "SentRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "successful-requests" { return "SuccessfulRequests" }
    if yname == "rejected-requests" { return "RejectedRequests" }
    if yname == "unreachable-requests" { return "UnreachableRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "incomplete-requests" { return "IncompleteRequests" }
    if yname == "terminated-requests" { return "TerminatedRequests" }
    return ""
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetSegmentPath() string {
    return "authorization-statistics"
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-requests"] = authorizationStatistics.SentRequests
    leafs["accepted-requests"] = authorizationStatistics.AcceptedRequests
    leafs["successful-requests"] = authorizationStatistics.SuccessfulRequests
    leafs["rejected-requests"] = authorizationStatistics.RejectedRequests
    leafs["unreachable-requests"] = authorizationStatistics.UnreachableRequests
    leafs["errored-requests"] = authorizationStatistics.ErroredRequests
    leafs["incomplete-requests"] = authorizationStatistics.IncompleteRequests
    leafs["terminated-requests"] = authorizationStatistics.TerminatedRequests
    return leafs
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetYangName() string { return "authorization-statistics" }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) SetParent(parent types.Entity) { authorizationStatistics.parent = parent }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetParent() types.Entity { return authorizationStatistics.parent }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_AuthorizationStatistics) GetParentYangName() string { return "accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics
// List of stats for COA
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Responses to unknown account command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownAccountCmdResps interface{}

    // Responses to unknown service command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownServiceCmdResps interface{}

    // Responses to unknown command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownCmdResps interface{}

    // Responses to attribute list failure errors. The type is interface{} with
    // range: 0..18446744073709551615.
    AttrListRetrieveFailureResps interface{}

    // Response send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    RespSendFailure interface{}

    // Responses to internal error. The type is interface{} with range:
    // 0..18446744073709551615.
    InternalErrResps interface{}

    // Responses to service profile push failures. The type is interface{} with
    // range: 0..18446744073709551615.
    ServiceProfilePushFailureResps interface{}

    // Responses empty (no command) COA request. The type is interface{} with
    // range: 0..18446744073709551615.
    NoCmdResps interface{}

    // Responses to COA with unknown session identifier. The type is interface{}
    // with range: 0..18446744073709551615.
    NoSessionFoundResps interface{}

    // Responses to session peer not found error. The type is interface{} with
    // range: 0..18446744073709551615.
    NoSessionPeerResps interface{}

    // Account logon request statistics.
    AccountLogon Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon

    // Account logoff request statistics.
    AccountLogoff Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff

    // Account update request statistics.
    AccountUpdate Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate

    // Session disconnect request statistics.
    SessionDisconnect Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect

    // Service logon request statistics.
    SingleServiceLogon Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon

    // Single Service logoff request statistics.
    SingleServiceLogoff Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff

    // Single Service Modify request statistics.
    SingleServiceModify Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify

    // MA-CoA Service request statistics.
    ServiceMulti Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetFilter() yfilter.YFilter { return changeOfAuthorizationStatistics.YFilter }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) SetFilter(yf yfilter.YFilter) { changeOfAuthorizationStatistics.YFilter = yf }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetGoName(yname string) string {
    if yname == "unknown-account-cmd-resps" { return "UnknownAccountCmdResps" }
    if yname == "unknown-service-cmd-resps" { return "UnknownServiceCmdResps" }
    if yname == "unknown-cmd-resps" { return "UnknownCmdResps" }
    if yname == "attr-list-retrieve-failure-resps" { return "AttrListRetrieveFailureResps" }
    if yname == "resp-send-failure" { return "RespSendFailure" }
    if yname == "internal-err-resps" { return "InternalErrResps" }
    if yname == "service-profile-push-failure-resps" { return "ServiceProfilePushFailureResps" }
    if yname == "no-cmd-resps" { return "NoCmdResps" }
    if yname == "no-session-found-resps" { return "NoSessionFoundResps" }
    if yname == "no-session-peer-resps" { return "NoSessionPeerResps" }
    if yname == "account-logon" { return "AccountLogon" }
    if yname == "account-logoff" { return "AccountLogoff" }
    if yname == "account-update" { return "AccountUpdate" }
    if yname == "session-disconnect" { return "SessionDisconnect" }
    if yname == "single-service-logon" { return "SingleServiceLogon" }
    if yname == "single-service-logoff" { return "SingleServiceLogoff" }
    if yname == "single-service-modify" { return "SingleServiceModify" }
    if yname == "service-multi" { return "ServiceMulti" }
    return ""
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetSegmentPath() string {
    return "change-of-authorization-statistics"
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "account-logon" {
        return &changeOfAuthorizationStatistics.AccountLogon
    }
    if childYangName == "account-logoff" {
        return &changeOfAuthorizationStatistics.AccountLogoff
    }
    if childYangName == "account-update" {
        return &changeOfAuthorizationStatistics.AccountUpdate
    }
    if childYangName == "session-disconnect" {
        return &changeOfAuthorizationStatistics.SessionDisconnect
    }
    if childYangName == "single-service-logon" {
        return &changeOfAuthorizationStatistics.SingleServiceLogon
    }
    if childYangName == "single-service-logoff" {
        return &changeOfAuthorizationStatistics.SingleServiceLogoff
    }
    if childYangName == "single-service-modify" {
        return &changeOfAuthorizationStatistics.SingleServiceModify
    }
    if childYangName == "service-multi" {
        return &changeOfAuthorizationStatistics.ServiceMulti
    }
    return nil
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["account-logon"] = &changeOfAuthorizationStatistics.AccountLogon
    children["account-logoff"] = &changeOfAuthorizationStatistics.AccountLogoff
    children["account-update"] = &changeOfAuthorizationStatistics.AccountUpdate
    children["session-disconnect"] = &changeOfAuthorizationStatistics.SessionDisconnect
    children["single-service-logon"] = &changeOfAuthorizationStatistics.SingleServiceLogon
    children["single-service-logoff"] = &changeOfAuthorizationStatistics.SingleServiceLogoff
    children["single-service-modify"] = &changeOfAuthorizationStatistics.SingleServiceModify
    children["service-multi"] = &changeOfAuthorizationStatistics.ServiceMulti
    return children
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unknown-account-cmd-resps"] = changeOfAuthorizationStatistics.UnknownAccountCmdResps
    leafs["unknown-service-cmd-resps"] = changeOfAuthorizationStatistics.UnknownServiceCmdResps
    leafs["unknown-cmd-resps"] = changeOfAuthorizationStatistics.UnknownCmdResps
    leafs["attr-list-retrieve-failure-resps"] = changeOfAuthorizationStatistics.AttrListRetrieveFailureResps
    leafs["resp-send-failure"] = changeOfAuthorizationStatistics.RespSendFailure
    leafs["internal-err-resps"] = changeOfAuthorizationStatistics.InternalErrResps
    leafs["service-profile-push-failure-resps"] = changeOfAuthorizationStatistics.ServiceProfilePushFailureResps
    leafs["no-cmd-resps"] = changeOfAuthorizationStatistics.NoCmdResps
    leafs["no-session-found-resps"] = changeOfAuthorizationStatistics.NoSessionFoundResps
    leafs["no-session-peer-resps"] = changeOfAuthorizationStatistics.NoSessionPeerResps
    return leafs
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetYangName() string { return "change-of-authorization-statistics" }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) SetParent(parent types.Entity) { changeOfAuthorizationStatistics.parent = parent }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetParent() types.Entity { return changeOfAuthorizationStatistics.parent }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics) GetParentYangName() string { return "accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon
// Account logon request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetFilter() yfilter.YFilter { return accountLogon.YFilter }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) SetFilter(yf yfilter.YFilter) { accountLogon.YFilter = yf }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetSegmentPath() string {
    return "account-logon"
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountLogon.ReceivedRequests
    leafs["acknowledged-requests"] = accountLogon.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountLogon.NonAcknowledgedRequests
    return leafs
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetBundleName() string { return "cisco_ios_xr" }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetYangName() string { return "account-logon" }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) SetParent(parent types.Entity) { accountLogon.parent = parent }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetParent() types.Entity { return accountLogon.parent }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff
// Account logoff request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetFilter() yfilter.YFilter { return accountLogoff.YFilter }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) SetFilter(yf yfilter.YFilter) { accountLogoff.YFilter = yf }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetSegmentPath() string {
    return "account-logoff"
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountLogoff.ReceivedRequests
    leafs["acknowledged-requests"] = accountLogoff.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountLogoff.NonAcknowledgedRequests
    return leafs
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetBundleName() string { return "cisco_ios_xr" }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetYangName() string { return "account-logoff" }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) SetParent(parent types.Entity) { accountLogoff.parent = parent }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetParent() types.Entity { return accountLogoff.parent }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate
// Account update request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetFilter() yfilter.YFilter { return accountUpdate.YFilter }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) SetFilter(yf yfilter.YFilter) { accountUpdate.YFilter = yf }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetSegmentPath() string {
    return "account-update"
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountUpdate.ReceivedRequests
    leafs["acknowledged-requests"] = accountUpdate.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountUpdate.NonAcknowledgedRequests
    return leafs
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetBundleName() string { return "cisco_ios_xr" }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetYangName() string { return "account-update" }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) SetParent(parent types.Entity) { accountUpdate.parent = parent }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetParent() types.Entity { return accountUpdate.parent }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect
// Session disconnect request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetFilter() yfilter.YFilter { return sessionDisconnect.YFilter }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) SetFilter(yf yfilter.YFilter) { sessionDisconnect.YFilter = yf }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetSegmentPath() string {
    return "session-disconnect"
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = sessionDisconnect.ReceivedRequests
    leafs["acknowledged-requests"] = sessionDisconnect.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = sessionDisconnect.NonAcknowledgedRequests
    return leafs
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetYangName() string { return "session-disconnect" }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) SetParent(parent types.Entity) { sessionDisconnect.parent = parent }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetParent() types.Entity { return sessionDisconnect.parent }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon
// Service logon request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetFilter() yfilter.YFilter { return singleServiceLogon.YFilter }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) SetFilter(yf yfilter.YFilter) { singleServiceLogon.YFilter = yf }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetSegmentPath() string {
    return "single-service-logon"
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceLogon.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceLogon.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceLogon.NonAcknowledgedRequests
    return leafs
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetYangName() string { return "single-service-logon" }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) SetParent(parent types.Entity) { singleServiceLogon.parent = parent }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetParent() types.Entity { return singleServiceLogon.parent }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff
// Single Service logoff request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetFilter() yfilter.YFilter { return singleServiceLogoff.YFilter }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) SetFilter(yf yfilter.YFilter) { singleServiceLogoff.YFilter = yf }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetSegmentPath() string {
    return "single-service-logoff"
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceLogoff.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceLogoff.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceLogoff.NonAcknowledgedRequests
    return leafs
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetYangName() string { return "single-service-logoff" }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) SetParent(parent types.Entity) { singleServiceLogoff.parent = parent }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetParent() types.Entity { return singleServiceLogoff.parent }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify
// Single Service Modify request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetFilter() yfilter.YFilter { return singleServiceModify.YFilter }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) SetFilter(yf yfilter.YFilter) { singleServiceModify.YFilter = yf }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetSegmentPath() string {
    return "single-service-modify"
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceModify.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceModify.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceModify.NonAcknowledgedRequests
    return leafs
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetYangName() string { return "single-service-modify" }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) SetParent(parent types.Entity) { singleServiceModify.parent = parent }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetParent() types.Entity { return singleServiceModify.parent }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti
// MA-CoA Service request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetFilter() yfilter.YFilter { return serviceMulti.YFilter }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) SetFilter(yf yfilter.YFilter) { serviceMulti.YFilter = yf }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetSegmentPath() string {
    return "service-multi"
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = serviceMulti.ReceivedRequests
    leafs["acknowledged-requests"] = serviceMulti.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = serviceMulti.NonAcknowledgedRequests
    return leafs
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetBundleName() string { return "cisco_ios_xr" }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetYangName() string { return "service-multi" }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) SetParent(parent types.Entity) { serviceMulti.parent = parent }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetParent() types.Entity { return serviceMulti.parent }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics
// List of stats for Mobility
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Request send success. The type is interface{} with range:
    // 0..18446744073709551615.
    SendRequestSuccesses interface{}

    // Request send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    SendRequestFailures interface{}

    // Response receive success. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceiveResponseSuccesses interface{}

    // Response receive failures. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceiveResponseFailures interface{}
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetFilter() yfilter.YFilter { return mobilityStatistics.YFilter }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) SetFilter(yf yfilter.YFilter) { mobilityStatistics.YFilter = yf }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetGoName(yname string) string {
    if yname == "send-request-successes" { return "SendRequestSuccesses" }
    if yname == "send-request-failures" { return "SendRequestFailures" }
    if yname == "receive-response-successes" { return "ReceiveResponseSuccesses" }
    if yname == "receive-response-failures" { return "ReceiveResponseFailures" }
    return ""
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetSegmentPath() string {
    return "mobility-statistics"
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["send-request-successes"] = mobilityStatistics.SendRequestSuccesses
    leafs["send-request-failures"] = mobilityStatistics.SendRequestFailures
    leafs["receive-response-successes"] = mobilityStatistics.ReceiveResponseSuccesses
    leafs["receive-response-failures"] = mobilityStatistics.ReceiveResponseFailures
    return leafs
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetYangName() string { return "mobility-statistics" }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) SetParent(parent types.Entity) { mobilityStatistics.parent = parent }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetParent() types.Entity { return mobilityStatistics.parent }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AccountingStatsAll_MobilityStatistics) GetParentYangName() string { return "accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization
// Change of authorization (COA) statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Responses to unknown account command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownAccountCmdResps interface{}

    // Responses to unknown service command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownServiceCmdResps interface{}

    // Responses to unknown command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownCmdResps interface{}

    // Responses to attribute list failure errors. The type is interface{} with
    // range: 0..18446744073709551615.
    AttrListRetrieveFailureResps interface{}

    // Response send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    RespSendFailure interface{}

    // Responses to internal error. The type is interface{} with range:
    // 0..18446744073709551615.
    InternalErrResps interface{}

    // Responses to service profile push failures. The type is interface{} with
    // range: 0..18446744073709551615.
    ServiceProfilePushFailureResps interface{}

    // Responses empty (no command) COA request. The type is interface{} with
    // range: 0..18446744073709551615.
    NoCmdResps interface{}

    // Responses to COA with unknown session identifier. The type is interface{}
    // with range: 0..18446744073709551615.
    NoSessionFoundResps interface{}

    // Responses to session peer not found error. The type is interface{} with
    // range: 0..18446744073709551615.
    NoSessionPeerResps interface{}

    // Account logon request statistics.
    AccountLogon Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon

    // Account logoff request statistics.
    AccountLogoff Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff

    // Account update request statistics.
    AccountUpdate Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate

    // Session disconnect request statistics.
    SessionDisconnect Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect

    // Service logon request statistics.
    SingleServiceLogon Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon

    // Single Service logoff request statistics.
    SingleServiceLogoff Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff

    // Single Service Modify request statistics.
    SingleServiceModify Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify

    // MA-CoA Service request statistics.
    ServiceMulti Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti
}

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetFilter() yfilter.YFilter { return changeOfAuthorization.YFilter }

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) SetFilter(yf yfilter.YFilter) { changeOfAuthorization.YFilter = yf }

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetGoName(yname string) string {
    if yname == "unknown-account-cmd-resps" { return "UnknownAccountCmdResps" }
    if yname == "unknown-service-cmd-resps" { return "UnknownServiceCmdResps" }
    if yname == "unknown-cmd-resps" { return "UnknownCmdResps" }
    if yname == "attr-list-retrieve-failure-resps" { return "AttrListRetrieveFailureResps" }
    if yname == "resp-send-failure" { return "RespSendFailure" }
    if yname == "internal-err-resps" { return "InternalErrResps" }
    if yname == "service-profile-push-failure-resps" { return "ServiceProfilePushFailureResps" }
    if yname == "no-cmd-resps" { return "NoCmdResps" }
    if yname == "no-session-found-resps" { return "NoSessionFoundResps" }
    if yname == "no-session-peer-resps" { return "NoSessionPeerResps" }
    if yname == "account-logon" { return "AccountLogon" }
    if yname == "account-logoff" { return "AccountLogoff" }
    if yname == "account-update" { return "AccountUpdate" }
    if yname == "session-disconnect" { return "SessionDisconnect" }
    if yname == "single-service-logon" { return "SingleServiceLogon" }
    if yname == "single-service-logoff" { return "SingleServiceLogoff" }
    if yname == "single-service-modify" { return "SingleServiceModify" }
    if yname == "service-multi" { return "ServiceMulti" }
    return ""
}

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetSegmentPath() string {
    return "change-of-authorization"
}

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "account-logon" {
        return &changeOfAuthorization.AccountLogon
    }
    if childYangName == "account-logoff" {
        return &changeOfAuthorization.AccountLogoff
    }
    if childYangName == "account-update" {
        return &changeOfAuthorization.AccountUpdate
    }
    if childYangName == "session-disconnect" {
        return &changeOfAuthorization.SessionDisconnect
    }
    if childYangName == "single-service-logon" {
        return &changeOfAuthorization.SingleServiceLogon
    }
    if childYangName == "single-service-logoff" {
        return &changeOfAuthorization.SingleServiceLogoff
    }
    if childYangName == "single-service-modify" {
        return &changeOfAuthorization.SingleServiceModify
    }
    if childYangName == "service-multi" {
        return &changeOfAuthorization.ServiceMulti
    }
    return nil
}

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["account-logon"] = &changeOfAuthorization.AccountLogon
    children["account-logoff"] = &changeOfAuthorization.AccountLogoff
    children["account-update"] = &changeOfAuthorization.AccountUpdate
    children["session-disconnect"] = &changeOfAuthorization.SessionDisconnect
    children["single-service-logon"] = &changeOfAuthorization.SingleServiceLogon
    children["single-service-logoff"] = &changeOfAuthorization.SingleServiceLogoff
    children["single-service-modify"] = &changeOfAuthorization.SingleServiceModify
    children["service-multi"] = &changeOfAuthorization.ServiceMulti
    return children
}

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unknown-account-cmd-resps"] = changeOfAuthorization.UnknownAccountCmdResps
    leafs["unknown-service-cmd-resps"] = changeOfAuthorization.UnknownServiceCmdResps
    leafs["unknown-cmd-resps"] = changeOfAuthorization.UnknownCmdResps
    leafs["attr-list-retrieve-failure-resps"] = changeOfAuthorization.AttrListRetrieveFailureResps
    leafs["resp-send-failure"] = changeOfAuthorization.RespSendFailure
    leafs["internal-err-resps"] = changeOfAuthorization.InternalErrResps
    leafs["service-profile-push-failure-resps"] = changeOfAuthorization.ServiceProfilePushFailureResps
    leafs["no-cmd-resps"] = changeOfAuthorization.NoCmdResps
    leafs["no-session-found-resps"] = changeOfAuthorization.NoSessionFoundResps
    leafs["no-session-peer-resps"] = changeOfAuthorization.NoSessionPeerResps
    return leafs
}

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetBundleName() string { return "cisco_ios_xr" }

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetYangName() string { return "change-of-authorization" }

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) SetParent(parent types.Entity) { changeOfAuthorization.parent = parent }

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetParent() types.Entity { return changeOfAuthorization.parent }

func (changeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon
// Account logon request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetFilter() yfilter.YFilter { return accountLogon.YFilter }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) SetFilter(yf yfilter.YFilter) { accountLogon.YFilter = yf }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetSegmentPath() string {
    return "account-logon"
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountLogon.ReceivedRequests
    leafs["acknowledged-requests"] = accountLogon.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountLogon.NonAcknowledgedRequests
    return leafs
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetBundleName() string { return "cisco_ios_xr" }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetYangName() string { return "account-logon" }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) SetParent(parent types.Entity) { accountLogon.parent = parent }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetParent() types.Entity { return accountLogon.parent }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogon) GetParentYangName() string { return "change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff
// Account logoff request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetFilter() yfilter.YFilter { return accountLogoff.YFilter }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) SetFilter(yf yfilter.YFilter) { accountLogoff.YFilter = yf }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetSegmentPath() string {
    return "account-logoff"
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountLogoff.ReceivedRequests
    leafs["acknowledged-requests"] = accountLogoff.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountLogoff.NonAcknowledgedRequests
    return leafs
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetBundleName() string { return "cisco_ios_xr" }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetYangName() string { return "account-logoff" }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) SetParent(parent types.Entity) { accountLogoff.parent = parent }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetParent() types.Entity { return accountLogoff.parent }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountLogoff) GetParentYangName() string { return "change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate
// Account update request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetFilter() yfilter.YFilter { return accountUpdate.YFilter }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) SetFilter(yf yfilter.YFilter) { accountUpdate.YFilter = yf }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetSegmentPath() string {
    return "account-update"
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountUpdate.ReceivedRequests
    leafs["acknowledged-requests"] = accountUpdate.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountUpdate.NonAcknowledgedRequests
    return leafs
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetBundleName() string { return "cisco_ios_xr" }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetYangName() string { return "account-update" }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) SetParent(parent types.Entity) { accountUpdate.parent = parent }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetParent() types.Entity { return accountUpdate.parent }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_AccountUpdate) GetParentYangName() string { return "change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect
// Session disconnect request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetFilter() yfilter.YFilter { return sessionDisconnect.YFilter }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) SetFilter(yf yfilter.YFilter) { sessionDisconnect.YFilter = yf }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetSegmentPath() string {
    return "session-disconnect"
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = sessionDisconnect.ReceivedRequests
    leafs["acknowledged-requests"] = sessionDisconnect.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = sessionDisconnect.NonAcknowledgedRequests
    return leafs
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetYangName() string { return "session-disconnect" }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) SetParent(parent types.Entity) { sessionDisconnect.parent = parent }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetParent() types.Entity { return sessionDisconnect.parent }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SessionDisconnect) GetParentYangName() string { return "change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon
// Service logon request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetFilter() yfilter.YFilter { return singleServiceLogon.YFilter }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) SetFilter(yf yfilter.YFilter) { singleServiceLogon.YFilter = yf }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetSegmentPath() string {
    return "single-service-logon"
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceLogon.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceLogon.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceLogon.NonAcknowledgedRequests
    return leafs
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetYangName() string { return "single-service-logon" }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) SetParent(parent types.Entity) { singleServiceLogon.parent = parent }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetParent() types.Entity { return singleServiceLogon.parent }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogon) GetParentYangName() string { return "change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff
// Single Service logoff request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetFilter() yfilter.YFilter { return singleServiceLogoff.YFilter }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) SetFilter(yf yfilter.YFilter) { singleServiceLogoff.YFilter = yf }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetSegmentPath() string {
    return "single-service-logoff"
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceLogoff.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceLogoff.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceLogoff.NonAcknowledgedRequests
    return leafs
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetYangName() string { return "single-service-logoff" }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) SetParent(parent types.Entity) { singleServiceLogoff.parent = parent }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetParent() types.Entity { return singleServiceLogoff.parent }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceLogoff) GetParentYangName() string { return "change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify
// Single Service Modify request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetFilter() yfilter.YFilter { return singleServiceModify.YFilter }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) SetFilter(yf yfilter.YFilter) { singleServiceModify.YFilter = yf }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetSegmentPath() string {
    return "single-service-modify"
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceModify.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceModify.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceModify.NonAcknowledgedRequests
    return leafs
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetYangName() string { return "single-service-modify" }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) SetParent(parent types.Entity) { singleServiceModify.parent = parent }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetParent() types.Entity { return singleServiceModify.parent }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_SingleServiceModify) GetParentYangName() string { return "change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti
// MA-CoA Service request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetFilter() yfilter.YFilter { return serviceMulti.YFilter }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) SetFilter(yf yfilter.YFilter) { serviceMulti.YFilter = yf }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetSegmentPath() string {
    return "service-multi"
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = serviceMulti.ReceivedRequests
    leafs["acknowledged-requests"] = serviceMulti.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = serviceMulti.NonAcknowledgedRequests
    return leafs
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetBundleName() string { return "cisco_ios_xr" }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetYangName() string { return "service-multi" }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) SetParent(parent types.Entity) { serviceMulti.parent = parent }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetParent() types.Entity { return serviceMulti.parent }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_ChangeOfAuthorization_ServiceMulti) GetParentYangName() string { return "change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization
// Authorization statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Requests sent to radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    SentRequests interface{}

    // Request accepted by Radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    AcceptedRequests interface{}

    // Requests which are successful. The type is interface{} with range:
    // 0..18446744073709551615.
    SuccessfulRequests interface{}

    // Requests rejected by radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    RejectedRequests interface{}

    // Radius server not available. The type is interface{} with range:
    // 0..18446744073709551615.
    UnreachableRequests interface{}

    // Unexpected errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // Incomplete requests - missing attributes. The type is interface{} with
    // range: 0..18446744073709551615.
    IncompleteRequests interface{}

    // Requests terminated by disconnect. The type is interface{} with range:
    // 0..18446744073709551615.
    TerminatedRequests interface{}
}

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetFilter() yfilter.YFilter { return authorization.YFilter }

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) SetFilter(yf yfilter.YFilter) { authorization.YFilter = yf }

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetGoName(yname string) string {
    if yname == "sent-requests" { return "SentRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "successful-requests" { return "SuccessfulRequests" }
    if yname == "rejected-requests" { return "RejectedRequests" }
    if yname == "unreachable-requests" { return "UnreachableRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "incomplete-requests" { return "IncompleteRequests" }
    if yname == "terminated-requests" { return "TerminatedRequests" }
    return ""
}

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetSegmentPath() string {
    return "authorization"
}

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-requests"] = authorization.SentRequests
    leafs["accepted-requests"] = authorization.AcceptedRequests
    leafs["successful-requests"] = authorization.SuccessfulRequests
    leafs["rejected-requests"] = authorization.RejectedRequests
    leafs["unreachable-requests"] = authorization.UnreachableRequests
    leafs["errored-requests"] = authorization.ErroredRequests
    leafs["incomplete-requests"] = authorization.IncompleteRequests
    leafs["terminated-requests"] = authorization.TerminatedRequests
    return leafs
}

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetBundleName() string { return "cisco_ios_xr" }

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetYangName() string { return "authorization" }

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) SetParent(parent types.Entity) { authorization.parent = parent }

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetParent() types.Entity { return authorization.parent }

func (authorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Authorization) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization
// Aggregate authorization statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Requests sent to radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    SentRequests interface{}

    // Request accepted by Radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    AcceptedRequests interface{}

    // Requests which are successful. The type is interface{} with range:
    // 0..18446744073709551615.
    SuccessfulRequests interface{}

    // Requests rejected by radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    RejectedRequests interface{}

    // Radius server not available. The type is interface{} with range:
    // 0..18446744073709551615.
    UnreachableRequests interface{}

    // Unexpected errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // Incomplete requests - missing attributes. The type is interface{} with
    // range: 0..18446744073709551615.
    IncompleteRequests interface{}

    // Requests terminated by disconnect. The type is interface{} with range:
    // 0..18446744073709551615.
    TerminatedRequests interface{}
}

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetFilter() yfilter.YFilter { return aggregateAuthorization.YFilter }

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) SetFilter(yf yfilter.YFilter) { aggregateAuthorization.YFilter = yf }

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetGoName(yname string) string {
    if yname == "sent-requests" { return "SentRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "successful-requests" { return "SuccessfulRequests" }
    if yname == "rejected-requests" { return "RejectedRequests" }
    if yname == "unreachable-requests" { return "UnreachableRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "incomplete-requests" { return "IncompleteRequests" }
    if yname == "terminated-requests" { return "TerminatedRequests" }
    return ""
}

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetSegmentPath() string {
    return "aggregate-authorization"
}

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-requests"] = aggregateAuthorization.SentRequests
    leafs["accepted-requests"] = aggregateAuthorization.AcceptedRequests
    leafs["successful-requests"] = aggregateAuthorization.SuccessfulRequests
    leafs["rejected-requests"] = aggregateAuthorization.RejectedRequests
    leafs["unreachable-requests"] = aggregateAuthorization.UnreachableRequests
    leafs["errored-requests"] = aggregateAuthorization.ErroredRequests
    leafs["incomplete-requests"] = aggregateAuthorization.IncompleteRequests
    leafs["terminated-requests"] = aggregateAuthorization.TerminatedRequests
    return leafs
}

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetYangName() string { return "aggregate-authorization" }

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) SetParent(parent types.Entity) { aggregateAuthorization.parent = parent }

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetParent() types.Entity { return aggregateAuthorization.parent }

func (aggregateAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAuthorization) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll
// Display all subscriber management total
// statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of stats for accounting.
    AccountingStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics

    // List of stats for authentication.
    AuthenticationStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics

    // List of stats for authorization.
    AuthorizationStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics

    // List of stats for COA.
    ChangeOfAuthorizationStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics

    // List of stats for Mobility.
    MobilityStatistics Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics
}

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetFilter() yfilter.YFilter { return aggregateAccountingStatsAll.YFilter }

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) SetFilter(yf yfilter.YFilter) { aggregateAccountingStatsAll.YFilter = yf }

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetGoName(yname string) string {
    if yname == "accounting-statistics" { return "AccountingStatistics" }
    if yname == "authentication-statistics" { return "AuthenticationStatistics" }
    if yname == "authorization-statistics" { return "AuthorizationStatistics" }
    if yname == "change-of-authorization-statistics" { return "ChangeOfAuthorizationStatistics" }
    if yname == "mobility-statistics" { return "MobilityStatistics" }
    return ""
}

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetSegmentPath() string {
    return "aggregate-accounting-stats-all"
}

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accounting-statistics" {
        return &aggregateAccountingStatsAll.AccountingStatistics
    }
    if childYangName == "authentication-statistics" {
        return &aggregateAccountingStatsAll.AuthenticationStatistics
    }
    if childYangName == "authorization-statistics" {
        return &aggregateAccountingStatsAll.AuthorizationStatistics
    }
    if childYangName == "change-of-authorization-statistics" {
        return &aggregateAccountingStatsAll.ChangeOfAuthorizationStatistics
    }
    if childYangName == "mobility-statistics" {
        return &aggregateAccountingStatsAll.MobilityStatistics
    }
    return nil
}

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["accounting-statistics"] = &aggregateAccountingStatsAll.AccountingStatistics
    children["authentication-statistics"] = &aggregateAccountingStatsAll.AuthenticationStatistics
    children["authorization-statistics"] = &aggregateAccountingStatsAll.AuthorizationStatistics
    children["change-of-authorization-statistics"] = &aggregateAccountingStatsAll.ChangeOfAuthorizationStatistics
    children["mobility-statistics"] = &aggregateAccountingStatsAll.MobilityStatistics
    return children
}

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetYangName() string { return "aggregate-accounting-stats-all" }

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) SetParent(parent types.Entity) { aggregateAccountingStatsAll.parent = parent }

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetParent() types.Entity { return aggregateAccountingStatsAll.parent }

func (aggregateAccountingStatsAll *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics
// List of stats for accounting
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Active sessions. The type is interface{} with range: 0..4294967295.
    ActiveSessions interface{}

    // Started sessions. The type is interface{} with range:
    // 0..18446744073709551615.
    StartedSessions interface{}

    // Stopped sessions. The type is interface{} with range:
    // 0..18446744073709551615.
    StoppedSessions interface{}

    // Policy plane errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    PolicyPlaneErroredRequests interface{}

    // Policy plane unknown requests. The type is interface{} with range:
    // 0..18446744073709551615.
    PolicyPlaneUnknownRequests interface{}

    // Start statistics.
    Start Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start

    // Stop statistics.
    Stop Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop

    // Interim statistics.
    Interim Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim

    // Pass-through statistics.
    PassThrough Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough

    // Update statistics.
    Update Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update

    // Interim inflight details.
    InterimInflight Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetFilter() yfilter.YFilter { return accountingStatistics.YFilter }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) SetFilter(yf yfilter.YFilter) { accountingStatistics.YFilter = yf }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetGoName(yname string) string {
    if yname == "active-sessions" { return "ActiveSessions" }
    if yname == "started-sessions" { return "StartedSessions" }
    if yname == "stopped-sessions" { return "StoppedSessions" }
    if yname == "policy-plane-errored-requests" { return "PolicyPlaneErroredRequests" }
    if yname == "policy-plane-unknown-requests" { return "PolicyPlaneUnknownRequests" }
    if yname == "start" { return "Start" }
    if yname == "stop" { return "Stop" }
    if yname == "interim" { return "Interim" }
    if yname == "pass-through" { return "PassThrough" }
    if yname == "update" { return "Update" }
    if yname == "interim-inflight" { return "InterimInflight" }
    return ""
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetSegmentPath() string {
    return "accounting-statistics"
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "start" {
        return &accountingStatistics.Start
    }
    if childYangName == "stop" {
        return &accountingStatistics.Stop
    }
    if childYangName == "interim" {
        return &accountingStatistics.Interim
    }
    if childYangName == "pass-through" {
        return &accountingStatistics.PassThrough
    }
    if childYangName == "update" {
        return &accountingStatistics.Update
    }
    if childYangName == "interim-inflight" {
        return &accountingStatistics.InterimInflight
    }
    return nil
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["start"] = &accountingStatistics.Start
    children["stop"] = &accountingStatistics.Stop
    children["interim"] = &accountingStatistics.Interim
    children["pass-through"] = &accountingStatistics.PassThrough
    children["update"] = &accountingStatistics.Update
    children["interim-inflight"] = &accountingStatistics.InterimInflight
    return children
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-sessions"] = accountingStatistics.ActiveSessions
    leafs["started-sessions"] = accountingStatistics.StartedSessions
    leafs["stopped-sessions"] = accountingStatistics.StoppedSessions
    leafs["policy-plane-errored-requests"] = accountingStatistics.PolicyPlaneErroredRequests
    leafs["policy-plane-unknown-requests"] = accountingStatistics.PolicyPlaneUnknownRequests
    return leafs
}

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetYangName() string { return "accounting-statistics" }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) SetParent(parent types.Entity) { accountingStatistics.parent = parent }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetParent() types.Entity { return accountingStatistics.parent }

func (accountingStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics) GetParentYangName() string { return "aggregate-accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start
// Start statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetFilter() yfilter.YFilter { return start.YFilter }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) SetFilter(yf yfilter.YFilter) { start.YFilter = yf }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetSegmentPath() string {
    return "start"
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = start.ReceivedRequests
    leafs["errored-requests"] = start.ErroredRequests
    leafs["aaa-errored-requests"] = start.AaaErroredRequests
    leafs["aaa-sent-requests"] = start.AaaSentRequests
    leafs["aaa-succeeded-responses"] = start.AaaSucceededResponses
    leafs["aaa-failed-responses"] = start.AaaFailedResponses
    return leafs
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetBundleName() string { return "cisco_ios_xr" }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetYangName() string { return "start" }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) SetParent(parent types.Entity) { start.parent = parent }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetParent() types.Entity { return start.parent }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Start) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop
// Stop statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetFilter() yfilter.YFilter { return stop.YFilter }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) SetFilter(yf yfilter.YFilter) { stop.YFilter = yf }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetSegmentPath() string {
    return "stop"
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = stop.ReceivedRequests
    leafs["errored-requests"] = stop.ErroredRequests
    leafs["aaa-errored-requests"] = stop.AaaErroredRequests
    leafs["aaa-sent-requests"] = stop.AaaSentRequests
    leafs["aaa-succeeded-responses"] = stop.AaaSucceededResponses
    leafs["aaa-failed-responses"] = stop.AaaFailedResponses
    return leafs
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetBundleName() string { return "cisco_ios_xr" }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetYangName() string { return "stop" }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) SetParent(parent types.Entity) { stop.parent = parent }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetParent() types.Entity { return stop.parent }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Stop) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim
// Interim statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetFilter() yfilter.YFilter { return interim.YFilter }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) SetFilter(yf yfilter.YFilter) { interim.YFilter = yf }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetSegmentPath() string {
    return "interim"
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = interim.ReceivedRequests
    leafs["errored-requests"] = interim.ErroredRequests
    leafs["aaa-errored-requests"] = interim.AaaErroredRequests
    leafs["aaa-sent-requests"] = interim.AaaSentRequests
    leafs["aaa-succeeded-responses"] = interim.AaaSucceededResponses
    leafs["aaa-failed-responses"] = interim.AaaFailedResponses
    return leafs
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetBundleName() string { return "cisco_ios_xr" }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetYangName() string { return "interim" }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) SetParent(parent types.Entity) { interim.parent = parent }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetParent() types.Entity { return interim.parent }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Interim) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough
// Pass-through statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetFilter() yfilter.YFilter { return passThrough.YFilter }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) SetFilter(yf yfilter.YFilter) { passThrough.YFilter = yf }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetSegmentPath() string {
    return "pass-through"
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = passThrough.ReceivedRequests
    leafs["errored-requests"] = passThrough.ErroredRequests
    leafs["aaa-errored-requests"] = passThrough.AaaErroredRequests
    leafs["aaa-sent-requests"] = passThrough.AaaSentRequests
    leafs["aaa-succeeded-responses"] = passThrough.AaaSucceededResponses
    leafs["aaa-failed-responses"] = passThrough.AaaFailedResponses
    return leafs
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetBundleName() string { return "cisco_ios_xr" }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetYangName() string { return "pass-through" }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) SetParent(parent types.Entity) { passThrough.parent = parent }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetParent() types.Entity { return passThrough.parent }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_PassThrough) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update
// Update statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetSegmentPath() string {
    return "update"
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = update.ReceivedRequests
    leafs["errored-requests"] = update.ErroredRequests
    leafs["aaa-errored-requests"] = update.AaaErroredRequests
    leafs["aaa-sent-requests"] = update.AaaSentRequests
    leafs["aaa-succeeded-responses"] = update.AaaSucceededResponses
    leafs["aaa-failed-responses"] = update.AaaFailedResponses
    return leafs
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetYangName() string { return "update" }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetParent() types.Entity { return update.parent }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_Update) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight
// Interim inflight details
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Quota exhausts. The type is interface{} with range: 0..4294967295.
    QuotaExhausts interface{}

    // Denied requests. The type is interface{} with range: 0..4294967295.
    DeniedRequests interface{}

    // Accepted requests. The type is interface{} with range: 0..4294967295.
    AcceptedRequests interface{}

    // Total quota of requests. The type is interface{} with range: 0..4294967295.
    TotalQuotaOfRequests interface{}

    // Remaining quota of requests. The type is interface{} with range:
    // 0..4294967295.
    RemainingQuotaOfRequests interface{}

    // Low water mark quota of requests. The type is interface{} with range:
    // 0..4294967295.
    LowWaterMarkQuotaOfRequests interface{}
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetFilter() yfilter.YFilter { return interimInflight.YFilter }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) SetFilter(yf yfilter.YFilter) { interimInflight.YFilter = yf }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetGoName(yname string) string {
    if yname == "quota-exhausts" { return "QuotaExhausts" }
    if yname == "denied-requests" { return "DeniedRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "total-quota-of-requests" { return "TotalQuotaOfRequests" }
    if yname == "remaining-quota-of-requests" { return "RemainingQuotaOfRequests" }
    if yname == "low-water-mark-quota-of-requests" { return "LowWaterMarkQuotaOfRequests" }
    return ""
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetSegmentPath() string {
    return "interim-inflight"
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["quota-exhausts"] = interimInflight.QuotaExhausts
    leafs["denied-requests"] = interimInflight.DeniedRequests
    leafs["accepted-requests"] = interimInflight.AcceptedRequests
    leafs["total-quota-of-requests"] = interimInflight.TotalQuotaOfRequests
    leafs["remaining-quota-of-requests"] = interimInflight.RemainingQuotaOfRequests
    leafs["low-water-mark-quota-of-requests"] = interimInflight.LowWaterMarkQuotaOfRequests
    return leafs
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetBundleName() string { return "cisco_ios_xr" }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetYangName() string { return "interim-inflight" }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) SetParent(parent types.Entity) { interimInflight.parent = parent }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetParent() types.Entity { return interimInflight.parent }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AccountingStatistics_InterimInflight) GetParentYangName() string { return "accounting-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics
// List of stats for authentication
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Requests sent to radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    SentRequests interface{}

    // Request accepted by Radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    AcceptedRequests interface{}

    // Requests which are successful. The type is interface{} with range:
    // 0..18446744073709551615.
    SuccessfulRequests interface{}

    // Requests rejected by radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    RejectedRequests interface{}

    // Radius server not available. The type is interface{} with range:
    // 0..18446744073709551615.
    UnreachableRequests interface{}

    // Unexpected errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // Incomplete requests - missing attributes. The type is interface{} with
    // range: 0..18446744073709551615.
    IncompleteRequests interface{}

    // Requests terminated by disconnect. The type is interface{} with range:
    // 0..18446744073709551615.
    TerminatedRequests interface{}
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetFilter() yfilter.YFilter { return authenticationStatistics.YFilter }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) SetFilter(yf yfilter.YFilter) { authenticationStatistics.YFilter = yf }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetGoName(yname string) string {
    if yname == "sent-requests" { return "SentRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "successful-requests" { return "SuccessfulRequests" }
    if yname == "rejected-requests" { return "RejectedRequests" }
    if yname == "unreachable-requests" { return "UnreachableRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "incomplete-requests" { return "IncompleteRequests" }
    if yname == "terminated-requests" { return "TerminatedRequests" }
    return ""
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetSegmentPath() string {
    return "authentication-statistics"
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-requests"] = authenticationStatistics.SentRequests
    leafs["accepted-requests"] = authenticationStatistics.AcceptedRequests
    leafs["successful-requests"] = authenticationStatistics.SuccessfulRequests
    leafs["rejected-requests"] = authenticationStatistics.RejectedRequests
    leafs["unreachable-requests"] = authenticationStatistics.UnreachableRequests
    leafs["errored-requests"] = authenticationStatistics.ErroredRequests
    leafs["incomplete-requests"] = authenticationStatistics.IncompleteRequests
    leafs["terminated-requests"] = authenticationStatistics.TerminatedRequests
    return leafs
}

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetYangName() string { return "authentication-statistics" }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) SetParent(parent types.Entity) { authenticationStatistics.parent = parent }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetParent() types.Entity { return authenticationStatistics.parent }

func (authenticationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthenticationStatistics) GetParentYangName() string { return "aggregate-accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics
// List of stats for authorization
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Requests sent to radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    SentRequests interface{}

    // Request accepted by Radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    AcceptedRequests interface{}

    // Requests which are successful. The type is interface{} with range:
    // 0..18446744073709551615.
    SuccessfulRequests interface{}

    // Requests rejected by radius server. The type is interface{} with range:
    // 0..18446744073709551615.
    RejectedRequests interface{}

    // Radius server not available. The type is interface{} with range:
    // 0..18446744073709551615.
    UnreachableRequests interface{}

    // Unexpected errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // Incomplete requests - missing attributes. The type is interface{} with
    // range: 0..18446744073709551615.
    IncompleteRequests interface{}

    // Requests terminated by disconnect. The type is interface{} with range:
    // 0..18446744073709551615.
    TerminatedRequests interface{}
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetFilter() yfilter.YFilter { return authorizationStatistics.YFilter }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) SetFilter(yf yfilter.YFilter) { authorizationStatistics.YFilter = yf }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetGoName(yname string) string {
    if yname == "sent-requests" { return "SentRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "successful-requests" { return "SuccessfulRequests" }
    if yname == "rejected-requests" { return "RejectedRequests" }
    if yname == "unreachable-requests" { return "UnreachableRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "incomplete-requests" { return "IncompleteRequests" }
    if yname == "terminated-requests" { return "TerminatedRequests" }
    return ""
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetSegmentPath() string {
    return "authorization-statistics"
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-requests"] = authorizationStatistics.SentRequests
    leafs["accepted-requests"] = authorizationStatistics.AcceptedRequests
    leafs["successful-requests"] = authorizationStatistics.SuccessfulRequests
    leafs["rejected-requests"] = authorizationStatistics.RejectedRequests
    leafs["unreachable-requests"] = authorizationStatistics.UnreachableRequests
    leafs["errored-requests"] = authorizationStatistics.ErroredRequests
    leafs["incomplete-requests"] = authorizationStatistics.IncompleteRequests
    leafs["terminated-requests"] = authorizationStatistics.TerminatedRequests
    return leafs
}

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetYangName() string { return "authorization-statistics" }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) SetParent(parent types.Entity) { authorizationStatistics.parent = parent }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetParent() types.Entity { return authorizationStatistics.parent }

func (authorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_AuthorizationStatistics) GetParentYangName() string { return "aggregate-accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics
// List of stats for COA
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Responses to unknown account command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownAccountCmdResps interface{}

    // Responses to unknown service command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownServiceCmdResps interface{}

    // Responses to unknown command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownCmdResps interface{}

    // Responses to attribute list failure errors. The type is interface{} with
    // range: 0..18446744073709551615.
    AttrListRetrieveFailureResps interface{}

    // Response send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    RespSendFailure interface{}

    // Responses to internal error. The type is interface{} with range:
    // 0..18446744073709551615.
    InternalErrResps interface{}

    // Responses to service profile push failures. The type is interface{} with
    // range: 0..18446744073709551615.
    ServiceProfilePushFailureResps interface{}

    // Responses empty (no command) COA request. The type is interface{} with
    // range: 0..18446744073709551615.
    NoCmdResps interface{}

    // Responses to COA with unknown session identifier. The type is interface{}
    // with range: 0..18446744073709551615.
    NoSessionFoundResps interface{}

    // Responses to session peer not found error. The type is interface{} with
    // range: 0..18446744073709551615.
    NoSessionPeerResps interface{}

    // Account logon request statistics.
    AccountLogon Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon

    // Account logoff request statistics.
    AccountLogoff Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff

    // Account update request statistics.
    AccountUpdate Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate

    // Session disconnect request statistics.
    SessionDisconnect Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect

    // Service logon request statistics.
    SingleServiceLogon Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon

    // Single Service logoff request statistics.
    SingleServiceLogoff Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff

    // Single Service Modify request statistics.
    SingleServiceModify Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify

    // MA-CoA Service request statistics.
    ServiceMulti Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetFilter() yfilter.YFilter { return changeOfAuthorizationStatistics.YFilter }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) SetFilter(yf yfilter.YFilter) { changeOfAuthorizationStatistics.YFilter = yf }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetGoName(yname string) string {
    if yname == "unknown-account-cmd-resps" { return "UnknownAccountCmdResps" }
    if yname == "unknown-service-cmd-resps" { return "UnknownServiceCmdResps" }
    if yname == "unknown-cmd-resps" { return "UnknownCmdResps" }
    if yname == "attr-list-retrieve-failure-resps" { return "AttrListRetrieveFailureResps" }
    if yname == "resp-send-failure" { return "RespSendFailure" }
    if yname == "internal-err-resps" { return "InternalErrResps" }
    if yname == "service-profile-push-failure-resps" { return "ServiceProfilePushFailureResps" }
    if yname == "no-cmd-resps" { return "NoCmdResps" }
    if yname == "no-session-found-resps" { return "NoSessionFoundResps" }
    if yname == "no-session-peer-resps" { return "NoSessionPeerResps" }
    if yname == "account-logon" { return "AccountLogon" }
    if yname == "account-logoff" { return "AccountLogoff" }
    if yname == "account-update" { return "AccountUpdate" }
    if yname == "session-disconnect" { return "SessionDisconnect" }
    if yname == "single-service-logon" { return "SingleServiceLogon" }
    if yname == "single-service-logoff" { return "SingleServiceLogoff" }
    if yname == "single-service-modify" { return "SingleServiceModify" }
    if yname == "service-multi" { return "ServiceMulti" }
    return ""
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetSegmentPath() string {
    return "change-of-authorization-statistics"
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "account-logon" {
        return &changeOfAuthorizationStatistics.AccountLogon
    }
    if childYangName == "account-logoff" {
        return &changeOfAuthorizationStatistics.AccountLogoff
    }
    if childYangName == "account-update" {
        return &changeOfAuthorizationStatistics.AccountUpdate
    }
    if childYangName == "session-disconnect" {
        return &changeOfAuthorizationStatistics.SessionDisconnect
    }
    if childYangName == "single-service-logon" {
        return &changeOfAuthorizationStatistics.SingleServiceLogon
    }
    if childYangName == "single-service-logoff" {
        return &changeOfAuthorizationStatistics.SingleServiceLogoff
    }
    if childYangName == "single-service-modify" {
        return &changeOfAuthorizationStatistics.SingleServiceModify
    }
    if childYangName == "service-multi" {
        return &changeOfAuthorizationStatistics.ServiceMulti
    }
    return nil
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["account-logon"] = &changeOfAuthorizationStatistics.AccountLogon
    children["account-logoff"] = &changeOfAuthorizationStatistics.AccountLogoff
    children["account-update"] = &changeOfAuthorizationStatistics.AccountUpdate
    children["session-disconnect"] = &changeOfAuthorizationStatistics.SessionDisconnect
    children["single-service-logon"] = &changeOfAuthorizationStatistics.SingleServiceLogon
    children["single-service-logoff"] = &changeOfAuthorizationStatistics.SingleServiceLogoff
    children["single-service-modify"] = &changeOfAuthorizationStatistics.SingleServiceModify
    children["service-multi"] = &changeOfAuthorizationStatistics.ServiceMulti
    return children
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unknown-account-cmd-resps"] = changeOfAuthorizationStatistics.UnknownAccountCmdResps
    leafs["unknown-service-cmd-resps"] = changeOfAuthorizationStatistics.UnknownServiceCmdResps
    leafs["unknown-cmd-resps"] = changeOfAuthorizationStatistics.UnknownCmdResps
    leafs["attr-list-retrieve-failure-resps"] = changeOfAuthorizationStatistics.AttrListRetrieveFailureResps
    leafs["resp-send-failure"] = changeOfAuthorizationStatistics.RespSendFailure
    leafs["internal-err-resps"] = changeOfAuthorizationStatistics.InternalErrResps
    leafs["service-profile-push-failure-resps"] = changeOfAuthorizationStatistics.ServiceProfilePushFailureResps
    leafs["no-cmd-resps"] = changeOfAuthorizationStatistics.NoCmdResps
    leafs["no-session-found-resps"] = changeOfAuthorizationStatistics.NoSessionFoundResps
    leafs["no-session-peer-resps"] = changeOfAuthorizationStatistics.NoSessionPeerResps
    return leafs
}

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetYangName() string { return "change-of-authorization-statistics" }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) SetParent(parent types.Entity) { changeOfAuthorizationStatistics.parent = parent }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetParent() types.Entity { return changeOfAuthorizationStatistics.parent }

func (changeOfAuthorizationStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics) GetParentYangName() string { return "aggregate-accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon
// Account logon request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetFilter() yfilter.YFilter { return accountLogon.YFilter }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) SetFilter(yf yfilter.YFilter) { accountLogon.YFilter = yf }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetSegmentPath() string {
    return "account-logon"
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountLogon.ReceivedRequests
    leafs["acknowledged-requests"] = accountLogon.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountLogon.NonAcknowledgedRequests
    return leafs
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetBundleName() string { return "cisco_ios_xr" }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetYangName() string { return "account-logon" }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) SetParent(parent types.Entity) { accountLogon.parent = parent }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetParent() types.Entity { return accountLogon.parent }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogon) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff
// Account logoff request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetFilter() yfilter.YFilter { return accountLogoff.YFilter }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) SetFilter(yf yfilter.YFilter) { accountLogoff.YFilter = yf }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetSegmentPath() string {
    return "account-logoff"
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountLogoff.ReceivedRequests
    leafs["acknowledged-requests"] = accountLogoff.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountLogoff.NonAcknowledgedRequests
    return leafs
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetBundleName() string { return "cisco_ios_xr" }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetYangName() string { return "account-logoff" }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) SetParent(parent types.Entity) { accountLogoff.parent = parent }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetParent() types.Entity { return accountLogoff.parent }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountLogoff) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate
// Account update request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetFilter() yfilter.YFilter { return accountUpdate.YFilter }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) SetFilter(yf yfilter.YFilter) { accountUpdate.YFilter = yf }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetSegmentPath() string {
    return "account-update"
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountUpdate.ReceivedRequests
    leafs["acknowledged-requests"] = accountUpdate.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountUpdate.NonAcknowledgedRequests
    return leafs
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetBundleName() string { return "cisco_ios_xr" }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetYangName() string { return "account-update" }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) SetParent(parent types.Entity) { accountUpdate.parent = parent }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetParent() types.Entity { return accountUpdate.parent }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_AccountUpdate) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect
// Session disconnect request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetFilter() yfilter.YFilter { return sessionDisconnect.YFilter }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) SetFilter(yf yfilter.YFilter) { sessionDisconnect.YFilter = yf }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetSegmentPath() string {
    return "session-disconnect"
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = sessionDisconnect.ReceivedRequests
    leafs["acknowledged-requests"] = sessionDisconnect.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = sessionDisconnect.NonAcknowledgedRequests
    return leafs
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetYangName() string { return "session-disconnect" }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) SetParent(parent types.Entity) { sessionDisconnect.parent = parent }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetParent() types.Entity { return sessionDisconnect.parent }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SessionDisconnect) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon
// Service logon request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetFilter() yfilter.YFilter { return singleServiceLogon.YFilter }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) SetFilter(yf yfilter.YFilter) { singleServiceLogon.YFilter = yf }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetSegmentPath() string {
    return "single-service-logon"
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceLogon.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceLogon.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceLogon.NonAcknowledgedRequests
    return leafs
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetYangName() string { return "single-service-logon" }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) SetParent(parent types.Entity) { singleServiceLogon.parent = parent }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetParent() types.Entity { return singleServiceLogon.parent }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogon) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff
// Single Service logoff request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetFilter() yfilter.YFilter { return singleServiceLogoff.YFilter }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) SetFilter(yf yfilter.YFilter) { singleServiceLogoff.YFilter = yf }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetSegmentPath() string {
    return "single-service-logoff"
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceLogoff.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceLogoff.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceLogoff.NonAcknowledgedRequests
    return leafs
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetYangName() string { return "single-service-logoff" }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) SetParent(parent types.Entity) { singleServiceLogoff.parent = parent }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetParent() types.Entity { return singleServiceLogoff.parent }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceLogoff) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify
// Single Service Modify request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetFilter() yfilter.YFilter { return singleServiceModify.YFilter }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) SetFilter(yf yfilter.YFilter) { singleServiceModify.YFilter = yf }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetSegmentPath() string {
    return "single-service-modify"
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceModify.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceModify.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceModify.NonAcknowledgedRequests
    return leafs
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetYangName() string { return "single-service-modify" }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) SetParent(parent types.Entity) { singleServiceModify.parent = parent }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetParent() types.Entity { return singleServiceModify.parent }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_SingleServiceModify) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti
// MA-CoA Service request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetFilter() yfilter.YFilter { return serviceMulti.YFilter }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) SetFilter(yf yfilter.YFilter) { serviceMulti.YFilter = yf }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetSegmentPath() string {
    return "service-multi"
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = serviceMulti.ReceivedRequests
    leafs["acknowledged-requests"] = serviceMulti.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = serviceMulti.NonAcknowledgedRequests
    return leafs
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetBundleName() string { return "cisco_ios_xr" }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetYangName() string { return "service-multi" }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) SetParent(parent types.Entity) { serviceMulti.parent = parent }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetParent() types.Entity { return serviceMulti.parent }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_ChangeOfAuthorizationStatistics_ServiceMulti) GetParentYangName() string { return "change-of-authorization-statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics
// List of stats for Mobility
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Request send success. The type is interface{} with range:
    // 0..18446744073709551615.
    SendRequestSuccesses interface{}

    // Request send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    SendRequestFailures interface{}

    // Response receive success. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceiveResponseSuccesses interface{}

    // Response receive failures. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceiveResponseFailures interface{}
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetFilter() yfilter.YFilter { return mobilityStatistics.YFilter }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) SetFilter(yf yfilter.YFilter) { mobilityStatistics.YFilter = yf }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetGoName(yname string) string {
    if yname == "send-request-successes" { return "SendRequestSuccesses" }
    if yname == "send-request-failures" { return "SendRequestFailures" }
    if yname == "receive-response-successes" { return "ReceiveResponseSuccesses" }
    if yname == "receive-response-failures" { return "ReceiveResponseFailures" }
    return ""
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetSegmentPath() string {
    return "mobility-statistics"
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["send-request-successes"] = mobilityStatistics.SendRequestSuccesses
    leafs["send-request-failures"] = mobilityStatistics.SendRequestFailures
    leafs["receive-response-successes"] = mobilityStatistics.ReceiveResponseSuccesses
    leafs["receive-response-failures"] = mobilityStatistics.ReceiveResponseFailures
    return leafs
}

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetYangName() string { return "mobility-statistics" }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) SetParent(parent types.Entity) { mobilityStatistics.parent = parent }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetParent() types.Entity { return mobilityStatistics.parent }

func (mobilityStatistics *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateAccountingStatsAll_MobilityStatistics) GetParentYangName() string { return "aggregate-accounting-stats-all" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting
// Accounting statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Active sessions. The type is interface{} with range: 0..4294967295.
    ActiveSessions interface{}

    // Started sessions. The type is interface{} with range:
    // 0..18446744073709551615.
    StartedSessions interface{}

    // Stopped sessions. The type is interface{} with range:
    // 0..18446744073709551615.
    StoppedSessions interface{}

    // Policy plane errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    PolicyPlaneErroredRequests interface{}

    // Policy plane unknown requests. The type is interface{} with range:
    // 0..18446744073709551615.
    PolicyPlaneUnknownRequests interface{}

    // Start statistics.
    Start Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start

    // Stop statistics.
    Stop Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop

    // Interim statistics.
    Interim Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim

    // Pass-through statistics.
    PassThrough Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough

    // Update statistics.
    Update Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update

    // Interim inflight details.
    InterimInflight Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight
}

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetFilter() yfilter.YFilter { return accounting.YFilter }

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) SetFilter(yf yfilter.YFilter) { accounting.YFilter = yf }

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetGoName(yname string) string {
    if yname == "active-sessions" { return "ActiveSessions" }
    if yname == "started-sessions" { return "StartedSessions" }
    if yname == "stopped-sessions" { return "StoppedSessions" }
    if yname == "policy-plane-errored-requests" { return "PolicyPlaneErroredRequests" }
    if yname == "policy-plane-unknown-requests" { return "PolicyPlaneUnknownRequests" }
    if yname == "start" { return "Start" }
    if yname == "stop" { return "Stop" }
    if yname == "interim" { return "Interim" }
    if yname == "pass-through" { return "PassThrough" }
    if yname == "update" { return "Update" }
    if yname == "interim-inflight" { return "InterimInflight" }
    return ""
}

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetSegmentPath() string {
    return "accounting"
}

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "start" {
        return &accounting.Start
    }
    if childYangName == "stop" {
        return &accounting.Stop
    }
    if childYangName == "interim" {
        return &accounting.Interim
    }
    if childYangName == "pass-through" {
        return &accounting.PassThrough
    }
    if childYangName == "update" {
        return &accounting.Update
    }
    if childYangName == "interim-inflight" {
        return &accounting.InterimInflight
    }
    return nil
}

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["start"] = &accounting.Start
    children["stop"] = &accounting.Stop
    children["interim"] = &accounting.Interim
    children["pass-through"] = &accounting.PassThrough
    children["update"] = &accounting.Update
    children["interim-inflight"] = &accounting.InterimInflight
    return children
}

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-sessions"] = accounting.ActiveSessions
    leafs["started-sessions"] = accounting.StartedSessions
    leafs["stopped-sessions"] = accounting.StoppedSessions
    leafs["policy-plane-errored-requests"] = accounting.PolicyPlaneErroredRequests
    leafs["policy-plane-unknown-requests"] = accounting.PolicyPlaneUnknownRequests
    return leafs
}

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetBundleName() string { return "cisco_ios_xr" }

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetYangName() string { return "accounting" }

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) SetParent(parent types.Entity) { accounting.parent = parent }

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetParent() types.Entity { return accounting.parent }

func (accounting *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start
// Start statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetFilter() yfilter.YFilter { return start.YFilter }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) SetFilter(yf yfilter.YFilter) { start.YFilter = yf }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetSegmentPath() string {
    return "start"
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = start.ReceivedRequests
    leafs["errored-requests"] = start.ErroredRequests
    leafs["aaa-errored-requests"] = start.AaaErroredRequests
    leafs["aaa-sent-requests"] = start.AaaSentRequests
    leafs["aaa-succeeded-responses"] = start.AaaSucceededResponses
    leafs["aaa-failed-responses"] = start.AaaFailedResponses
    return leafs
}

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetBundleName() string { return "cisco_ios_xr" }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetYangName() string { return "start" }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) SetParent(parent types.Entity) { start.parent = parent }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetParent() types.Entity { return start.parent }

func (start *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Start) GetParentYangName() string { return "accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop
// Stop statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetFilter() yfilter.YFilter { return stop.YFilter }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) SetFilter(yf yfilter.YFilter) { stop.YFilter = yf }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetSegmentPath() string {
    return "stop"
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = stop.ReceivedRequests
    leafs["errored-requests"] = stop.ErroredRequests
    leafs["aaa-errored-requests"] = stop.AaaErroredRequests
    leafs["aaa-sent-requests"] = stop.AaaSentRequests
    leafs["aaa-succeeded-responses"] = stop.AaaSucceededResponses
    leafs["aaa-failed-responses"] = stop.AaaFailedResponses
    return leafs
}

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetBundleName() string { return "cisco_ios_xr" }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetYangName() string { return "stop" }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) SetParent(parent types.Entity) { stop.parent = parent }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetParent() types.Entity { return stop.parent }

func (stop *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Stop) GetParentYangName() string { return "accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim
// Interim statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetFilter() yfilter.YFilter { return interim.YFilter }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) SetFilter(yf yfilter.YFilter) { interim.YFilter = yf }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetSegmentPath() string {
    return "interim"
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = interim.ReceivedRequests
    leafs["errored-requests"] = interim.ErroredRequests
    leafs["aaa-errored-requests"] = interim.AaaErroredRequests
    leafs["aaa-sent-requests"] = interim.AaaSentRequests
    leafs["aaa-succeeded-responses"] = interim.AaaSucceededResponses
    leafs["aaa-failed-responses"] = interim.AaaFailedResponses
    return leafs
}

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetBundleName() string { return "cisco_ios_xr" }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetYangName() string { return "interim" }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) SetParent(parent types.Entity) { interim.parent = parent }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetParent() types.Entity { return interim.parent }

func (interim *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Interim) GetParentYangName() string { return "accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough
// Pass-through statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetFilter() yfilter.YFilter { return passThrough.YFilter }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) SetFilter(yf yfilter.YFilter) { passThrough.YFilter = yf }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetSegmentPath() string {
    return "pass-through"
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = passThrough.ReceivedRequests
    leafs["errored-requests"] = passThrough.ErroredRequests
    leafs["aaa-errored-requests"] = passThrough.AaaErroredRequests
    leafs["aaa-sent-requests"] = passThrough.AaaSentRequests
    leafs["aaa-succeeded-responses"] = passThrough.AaaSucceededResponses
    leafs["aaa-failed-responses"] = passThrough.AaaFailedResponses
    return leafs
}

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetBundleName() string { return "cisco_ios_xr" }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetYangName() string { return "pass-through" }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) SetParent(parent types.Entity) { passThrough.parent = parent }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetParent() types.Entity { return passThrough.parent }

func (passThrough *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_PassThrough) GetParentYangName() string { return "accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update
// Update statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ErroredRequests interface{}

    // AAA errored requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaErroredRequests interface{}

    // AAA requests sent. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSentRequests interface{}

    // AAA succeeded responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaSucceededResponses interface{}

    // AAA failed responses. The type is interface{} with range:
    // 0..18446744073709551615.
    AaaFailedResponses interface{}
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetFilter() yfilter.YFilter { return update.YFilter }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) SetFilter(yf yfilter.YFilter) { update.YFilter = yf }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "errored-requests" { return "ErroredRequests" }
    if yname == "aaa-errored-requests" { return "AaaErroredRequests" }
    if yname == "aaa-sent-requests" { return "AaaSentRequests" }
    if yname == "aaa-succeeded-responses" { return "AaaSucceededResponses" }
    if yname == "aaa-failed-responses" { return "AaaFailedResponses" }
    return ""
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetSegmentPath() string {
    return "update"
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = update.ReceivedRequests
    leafs["errored-requests"] = update.ErroredRequests
    leafs["aaa-errored-requests"] = update.AaaErroredRequests
    leafs["aaa-sent-requests"] = update.AaaSentRequests
    leafs["aaa-succeeded-responses"] = update.AaaSucceededResponses
    leafs["aaa-failed-responses"] = update.AaaFailedResponses
    return leafs
}

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetBundleName() string { return "cisco_ios_xr" }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetYangName() string { return "update" }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) SetParent(parent types.Entity) { update.parent = parent }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetParent() types.Entity { return update.parent }

func (update *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_Update) GetParentYangName() string { return "accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight
// Interim inflight details
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Quota exhausts. The type is interface{} with range: 0..4294967295.
    QuotaExhausts interface{}

    // Denied requests. The type is interface{} with range: 0..4294967295.
    DeniedRequests interface{}

    // Accepted requests. The type is interface{} with range: 0..4294967295.
    AcceptedRequests interface{}

    // Total quota of requests. The type is interface{} with range: 0..4294967295.
    TotalQuotaOfRequests interface{}

    // Remaining quota of requests. The type is interface{} with range:
    // 0..4294967295.
    RemainingQuotaOfRequests interface{}

    // Low water mark quota of requests. The type is interface{} with range:
    // 0..4294967295.
    LowWaterMarkQuotaOfRequests interface{}
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetFilter() yfilter.YFilter { return interimInflight.YFilter }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) SetFilter(yf yfilter.YFilter) { interimInflight.YFilter = yf }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetGoName(yname string) string {
    if yname == "quota-exhausts" { return "QuotaExhausts" }
    if yname == "denied-requests" { return "DeniedRequests" }
    if yname == "accepted-requests" { return "AcceptedRequests" }
    if yname == "total-quota-of-requests" { return "TotalQuotaOfRequests" }
    if yname == "remaining-quota-of-requests" { return "RemainingQuotaOfRequests" }
    if yname == "low-water-mark-quota-of-requests" { return "LowWaterMarkQuotaOfRequests" }
    return ""
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetSegmentPath() string {
    return "interim-inflight"
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["quota-exhausts"] = interimInflight.QuotaExhausts
    leafs["denied-requests"] = interimInflight.DeniedRequests
    leafs["accepted-requests"] = interimInflight.AcceptedRequests
    leafs["total-quota-of-requests"] = interimInflight.TotalQuotaOfRequests
    leafs["remaining-quota-of-requests"] = interimInflight.RemainingQuotaOfRequests
    leafs["low-water-mark-quota-of-requests"] = interimInflight.LowWaterMarkQuotaOfRequests
    return leafs
}

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetBundleName() string { return "cisco_ios_xr" }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetYangName() string { return "interim-inflight" }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) SetParent(parent types.Entity) { interimInflight.parent = parent }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetParent() types.Entity { return interimInflight.parent }

func (interimInflight *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Accounting_InterimInflight) GetParentYangName() string { return "accounting" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility
// Mobility statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Request send success. The type is interface{} with range:
    // 0..18446744073709551615.
    SendRequestSuccesses interface{}

    // Request send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    SendRequestFailures interface{}

    // Response receive success. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceiveResponseSuccesses interface{}

    // Response receive failures. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceiveResponseFailures interface{}
}

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetFilter() yfilter.YFilter { return mobility.YFilter }

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) SetFilter(yf yfilter.YFilter) { mobility.YFilter = yf }

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetGoName(yname string) string {
    if yname == "send-request-successes" { return "SendRequestSuccesses" }
    if yname == "send-request-failures" { return "SendRequestFailures" }
    if yname == "receive-response-successes" { return "ReceiveResponseSuccesses" }
    if yname == "receive-response-failures" { return "ReceiveResponseFailures" }
    return ""
}

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetSegmentPath() string {
    return "mobility"
}

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["send-request-successes"] = mobility.SendRequestSuccesses
    leafs["send-request-failures"] = mobility.SendRequestFailures
    leafs["receive-response-successes"] = mobility.ReceiveResponseSuccesses
    leafs["receive-response-failures"] = mobility.ReceiveResponseFailures
    return leafs
}

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetBundleName() string { return "cisco_ios_xr" }

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetYangName() string { return "mobility" }

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) SetParent(parent types.Entity) { mobility.parent = parent }

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetParent() types.Entity { return mobility.parent }

func (mobility *Subscriber_Manager_Nodes_Node_Statistics_Aaa_Mobility) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization
// Aggregate change of authorization (COA)
// statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Responses to unknown account command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownAccountCmdResps interface{}

    // Responses to unknown service command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownServiceCmdResps interface{}

    // Responses to unknown command. The type is interface{} with range:
    // 0..18446744073709551615.
    UnknownCmdResps interface{}

    // Responses to attribute list failure errors. The type is interface{} with
    // range: 0..18446744073709551615.
    AttrListRetrieveFailureResps interface{}

    // Response send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    RespSendFailure interface{}

    // Responses to internal error. The type is interface{} with range:
    // 0..18446744073709551615.
    InternalErrResps interface{}

    // Responses to service profile push failures. The type is interface{} with
    // range: 0..18446744073709551615.
    ServiceProfilePushFailureResps interface{}

    // Responses empty (no command) COA request. The type is interface{} with
    // range: 0..18446744073709551615.
    NoCmdResps interface{}

    // Responses to COA with unknown session identifier. The type is interface{}
    // with range: 0..18446744073709551615.
    NoSessionFoundResps interface{}

    // Responses to session peer not found error. The type is interface{} with
    // range: 0..18446744073709551615.
    NoSessionPeerResps interface{}

    // Account logon request statistics.
    AccountLogon Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon

    // Account logoff request statistics.
    AccountLogoff Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff

    // Account update request statistics.
    AccountUpdate Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate

    // Session disconnect request statistics.
    SessionDisconnect Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect

    // Service logon request statistics.
    SingleServiceLogon Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon

    // Single Service logoff request statistics.
    SingleServiceLogoff Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff

    // Single Service Modify request statistics.
    SingleServiceModify Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify

    // MA-CoA Service request statistics.
    ServiceMulti Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti
}

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetFilter() yfilter.YFilter { return aggregateChangeOfAuthorization.YFilter }

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) SetFilter(yf yfilter.YFilter) { aggregateChangeOfAuthorization.YFilter = yf }

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetGoName(yname string) string {
    if yname == "unknown-account-cmd-resps" { return "UnknownAccountCmdResps" }
    if yname == "unknown-service-cmd-resps" { return "UnknownServiceCmdResps" }
    if yname == "unknown-cmd-resps" { return "UnknownCmdResps" }
    if yname == "attr-list-retrieve-failure-resps" { return "AttrListRetrieveFailureResps" }
    if yname == "resp-send-failure" { return "RespSendFailure" }
    if yname == "internal-err-resps" { return "InternalErrResps" }
    if yname == "service-profile-push-failure-resps" { return "ServiceProfilePushFailureResps" }
    if yname == "no-cmd-resps" { return "NoCmdResps" }
    if yname == "no-session-found-resps" { return "NoSessionFoundResps" }
    if yname == "no-session-peer-resps" { return "NoSessionPeerResps" }
    if yname == "account-logon" { return "AccountLogon" }
    if yname == "account-logoff" { return "AccountLogoff" }
    if yname == "account-update" { return "AccountUpdate" }
    if yname == "session-disconnect" { return "SessionDisconnect" }
    if yname == "single-service-logon" { return "SingleServiceLogon" }
    if yname == "single-service-logoff" { return "SingleServiceLogoff" }
    if yname == "single-service-modify" { return "SingleServiceModify" }
    if yname == "service-multi" { return "ServiceMulti" }
    return ""
}

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetSegmentPath() string {
    return "aggregate-change-of-authorization"
}

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "account-logon" {
        return &aggregateChangeOfAuthorization.AccountLogon
    }
    if childYangName == "account-logoff" {
        return &aggregateChangeOfAuthorization.AccountLogoff
    }
    if childYangName == "account-update" {
        return &aggregateChangeOfAuthorization.AccountUpdate
    }
    if childYangName == "session-disconnect" {
        return &aggregateChangeOfAuthorization.SessionDisconnect
    }
    if childYangName == "single-service-logon" {
        return &aggregateChangeOfAuthorization.SingleServiceLogon
    }
    if childYangName == "single-service-logoff" {
        return &aggregateChangeOfAuthorization.SingleServiceLogoff
    }
    if childYangName == "single-service-modify" {
        return &aggregateChangeOfAuthorization.SingleServiceModify
    }
    if childYangName == "service-multi" {
        return &aggregateChangeOfAuthorization.ServiceMulti
    }
    return nil
}

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["account-logon"] = &aggregateChangeOfAuthorization.AccountLogon
    children["account-logoff"] = &aggregateChangeOfAuthorization.AccountLogoff
    children["account-update"] = &aggregateChangeOfAuthorization.AccountUpdate
    children["session-disconnect"] = &aggregateChangeOfAuthorization.SessionDisconnect
    children["single-service-logon"] = &aggregateChangeOfAuthorization.SingleServiceLogon
    children["single-service-logoff"] = &aggregateChangeOfAuthorization.SingleServiceLogoff
    children["single-service-modify"] = &aggregateChangeOfAuthorization.SingleServiceModify
    children["service-multi"] = &aggregateChangeOfAuthorization.ServiceMulti
    return children
}

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unknown-account-cmd-resps"] = aggregateChangeOfAuthorization.UnknownAccountCmdResps
    leafs["unknown-service-cmd-resps"] = aggregateChangeOfAuthorization.UnknownServiceCmdResps
    leafs["unknown-cmd-resps"] = aggregateChangeOfAuthorization.UnknownCmdResps
    leafs["attr-list-retrieve-failure-resps"] = aggregateChangeOfAuthorization.AttrListRetrieveFailureResps
    leafs["resp-send-failure"] = aggregateChangeOfAuthorization.RespSendFailure
    leafs["internal-err-resps"] = aggregateChangeOfAuthorization.InternalErrResps
    leafs["service-profile-push-failure-resps"] = aggregateChangeOfAuthorization.ServiceProfilePushFailureResps
    leafs["no-cmd-resps"] = aggregateChangeOfAuthorization.NoCmdResps
    leafs["no-session-found-resps"] = aggregateChangeOfAuthorization.NoSessionFoundResps
    leafs["no-session-peer-resps"] = aggregateChangeOfAuthorization.NoSessionPeerResps
    return leafs
}

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetYangName() string { return "aggregate-change-of-authorization" }

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) SetParent(parent types.Entity) { aggregateChangeOfAuthorization.parent = parent }

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetParent() types.Entity { return aggregateChangeOfAuthorization.parent }

func (aggregateChangeOfAuthorization *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization) GetParentYangName() string { return "aaa" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon
// Account logon request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetFilter() yfilter.YFilter { return accountLogon.YFilter }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) SetFilter(yf yfilter.YFilter) { accountLogon.YFilter = yf }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetSegmentPath() string {
    return "account-logon"
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountLogon.ReceivedRequests
    leafs["acknowledged-requests"] = accountLogon.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountLogon.NonAcknowledgedRequests
    return leafs
}

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetBundleName() string { return "cisco_ios_xr" }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetYangName() string { return "account-logon" }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) SetParent(parent types.Entity) { accountLogon.parent = parent }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetParent() types.Entity { return accountLogon.parent }

func (accountLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogon) GetParentYangName() string { return "aggregate-change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff
// Account logoff request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetFilter() yfilter.YFilter { return accountLogoff.YFilter }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) SetFilter(yf yfilter.YFilter) { accountLogoff.YFilter = yf }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetSegmentPath() string {
    return "account-logoff"
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountLogoff.ReceivedRequests
    leafs["acknowledged-requests"] = accountLogoff.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountLogoff.NonAcknowledgedRequests
    return leafs
}

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetBundleName() string { return "cisco_ios_xr" }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetYangName() string { return "account-logoff" }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) SetParent(parent types.Entity) { accountLogoff.parent = parent }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetParent() types.Entity { return accountLogoff.parent }

func (accountLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountLogoff) GetParentYangName() string { return "aggregate-change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate
// Account update request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetFilter() yfilter.YFilter { return accountUpdate.YFilter }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) SetFilter(yf yfilter.YFilter) { accountUpdate.YFilter = yf }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetSegmentPath() string {
    return "account-update"
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = accountUpdate.ReceivedRequests
    leafs["acknowledged-requests"] = accountUpdate.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = accountUpdate.NonAcknowledgedRequests
    return leafs
}

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetBundleName() string { return "cisco_ios_xr" }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetYangName() string { return "account-update" }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) SetParent(parent types.Entity) { accountUpdate.parent = parent }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetParent() types.Entity { return accountUpdate.parent }

func (accountUpdate *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_AccountUpdate) GetParentYangName() string { return "aggregate-change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect
// Session disconnect request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetFilter() yfilter.YFilter { return sessionDisconnect.YFilter }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) SetFilter(yf yfilter.YFilter) { sessionDisconnect.YFilter = yf }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetSegmentPath() string {
    return "session-disconnect"
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = sessionDisconnect.ReceivedRequests
    leafs["acknowledged-requests"] = sessionDisconnect.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = sessionDisconnect.NonAcknowledgedRequests
    return leafs
}

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetYangName() string { return "session-disconnect" }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) SetParent(parent types.Entity) { sessionDisconnect.parent = parent }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetParent() types.Entity { return sessionDisconnect.parent }

func (sessionDisconnect *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SessionDisconnect) GetParentYangName() string { return "aggregate-change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon
// Service logon request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetFilter() yfilter.YFilter { return singleServiceLogon.YFilter }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) SetFilter(yf yfilter.YFilter) { singleServiceLogon.YFilter = yf }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetSegmentPath() string {
    return "single-service-logon"
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceLogon.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceLogon.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceLogon.NonAcknowledgedRequests
    return leafs
}

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetYangName() string { return "single-service-logon" }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) SetParent(parent types.Entity) { singleServiceLogon.parent = parent }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetParent() types.Entity { return singleServiceLogon.parent }

func (singleServiceLogon *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogon) GetParentYangName() string { return "aggregate-change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff
// Single Service logoff request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetFilter() yfilter.YFilter { return singleServiceLogoff.YFilter }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) SetFilter(yf yfilter.YFilter) { singleServiceLogoff.YFilter = yf }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetSegmentPath() string {
    return "single-service-logoff"
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceLogoff.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceLogoff.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceLogoff.NonAcknowledgedRequests
    return leafs
}

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetYangName() string { return "single-service-logoff" }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) SetParent(parent types.Entity) { singleServiceLogoff.parent = parent }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetParent() types.Entity { return singleServiceLogoff.parent }

func (singleServiceLogoff *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceLogoff) GetParentYangName() string { return "aggregate-change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify
// Single Service Modify request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetFilter() yfilter.YFilter { return singleServiceModify.YFilter }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) SetFilter(yf yfilter.YFilter) { singleServiceModify.YFilter = yf }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetSegmentPath() string {
    return "single-service-modify"
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = singleServiceModify.ReceivedRequests
    leafs["acknowledged-requests"] = singleServiceModify.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = singleServiceModify.NonAcknowledgedRequests
    return leafs
}

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetBundleName() string { return "cisco_ios_xr" }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetYangName() string { return "single-service-modify" }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) SetParent(parent types.Entity) { singleServiceModify.parent = parent }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetParent() types.Entity { return singleServiceModify.parent }

func (singleServiceModify *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_SingleServiceModify) GetParentYangName() string { return "aggregate-change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti
// MA-CoA Service request statistics
type Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Received requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ReceivedRequests interface{}

    // Acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    AcknowledgedRequests interface{}

    // Non acknowledged requests. The type is interface{} with range:
    // 0..18446744073709551615.
    NonAcknowledgedRequests interface{}
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetFilter() yfilter.YFilter { return serviceMulti.YFilter }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) SetFilter(yf yfilter.YFilter) { serviceMulti.YFilter = yf }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetGoName(yname string) string {
    if yname == "received-requests" { return "ReceivedRequests" }
    if yname == "acknowledged-requests" { return "AcknowledgedRequests" }
    if yname == "non-acknowledged-requests" { return "NonAcknowledgedRequests" }
    return ""
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetSegmentPath() string {
    return "service-multi"
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["received-requests"] = serviceMulti.ReceivedRequests
    leafs["acknowledged-requests"] = serviceMulti.AcknowledgedRequests
    leafs["non-acknowledged-requests"] = serviceMulti.NonAcknowledgedRequests
    return leafs
}

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetBundleName() string { return "cisco_ios_xr" }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetYangName() string { return "service-multi" }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) SetParent(parent types.Entity) { serviceMulti.parent = parent }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetParent() types.Entity { return serviceMulti.parent }

func (serviceMulti *Subscriber_Manager_Nodes_Node_Statistics_Aaa_AggregateChangeOfAuthorization_ServiceMulti) GetParentYangName() string { return "aggregate-change-of-authorization" }

// Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary
// Aggregate summary of statistics
type Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber control policy not applied on interface. The type is interface{}
    // with range: 0..18446744073709551615.
    NoSubscriberControlPolicyOnInterface interface{}

    // No control policy class match during subscriber start. The type is
    // interface{} with range: 0..18446744073709551615.
    NoClassMatchInStartRequest interface{}

    // NAS port attribute format warnings. The type is interface{} with range:
    // 0..18446744073709551615.
    NasPortAttributeFormatWarnings interface{}

    // NAS port ID attribute format warnings. The type is interface{} with range:
    // 0..18446744073709551615.
    NasPortIdAttributeFormatWarnings interface{}

    // Destination station ID attribute format warnings. The type is interface{}
    // with range: 0..18446744073709551615.
    DestinationStationIdAttributeFormatWarnings interface{}

    // Calling station ID attribute format warnings. The type is interface{} with
    // range: 0..18446744073709551615.
    CallingStationIdAttributeFormatWarnings interface{}

    // Username attribute format warnings. The type is interface{} with range:
    // 0..18446744073709551615.
    UsernameAttributeFormatWarnings interface{}

    // User profiles installed. The type is interface{} with range:
    // 0..18446744073709551615.
    InstallUserProfiles interface{}

    // User profile install errors. The type is interface{} with range:
    // 0..18446744073709551615.
    UserProfileInstallErrors interface{}

    // User profile removals. The type is interface{} with range:
    // 0..18446744073709551615.
    UserProfileRemovals interface{}

    // User profile errors. The type is interface{} with range:
    // 0..18446744073709551615.
    UserProfileErrors interface{}

    // Session Disconnect Quota Exhausts. The type is interface{} with range:
    // 0..18446744073709551615.
    SessDiscQuotaExhausts interface{}

    // Session Disconnect Request Queued, no quota. The type is interface{} with
    // range: 0..18446744073709551615.
    SessDiscNoQuota interface{}

    // Session Disconnect Request Accepted, quota available. The type is
    // interface{} with range: 0..18446744073709551615.
    SessDiscQuotaAvail interface{}

    // Session Disconnect Requests not Dequeued, reconciliation in progress. The
    // type is interface{} with range: 0..18446744073709551615.
    SessDiscReconIp interface{}

    // Session Disconnect Requests not Dequeued, no quota. The type is interface{}
    // with range: 0..18446744073709551615.
    SessDiscNoneStarted interface{}

    // Session Disconnect Quota. The type is interface{} with range:
    // 0..4294967295.
    SessDiscQuota interface{}

    // Session Disconnect Quota Remaining. The type is interface{} with range:
    // 0..4294967295.
    SessDiscQuotaRemaining interface{}

    // Session Disconnect Requests Queued. The type is interface{} with range:
    // 0..4294967295.
    SessDiscQCount interface{}
}

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetFilter() yfilter.YFilter { return aggregateSummary.YFilter }

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) SetFilter(yf yfilter.YFilter) { aggregateSummary.YFilter = yf }

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetGoName(yname string) string {
    if yname == "no-subscriber-control-policy-on-interface" { return "NoSubscriberControlPolicyOnInterface" }
    if yname == "no-class-match-in-start-request" { return "NoClassMatchInStartRequest" }
    if yname == "nas-port-attribute-format-warnings" { return "NasPortAttributeFormatWarnings" }
    if yname == "nas-port-id-attribute-format-warnings" { return "NasPortIdAttributeFormatWarnings" }
    if yname == "destination-station-id-attribute-format-warnings" { return "DestinationStationIdAttributeFormatWarnings" }
    if yname == "calling-station-id-attribute-format-warnings" { return "CallingStationIdAttributeFormatWarnings" }
    if yname == "username-attribute-format-warnings" { return "UsernameAttributeFormatWarnings" }
    if yname == "install-user-profiles" { return "InstallUserProfiles" }
    if yname == "user-profile-install-errors" { return "UserProfileInstallErrors" }
    if yname == "user-profile-removals" { return "UserProfileRemovals" }
    if yname == "user-profile-errors" { return "UserProfileErrors" }
    if yname == "sess-disc-quota-exhausts" { return "SessDiscQuotaExhausts" }
    if yname == "sess-disc-no-quota" { return "SessDiscNoQuota" }
    if yname == "sess-disc-quota-avail" { return "SessDiscQuotaAvail" }
    if yname == "sess-disc-recon-ip" { return "SessDiscReconIp" }
    if yname == "sess-disc-none-started" { return "SessDiscNoneStarted" }
    if yname == "sess-disc-quota" { return "SessDiscQuota" }
    if yname == "sess-disc-quota-remaining" { return "SessDiscQuotaRemaining" }
    if yname == "sess-disc-q-count" { return "SessDiscQCount" }
    return ""
}

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetSegmentPath() string {
    return "aggregate-summary"
}

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-subscriber-control-policy-on-interface"] = aggregateSummary.NoSubscriberControlPolicyOnInterface
    leafs["no-class-match-in-start-request"] = aggregateSummary.NoClassMatchInStartRequest
    leafs["nas-port-attribute-format-warnings"] = aggregateSummary.NasPortAttributeFormatWarnings
    leafs["nas-port-id-attribute-format-warnings"] = aggregateSummary.NasPortIdAttributeFormatWarnings
    leafs["destination-station-id-attribute-format-warnings"] = aggregateSummary.DestinationStationIdAttributeFormatWarnings
    leafs["calling-station-id-attribute-format-warnings"] = aggregateSummary.CallingStationIdAttributeFormatWarnings
    leafs["username-attribute-format-warnings"] = aggregateSummary.UsernameAttributeFormatWarnings
    leafs["install-user-profiles"] = aggregateSummary.InstallUserProfiles
    leafs["user-profile-install-errors"] = aggregateSummary.UserProfileInstallErrors
    leafs["user-profile-removals"] = aggregateSummary.UserProfileRemovals
    leafs["user-profile-errors"] = aggregateSummary.UserProfileErrors
    leafs["sess-disc-quota-exhausts"] = aggregateSummary.SessDiscQuotaExhausts
    leafs["sess-disc-no-quota"] = aggregateSummary.SessDiscNoQuota
    leafs["sess-disc-quota-avail"] = aggregateSummary.SessDiscQuotaAvail
    leafs["sess-disc-recon-ip"] = aggregateSummary.SessDiscReconIp
    leafs["sess-disc-none-started"] = aggregateSummary.SessDiscNoneStarted
    leafs["sess-disc-quota"] = aggregateSummary.SessDiscQuota
    leafs["sess-disc-quota-remaining"] = aggregateSummary.SessDiscQuotaRemaining
    leafs["sess-disc-q-count"] = aggregateSummary.SessDiscQCount
    return leafs
}

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetYangName() string { return "aggregate-summary" }

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) SetParent(parent types.Entity) { aggregateSummary.parent = parent }

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetParent() types.Entity { return aggregateSummary.parent }

func (aggregateSummary *Subscriber_Manager_Nodes_Node_Statistics_AggregateSummary) GetParentYangName() string { return "statistics" }

// Subscriber_Manager_Nodes_Node_Statistics_Srg
// Geo Redundancy statistics
type Subscriber_Manager_Nodes_Node_Statistics_Srg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Txlist Send Triggered. The type is interface{} with range: 0..4294967295.
    TxlistSendTriggered interface{}

    // Txlist Send Failed. The type is interface{} with range: 0..4294967295.
    TxlistSendFailed interface{}

    // Txlist send failed due to not active. The type is interface{} with range:
    // 0..4294967295.
    TxlistSendFailedNotactive interface{}

    // Txlist Send Success. The type is interface{} with range: 0..4294967295.
    ActualTxlistSent interface{}

    // Element already in Txlist. The type is interface{} with range:
    // 0..4294967295.
    AlreadyinTxlist interface{}

    // Txlist Encode. The type is interface{} with range: 0..4294967295.
    TxlistEncode interface{}

    // Txlist encode Failed. The type is interface{} with range: 0..4294967295.
    TxlistEncodeFail interface{}

    // Txlist Create Update Encode. The type is interface{} with range:
    // 0..4294967295.
    CreateUpdateEncode interface{}

    // Txlist Delete Encode. The type is interface{} with range: 0..4294967295.
    DeleteEncode interface{}

    // Txlist Create/update clean callback. The type is interface{} with range:
    // 0..4294967295.
    CreateUpdCleanCallback interface{}

    // Txlist Delete clean callback. The type is interface{} with range:
    // 0..4294967295.
    DeleteCleanCallback interface{}

    // Slave Recieved Sync. The type is interface{} with range: 0..4294967295.
    SlaveRecvEntry interface{}

    // Decode failed on Slave. The type is interface{} with range: 0..4294967295.
    SlaveDecodeFail interface{}

    // Create Update received on slave. The type is interface{} with range:
    // 0..4294967295.
    SlaveCreateUpdate interface{}

    // Delete received on slave. The type is interface{} with range:
    // 0..4294967295.
    SlaveDelete interface{}

    // SRG context allocated. The type is interface{} with range: 0..4294967295.
    SrgContextMalloc interface{}

    // SRG context freed. The type is interface{} with range: 0..4294967295.
    SrgContextFree interface{}

    // Number of SODs Received. The type is interface{} with range: 0..4294967295.
    SodCount interface{}

    // Number of EODs Received. The type is interface{} with range: 0..4294967295.
    EodCount interface{}

    // Number of Replay Requests Within SOD EOD Window. The type is interface{}
    // with range: 0..4294967295.
    SodEodReplayReqCount interface{}

    // Number of Sessions Marked as Invalid Within SOD EOD Window. The type is
    // interface{} with range: 0..4294967295.
    SodEodDirtyMarkCount interface{}

    // Number of Sessions Invalid Deletes Within SOD EOD Window. The type is
    // interface{} with range: 0..4294967295.
    SodEodDirtyDeleteCount interface{}

    // Number of ACKs sent to Srg. The type is interface{} with range:
    // 0..4294967295.
    AckToSrg interface{}

    // Number of NACKs sent to Srg. The type is interface{} with range:
    // 0..4294967295.
    NackToSrg interface{}

    // Number of NACKs Failed to send to Srg. The type is interface{} with range:
    // 0..4294967295.
    NackToSrgFailCnt interface{}

    // Number of Txlist remove all calls. The type is interface{} with range:
    // 0..4294967295.
    TxlistRemoveAll interface{}

    // Number for Txlist delete for sync msg. The type is interface{} with range:
    // 0..4294967295.
    TxlistDelSync interface{}

    // Number of Txlist delete for sync which are not linked. The type is
    // interface{} with range: 0..4294967295.
    TxlistDelSyncNotlinked interface{}

    // Number of Txlist delete for App msg. The type is interface{} with range:
    // 0..4294967295.
    TxlistDelApp interface{}

    // Number of Txlist delete for App which are not linked. The type is
    // interface{} with range: 0..4294967295.
    TxlistDelAppNotlinked interface{}

    // Number of Txlist Cleanup called on Invalid subscriber srg state. The type
    // is interface{} with range: 0..4294967295.
    TxlistCleanInvalidState interface{}

    // Number of Internal errors upon Master Txlist remove all call. The type is
    // interface{} with range: 0..4294967295.
    TxlistRemoveAllInternalError interface{}

    // Flag indicating SRG Flow control enabled or not. The type is bool.
    IsSrgFlowControlEnabled interface{}

    // Maximum no.of inflight sessions allowed. The type is interface{} with
    // range: 0..4294967295.
    MaxInflightSessoinCount interface{}

    // Threshold Limit to resume the flow control. The type is interface{} with
    // range: 0..4294967295.
    FlowControlResumeThreshold interface{}

    // No.of Sessions inflight at given time. The type is interface{} with range:
    // 0..4294967295.
    InflightSessionCount interface{}

    // No.of inflight sessions added. The type is interface{} with range:
    // 0..4294967295.
    InflightAddCount interface{}

    // Inflight Underrun Counter. The type is interface{} with range:
    // 0..4294967295.
    InflightUnderRunCount interface{}

    // Memory Alloc Failures for Inflight Entry. The type is interface{} with
    // range: 0..4294967295.
    InflightAllocFails interface{}

    // Inflight Entry Insert Failures. The type is interface{} with range:
    // 0..4294967295.
    InflightInsertFailures interface{}

    // Inflight Deletes Count. The type is interface{} with range: 0..4294967295.
    InflightDeletes interface{}

    // Inflight Entries not found during delete. The type is interface{} with
    // range: 0..4294967295.
    InflightNotFound interface{}

    // Inflight Entry Delete Failures. The type is interface{} with range:
    // 0..4294967295.
    InflightDeleteFailures interface{}

    // Total No.of times Pause is Enabled. The type is interface{} with range:
    // 0..4294967295.
    TotalPauseCount interface{}

    // Total No.of times Resume is triggered. The type is interface{} with range:
    // 0..4294967295.
    TotalResumeCount interface{}

    // Total No of times Dont send to Txlist. The type is interface{} with range:
    // 0..4294967295.
    TotalDontSendToTxlist interface{}

    // Total No of times SRG Not Master. The type is interface{} with range:
    // 0..4294967295.
    TotalSrgNotMaster interface{}

    // Total No of times Master EOMS Pending. The type is interface{} with range:
    // 0..4294967295.
    TotalMasterEomsPending interface{}

    // Amount of time paused during last flow control window. The type is
    // interface{} with range: 0..18446744073709551615.
    LastPausePeriod interface{}

    // Total Amount of time paused during all flow control windows. The type is
    // interface{} with range: 0..18446744073709551615.
    TotalPauseTime interface{}

    // Timestamp of recent Pause Event. The type is interface{} with range:
    // 0..18446744073709551615.
    LastPauseTime interface{}

    // Timestamp of recent Resume Event. The type is interface{} with range:
    // 0..18446744073709551615.
    LastResumeTime interface{}
}

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetFilter() yfilter.YFilter { return srg.YFilter }

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) SetFilter(yf yfilter.YFilter) { srg.YFilter = yf }

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetGoName(yname string) string {
    if yname == "txlist-send-triggered" { return "TxlistSendTriggered" }
    if yname == "txlist-send-failed" { return "TxlistSendFailed" }
    if yname == "txlist-send-failed-notactive" { return "TxlistSendFailedNotactive" }
    if yname == "actual-txlist-sent" { return "ActualTxlistSent" }
    if yname == "alreadyin-txlist" { return "AlreadyinTxlist" }
    if yname == "txlist-encode" { return "TxlistEncode" }
    if yname == "txlist-encode-fail" { return "TxlistEncodeFail" }
    if yname == "create-update-encode" { return "CreateUpdateEncode" }
    if yname == "delete-encode" { return "DeleteEncode" }
    if yname == "create-upd-clean-callback" { return "CreateUpdCleanCallback" }
    if yname == "delete-clean-callback" { return "DeleteCleanCallback" }
    if yname == "slave-recv-entry" { return "SlaveRecvEntry" }
    if yname == "slave-decode-fail" { return "SlaveDecodeFail" }
    if yname == "slave-create-update" { return "SlaveCreateUpdate" }
    if yname == "slave-delete" { return "SlaveDelete" }
    if yname == "srg-context-malloc" { return "SrgContextMalloc" }
    if yname == "srg-context-free" { return "SrgContextFree" }
    if yname == "sod-count" { return "SodCount" }
    if yname == "eod-count" { return "EodCount" }
    if yname == "sod-eod-replay-req-count" { return "SodEodReplayReqCount" }
    if yname == "sod-eod-dirty-mark-count" { return "SodEodDirtyMarkCount" }
    if yname == "sod-eod-dirty-delete-count" { return "SodEodDirtyDeleteCount" }
    if yname == "ack-to-srg" { return "AckToSrg" }
    if yname == "nack-to-srg" { return "NackToSrg" }
    if yname == "nack-to-srg-fail-cnt" { return "NackToSrgFailCnt" }
    if yname == "txlist-remove-all" { return "TxlistRemoveAll" }
    if yname == "txlist-del-sync" { return "TxlistDelSync" }
    if yname == "txlist-del-sync-notlinked" { return "TxlistDelSyncNotlinked" }
    if yname == "txlist-del-app" { return "TxlistDelApp" }
    if yname == "txlist-del-app-notlinked" { return "TxlistDelAppNotlinked" }
    if yname == "txlist-clean-invalid-state" { return "TxlistCleanInvalidState" }
    if yname == "txlist-remove-all-internal-error" { return "TxlistRemoveAllInternalError" }
    if yname == "is-srg-flow-control-enabled" { return "IsSrgFlowControlEnabled" }
    if yname == "max-inflight-sessoin-count" { return "MaxInflightSessoinCount" }
    if yname == "flow-control-resume-threshold" { return "FlowControlResumeThreshold" }
    if yname == "inflight-session-count" { return "InflightSessionCount" }
    if yname == "inflight-add-count" { return "InflightAddCount" }
    if yname == "inflight-under-run-count" { return "InflightUnderRunCount" }
    if yname == "inflight-alloc-fails" { return "InflightAllocFails" }
    if yname == "inflight-insert-failures" { return "InflightInsertFailures" }
    if yname == "inflight-deletes" { return "InflightDeletes" }
    if yname == "inflight-not-found" { return "InflightNotFound" }
    if yname == "inflight-delete-failures" { return "InflightDeleteFailures" }
    if yname == "total-pause-count" { return "TotalPauseCount" }
    if yname == "total-resume-count" { return "TotalResumeCount" }
    if yname == "total-dont-send-to-txlist" { return "TotalDontSendToTxlist" }
    if yname == "total-srg-not-master" { return "TotalSrgNotMaster" }
    if yname == "total-master-eoms-pending" { return "TotalMasterEomsPending" }
    if yname == "last-pause-period" { return "LastPausePeriod" }
    if yname == "total-pause-time" { return "TotalPauseTime" }
    if yname == "last-pause-time" { return "LastPauseTime" }
    if yname == "last-resume-time" { return "LastResumeTime" }
    return ""
}

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetSegmentPath() string {
    return "srg"
}

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["txlist-send-triggered"] = srg.TxlistSendTriggered
    leafs["txlist-send-failed"] = srg.TxlistSendFailed
    leafs["txlist-send-failed-notactive"] = srg.TxlistSendFailedNotactive
    leafs["actual-txlist-sent"] = srg.ActualTxlistSent
    leafs["alreadyin-txlist"] = srg.AlreadyinTxlist
    leafs["txlist-encode"] = srg.TxlistEncode
    leafs["txlist-encode-fail"] = srg.TxlistEncodeFail
    leafs["create-update-encode"] = srg.CreateUpdateEncode
    leafs["delete-encode"] = srg.DeleteEncode
    leafs["create-upd-clean-callback"] = srg.CreateUpdCleanCallback
    leafs["delete-clean-callback"] = srg.DeleteCleanCallback
    leafs["slave-recv-entry"] = srg.SlaveRecvEntry
    leafs["slave-decode-fail"] = srg.SlaveDecodeFail
    leafs["slave-create-update"] = srg.SlaveCreateUpdate
    leafs["slave-delete"] = srg.SlaveDelete
    leafs["srg-context-malloc"] = srg.SrgContextMalloc
    leafs["srg-context-free"] = srg.SrgContextFree
    leafs["sod-count"] = srg.SodCount
    leafs["eod-count"] = srg.EodCount
    leafs["sod-eod-replay-req-count"] = srg.SodEodReplayReqCount
    leafs["sod-eod-dirty-mark-count"] = srg.SodEodDirtyMarkCount
    leafs["sod-eod-dirty-delete-count"] = srg.SodEodDirtyDeleteCount
    leafs["ack-to-srg"] = srg.AckToSrg
    leafs["nack-to-srg"] = srg.NackToSrg
    leafs["nack-to-srg-fail-cnt"] = srg.NackToSrgFailCnt
    leafs["txlist-remove-all"] = srg.TxlistRemoveAll
    leafs["txlist-del-sync"] = srg.TxlistDelSync
    leafs["txlist-del-sync-notlinked"] = srg.TxlistDelSyncNotlinked
    leafs["txlist-del-app"] = srg.TxlistDelApp
    leafs["txlist-del-app-notlinked"] = srg.TxlistDelAppNotlinked
    leafs["txlist-clean-invalid-state"] = srg.TxlistCleanInvalidState
    leafs["txlist-remove-all-internal-error"] = srg.TxlistRemoveAllInternalError
    leafs["is-srg-flow-control-enabled"] = srg.IsSrgFlowControlEnabled
    leafs["max-inflight-sessoin-count"] = srg.MaxInflightSessoinCount
    leafs["flow-control-resume-threshold"] = srg.FlowControlResumeThreshold
    leafs["inflight-session-count"] = srg.InflightSessionCount
    leafs["inflight-add-count"] = srg.InflightAddCount
    leafs["inflight-under-run-count"] = srg.InflightUnderRunCount
    leafs["inflight-alloc-fails"] = srg.InflightAllocFails
    leafs["inflight-insert-failures"] = srg.InflightInsertFailures
    leafs["inflight-deletes"] = srg.InflightDeletes
    leafs["inflight-not-found"] = srg.InflightNotFound
    leafs["inflight-delete-failures"] = srg.InflightDeleteFailures
    leafs["total-pause-count"] = srg.TotalPauseCount
    leafs["total-resume-count"] = srg.TotalResumeCount
    leafs["total-dont-send-to-txlist"] = srg.TotalDontSendToTxlist
    leafs["total-srg-not-master"] = srg.TotalSrgNotMaster
    leafs["total-master-eoms-pending"] = srg.TotalMasterEomsPending
    leafs["last-pause-period"] = srg.LastPausePeriod
    leafs["total-pause-time"] = srg.TotalPauseTime
    leafs["last-pause-time"] = srg.LastPauseTime
    leafs["last-resume-time"] = srg.LastResumeTime
    return leafs
}

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetBundleName() string { return "cisco_ios_xr" }

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetYangName() string { return "srg" }

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) SetParent(parent types.Entity) { srg.parent = parent }

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetParent() types.Entity { return srg.parent }

func (srg *Subscriber_Manager_Nodes_Node_Statistics_Srg) GetParentYangName() string { return "statistics" }

// Subscriber_Session
// Subscriber session operational data
type Subscriber_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of subscriber session supported nodes.
    Nodes Subscriber_Session_Nodes
}

func (session *Subscriber_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Subscriber_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Subscriber_Session) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (session *Subscriber_Session) GetSegmentPath() string {
    return "session"
}

func (session *Subscriber_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &session.Nodes
    }
    return nil
}

func (session *Subscriber_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &session.Nodes
    return children
}

func (session *Subscriber_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Subscriber_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Subscriber_Session) GetYangName() string { return "session" }

func (session *Subscriber_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Subscriber_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Subscriber_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Subscriber_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Subscriber_Session) GetParent() types.Entity { return session.parent }

func (session *Subscriber_Session) GetParentYangName() string { return "subscriber" }

// Subscriber_Session_Nodes
// List of subscriber session supported nodes
type Subscriber_Session_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber session operational data for a particular node. The type is
    // slice of Subscriber_Session_Nodes_Node.
    Node []Subscriber_Session_Nodes_Node
}

func (nodes *Subscriber_Session_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *Subscriber_Session_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *Subscriber_Session_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *Subscriber_Session_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *Subscriber_Session_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *Subscriber_Session_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *Subscriber_Session_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *Subscriber_Session_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *Subscriber_Session_Nodes) GetYangName() string { return "nodes" }

func (nodes *Subscriber_Session_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *Subscriber_Session_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *Subscriber_Session_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *Subscriber_Session_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *Subscriber_Session_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *Subscriber_Session_Nodes) GetParentYangName() string { return "session" }

// Subscriber_Session_Nodes_Node
// Subscriber session operational data for a
// particular node
type Subscriber_Session_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Node name. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // Summary information filtered by authorization state.
    AuthorSummaries Subscriber_Session_Nodes_Node_AuthorSummaries

    // Subscriber session summary information.
    Summary Subscriber_Session_Nodes_Node_Summary

    // Summary information filtered by MAC address.
    MacSummaries Subscriber_Session_Nodes_Node_MacSummaries

    // Summary information filtered by interface.
    InterfaceSummaries Subscriber_Session_Nodes_Node_InterfaceSummaries

    // Summary information filtered by authentication state.
    AuthenticationSummaries Subscriber_Session_Nodes_Node_AuthenticationSummaries

    // Summary information filtered by session state.
    StateSummaries Subscriber_Session_Nodes_Node_StateSummaries

    // Summary information filtered by IPv4 address and VRF.
    Ipv4AddressVrfSummaries Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries

    // Summary information filtered by address family.
    AddressFamilySummaries Subscriber_Session_Nodes_Node_AddressFamilySummaries

    // Summary information filtered by username.
    UsernameSummaries Subscriber_Session_Nodes_Node_UsernameSummaries

    // Summary information filtered by access interface.
    AccessInterfaceSummaries Subscriber_Session_Nodes_Node_AccessInterfaceSummaries

    // Summary information filtered by subscriber IPv4 address.
    Ipv4AddressSummaries Subscriber_Session_Nodes_Node_Ipv4AddressSummaries

    // Summary information filtered by VRF.
    VrfSummaries Subscriber_Session_Nodes_Node_VrfSummaries

    // IP subscriber sessions.
    Sessions Subscriber_Session_Nodes_Node_Sessions
}

func (node *Subscriber_Session_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *Subscriber_Session_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *Subscriber_Session_Nodes_Node) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "author-summaries" { return "AuthorSummaries" }
    if yname == "summary" { return "Summary" }
    if yname == "mac-summaries" { return "MacSummaries" }
    if yname == "interface-summaries" { return "InterfaceSummaries" }
    if yname == "authentication-summaries" { return "AuthenticationSummaries" }
    if yname == "state-summaries" { return "StateSummaries" }
    if yname == "ipv4-address-vrf-summaries" { return "Ipv4AddressVrfSummaries" }
    if yname == "address-family-summaries" { return "AddressFamilySummaries" }
    if yname == "username-summaries" { return "UsernameSummaries" }
    if yname == "access-interface-summaries" { return "AccessInterfaceSummaries" }
    if yname == "ipv4-address-summaries" { return "Ipv4AddressSummaries" }
    if yname == "vrf-summaries" { return "VrfSummaries" }
    if yname == "sessions" { return "Sessions" }
    return ""
}

func (node *Subscriber_Session_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
}

func (node *Subscriber_Session_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "author-summaries" {
        return &node.AuthorSummaries
    }
    if childYangName == "summary" {
        return &node.Summary
    }
    if childYangName == "mac-summaries" {
        return &node.MacSummaries
    }
    if childYangName == "interface-summaries" {
        return &node.InterfaceSummaries
    }
    if childYangName == "authentication-summaries" {
        return &node.AuthenticationSummaries
    }
    if childYangName == "state-summaries" {
        return &node.StateSummaries
    }
    if childYangName == "ipv4-address-vrf-summaries" {
        return &node.Ipv4AddressVrfSummaries
    }
    if childYangName == "address-family-summaries" {
        return &node.AddressFamilySummaries
    }
    if childYangName == "username-summaries" {
        return &node.UsernameSummaries
    }
    if childYangName == "access-interface-summaries" {
        return &node.AccessInterfaceSummaries
    }
    if childYangName == "ipv4-address-summaries" {
        return &node.Ipv4AddressSummaries
    }
    if childYangName == "vrf-summaries" {
        return &node.VrfSummaries
    }
    if childYangName == "sessions" {
        return &node.Sessions
    }
    return nil
}

func (node *Subscriber_Session_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["author-summaries"] = &node.AuthorSummaries
    children["summary"] = &node.Summary
    children["mac-summaries"] = &node.MacSummaries
    children["interface-summaries"] = &node.InterfaceSummaries
    children["authentication-summaries"] = &node.AuthenticationSummaries
    children["state-summaries"] = &node.StateSummaries
    children["ipv4-address-vrf-summaries"] = &node.Ipv4AddressVrfSummaries
    children["address-family-summaries"] = &node.AddressFamilySummaries
    children["username-summaries"] = &node.UsernameSummaries
    children["access-interface-summaries"] = &node.AccessInterfaceSummaries
    children["ipv4-address-summaries"] = &node.Ipv4AddressSummaries
    children["vrf-summaries"] = &node.VrfSummaries
    children["sessions"] = &node.Sessions
    return children
}

func (node *Subscriber_Session_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = node.NodeName
    return leafs
}

func (node *Subscriber_Session_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *Subscriber_Session_Nodes_Node) GetYangName() string { return "node" }

func (node *Subscriber_Session_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *Subscriber_Session_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *Subscriber_Session_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *Subscriber_Session_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *Subscriber_Session_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *Subscriber_Session_Nodes_Node) GetParentYangName() string { return "nodes" }

// Subscriber_Session_Nodes_Node_AuthorSummaries
// Summary information filtered by authorization
// state
type Subscriber_Session_Nodes_Node_AuthorSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // authorization summary. The type is slice of
    // Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary.
    AuthorSummary []Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary
}

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetFilter() yfilter.YFilter { return authorSummaries.YFilter }

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) SetFilter(yf yfilter.YFilter) { authorSummaries.YFilter = yf }

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetGoName(yname string) string {
    if yname == "author-summary" { return "AuthorSummary" }
    return ""
}

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetSegmentPath() string {
    return "author-summaries"
}

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "author-summary" {
        for _, c := range authorSummaries.AuthorSummary {
            if authorSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary{}
        authorSummaries.AuthorSummary = append(authorSummaries.AuthorSummary, child)
        return &authorSummaries.AuthorSummary[len(authorSummaries.AuthorSummary)-1]
    }
    return nil
}

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range authorSummaries.AuthorSummary {
        children[authorSummaries.AuthorSummary[i].GetSegmentPath()] = &authorSummaries.AuthorSummary[i]
    }
    return children
}

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetYangName() string { return "author-summaries" }

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) SetParent(parent types.Entity) { authorSummaries.parent = parent }

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetParent() types.Entity { return authorSummaries.parent }

func (authorSummaries *Subscriber_Session_Nodes_Node_AuthorSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary
// authorization summary
type Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Authorization state. The type is
    // SubscriberAuthorStateFilterFlag.
    AuthorState interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr
}

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetFilter() yfilter.YFilter { return authorSummary.YFilter }

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) SetFilter(yf yfilter.YFilter) { authorSummary.YFilter = yf }

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetGoName(yname string) string {
    if yname == "author-state" { return "AuthorState" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetSegmentPath() string {
    return "author-summary" + "[author-state='" + fmt.Sprintf("%v", authorSummary.AuthorState) + "']"
}

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &authorSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &authorSummary.AddressFamilyXr
    }
    return nil
}

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &authorSummary.StateXr
    children["address-family-xr"] = &authorSummary.AddressFamilyXr
    return children
}

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["author-state"] = authorSummary.AuthorState
    return leafs
}

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetBundleName() string { return "cisco_ios_xr" }

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetYangName() string { return "author-summary" }

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) SetParent(parent types.Entity) { authorSummary.parent = parent }

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetParent() types.Entity { return authorSummary.parent }

func (authorSummary *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary) GetParentYangName() string { return "author-summaries" }

// Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr) GetParentYangName() string { return "author-summary" }

// Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr) GetParentYangName() string { return "author-summary" }

// Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthorSummaries_AuthorSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Summary
// Subscriber session summary information
type Subscriber_Session_Nodes_Node_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_Summary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr
}

func (summary *Subscriber_Session_Nodes_Node_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Subscriber_Session_Nodes_Node_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Subscriber_Session_Nodes_Node_Summary) GetGoName(yname string) string {
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (summary *Subscriber_Session_Nodes_Node_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Subscriber_Session_Nodes_Node_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &summary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &summary.AddressFamilyXr
    }
    return nil
}

func (summary *Subscriber_Session_Nodes_Node_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &summary.StateXr
    children["address-family-xr"] = &summary.AddressFamilyXr
    return children
}

func (summary *Subscriber_Session_Nodes_Node_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summary *Subscriber_Session_Nodes_Node_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Subscriber_Session_Nodes_Node_Summary) GetYangName() string { return "summary" }

func (summary *Subscriber_Session_Nodes_Node_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Subscriber_Session_Nodes_Node_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Subscriber_Session_Nodes_Node_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Subscriber_Session_Nodes_Node_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Subscriber_Session_Nodes_Node_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Subscriber_Session_Nodes_Node_Summary) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_Summary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_Summary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_Summary_StateXr) GetParentYangName() string { return "summary" }

// Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr) GetParentYangName() string { return "summary" }

// Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Summary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_MacSummaries
// Summary information filtered by MAC address
type Subscriber_Session_Nodes_Node_MacSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address summary. The type is slice of
    // Subscriber_Session_Nodes_Node_MacSummaries_MacSummary.
    MacSummary []Subscriber_Session_Nodes_Node_MacSummaries_MacSummary
}

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetFilter() yfilter.YFilter { return macSummaries.YFilter }

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) SetFilter(yf yfilter.YFilter) { macSummaries.YFilter = yf }

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetGoName(yname string) string {
    if yname == "mac-summary" { return "MacSummary" }
    return ""
}

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetSegmentPath() string {
    return "mac-summaries"
}

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-summary" {
        for _, c := range macSummaries.MacSummary {
            if macSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_MacSummaries_MacSummary{}
        macSummaries.MacSummary = append(macSummaries.MacSummary, child)
        return &macSummaries.MacSummary[len(macSummaries.MacSummary)-1]
    }
    return nil
}

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range macSummaries.MacSummary {
        children[macSummaries.MacSummary[i].GetSegmentPath()] = &macSummaries.MacSummary[i]
    }
    return children
}

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetYangName() string { return "mac-summaries" }

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) SetParent(parent types.Entity) { macSummaries.parent = parent }

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetParent() types.Entity { return macSummaries.parent }

func (macSummaries *Subscriber_Session_Nodes_Node_MacSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_MacSummaries_MacSummary
// MAC address summary
type Subscriber_Session_Nodes_Node_MacSummaries_MacSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Subscriber MAC address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    MacAddress interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr
}

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetFilter() yfilter.YFilter { return macSummary.YFilter }

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) SetFilter(yf yfilter.YFilter) { macSummary.YFilter = yf }

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetGoName(yname string) string {
    if yname == "mac-address" { return "MacAddress" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetSegmentPath() string {
    return "mac-summary" + "[mac-address='" + fmt.Sprintf("%v", macSummary.MacAddress) + "']"
}

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &macSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &macSummary.AddressFamilyXr
    }
    return nil
}

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &macSummary.StateXr
    children["address-family-xr"] = &macSummary.AddressFamilyXr
    return children
}

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mac-address"] = macSummary.MacAddress
    return leafs
}

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetBundleName() string { return "cisco_ios_xr" }

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetYangName() string { return "mac-summary" }

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) SetParent(parent types.Entity) { macSummary.parent = parent }

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetParent() types.Entity { return macSummary.parent }

func (macSummary *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary) GetParentYangName() string { return "mac-summaries" }

// Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr) GetParentYangName() string { return "mac-summary" }

// Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr) GetParentYangName() string { return "mac-summary" }

// Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_MacSummaries_MacSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries
// Summary information filtered by interface
type Subscriber_Session_Nodes_Node_InterfaceSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface summary. The type is slice of
    // Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary.
    InterfaceSummary []Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary
}

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetFilter() yfilter.YFilter { return interfaceSummaries.YFilter }

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) SetFilter(yf yfilter.YFilter) { interfaceSummaries.YFilter = yf }

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetGoName(yname string) string {
    if yname == "interface-summary" { return "InterfaceSummary" }
    return ""
}

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetSegmentPath() string {
    return "interface-summaries"
}

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-summary" {
        for _, c := range interfaceSummaries.InterfaceSummary {
            if interfaceSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary{}
        interfaceSummaries.InterfaceSummary = append(interfaceSummaries.InterfaceSummary, child)
        return &interfaceSummaries.InterfaceSummary[len(interfaceSummaries.InterfaceSummary)-1]
    }
    return nil
}

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceSummaries.InterfaceSummary {
        children[interfaceSummaries.InterfaceSummary[i].GetSegmentPath()] = &interfaceSummaries.InterfaceSummary[i]
    }
    return children
}

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetYangName() string { return "interface-summaries" }

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) SetParent(parent types.Entity) { interfaceSummaries.parent = parent }

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetParent() types.Entity { return interfaceSummaries.parent }

func (interfaceSummaries *Subscriber_Session_Nodes_Node_InterfaceSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary
// Interface summary
type Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr
}

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetFilter() yfilter.YFilter { return interfaceSummary.YFilter }

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) SetFilter(yf yfilter.YFilter) { interfaceSummary.YFilter = yf }

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetSegmentPath() string {
    return "interface-summary" + "[interface-name='" + fmt.Sprintf("%v", interfaceSummary.InterfaceName) + "']"
}

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &interfaceSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &interfaceSummary.AddressFamilyXr
    }
    return nil
}

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &interfaceSummary.StateXr
    children["address-family-xr"] = &interfaceSummary.AddressFamilyXr
    return children
}

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceSummary.InterfaceName
    return leafs
}

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetYangName() string { return "interface-summary" }

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) SetParent(parent types.Entity) { interfaceSummary.parent = parent }

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetParent() types.Entity { return interfaceSummary.parent }

func (interfaceSummary *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary) GetParentYangName() string { return "interface-summaries" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr) GetParentYangName() string { return "interface-summary" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr) GetParentYangName() string { return "interface-summary" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_InterfaceSummaries_InterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries
// Summary information filtered by
// authentication state
type Subscriber_Session_Nodes_Node_AuthenticationSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // authentication summary. The type is slice of
    // Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary.
    AuthenticationSummary []Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary
}

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetFilter() yfilter.YFilter { return authenticationSummaries.YFilter }

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) SetFilter(yf yfilter.YFilter) { authenticationSummaries.YFilter = yf }

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetGoName(yname string) string {
    if yname == "authentication-summary" { return "AuthenticationSummary" }
    return ""
}

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetSegmentPath() string {
    return "authentication-summaries"
}

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication-summary" {
        for _, c := range authenticationSummaries.AuthenticationSummary {
            if authenticationSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary{}
        authenticationSummaries.AuthenticationSummary = append(authenticationSummaries.AuthenticationSummary, child)
        return &authenticationSummaries.AuthenticationSummary[len(authenticationSummaries.AuthenticationSummary)-1]
    }
    return nil
}

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range authenticationSummaries.AuthenticationSummary {
        children[authenticationSummaries.AuthenticationSummary[i].GetSegmentPath()] = &authenticationSummaries.AuthenticationSummary[i]
    }
    return children
}

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetYangName() string { return "authentication-summaries" }

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) SetParent(parent types.Entity) { authenticationSummaries.parent = parent }

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetParent() types.Entity { return authenticationSummaries.parent }

func (authenticationSummaries *Subscriber_Session_Nodes_Node_AuthenticationSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary
// authentication summary
type Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Authentication state. The type is
    // SubscriberAuthenStateFilterFlag.
    AuthenticationState interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr
}

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetFilter() yfilter.YFilter { return authenticationSummary.YFilter }

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) SetFilter(yf yfilter.YFilter) { authenticationSummary.YFilter = yf }

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetGoName(yname string) string {
    if yname == "authentication-state" { return "AuthenticationState" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetSegmentPath() string {
    return "authentication-summary" + "[authentication-state='" + fmt.Sprintf("%v", authenticationSummary.AuthenticationState) + "']"
}

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &authenticationSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &authenticationSummary.AddressFamilyXr
    }
    return nil
}

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &authenticationSummary.StateXr
    children["address-family-xr"] = &authenticationSummary.AddressFamilyXr
    return children
}

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authentication-state"] = authenticationSummary.AuthenticationState
    return leafs
}

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetYangName() string { return "authentication-summary" }

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) SetParent(parent types.Entity) { authenticationSummary.parent = parent }

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetParent() types.Entity { return authenticationSummary.parent }

func (authenticationSummary *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary) GetParentYangName() string { return "authentication-summaries" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr) GetParentYangName() string { return "authentication-summary" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr) GetParentYangName() string { return "authentication-summary" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AuthenticationSummaries_AuthenticationSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_StateSummaries
// Summary information filtered by session state
type Subscriber_Session_Nodes_Node_StateSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // State summary. The type is slice of
    // Subscriber_Session_Nodes_Node_StateSummaries_StateSummary.
    StateSummary []Subscriber_Session_Nodes_Node_StateSummaries_StateSummary
}

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetFilter() yfilter.YFilter { return stateSummaries.YFilter }

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) SetFilter(yf yfilter.YFilter) { stateSummaries.YFilter = yf }

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetGoName(yname string) string {
    if yname == "state-summary" { return "StateSummary" }
    return ""
}

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetSegmentPath() string {
    return "state-summaries"
}

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-summary" {
        for _, c := range stateSummaries.StateSummary {
            if stateSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_StateSummaries_StateSummary{}
        stateSummaries.StateSummary = append(stateSummaries.StateSummary, child)
        return &stateSummaries.StateSummary[len(stateSummaries.StateSummary)-1]
    }
    return nil
}

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range stateSummaries.StateSummary {
        children[stateSummaries.StateSummary[i].GetSegmentPath()] = &stateSummaries.StateSummary[i]
    }
    return children
}

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetYangName() string { return "state-summaries" }

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) SetParent(parent types.Entity) { stateSummaries.parent = parent }

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetParent() types.Entity { return stateSummaries.parent }

func (stateSummaries *Subscriber_Session_Nodes_Node_StateSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_StateSummaries_StateSummary
// State summary
type Subscriber_Session_Nodes_Node_StateSummaries_StateSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Subscriber state. The type is
    // SubscriberStateFilterFlag.
    State interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr
}

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetFilter() yfilter.YFilter { return stateSummary.YFilter }

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) SetFilter(yf yfilter.YFilter) { stateSummary.YFilter = yf }

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetGoName(yname string) string {
    if yname == "state" { return "State" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetSegmentPath() string {
    return "state-summary" + "[state='" + fmt.Sprintf("%v", stateSummary.State) + "']"
}

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &stateSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &stateSummary.AddressFamilyXr
    }
    return nil
}

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &stateSummary.StateXr
    children["address-family-xr"] = &stateSummary.AddressFamilyXr
    return children
}

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state"] = stateSummary.State
    return leafs
}

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetBundleName() string { return "cisco_ios_xr" }

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetYangName() string { return "state-summary" }

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) SetParent(parent types.Entity) { stateSummary.parent = parent }

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetParent() types.Entity { return stateSummary.parent }

func (stateSummary *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary) GetParentYangName() string { return "state-summaries" }

// Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr) GetParentYangName() string { return "state-summary" }

// Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr) GetParentYangName() string { return "state-summary" }

// Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_StateSummaries_StateSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries
// Summary information filtered by IPv4 address
// and VRF
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 address and VRF summary. The type is slice of
    // Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary.
    Ipv4AddressVrfSummary []Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary
}

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetFilter() yfilter.YFilter { return ipv4AddressVrfSummaries.YFilter }

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) SetFilter(yf yfilter.YFilter) { ipv4AddressVrfSummaries.YFilter = yf }

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetGoName(yname string) string {
    if yname == "ipv4-address-vrf-summary" { return "Ipv4AddressVrfSummary" }
    return ""
}

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetSegmentPath() string {
    return "ipv4-address-vrf-summaries"
}

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-address-vrf-summary" {
        for _, c := range ipv4AddressVrfSummaries.Ipv4AddressVrfSummary {
            if ipv4AddressVrfSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary{}
        ipv4AddressVrfSummaries.Ipv4AddressVrfSummary = append(ipv4AddressVrfSummaries.Ipv4AddressVrfSummary, child)
        return &ipv4AddressVrfSummaries.Ipv4AddressVrfSummary[len(ipv4AddressVrfSummaries.Ipv4AddressVrfSummary)-1]
    }
    return nil
}

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4AddressVrfSummaries.Ipv4AddressVrfSummary {
        children[ipv4AddressVrfSummaries.Ipv4AddressVrfSummary[i].GetSegmentPath()] = &ipv4AddressVrfSummaries.Ipv4AddressVrfSummary[i]
    }
    return children
}

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetYangName() string { return "ipv4-address-vrf-summaries" }

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) SetParent(parent types.Entity) { ipv4AddressVrfSummaries.parent = parent }

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetParent() types.Entity { return ipv4AddressVrfSummaries.parent }

func (ipv4AddressVrfSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary
// IPv4 address and VRF summary
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Subscriber IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr
}

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetFilter() yfilter.YFilter { return ipv4AddressVrfSummary.YFilter }

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) SetFilter(yf yfilter.YFilter) { ipv4AddressVrfSummary.YFilter = yf }

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "address" { return "Address" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetSegmentPath() string {
    return "ipv4-address-vrf-summary"
}

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &ipv4AddressVrfSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &ipv4AddressVrfSummary.AddressFamilyXr
    }
    return nil
}

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &ipv4AddressVrfSummary.StateXr
    children["address-family-xr"] = &ipv4AddressVrfSummary.AddressFamilyXr
    return children
}

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = ipv4AddressVrfSummary.VrfName
    leafs["address"] = ipv4AddressVrfSummary.Address
    return leafs
}

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetYangName() string { return "ipv4-address-vrf-summary" }

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) SetParent(parent types.Entity) { ipv4AddressVrfSummary.parent = parent }

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetParent() types.Entity { return ipv4AddressVrfSummary.parent }

func (ipv4AddressVrfSummary *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary) GetParentYangName() string { return "ipv4-address-vrf-summaries" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr) GetParentYangName() string { return "ipv4-address-vrf-summary" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr) GetParentYangName() string { return "ipv4-address-vrf-summary" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressVrfSummaries_Ipv4AddressVrfSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries
// Summary information filtered by address
// family
type Subscriber_Session_Nodes_Node_AddressFamilySummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family summary. The type is slice of
    // Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary.
    AddressFamilySummary []Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary
}

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetFilter() yfilter.YFilter { return addressFamilySummaries.YFilter }

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) SetFilter(yf yfilter.YFilter) { addressFamilySummaries.YFilter = yf }

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetGoName(yname string) string {
    if yname == "address-family-summary" { return "AddressFamilySummary" }
    return ""
}

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetSegmentPath() string {
    return "address-family-summaries"
}

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address-family-summary" {
        for _, c := range addressFamilySummaries.AddressFamilySummary {
            if addressFamilySummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary{}
        addressFamilySummaries.AddressFamilySummary = append(addressFamilySummaries.AddressFamilySummary, child)
        return &addressFamilySummaries.AddressFamilySummary[len(addressFamilySummaries.AddressFamilySummary)-1]
    }
    return nil
}

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range addressFamilySummaries.AddressFamilySummary {
        children[addressFamilySummaries.AddressFamilySummary[i].GetSegmentPath()] = &addressFamilySummaries.AddressFamilySummary[i]
    }
    return children
}

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetYangName() string { return "address-family-summaries" }

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) SetParent(parent types.Entity) { addressFamilySummaries.parent = parent }

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetParent() types.Entity { return addressFamilySummaries.parent }

func (addressFamilySummaries *Subscriber_Session_Nodes_Node_AddressFamilySummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary
// Address family summary
type Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address family. The type is
    // SubscriberAddressFamilyFilterFlag.
    AddressFamily interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr
}

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetFilter() yfilter.YFilter { return addressFamilySummary.YFilter }

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) SetFilter(yf yfilter.YFilter) { addressFamilySummary.YFilter = yf }

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetGoName(yname string) string {
    if yname == "address-family" { return "AddressFamily" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetSegmentPath() string {
    return "address-family-summary" + "[address-family='" + fmt.Sprintf("%v", addressFamilySummary.AddressFamily) + "']"
}

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &addressFamilySummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &addressFamilySummary.AddressFamilyXr
    }
    return nil
}

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &addressFamilySummary.StateXr
    children["address-family-xr"] = &addressFamilySummary.AddressFamilyXr
    return children
}

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-family"] = addressFamilySummary.AddressFamily
    return leafs
}

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetYangName() string { return "address-family-summary" }

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) SetParent(parent types.Entity) { addressFamilySummary.parent = parent }

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetParent() types.Entity { return addressFamilySummary.parent }

func (addressFamilySummary *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary) GetParentYangName() string { return "address-family-summaries" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr) GetParentYangName() string { return "address-family-summary" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr) GetParentYangName() string { return "address-family-summary" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AddressFamilySummaries_AddressFamilySummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_UsernameSummaries
// Summary information filtered by username
type Subscriber_Session_Nodes_Node_UsernameSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Username summary. The type is slice of
    // Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary.
    UsernameSummary []Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary
}

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetFilter() yfilter.YFilter { return usernameSummaries.YFilter }

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) SetFilter(yf yfilter.YFilter) { usernameSummaries.YFilter = yf }

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetGoName(yname string) string {
    if yname == "username-summary" { return "UsernameSummary" }
    return ""
}

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetSegmentPath() string {
    return "username-summaries"
}

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "username-summary" {
        for _, c := range usernameSummaries.UsernameSummary {
            if usernameSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary{}
        usernameSummaries.UsernameSummary = append(usernameSummaries.UsernameSummary, child)
        return &usernameSummaries.UsernameSummary[len(usernameSummaries.UsernameSummary)-1]
    }
    return nil
}

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range usernameSummaries.UsernameSummary {
        children[usernameSummaries.UsernameSummary[i].GetSegmentPath()] = &usernameSummaries.UsernameSummary[i]
    }
    return children
}

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetYangName() string { return "username-summaries" }

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) SetParent(parent types.Entity) { usernameSummaries.parent = parent }

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetParent() types.Entity { return usernameSummaries.parent }

func (usernameSummaries *Subscriber_Session_Nodes_Node_UsernameSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary
// Username summary
type Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Subscriber username. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Username interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr
}

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetFilter() yfilter.YFilter { return usernameSummary.YFilter }

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) SetFilter(yf yfilter.YFilter) { usernameSummary.YFilter = yf }

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetGoName(yname string) string {
    if yname == "username" { return "Username" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetSegmentPath() string {
    return "username-summary" + "[username='" + fmt.Sprintf("%v", usernameSummary.Username) + "']"
}

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &usernameSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &usernameSummary.AddressFamilyXr
    }
    return nil
}

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &usernameSummary.StateXr
    children["address-family-xr"] = &usernameSummary.AddressFamilyXr
    return children
}

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["username"] = usernameSummary.Username
    return leafs
}

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetBundleName() string { return "cisco_ios_xr" }

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetYangName() string { return "username-summary" }

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) SetParent(parent types.Entity) { usernameSummary.parent = parent }

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetParent() types.Entity { return usernameSummary.parent }

func (usernameSummary *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary) GetParentYangName() string { return "username-summaries" }

// Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr) GetParentYangName() string { return "username-summary" }

// Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr) GetParentYangName() string { return "username-summary" }

// Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_UsernameSummaries_UsernameSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries
// Summary information filtered by access
// interface
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access interface summary. The type is slice of
    // Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary.
    AccessInterfaceSummary []Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary
}

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetFilter() yfilter.YFilter { return accessInterfaceSummaries.YFilter }

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) SetFilter(yf yfilter.YFilter) { accessInterfaceSummaries.YFilter = yf }

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetGoName(yname string) string {
    if yname == "access-interface-summary" { return "AccessInterfaceSummary" }
    return ""
}

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetSegmentPath() string {
    return "access-interface-summaries"
}

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access-interface-summary" {
        for _, c := range accessInterfaceSummaries.AccessInterfaceSummary {
            if accessInterfaceSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary{}
        accessInterfaceSummaries.AccessInterfaceSummary = append(accessInterfaceSummaries.AccessInterfaceSummary, child)
        return &accessInterfaceSummaries.AccessInterfaceSummary[len(accessInterfaceSummaries.AccessInterfaceSummary)-1]
    }
    return nil
}

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accessInterfaceSummaries.AccessInterfaceSummary {
        children[accessInterfaceSummaries.AccessInterfaceSummary[i].GetSegmentPath()] = &accessInterfaceSummaries.AccessInterfaceSummary[i]
    }
    return children
}

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetYangName() string { return "access-interface-summaries" }

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) SetParent(parent types.Entity) { accessInterfaceSummaries.parent = parent }

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetParent() types.Entity { return accessInterfaceSummaries.parent }

func (accessInterfaceSummaries *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary
// Access interface summary
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr
}

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetFilter() yfilter.YFilter { return accessInterfaceSummary.YFilter }

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) SetFilter(yf yfilter.YFilter) { accessInterfaceSummary.YFilter = yf }

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetSegmentPath() string {
    return "access-interface-summary" + "[interface-name='" + fmt.Sprintf("%v", accessInterfaceSummary.InterfaceName) + "']"
}

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &accessInterfaceSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &accessInterfaceSummary.AddressFamilyXr
    }
    return nil
}

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &accessInterfaceSummary.StateXr
    children["address-family-xr"] = &accessInterfaceSummary.AddressFamilyXr
    return children
}

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = accessInterfaceSummary.InterfaceName
    return leafs
}

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetYangName() string { return "access-interface-summary" }

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) SetParent(parent types.Entity) { accessInterfaceSummary.parent = parent }

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetParent() types.Entity { return accessInterfaceSummary.parent }

func (accessInterfaceSummary *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary) GetParentYangName() string { return "access-interface-summaries" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr) GetParentYangName() string { return "access-interface-summary" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr) GetParentYangName() string { return "access-interface-summary" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_AccessInterfaceSummaries_AccessInterfaceSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries
// Summary information filtered by subscriber
// IPv4 address
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 address summary. The type is slice of
    // Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary.
    Ipv4AddressSummary []Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary
}

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetFilter() yfilter.YFilter { return ipv4AddressSummaries.YFilter }

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) SetFilter(yf yfilter.YFilter) { ipv4AddressSummaries.YFilter = yf }

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetGoName(yname string) string {
    if yname == "ipv4-address-summary" { return "Ipv4AddressSummary" }
    return ""
}

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetSegmentPath() string {
    return "ipv4-address-summaries"
}

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-address-summary" {
        for _, c := range ipv4AddressSummaries.Ipv4AddressSummary {
            if ipv4AddressSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary{}
        ipv4AddressSummaries.Ipv4AddressSummary = append(ipv4AddressSummaries.Ipv4AddressSummary, child)
        return &ipv4AddressSummaries.Ipv4AddressSummary[len(ipv4AddressSummaries.Ipv4AddressSummary)-1]
    }
    return nil
}

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4AddressSummaries.Ipv4AddressSummary {
        children[ipv4AddressSummaries.Ipv4AddressSummary[i].GetSegmentPath()] = &ipv4AddressSummaries.Ipv4AddressSummary[i]
    }
    return children
}

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetYangName() string { return "ipv4-address-summaries" }

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) SetParent(parent types.Entity) { ipv4AddressSummaries.parent = parent }

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetParent() types.Entity { return ipv4AddressSummaries.parent }

func (ipv4AddressSummaries *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary
// IPv4 address summary
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Subscriber IPv4 address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr
}

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetFilter() yfilter.YFilter { return ipv4AddressSummary.YFilter }

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) SetFilter(yf yfilter.YFilter) { ipv4AddressSummary.YFilter = yf }

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetSegmentPath() string {
    return "ipv4-address-summary" + "[address='" + fmt.Sprintf("%v", ipv4AddressSummary.Address) + "']"
}

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &ipv4AddressSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &ipv4AddressSummary.AddressFamilyXr
    }
    return nil
}

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &ipv4AddressSummary.StateXr
    children["address-family-xr"] = &ipv4AddressSummary.AddressFamilyXr
    return children
}

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4AddressSummary.Address
    return leafs
}

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetYangName() string { return "ipv4-address-summary" }

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) SetParent(parent types.Entity) { ipv4AddressSummary.parent = parent }

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetParent() types.Entity { return ipv4AddressSummary.parent }

func (ipv4AddressSummary *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary) GetParentYangName() string { return "ipv4-address-summaries" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr) GetParentYangName() string { return "ipv4-address-summary" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr) GetParentYangName() string { return "ipv4-address-summary" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_Ipv4AddressSummaries_Ipv4AddressSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_VrfSummaries
// Summary information filtered by VRF
type Subscriber_Session_Nodes_Node_VrfSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF summary. The type is slice of
    // Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary.
    VrfSummary []Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary
}

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetFilter() yfilter.YFilter { return vrfSummaries.YFilter }

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) SetFilter(yf yfilter.YFilter) { vrfSummaries.YFilter = yf }

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetGoName(yname string) string {
    if yname == "vrf-summary" { return "VrfSummary" }
    return ""
}

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetSegmentPath() string {
    return "vrf-summaries"
}

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf-summary" {
        for _, c := range vrfSummaries.VrfSummary {
            if vrfSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary{}
        vrfSummaries.VrfSummary = append(vrfSummaries.VrfSummary, child)
        return &vrfSummaries.VrfSummary[len(vrfSummaries.VrfSummary)-1]
    }
    return nil
}

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfSummaries.VrfSummary {
        children[vrfSummaries.VrfSummary[i].GetSegmentPath()] = &vrfSummaries.VrfSummary[i]
    }
    return children
}

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetYangName() string { return "vrf-summaries" }

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) SetParent(parent types.Entity) { vrfSummaries.parent = parent }

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetParent() types.Entity { return vrfSummaries.parent }

func (vrfSummaries *Subscriber_Session_Nodes_Node_VrfSummaries) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary
// VRF summary
type Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // State summary.
    StateXr Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr

    // Address family summary.
    AddressFamilyXr Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr
}

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetFilter() yfilter.YFilter { return vrfSummary.YFilter }

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) SetFilter(yf yfilter.YFilter) { vrfSummary.YFilter = yf }

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "state-xr" { return "StateXr" }
    if yname == "address-family-xr" { return "AddressFamilyXr" }
    return ""
}

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetSegmentPath() string {
    return "vrf-summary" + "[vrf-name='" + fmt.Sprintf("%v", vrfSummary.VrfName) + "']"
}

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "state-xr" {
        return &vrfSummary.StateXr
    }
    if childYangName == "address-family-xr" {
        return &vrfSummary.AddressFamilyXr
    }
    return nil
}

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["state-xr"] = &vrfSummary.StateXr
    children["address-family-xr"] = &vrfSummary.AddressFamilyXr
    return children
}

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrfSummary.VrfName
    return leafs
}

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetBundleName() string { return "cisco_ios_xr" }

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetYangName() string { return "vrf-summary" }

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) SetParent(parent types.Entity) { vrfSummary.parent = parent }

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetParent() types.Entity { return vrfSummary.parent }

func (vrfSummary *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary) GetParentYangName() string { return "vrf-summaries" }

// Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr
// State summary
type Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket
}

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetFilter() yfilter.YFilter { return stateXr.YFilter }

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) SetFilter(yf yfilter.YFilter) { stateXr.YFilter = yf }

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetSegmentPath() string {
    return "state-xr"
}

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &stateXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &stateXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &stateXr.IpSubscriberPacket
    }
    return nil
}

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &stateXr.Pppoe
    children["ip-subscriber-dhcp"] = &stateXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &stateXr.IpSubscriberPacket
    return children
}

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetBundleName() string { return "cisco_ios_xr" }

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetYangName() string { return "state-xr" }

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) SetParent(parent types.Entity) { stateXr.parent = parent }

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetParent() types.Entity { return stateXr.parent }

func (stateXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr) GetParentYangName() string { return "vrf-summary" }

// Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = pppoe.InitializedSessions
    leafs["connecting-sessions"] = pppoe.ConnectingSessions
    leafs["connected-sessions"] = pppoe.ConnectedSessions
    leafs["activated-sessions"] = pppoe.ActivatedSessions
    leafs["idle-sessions"] = pppoe.IdleSessions
    leafs["disconnecting-sessions"] = pppoe.DisconnectingSessions
    leafs["end-sessions"] = pppoe.EndSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_Pppoe) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberDhcp.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberDhcp.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberDhcp.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberDhcp.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberDhcp.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberDhcp.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberDhcp.EndSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberDhcp) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions in initialized state. The type is interface{} with range:
    // 0..4294967295.
    InitializedSessions interface{}

    // Sessions in connecting state. The type is interface{} with range:
    // 0..4294967295.
    ConnectingSessions interface{}

    // Sessions in connected state. The type is interface{} with range:
    // 0..4294967295.
    ConnectedSessions interface{}

    // Sessions in activated state. The type is interface{} with range:
    // 0..4294967295.
    ActivatedSessions interface{}

    // Sessions in idle state. The type is interface{} with range: 0..4294967295.
    IdleSessions interface{}

    // Sessions in disconnecting state. The type is interface{} with range:
    // 0..4294967295.
    DisconnectingSessions interface{}

    // Sessions in end state. The type is interface{} with range: 0..4294967295.
    EndSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "initialized-sessions" { return "InitializedSessions" }
    if yname == "connecting-sessions" { return "ConnectingSessions" }
    if yname == "connected-sessions" { return "ConnectedSessions" }
    if yname == "activated-sessions" { return "ActivatedSessions" }
    if yname == "idle-sessions" { return "IdleSessions" }
    if yname == "disconnecting-sessions" { return "DisconnectingSessions" }
    if yname == "end-sessions" { return "EndSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initialized-sessions"] = ipSubscriberPacket.InitializedSessions
    leafs["connecting-sessions"] = ipSubscriberPacket.ConnectingSessions
    leafs["connected-sessions"] = ipSubscriberPacket.ConnectedSessions
    leafs["activated-sessions"] = ipSubscriberPacket.ActivatedSessions
    leafs["idle-sessions"] = ipSubscriberPacket.IdleSessions
    leafs["disconnecting-sessions"] = ipSubscriberPacket.DisconnectingSessions
    leafs["end-sessions"] = ipSubscriberPacket.EndSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_StateXr_IpSubscriberPacket) GetParentYangName() string { return "state-xr" }

// Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr
// Address family summary
type Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPPoE summary.
    Pppoe Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe

    // IP subscriber DHCP summary.
    IpSubscriberDhcp Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp

    // IP subscriber packet summary.
    IpSubscriberPacket Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetFilter() yfilter.YFilter { return addressFamilyXr.YFilter }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) SetFilter(yf yfilter.YFilter) { addressFamilyXr.YFilter = yf }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetGoName(yname string) string {
    if yname == "pppoe" { return "Pppoe" }
    if yname == "ip-subscriber-dhcp" { return "IpSubscriberDhcp" }
    if yname == "ip-subscriber-packet" { return "IpSubscriberPacket" }
    return ""
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetSegmentPath() string {
    return "address-family-xr"
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pppoe" {
        return &addressFamilyXr.Pppoe
    }
    if childYangName == "ip-subscriber-dhcp" {
        return &addressFamilyXr.IpSubscriberDhcp
    }
    if childYangName == "ip-subscriber-packet" {
        return &addressFamilyXr.IpSubscriberPacket
    }
    return nil
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pppoe"] = &addressFamilyXr.Pppoe
    children["ip-subscriber-dhcp"] = &addressFamilyXr.IpSubscriberDhcp
    children["ip-subscriber-packet"] = &addressFamilyXr.IpSubscriberPacket
    return children
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetYangName() string { return "address-family-xr" }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) SetParent(parent types.Entity) { addressFamilyXr.parent = parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetParent() types.Entity { return addressFamilyXr.parent }

func (addressFamilyXr *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr) GetParentYangName() string { return "vrf-summary" }

// Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe
// PPPoE summary
type Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetSegmentPath() string {
    return "pppoe"
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = pppoe.InProgressSessions
    leafs["ipv4-only-sessions"] = pppoe.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = pppoe.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = pppoe.DualPartUpSessions
    leafs["dual-up-sessions"] = pppoe.DualUpSessions
    leafs["lac-sessions"] = pppoe.LacSessions
    return leafs
}

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_Pppoe) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp
// IP subscriber DHCP summary
type Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetFilter() yfilter.YFilter { return ipSubscriberDhcp.YFilter }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) SetFilter(yf yfilter.YFilter) { ipSubscriberDhcp.YFilter = yf }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetSegmentPath() string {
    return "ip-subscriber-dhcp"
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberDhcp.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberDhcp.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberDhcp.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberDhcp.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberDhcp.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberDhcp.LacSessions
    return leafs
}

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetYangName() string { return "ip-subscriber-dhcp" }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) SetParent(parent types.Entity) { ipSubscriberDhcp.parent = parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetParent() types.Entity { return ipSubscriberDhcp.parent }

func (ipSubscriberDhcp *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberDhcp) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket
// IP subscriber packet summary
type Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sessions with undecided address family. The type is interface{} with range:
    // 0..4294967295.
    InProgressSessions interface{}

    // IPv4 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv4OnlySessions interface{}

    // IPv6 only sessions . The type is interface{} with range: 0..4294967295.
    Ipv6OnlySessions interface{}

    // Dual stack partially up sessions. The type is interface{} with range:
    // 0..4294967295.
    DualPartUpSessions interface{}

    // Dual stack up sessions. The type is interface{} with range: 0..4294967295.
    DualUpSessions interface{}

    // LAC sessions. The type is interface{} with range: 0..4294967295.
    LacSessions interface{}
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetFilter() yfilter.YFilter { return ipSubscriberPacket.YFilter }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) SetFilter(yf yfilter.YFilter) { ipSubscriberPacket.YFilter = yf }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetGoName(yname string) string {
    if yname == "in-progress-sessions" { return "InProgressSessions" }
    if yname == "ipv4-only-sessions" { return "Ipv4OnlySessions" }
    if yname == "ipv6-only-sessions" { return "Ipv6OnlySessions" }
    if yname == "dual-part-up-sessions" { return "DualPartUpSessions" }
    if yname == "dual-up-sessions" { return "DualUpSessions" }
    if yname == "lac-sessions" { return "LacSessions" }
    return ""
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetSegmentPath() string {
    return "ip-subscriber-packet"
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-progress-sessions"] = ipSubscriberPacket.InProgressSessions
    leafs["ipv4-only-sessions"] = ipSubscriberPacket.Ipv4OnlySessions
    leafs["ipv6-only-sessions"] = ipSubscriberPacket.Ipv6OnlySessions
    leafs["dual-part-up-sessions"] = ipSubscriberPacket.DualPartUpSessions
    leafs["dual-up-sessions"] = ipSubscriberPacket.DualUpSessions
    leafs["lac-sessions"] = ipSubscriberPacket.LacSessions
    return leafs
}

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetYangName() string { return "ip-subscriber-packet" }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) SetParent(parent types.Entity) { ipSubscriberPacket.parent = parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetParent() types.Entity { return ipSubscriberPacket.parent }

func (ipSubscriberPacket *Subscriber_Session_Nodes_Node_VrfSummaries_VrfSummary_AddressFamilyXr_IpSubscriberPacket) GetParentYangName() string { return "address-family-xr" }

// Subscriber_Session_Nodes_Node_Sessions
// IP subscriber sessions
type Subscriber_Session_Nodes_Node_Sessions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber session information. The type is slice of
    // Subscriber_Session_Nodes_Node_Sessions_Session.
    Session []Subscriber_Session_Nodes_Node_Sessions_Session
}

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetFilter() yfilter.YFilter { return sessions.YFilter }

func (sessions *Subscriber_Session_Nodes_Node_Sessions) SetFilter(yf yfilter.YFilter) { sessions.YFilter = yf }

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetGoName(yname string) string {
    if yname == "session" { return "Session" }
    return ""
}

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetSegmentPath() string {
    return "sessions"
}

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        for _, c := range sessions.Session {
            if sessions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_Sessions_Session{}
        sessions.Session = append(sessions.Session, child)
        return &sessions.Session[len(sessions.Session)-1]
    }
    return nil
}

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessions.Session {
        children[sessions.Session[i].GetSegmentPath()] = &sessions.Session[i]
    }
    return children
}

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetBundleName() string { return "cisco_ios_xr" }

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetYangName() string { return "sessions" }

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessions *Subscriber_Session_Nodes_Node_Sessions) SetParent(parent types.Entity) { sessions.parent = parent }

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetParent() types.Entity { return sessions.parent }

func (sessions *Subscriber_Session_Nodes_Node_Sessions) GetParentYangName() string { return "node" }

// Subscriber_Session_Nodes_Node_Sessions_Session
// Subscriber session information
type Subscriber_Session_Nodes_Node_Sessions_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Session ID. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    SessionId interface{}

    // Subscriber session type. The type is IedgeOperSession.
    SessionType interface{}

    // PPPoE sub type. The type is IedgePppSub.
    PppoeSubType interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // VRF name. The type is string.
    VrfName interface{}

    // Circuit ID. The type is string.
    CircuitId interface{}

    // Remote ID. The type is string.
    RemoteId interface{}

    // PPPoE LNS address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LnsAddress interface{}

    // PPPoE LAC address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LacAddress interface{}

    // PPPoE LAC tunnel client authentication ID. The type is string.
    TunnelClientAuthenticationId interface{}

    // PPPoE LAC tunnel server authentication ID. The type is string.
    TunnelServerAuthenticationId interface{}

    // Session ip address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SessionIpAddress interface{}

    // Session IPv6 address. The type is string.
    SessionIpv6Address interface{}

    // Session IPv6 prefix. The type is string.
    SessionIpv6Prefix interface{}

    // Session delegated IPv6 prefix. The type is string.
    DelegatedIpv6Prefix interface{}

    // IPv6 Interface ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Ipv6InterfaceId interface{}

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    MacAddress interface{}

    // Accounting session ID. The type is string.
    AccountSessionId interface{}

    // NAS port. The type is string.
    NasPort interface{}

    // Username. The type is string.
    Username interface{}

    // Client Username. The type is string.
    Clientname interface{}

    // Formatted Username. The type is string.
    Formattedname interface{}

    // If true, session is authentic. The type is bool.
    IsSessionAuthentic interface{}

    // If true, session is authorized. The type is bool.
    IsSessionAuthor interface{}

    // Session state. The type is IedgeOperSessionState.
    SessionState interface{}

    // Session creation time in DDD MMM DD HH:MM:SS YYYY format eg: Tue Apr 11
    // 21:30:47 2011. The type is string.
    SessionCreationTime interface{}

    // Time when idle state change occurred in DDD MMM DD HH:MM:SS YYYY format eg:
    // Tue Apr 11 21:30:47 2011. The type is string.
    IdleStateChangeTime interface{}

    // Total session idle time (in seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    TotalSessionIdleTime interface{}

    // Access interface name associated with the session. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    AccessInterfaceName interface{}

    // Active pending callbacks bitmask. The type is interface{} with range:
    // 0..18446744073709551615.
    PendingCallbacks interface{}

    // AF status per Subscriber Session. The type is interface{} with range:
    // 0..4294967295.
    AfUpStatus interface{}

    // Session IPv4 state. The type is IedgeOperSessionAfState.
    SessionIpv4State interface{}

    // Session IPv6 state. The type is IedgeOperSessionAfState.
    SessionIpv6State interface{}

    // Accounting information.
    Accounting Subscriber_Session_Nodes_Node_Sessions_Session_Accounting

    // List of user profile attributes collected for subscriber session.
    UserProfileAttributes Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes

    // List of mobility attributes collected for subscriber session.
    MobilityAttributes Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes

    // Subscriber change of authorization information. The type is slice of
    // Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization.
    SessionChangeOfAuthorization []Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization
}

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetGoName(yname string) string {
    if yname == "session-id" { return "SessionId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "pppoe-sub-type" { return "PppoeSubType" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "circuit-id" { return "CircuitId" }
    if yname == "remote-id" { return "RemoteId" }
    if yname == "lns-address" { return "LnsAddress" }
    if yname == "lac-address" { return "LacAddress" }
    if yname == "tunnel-client-authentication-id" { return "TunnelClientAuthenticationId" }
    if yname == "tunnel-server-authentication-id" { return "TunnelServerAuthenticationId" }
    if yname == "session-ip-address" { return "SessionIpAddress" }
    if yname == "session-ipv6-address" { return "SessionIpv6Address" }
    if yname == "session-ipv6-prefix" { return "SessionIpv6Prefix" }
    if yname == "delegated-ipv6-prefix" { return "DelegatedIpv6Prefix" }
    if yname == "ipv6-interface-id" { return "Ipv6InterfaceId" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "account-session-id" { return "AccountSessionId" }
    if yname == "nas-port" { return "NasPort" }
    if yname == "username" { return "Username" }
    if yname == "clientname" { return "Clientname" }
    if yname == "formattedname" { return "Formattedname" }
    if yname == "is-session-authentic" { return "IsSessionAuthentic" }
    if yname == "is-session-author" { return "IsSessionAuthor" }
    if yname == "session-state" { return "SessionState" }
    if yname == "session-creation-time" { return "SessionCreationTime" }
    if yname == "idle-state-change-time" { return "IdleStateChangeTime" }
    if yname == "total-session-idle-time" { return "TotalSessionIdleTime" }
    if yname == "access-interface-name" { return "AccessInterfaceName" }
    if yname == "pending-callbacks" { return "PendingCallbacks" }
    if yname == "af-up-status" { return "AfUpStatus" }
    if yname == "session-ipv4-state" { return "SessionIpv4State" }
    if yname == "session-ipv6-state" { return "SessionIpv6State" }
    if yname == "accounting" { return "Accounting" }
    if yname == "user-profile-attributes" { return "UserProfileAttributes" }
    if yname == "mobility-attributes" { return "MobilityAttributes" }
    if yname == "session-change-of-authorization" { return "SessionChangeOfAuthorization" }
    return ""
}

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetSegmentPath() string {
    return "session" + "[session-id='" + fmt.Sprintf("%v", session.SessionId) + "']"
}

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accounting" {
        return &session.Accounting
    }
    if childYangName == "user-profile-attributes" {
        return &session.UserProfileAttributes
    }
    if childYangName == "mobility-attributes" {
        return &session.MobilityAttributes
    }
    if childYangName == "session-change-of-authorization" {
        for _, c := range session.SessionChangeOfAuthorization {
            if session.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization{}
        session.SessionChangeOfAuthorization = append(session.SessionChangeOfAuthorization, child)
        return &session.SessionChangeOfAuthorization[len(session.SessionChangeOfAuthorization)-1]
    }
    return nil
}

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["accounting"] = &session.Accounting
    children["user-profile-attributes"] = &session.UserProfileAttributes
    children["mobility-attributes"] = &session.MobilityAttributes
    for i := range session.SessionChangeOfAuthorization {
        children[session.SessionChangeOfAuthorization[i].GetSegmentPath()] = &session.SessionChangeOfAuthorization[i]
    }
    return children
}

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-id"] = session.SessionId
    leafs["session-type"] = session.SessionType
    leafs["pppoe-sub-type"] = session.PppoeSubType
    leafs["interface-name"] = session.InterfaceName
    leafs["vrf-name"] = session.VrfName
    leafs["circuit-id"] = session.CircuitId
    leafs["remote-id"] = session.RemoteId
    leafs["lns-address"] = session.LnsAddress
    leafs["lac-address"] = session.LacAddress
    leafs["tunnel-client-authentication-id"] = session.TunnelClientAuthenticationId
    leafs["tunnel-server-authentication-id"] = session.TunnelServerAuthenticationId
    leafs["session-ip-address"] = session.SessionIpAddress
    leafs["session-ipv6-address"] = session.SessionIpv6Address
    leafs["session-ipv6-prefix"] = session.SessionIpv6Prefix
    leafs["delegated-ipv6-prefix"] = session.DelegatedIpv6Prefix
    leafs["ipv6-interface-id"] = session.Ipv6InterfaceId
    leafs["mac-address"] = session.MacAddress
    leafs["account-session-id"] = session.AccountSessionId
    leafs["nas-port"] = session.NasPort
    leafs["username"] = session.Username
    leafs["clientname"] = session.Clientname
    leafs["formattedname"] = session.Formattedname
    leafs["is-session-authentic"] = session.IsSessionAuthentic
    leafs["is-session-author"] = session.IsSessionAuthor
    leafs["session-state"] = session.SessionState
    leafs["session-creation-time"] = session.SessionCreationTime
    leafs["idle-state-change-time"] = session.IdleStateChangeTime
    leafs["total-session-idle-time"] = session.TotalSessionIdleTime
    leafs["access-interface-name"] = session.AccessInterfaceName
    leafs["pending-callbacks"] = session.PendingCallbacks
    leafs["af-up-status"] = session.AfUpStatus
    leafs["session-ipv4-state"] = session.SessionIpv4State
    leafs["session-ipv6-state"] = session.SessionIpv6State
    return leafs
}

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetYangName() string { return "session" }

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetParent() types.Entity { return session.parent }

func (session *Subscriber_Session_Nodes_Node_Sessions_Session) GetParentYangName() string { return "sessions" }

// Subscriber_Session_Nodes_Node_Sessions_Session_Accounting
// Accounting information
type Subscriber_Session_Nodes_Node_Sessions_Session_Accounting struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accounting information. The type is slice of
    // Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession.
    AccountingSession []Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession
}

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetFilter() yfilter.YFilter { return accounting.YFilter }

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) SetFilter(yf yfilter.YFilter) { accounting.YFilter = yf }

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetGoName(yname string) string {
    if yname == "accounting-session" { return "AccountingSession" }
    return ""
}

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetSegmentPath() string {
    return "accounting"
}

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accounting-session" {
        for _, c := range accounting.AccountingSession {
            if accounting.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession{}
        accounting.AccountingSession = append(accounting.AccountingSession, child)
        return &accounting.AccountingSession[len(accounting.AccountingSession)-1]
    }
    return nil
}

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accounting.AccountingSession {
        children[accounting.AccountingSession[i].GetSegmentPath()] = &accounting.AccountingSession[i]
    }
    return children
}

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetBundleName() string { return "cisco_ios_xr" }

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetYangName() string { return "accounting" }

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) SetParent(parent types.Entity) { accounting.parent = parent }

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetParent() types.Entity { return accounting.parent }

func (accounting *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting) GetParentYangName() string { return "session" }

// Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession
// Accounting information
type Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accounting State Error Code for Accounting Session. The type is interface{}
    // with range: 0..4294967295.
    AccountingStateRc interface{}

    // Accounting Stop State. The type is interface{} with range: 0..4294967295.
    AccountingStopState interface{}

    // Accounting record context name. The type is string.
    RecordContextName interface{}

    // AAA method list name used to perform accounting. The type is string.
    MethodListName interface{}

    // Accounting session ID. The type is string.
    AccountSessionId interface{}

    // Accounting start time in DDD MMM DD HH:MM:SS YYYY format eg: Tue Feb 15
    // 15:12:49 2011. The type is string.
    AccountingStartTime interface{}

    // True if interim accounting is enabled. The type is bool.
    IsInterimAccountingEnabled interface{}

    // Interim accounting interval (in minutes). The type is interface{} with
    // range: 0..4294967295. Units are minute.
    InterimInterval interface{}

    // Time of last successful interim update in DDD MMM DD HH:MM:SS YYYY format
    // eg: Tue Apr 11 21:30 :47 2011. The type is string.
    LastSuccessfulInterimUpdateTime interface{}

    // Time of next interim update attempt (in seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NextInterimUpdateAttemptTime interface{}

    // Time of last interim update attempt in DDD MMM DD HH:MM:SS YYYY format eg:
    // Tue Apr 11 21:30:47 2011. The type is string.
    LastInterimUpdateAttemptTime interface{}

    // Number of interim updates sent. The type is interface{} with range:
    // 0..4294967295.
    SentInterimUpdates interface{}

    // Number of interim updates accepted. The type is interface{} with range:
    // 0..4294967295.
    AcceptedInterimUpdates interface{}

    // Number of interim updates rejected. The type is interface{} with range:
    // 0..4294967295.
    RejectedInterimUpdates interface{}

    // Number of interim update send failures. The type is interface{} with range:
    // 0..4294967295.
    SentInterimUpdateFailures interface{}
}

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetFilter() yfilter.YFilter { return accountingSession.YFilter }

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) SetFilter(yf yfilter.YFilter) { accountingSession.YFilter = yf }

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetGoName(yname string) string {
    if yname == "accounting-state-rc" { return "AccountingStateRc" }
    if yname == "accounting-stop-state" { return "AccountingStopState" }
    if yname == "record-context-name" { return "RecordContextName" }
    if yname == "method-list-name" { return "MethodListName" }
    if yname == "account-session-id" { return "AccountSessionId" }
    if yname == "accounting-start-time" { return "AccountingStartTime" }
    if yname == "is-interim-accounting-enabled" { return "IsInterimAccountingEnabled" }
    if yname == "interim-interval" { return "InterimInterval" }
    if yname == "last-successful-interim-update-time" { return "LastSuccessfulInterimUpdateTime" }
    if yname == "next-interim-update-attempt-time" { return "NextInterimUpdateAttemptTime" }
    if yname == "last-interim-update-attempt-time" { return "LastInterimUpdateAttemptTime" }
    if yname == "sent-interim-updates" { return "SentInterimUpdates" }
    if yname == "accepted-interim-updates" { return "AcceptedInterimUpdates" }
    if yname == "rejected-interim-updates" { return "RejectedInterimUpdates" }
    if yname == "sent-interim-update-failures" { return "SentInterimUpdateFailures" }
    return ""
}

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetSegmentPath() string {
    return "accounting-session"
}

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["accounting-state-rc"] = accountingSession.AccountingStateRc
    leafs["accounting-stop-state"] = accountingSession.AccountingStopState
    leafs["record-context-name"] = accountingSession.RecordContextName
    leafs["method-list-name"] = accountingSession.MethodListName
    leafs["account-session-id"] = accountingSession.AccountSessionId
    leafs["accounting-start-time"] = accountingSession.AccountingStartTime
    leafs["is-interim-accounting-enabled"] = accountingSession.IsInterimAccountingEnabled
    leafs["interim-interval"] = accountingSession.InterimInterval
    leafs["last-successful-interim-update-time"] = accountingSession.LastSuccessfulInterimUpdateTime
    leafs["next-interim-update-attempt-time"] = accountingSession.NextInterimUpdateAttemptTime
    leafs["last-interim-update-attempt-time"] = accountingSession.LastInterimUpdateAttemptTime
    leafs["sent-interim-updates"] = accountingSession.SentInterimUpdates
    leafs["accepted-interim-updates"] = accountingSession.AcceptedInterimUpdates
    leafs["rejected-interim-updates"] = accountingSession.RejectedInterimUpdates
    leafs["sent-interim-update-failures"] = accountingSession.SentInterimUpdateFailures
    return leafs
}

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetBundleName() string { return "cisco_ios_xr" }

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetYangName() string { return "accounting-session" }

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) SetParent(parent types.Entity) { accountingSession.parent = parent }

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetParent() types.Entity { return accountingSession.parent }

func (accountingSession *Subscriber_Session_Nodes_Node_Sessions_Session_Accounting_AccountingSession) GetParentYangName() string { return "accounting" }

// Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes
// List of user profile attributes collected for
// subscriber session
type Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 maximum transmission unit. The type is interface{} with range:
    // 0..4294967295.
    Ipv4Mtu interface{}

    // IPv4 unnumbered. The type is string.
    Ipv4Unnumbered interface{}

    // Authorization service type. The type is AaaAuthService.
    AuthorizationServiceType interface{}

    // Tunnel client endpoint. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelClientEndpoint interface{}

    // Tunnel server endpoint. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelServerEndpoint interface{}

    // Tunnel TOS setting. The type is interface{} with range: 0..4294967295.
    TunnelTosSetting interface{}

    // Tunnel medium. The type is AaaTunnelMedium.
    TunnelMedium interface{}

    // Tunnel preference. The type is interface{} with range: 0..4294967295.
    TunnelPreference interface{}

    // Tunnel client authentication ID. The type is string.
    TunnelClientAuthenticationId interface{}

    // Tunnel protocol. The type is AaaTunnelProto.
    TunnelProtocol interface{}

    // Actual data rate upstream (in Mbps). The type is interface{} with range:
    // 0..4294967295. Units are Mbit/s.
    ActualDataRateUpstream interface{}

    // Actual data rate downstream (in Mbps). The type is interface{} with range:
    // 0..4294967295. Units are Mbit/s.
    ActualDataRateDownstream interface{}

    // Attainable data rate upstream (in Mbps). The type is interface{} with
    // range: 0..4294967295. Units are Mbit/s.
    AttainableDataRateUpstream interface{}

    // Attainable data rate downstream (in Mbps). The type is interface{} with
    // range: 0..4294967295. Units are Mbit/s.
    AttainableDataRateDownstream interface{}

    // IP address pool. The type is string.
    PoolAddress interface{}

    // Circuit ID. The type is string.
    CircuitId interface{}

    // Connection receive speed. The type is interface{} with range:
    // 0..4294967295.
    ConnectionReceiveSpeed interface{}

    // Connection transmission speed. The type is interface{} with range:
    // 0..4294967295.
    ConnectionTransmissionSpeed interface{}

    // Destination station ID. The type is string.
    DestinationStationId interface{}

    // Primary DNS server address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PrimaryDnsServerAddress interface{}

    // Secondary DNS server address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SecondaryDnsServerAddress interface{}

    // Formatted calling station id. The type is string.
    FormattedCallingStationId interface{}

    // Interface name. The type is string.
    InterfaceName interface{}

    // Interface type. The type is AaaInterface.
    InterfaceType interface{}

    // Interim accounting interval. The type is interface{} with range:
    // 0..4294967295.
    InterimAccountingInterval interface{}

    // Ingress access list. The type is string.
    IngressAccessList interface{}

    // Egress access list. The type is string.
    EgressAccessList interface{}

    // IP netmask for the user. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpNetmask interface{}

    // True, if interworking functionality. The type is bool.
    IsInterworkingFunctionality interface{}

    // Maximum interleaving delay downstream (in Mbps). The type is interface{}
    // with range: 0..4294967295. Units are Mbit/s.
    MaxInterleavingDelayDownstream interface{}

    // Maximum interleaving delay upstream (in Mbps). The type is interface{} with
    // range: 0..4294967295. Units are Mbit/s.
    MaxInterleavingDelayUpstream interface{}

    // Maximum data rate upstream (in Mbps). The type is interface{} with range:
    // 0..4294967295. Units are Mbit/s.
    MaxDataRateUpstream interface{}

    // Maximum data rate downstream (in Mbps). The type is interface{} with range:
    // 0..4294967295. Units are Mbit/s.
    MaxDataRateDownstream interface{}

    // Minimum data rate downstream (in Mbps). The type is interface{} with range:
    // 0..4294967295. Units are Mbit/s.
    MinDataRateDownstream interface{}

    // Minimum data rate downstream low power (in Mbps). The type is interface{}
    // with range: 0..4294967295. Units are Mbit/s.
    MinDataRateDownstreamLowPower interface{}

    // Minimum data rate upstream low power (in Mbps). The type is interface{}
    // with range: 0..4294967295. Units are Mbit/s.
    MinDataRateUpstreamLowPower interface{}

    // Primary net bios server address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PrimaryNetBiosServerAddress interface{}

    // Secondary net bios server address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SecondaryNetBiosServerAddress interface{}

    // Parent interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterfaceName interface{}

    // Remote ID. The type is string.
    RemoteId interface{}

    // Route information for a user session. The type is string.
    Route interface{}

    // Session timeout (in seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    SessionTimeout interface{}

    // Strict RPF packets. The type is interface{} with range: 0..4294967295.
    StrictRpfPackets interface{}

    // Accounting session ID. The type is string.
    AccountingSessionId interface{}

    // Upstream parameterized QoS policy to be applied on the subscriber side. The
    // type is string.
    UpstreamParameterizedQosPolicy interface{}

    // Downstream parameterized QoS policy to be applied on the subscriber side.
    // The type is string.
    DownstreamParameterizedQosPolicy interface{}

    // Upstream QoS policy to be applied on the subscriber side. The type is
    // string.
    UpstreamQosPolicy interface{}

    // Downstream QoS policy to be applied on the subscriber side. The type is
    // string.
    DownstreamQosPolicy interface{}

    // Session termination cause. The type is AaaTerminateCause.
    SessionTerminationCause interface{}
}

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetFilter() yfilter.YFilter { return userProfileAttributes.YFilter }

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) SetFilter(yf yfilter.YFilter) { userProfileAttributes.YFilter = yf }

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetGoName(yname string) string {
    if yname == "ipv4mtu" { return "Ipv4Mtu" }
    if yname == "ipv4-unnumbered" { return "Ipv4Unnumbered" }
    if yname == "authorization-service-type" { return "AuthorizationServiceType" }
    if yname == "tunnel-client-endpoint" { return "TunnelClientEndpoint" }
    if yname == "tunnel-server-endpoint" { return "TunnelServerEndpoint" }
    if yname == "tunnel-tos-setting" { return "TunnelTosSetting" }
    if yname == "tunnel-medium" { return "TunnelMedium" }
    if yname == "tunnel-preference" { return "TunnelPreference" }
    if yname == "tunnel-client-authentication-id" { return "TunnelClientAuthenticationId" }
    if yname == "tunnel-protocol" { return "TunnelProtocol" }
    if yname == "actual-data-rate-upstream" { return "ActualDataRateUpstream" }
    if yname == "actual-data-rate-downstream" { return "ActualDataRateDownstream" }
    if yname == "attainable-data-rate-upstream" { return "AttainableDataRateUpstream" }
    if yname == "attainable-data-rate-downstream" { return "AttainableDataRateDownstream" }
    if yname == "pool-address" { return "PoolAddress" }
    if yname == "circuit-id" { return "CircuitId" }
    if yname == "connection-receive-speed" { return "ConnectionReceiveSpeed" }
    if yname == "connection-transmission-speed" { return "ConnectionTransmissionSpeed" }
    if yname == "destination-station-id" { return "DestinationStationId" }
    if yname == "primary-dns-server-address" { return "PrimaryDnsServerAddress" }
    if yname == "secondary-dns-server-address" { return "SecondaryDnsServerAddress" }
    if yname == "formatted-calling-station-id" { return "FormattedCallingStationId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-type" { return "InterfaceType" }
    if yname == "interim-accounting-interval" { return "InterimAccountingInterval" }
    if yname == "ingress-access-list" { return "IngressAccessList" }
    if yname == "egress-access-list" { return "EgressAccessList" }
    if yname == "ip-netmask" { return "IpNetmask" }
    if yname == "is-interworking-functionality" { return "IsInterworkingFunctionality" }
    if yname == "max-interleaving-delay-downstream" { return "MaxInterleavingDelayDownstream" }
    if yname == "max-interleaving-delay-upstream" { return "MaxInterleavingDelayUpstream" }
    if yname == "max-data-rate-upstream" { return "MaxDataRateUpstream" }
    if yname == "max-data-rate-downstream" { return "MaxDataRateDownstream" }
    if yname == "min-data-rate-downstream" { return "MinDataRateDownstream" }
    if yname == "min-data-rate-downstream-low-power" { return "MinDataRateDownstreamLowPower" }
    if yname == "min-data-rate-upstream-low-power" { return "MinDataRateUpstreamLowPower" }
    if yname == "primary-net-bios-server-address" { return "PrimaryNetBiosServerAddress" }
    if yname == "secondary-net-bios-server-address" { return "SecondaryNetBiosServerAddress" }
    if yname == "parent-interface-name" { return "ParentInterfaceName" }
    if yname == "remote-id" { return "RemoteId" }
    if yname == "route" { return "Route" }
    if yname == "session-timeout" { return "SessionTimeout" }
    if yname == "strict-rpf-packets" { return "StrictRpfPackets" }
    if yname == "accounting-session-id" { return "AccountingSessionId" }
    if yname == "upstream-parameterized-qos-policy" { return "UpstreamParameterizedQosPolicy" }
    if yname == "downstream-parameterized-qos-policy" { return "DownstreamParameterizedQosPolicy" }
    if yname == "upstream-qos-policy" { return "UpstreamQosPolicy" }
    if yname == "downstream-qos-policy" { return "DownstreamQosPolicy" }
    if yname == "session-termination-cause" { return "SessionTerminationCause" }
    return ""
}

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetSegmentPath() string {
    return "user-profile-attributes"
}

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ipv4mtu"] = userProfileAttributes.Ipv4Mtu
    leafs["ipv4-unnumbered"] = userProfileAttributes.Ipv4Unnumbered
    leafs["authorization-service-type"] = userProfileAttributes.AuthorizationServiceType
    leafs["tunnel-client-endpoint"] = userProfileAttributes.TunnelClientEndpoint
    leafs["tunnel-server-endpoint"] = userProfileAttributes.TunnelServerEndpoint
    leafs["tunnel-tos-setting"] = userProfileAttributes.TunnelTosSetting
    leafs["tunnel-medium"] = userProfileAttributes.TunnelMedium
    leafs["tunnel-preference"] = userProfileAttributes.TunnelPreference
    leafs["tunnel-client-authentication-id"] = userProfileAttributes.TunnelClientAuthenticationId
    leafs["tunnel-protocol"] = userProfileAttributes.TunnelProtocol
    leafs["actual-data-rate-upstream"] = userProfileAttributes.ActualDataRateUpstream
    leafs["actual-data-rate-downstream"] = userProfileAttributes.ActualDataRateDownstream
    leafs["attainable-data-rate-upstream"] = userProfileAttributes.AttainableDataRateUpstream
    leafs["attainable-data-rate-downstream"] = userProfileAttributes.AttainableDataRateDownstream
    leafs["pool-address"] = userProfileAttributes.PoolAddress
    leafs["circuit-id"] = userProfileAttributes.CircuitId
    leafs["connection-receive-speed"] = userProfileAttributes.ConnectionReceiveSpeed
    leafs["connection-transmission-speed"] = userProfileAttributes.ConnectionTransmissionSpeed
    leafs["destination-station-id"] = userProfileAttributes.DestinationStationId
    leafs["primary-dns-server-address"] = userProfileAttributes.PrimaryDnsServerAddress
    leafs["secondary-dns-server-address"] = userProfileAttributes.SecondaryDnsServerAddress
    leafs["formatted-calling-station-id"] = userProfileAttributes.FormattedCallingStationId
    leafs["interface-name"] = userProfileAttributes.InterfaceName
    leafs["interface-type"] = userProfileAttributes.InterfaceType
    leafs["interim-accounting-interval"] = userProfileAttributes.InterimAccountingInterval
    leafs["ingress-access-list"] = userProfileAttributes.IngressAccessList
    leafs["egress-access-list"] = userProfileAttributes.EgressAccessList
    leafs["ip-netmask"] = userProfileAttributes.IpNetmask
    leafs["is-interworking-functionality"] = userProfileAttributes.IsInterworkingFunctionality
    leafs["max-interleaving-delay-downstream"] = userProfileAttributes.MaxInterleavingDelayDownstream
    leafs["max-interleaving-delay-upstream"] = userProfileAttributes.MaxInterleavingDelayUpstream
    leafs["max-data-rate-upstream"] = userProfileAttributes.MaxDataRateUpstream
    leafs["max-data-rate-downstream"] = userProfileAttributes.MaxDataRateDownstream
    leafs["min-data-rate-downstream"] = userProfileAttributes.MinDataRateDownstream
    leafs["min-data-rate-downstream-low-power"] = userProfileAttributes.MinDataRateDownstreamLowPower
    leafs["min-data-rate-upstream-low-power"] = userProfileAttributes.MinDataRateUpstreamLowPower
    leafs["primary-net-bios-server-address"] = userProfileAttributes.PrimaryNetBiosServerAddress
    leafs["secondary-net-bios-server-address"] = userProfileAttributes.SecondaryNetBiosServerAddress
    leafs["parent-interface-name"] = userProfileAttributes.ParentInterfaceName
    leafs["remote-id"] = userProfileAttributes.RemoteId
    leafs["route"] = userProfileAttributes.Route
    leafs["session-timeout"] = userProfileAttributes.SessionTimeout
    leafs["strict-rpf-packets"] = userProfileAttributes.StrictRpfPackets
    leafs["accounting-session-id"] = userProfileAttributes.AccountingSessionId
    leafs["upstream-parameterized-qos-policy"] = userProfileAttributes.UpstreamParameterizedQosPolicy
    leafs["downstream-parameterized-qos-policy"] = userProfileAttributes.DownstreamParameterizedQosPolicy
    leafs["upstream-qos-policy"] = userProfileAttributes.UpstreamQosPolicy
    leafs["downstream-qos-policy"] = userProfileAttributes.DownstreamQosPolicy
    leafs["session-termination-cause"] = userProfileAttributes.SessionTerminationCause
    return leafs
}

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetYangName() string { return "user-profile-attributes" }

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) SetParent(parent types.Entity) { userProfileAttributes.parent = parent }

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetParent() types.Entity { return userProfileAttributes.parent }

func (userProfileAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_UserProfileAttributes) GetParentYangName() string { return "session" }

// Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes
// List of mobility attributes collected for
// subscriber session
type Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Cisco MPC Protocol. The type is bool.
    MpcProtocol interface{}

    // IPv4 address of Mobility Node. The type is string.
    MobilityIpv4Address interface{}

    // Default Gateway IPv4 Address. The type is string.
    MobilityDefaultIpv4Gateway interface{}

    // DNS Server Primary. The type is string.
    MobilityDnsServer interface{}

    // DHCP Server. The type is string.
    MobilityDhcpServer interface{}

    // IPv4 Netmask. The type is string.
    MobilityIpv4Netmask interface{}

    // Domain Name. The type is string.
    DomainName interface{}

    // Uplink GRE Key. The type is string.
    UplinkGreKey interface{}

    // Downlink GRE Key. The type is string.
    DownlinkGreKey interface{}

    // Duration of lease in seconds. The type is string. Units are second.
    LeaseTime interface{}
}

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetFilter() yfilter.YFilter { return mobilityAttributes.YFilter }

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) SetFilter(yf yfilter.YFilter) { mobilityAttributes.YFilter = yf }

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetGoName(yname string) string {
    if yname == "mpc-protocol" { return "MpcProtocol" }
    if yname == "mobility-ipv4-address" { return "MobilityIpv4Address" }
    if yname == "mobility-default-ipv4-gateway" { return "MobilityDefaultIpv4Gateway" }
    if yname == "mobility-dns-server" { return "MobilityDnsServer" }
    if yname == "mobility-dhcp-server" { return "MobilityDhcpServer" }
    if yname == "mobility-ipv4-netmask" { return "MobilityIpv4Netmask" }
    if yname == "domain-name" { return "DomainName" }
    if yname == "uplink-gre-key" { return "UplinkGreKey" }
    if yname == "downlink-gre-key" { return "DownlinkGreKey" }
    if yname == "lease-time" { return "LeaseTime" }
    return ""
}

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetSegmentPath() string {
    return "mobility-attributes"
}

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mpc-protocol"] = mobilityAttributes.MpcProtocol
    leafs["mobility-ipv4-address"] = mobilityAttributes.MobilityIpv4Address
    leafs["mobility-default-ipv4-gateway"] = mobilityAttributes.MobilityDefaultIpv4Gateway
    leafs["mobility-dns-server"] = mobilityAttributes.MobilityDnsServer
    leafs["mobility-dhcp-server"] = mobilityAttributes.MobilityDhcpServer
    leafs["mobility-ipv4-netmask"] = mobilityAttributes.MobilityIpv4Netmask
    leafs["domain-name"] = mobilityAttributes.DomainName
    leafs["uplink-gre-key"] = mobilityAttributes.UplinkGreKey
    leafs["downlink-gre-key"] = mobilityAttributes.DownlinkGreKey
    leafs["lease-time"] = mobilityAttributes.LeaseTime
    return leafs
}

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetYangName() string { return "mobility-attributes" }

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) SetParent(parent types.Entity) { mobilityAttributes.parent = parent }

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetParent() types.Entity { return mobilityAttributes.parent }

func (mobilityAttributes *Subscriber_Session_Nodes_Node_Sessions_Session_MobilityAttributes) GetParentYangName() string { return "session" }

// Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization
// Subscriber change of authorization information
type Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Coa Request Acked. The type is bool.
    RequestAcked interface{}

    // Request time in DDD MMM DD HH:MM:SS YYYY format eg: Tue Apr 11 21:30:47
    // 2011. The type is string.
    RequestTime interface{}

    // List of Request Attributes collected in COA response. The type is string
    // with pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    CoaRequestAttributes interface{}

    // Reply time in DDD MMM DD HH:MM:SS YYYY format eg : Tue Apr 11 21:30:47
    // 2011. The type is string.
    ReplyTime interface{}

    // List of Reply Attributes collected in COA response. The type is string with
    // pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    CoaReplyAttributes interface{}
}

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetFilter() yfilter.YFilter { return sessionChangeOfAuthorization.YFilter }

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) SetFilter(yf yfilter.YFilter) { sessionChangeOfAuthorization.YFilter = yf }

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetGoName(yname string) string {
    if yname == "request-acked" { return "RequestAcked" }
    if yname == "request-time" { return "RequestTime" }
    if yname == "coa-request-attributes" { return "CoaRequestAttributes" }
    if yname == "reply-time" { return "ReplyTime" }
    if yname == "coa-reply-attributes" { return "CoaReplyAttributes" }
    return ""
}

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetSegmentPath() string {
    return "session-change-of-authorization"
}

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["request-acked"] = sessionChangeOfAuthorization.RequestAcked
    leafs["request-time"] = sessionChangeOfAuthorization.RequestTime
    leafs["coa-request-attributes"] = sessionChangeOfAuthorization.CoaRequestAttributes
    leafs["reply-time"] = sessionChangeOfAuthorization.ReplyTime
    leafs["coa-reply-attributes"] = sessionChangeOfAuthorization.CoaReplyAttributes
    return leafs
}

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetBundleName() string { return "cisco_ios_xr" }

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetYangName() string { return "session-change-of-authorization" }

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) SetParent(parent types.Entity) { sessionChangeOfAuthorization.parent = parent }

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetParent() types.Entity { return sessionChangeOfAuthorization.parent }

func (sessionChangeOfAuthorization *Subscriber_Session_Nodes_Node_Sessions_Session_SessionChangeOfAuthorization) GetParentYangName() string { return "session" }

// IedgeLicenseManager
// iedge license manager
type IedgeLicenseManager struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session License Manager operational data for a location.
    Nodes IedgeLicenseManager_Nodes
}

func (iedgeLicenseManager *IedgeLicenseManager) GetFilter() yfilter.YFilter { return iedgeLicenseManager.YFilter }

func (iedgeLicenseManager *IedgeLicenseManager) SetFilter(yf yfilter.YFilter) { iedgeLicenseManager.YFilter = yf }

func (iedgeLicenseManager *IedgeLicenseManager) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (iedgeLicenseManager *IedgeLicenseManager) GetSegmentPath() string {
    return "Cisco-IOS-XR-iedge4710-oper:iedge-license-manager"
}

func (iedgeLicenseManager *IedgeLicenseManager) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &iedgeLicenseManager.Nodes
    }
    return nil
}

func (iedgeLicenseManager *IedgeLicenseManager) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &iedgeLicenseManager.Nodes
    return children
}

func (iedgeLicenseManager *IedgeLicenseManager) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (iedgeLicenseManager *IedgeLicenseManager) GetBundleName() string { return "cisco_ios_xr" }

func (iedgeLicenseManager *IedgeLicenseManager) GetYangName() string { return "iedge-license-manager" }

func (iedgeLicenseManager *IedgeLicenseManager) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iedgeLicenseManager *IedgeLicenseManager) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iedgeLicenseManager *IedgeLicenseManager) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iedgeLicenseManager *IedgeLicenseManager) SetParent(parent types.Entity) { iedgeLicenseManager.parent = parent }

func (iedgeLicenseManager *IedgeLicenseManager) GetParent() types.Entity { return iedgeLicenseManager.parent }

func (iedgeLicenseManager *IedgeLicenseManager) GetParentYangName() string { return "Cisco-IOS-XR-iedge4710-oper" }

// IedgeLicenseManager_Nodes
// Session License Manager operational data for a
// location
type IedgeLicenseManager_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Location. For example, 0/1/CPU0. The type is slice of
    // IedgeLicenseManager_Nodes_Node.
    Node []IedgeLicenseManager_Nodes_Node
}

func (nodes *IedgeLicenseManager_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *IedgeLicenseManager_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *IedgeLicenseManager_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *IedgeLicenseManager_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *IedgeLicenseManager_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := IedgeLicenseManager_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *IedgeLicenseManager_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *IedgeLicenseManager_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *IedgeLicenseManager_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *IedgeLicenseManager_Nodes) GetYangName() string { return "nodes" }

func (nodes *IedgeLicenseManager_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *IedgeLicenseManager_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *IedgeLicenseManager_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *IedgeLicenseManager_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *IedgeLicenseManager_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *IedgeLicenseManager_Nodes) GetParentYangName() string { return "iedge-license-manager" }

// IedgeLicenseManager_Nodes_Node
// Location. For example, 0/1/CPU0
type IedgeLicenseManager_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The node id to filter on. For example, 0/1/CPU0.
    // The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Nodeid interface{}

    // Display Session License Manager summary data.
    IedgeLicenseManagerSummary IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary
}

func (node *IedgeLicenseManager_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *IedgeLicenseManager_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *IedgeLicenseManager_Nodes_Node) GetGoName(yname string) string {
    if yname == "nodeid" { return "Nodeid" }
    if yname == "iedge-license-manager-summary" { return "IedgeLicenseManagerSummary" }
    return ""
}

func (node *IedgeLicenseManager_Nodes_Node) GetSegmentPath() string {
    return "node" + "[nodeid='" + fmt.Sprintf("%v", node.Nodeid) + "']"
}

func (node *IedgeLicenseManager_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iedge-license-manager-summary" {
        return &node.IedgeLicenseManagerSummary
    }
    return nil
}

func (node *IedgeLicenseManager_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iedge-license-manager-summary"] = &node.IedgeLicenseManagerSummary
    return children
}

func (node *IedgeLicenseManager_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nodeid"] = node.Nodeid
    return leafs
}

func (node *IedgeLicenseManager_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *IedgeLicenseManager_Nodes_Node) GetYangName() string { return "node" }

func (node *IedgeLicenseManager_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *IedgeLicenseManager_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *IedgeLicenseManager_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *IedgeLicenseManager_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *IedgeLicenseManager_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *IedgeLicenseManager_Nodes_Node) GetParentYangName() string { return "nodes" }

// IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary
// Display Session License Manager summary data
type IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // configured session limit. The type is interface{} with range:
    // 0..4294967295.
    SessionLimit interface{}

    // configured session threshold. The type is interface{} with range:
    // 0..4294967295.
    SessionThreshold interface{}

    // number of license. The type is interface{} with range: 0..4294967295.
    SessionLicenseCount interface{}

    // number of sessions. The type is interface{} with range: 0..4294967295.
    SessionCount interface{}
}

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetFilter() yfilter.YFilter { return iedgeLicenseManagerSummary.YFilter }

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) SetFilter(yf yfilter.YFilter) { iedgeLicenseManagerSummary.YFilter = yf }

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetGoName(yname string) string {
    if yname == "session-limit" { return "SessionLimit" }
    if yname == "session-threshold" { return "SessionThreshold" }
    if yname == "session-license-count" { return "SessionLicenseCount" }
    if yname == "session-count" { return "SessionCount" }
    return ""
}

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetSegmentPath() string {
    return "iedge-license-manager-summary"
}

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-limit"] = iedgeLicenseManagerSummary.SessionLimit
    leafs["session-threshold"] = iedgeLicenseManagerSummary.SessionThreshold
    leafs["session-license-count"] = iedgeLicenseManagerSummary.SessionLicenseCount
    leafs["session-count"] = iedgeLicenseManagerSummary.SessionCount
    return leafs
}

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetBundleName() string { return "cisco_ios_xr" }

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetYangName() string { return "iedge-license-manager-summary" }

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) SetParent(parent types.Entity) { iedgeLicenseManagerSummary.parent = parent }

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetParent() types.Entity { return iedgeLicenseManagerSummary.parent }

func (iedgeLicenseManagerSummary *IedgeLicenseManager_Nodes_Node_IedgeLicenseManagerSummary) GetParentYangName() string { return "node" }

