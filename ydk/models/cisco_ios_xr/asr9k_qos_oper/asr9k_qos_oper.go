// This module contains a collection of YANG definitions
// for Cisco IOS-XR asr9k-qos package operational data.
// 
// This module contains definitions
// for the following management objects:
//   platform-qos: QoS ASR9K platform operational data 
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package asr9k_qos_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package asr9k_qos_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-asr9k-qos-oper platform-qos}", reflect.TypeOf(PlatformQos{}))
    ydk.RegisterEntity("Cisco-IOS-XR-asr9k-qos-oper:platform-qos", reflect.TypeOf(PlatformQos{}))
}

// ActionOpcode represents Action opcode
type ActionOpcode string

const (
    // Precedence
    ActionOpcode_precedence ActionOpcode = "precedence"

    // DSCP
    ActionOpcode_dscp ActionOpcode = "dscp"

    // Discard class
    ActionOpcode_discard_class ActionOpcode = "discard-class"

    // QoS group
    ActionOpcode_qos_group ActionOpcode = "qos-group"

    // COS inner
    ActionOpcode_cos_inner ActionOpcode = "cos-inner"

    // COS
    ActionOpcode_cos ActionOpcode = "cos"

    // EXP top
    ActionOpcode_exp_top ActionOpcode = "exp-top"

    // EXP IMP
    ActionOpcode_exp_imp ActionOpcode = "exp-imp"

    // Tunnel precedence
    ActionOpcode_tunnel_precedence ActionOpcode = "tunnel-precedence"

    // Tunnel DSCP
    ActionOpcode_tunnel_dscp ActionOpcode = "tunnel-dscp"

    // ITAG DEI
    ActionOpcode_itag_dei ActionOpcode = "itag-dei"

    // ITAG COS
    ActionOpcode_itag_cos ActionOpcode = "itag-cos"

    // COS imposition
    ActionOpcode_cos_imposition ActionOpcode = "cos-imposition"

    // DEI imposition
    ActionOpcode_dei_imposition ActionOpcode = "dei-imposition"

    // DEI
    ActionOpcode_dei ActionOpcode = "dei"

    // No marking
    ActionOpcode_no_marking ActionOpcode = "no-marking"
)

// Wred represents WRED type
type Wred string

const (
    // WRED based on COS
    Wred_wred_cos Wred = "wred-cos"

    // WRED based on DSCP
    Wred_wred_dscp Wred = "wred-dscp"

    // WRED based on Precedence
    Wred_wred_precedence Wred = "wred-precedence"

    // WRED based on discard class
    Wred_wred_discard_class Wred = "wred-discard-class"

    // WRED based on MPLS EXP
    Wred_wred_mpls_exp Wred = "wred-mpls-exp"

    // RED with user defined min and max
    Wred_red_with_user_min_max Wred = "red-with-user-min-max"

    // RED with default min and max
    Wred_red_with_default_min_max Wred = "red-with-default-min-max"

    // WRED DEI
    Wred_wred_dei Wred = "wred-dei"
)

// TbAlgorithm represents Tokenbucket type
type TbAlgorithm string

const (
    // Inactive, configured but disabled
    TbAlgorithm_inactive TbAlgorithm = "inactive"

    // Single token bucket
    TbAlgorithm_single TbAlgorithm = "single"

    // Single rate three color marker
    TbAlgorithm_single_rate_tcm TbAlgorithm = "single-rate-tcm"

    // Two rate three color marker
    TbAlgorithm_two_rate_tcm TbAlgorithm = "two-rate-tcm"

    // Allows coupling between CIR and PIR tb's
    TbAlgorithm_mef_tcm TbAlgorithm = "mef-tcm"

    // Internal dummy token bucket for coupled-policer
    // child
    TbAlgorithm_dummy TbAlgorithm = "dummy"
)

// PolicyParamUnit represents Policy param unit
type PolicyParamUnit string

const (
    // policy param unit invalid
    PolicyParamUnit_policy_param_unit_invalid PolicyParamUnit = "policy-param-unit-invalid"

    // policy param unit bytes
    PolicyParamUnit_policy_param_unit_bytes PolicyParamUnit = "policy-param-unit-bytes"

    // policy param unit kbytes
    PolicyParamUnit_policy_param_unit_kbytes PolicyParamUnit = "policy-param-unit-kbytes"

    // policy param unit mbytes
    PolicyParamUnit_policy_param_unit_mbytes PolicyParamUnit = "policy-param-unit-mbytes"

    // policy param unit gbytes
    PolicyParamUnit_policy_param_unit_gbytes PolicyParamUnit = "policy-param-unit-gbytes"

    // policy param unit bitsps
    PolicyParamUnit_policy_param_unit_bitsps PolicyParamUnit = "policy-param-unit-bitsps"

    // policy param unit kbitsps
    PolicyParamUnit_policy_param_unit_kbitsps PolicyParamUnit = "policy-param-unit-kbitsps"

    // policy param unit mbitsps
    PolicyParamUnit_policy_param_unit_mbitsps PolicyParamUnit = "policy-param-unit-mbitsps"

    // policy param unit gbitsps
    PolicyParamUnit_policy_param_unit_gbitsps PolicyParamUnit = "policy-param-unit-gbitsps"

    // policy param unit cells ps
    PolicyParamUnit_policy_param_unit_cells_ps PolicyParamUnit = "policy-param-unit-cells-ps"

    // policy param unit packets ps
    PolicyParamUnit_policy_param_unit_packets_ps PolicyParamUnit = "policy-param-unit-packets-ps"

    // policy param unit us
    PolicyParamUnit_policy_param_unit_us PolicyParamUnit = "policy-param-unit-us"

    // policy param unit ms
    PolicyParamUnit_policy_param_unit_ms PolicyParamUnit = "policy-param-unit-ms"

    // policy param unit seconds
    PolicyParamUnit_policy_param_unit_seconds PolicyParamUnit = "policy-param-unit-seconds"

    // policy param unit packets
    PolicyParamUnit_policy_param_unit_packets PolicyParamUnit = "policy-param-unit-packets"

    // policy param unit cells
    PolicyParamUnit_policy_param_unit_cells PolicyParamUnit = "policy-param-unit-cells"

    // policy param unit percent
    PolicyParamUnit_policy_param_unit_percent PolicyParamUnit = "policy-param-unit-percent"

    // policy param unit per thousand
    PolicyParamUnit_policy_param_unit_per_thousand PolicyParamUnit = "policy-param-unit-per-thousand"

    // policy param unit per million
    PolicyParamUnit_policy_param_unit_per_million PolicyParamUnit = "policy-param-unit-per-million"

    // policy param unit hz
    PolicyParamUnit_policy_param_unit_hz PolicyParamUnit = "policy-param-unit-hz"

    // policy param unit khz
    PolicyParamUnit_policy_param_unit_khz PolicyParamUnit = "policy-param-unit-khz"

    // policy param unit mhz
    PolicyParamUnit_policy_param_unit_mhz PolicyParamUnit = "policy-param-unit-mhz"

    // policy param unit ratio
    PolicyParamUnit_policy_param_unit_ratio PolicyParamUnit = "policy-param-unit-ratio"

    // policy param unit max
    PolicyParamUnit_policy_param_unit_max PolicyParamUnit = "policy-param-unit-max"
)

// ShapeProfiletypeV2 represents SHAPE profile type
type ShapeProfiletypeV2 string

const (
    // Shape Profile Type Invalid
    ShapeProfiletypeV2_invalid ShapeProfiletypeV2 = "invalid"

    // Shape Profile Type Always
    ShapeProfiletypeV2_always ShapeProfiletypeV2 = "always"

    // Shape Profile Type Never
    ShapeProfiletypeV2_never ShapeProfiletypeV2 = "never"

    // Shape Profile Type Explicit
    ShapeProfiletypeV2_explicit ShapeProfiletypeV2 = "explicit"

    // Shape Profile Type Scale
    ShapeProfiletypeV2_scale ShapeProfiletypeV2 = "scale"

    // Shape Profile Type Grid
    ShapeProfiletypeV2_grid ShapeProfiletypeV2 = "grid"
)

// Queue represents Queue type
type Queue string

const (
    // Port default queue
    Queue_port_default Queue = "port-default"

    // The default queue in this policy
    Queue_class_default Queue = "class-default"

    // Create the priority 1 queue in the level which
    // will be shared by other p1 classes
    Queue_priority1_queue Queue = "priority1-queue"

    // Create the priority 2 queue in the level, which
    // will be shared by other p2 classes
    Queue_priority2_queue Queue = "priority2-queue"

    // Create the priority 3 queue in the level, which
    // will be shared by other p3 classes
    Queue_priority3_queue Queue = "priority3-queue"

    // Create the priority 4 queue in the level, which
    // will be shared by other p4 classes
    Queue_priority4_queue Queue = "priority4-queue"

    // Create the priority 5 queue in the level, which
    // will be shared by other p5 classes
    Queue_priority5_queue Queue = "priority5-queue"

    // Create the priority 6 queue in the level, which
    // will be shared by other p6 classes
    Queue_priority6_queue Queue = "priority6-queue"

    // Create the priority 7 queue in the level, which
    // will be shared by other p7 classes
    Queue_priority7_queue Queue = "priority7-queue"

    // Current level's priority 1 queue
    Queue_first_p1_class_name Queue = "first-p1-class-name"

    // Current level's priority 2 queue
    Queue_first_p2_class_name Queue = "first-p2-class-name"

    // Current level's priority 3 queue
    Queue_first_p3_class_name Queue = "first-p3-class-name"

    // Current level's priority 4 queue
    Queue_first_p4_class_name Queue = "first-p4-class-name"

    // Current level's priority 5 queue
    Queue_first_p5_class_name Queue = "first-p5-class-name"

    // Current level's priority 6 queue
    Queue_first_p6_class_name Queue = "first-p6-class-name"

    // Current level's priority 7 queue
    Queue_first_p7_class_name Queue = "first-p7-class-name"

    // Port priority 1 queue
    Queue_port_priority1 Queue = "port-priority1"

    // Port priority 2 queue
    Queue_port_priority2 Queue = "port-priority2"

    // Port priority 3 queue
    Queue_port_priority3 Queue = "port-priority3"

    // Port priority 4 queue
    Queue_port_priority4 Queue = "port-priority4"

    // Port priority 5 queue
    Queue_port_priority5 Queue = "port-priority5"

    // Port priority 6 queue
    Queue_port_priority6 Queue = "port-priority6"

    // Port priority 7 queue
    Queue_port_priority7 Queue = "port-priority7"

    // Create a new queue for this class
    Queue_new Queue = "new"

    // Under parent queue
    Queue_parent_class Queue = "parent-class"

    // Priority 1
    Queue_priority1 Queue = "priority1"

    // Priority 2
    Queue_priority2 Queue = "priority2"

    // Priority 3
    Queue_priority3 Queue = "priority3"

    // Priority 4
    Queue_priority4 Queue = "priority4"

    // Priority 5
    Queue_priority5 Queue = "priority5"

    // Priority 6
    Queue_priority6 Queue = "priority6"

    // Priority 7
    Queue_priority7 Queue = "priority7"

    // Priority ignored level
    Queue_priority_ignored_normal Queue = "priority-ignored-normal"

    // Normal priority
    Queue_normal_priority Queue = "normal-priority"

    // Class unknown
    Queue_class_unknown Queue = "class-unknown"

    // Unknown priority
    Queue_unknown_priority Queue = "unknown-priority"
)

// Wred1 represents Wred1
type Wred1 string

const (
    // wred cos cmd
    Wred1_wred_cos_cmd Wred1 = "wred-cos-cmd"

    // wred dscp cmd
    Wred1_wred_dscp_cmd Wred1 = "wred-dscp-cmd"

    // wred precedence cmd
    Wred1_wred_precedence_cmd Wred1 = "wred-precedence-cmd"

    // wred discard class cmd
    Wred1_wred_discard_class_cmd Wred1 = "wred-discard-class-cmd"

    // wred mpls exp cmd
    Wred1_wred_mpls_exp_cmd Wred1 = "wred-mpls-exp-cmd"

    // red with user min max
    Wred1_red_with_user_min_max Wred1 = "red-with-user-min-max"

    // red with default min max
    Wred1_red_with_default_min_max Wred1 = "red-with-default-min-max"

    // wred dei cmd
    Wred1_wred_dei_cmd Wred1 = "wred-dei-cmd"

    // wred ecn cmd
    Wred1_wred_ecn_cmd Wred1 = "wred-ecn-cmd"

    // wred invalid cmd
    Wred1_wred_invalid_cmd Wred1 = "wred-invalid-cmd"
)

// Action represents Action type
type Action string

const (
    // Police action transmit
    Action_police_transmit Action = "police-transmit"

    // Police action set transmit
    Action_police_set_transmit Action = "police-set-transmit"

    // Police action drop
    Action_police_drop Action = "police-drop"

    // Police action unknown
    Action_police_unknown Action = "police-unknown"
)

// QosUnit represents QoS parameter unit
type QosUnit string

const (
    // Invalid type
    QosUnit_invalid QosUnit = "invalid"

    // Bytes
    QosUnit_bytes QosUnit = "bytes"

    // Kilobytes
    QosUnit_kilobytes QosUnit = "kilobytes"

    // Megabytes
    QosUnit_megabytes QosUnit = "megabytes"

    // Gigabytes
    QosUnit_gigabytes QosUnit = "gigabytes"

    // Bits per second
    QosUnit_bps QosUnit = "bps"

    // Kilo bits per second
    QosUnit_kbps QosUnit = "kbps"

    // Mega bits per second
    QosUnit_mbps QosUnit = "mbps"

    // Giga bits per second
    QosUnit_gbps QosUnit = "gbps"

    // Cells per second
    QosUnit_cells_per_second QosUnit = "cells-per-second"

    // Packets per second
    QosUnit_packets_per_second QosUnit = "packets-per-second"

    // Microsecond
    QosUnit_microsecond QosUnit = "microsecond"

    // Millisecond
    QosUnit_millisecond QosUnit = "millisecond"

    // Number of packets
    QosUnit_packets QosUnit = "packets"

    // Number of cells
    QosUnit_cells QosUnit = "cells"

    // Percentage
    QosUnit_percentage QosUnit = "percentage"

    // Ratio
    QosUnit_ratio QosUnit = "ratio"
)

// CacState represents CAC/UBRL class states
type CacState string

const (
    // unknown
    CacState_unknown CacState = "unknown"

    // admit
    CacState_admit CacState = "admit"

    // redirect
    CacState_redirect CacState = "redirect"

    // ubrl
    CacState_ubrl CacState = "ubrl"
)

// PolicyState represents Different Interface states
type PolicyState string

const (
    // active
    PolicyState_active PolicyState = "active"

    // suspended
    PolicyState_suspended PolicyState = "suspended"
)

// PlatformQos
// QoS ASR9K platform operational data 
type PlatformQos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of nodes with platform specific QoS configuration.
    Nodes PlatformQos_Nodes
}

func (platformQos *PlatformQos) GetFilter() yfilter.YFilter { return platformQos.YFilter }

func (platformQos *PlatformQos) SetFilter(yf yfilter.YFilter) { platformQos.YFilter = yf }

func (platformQos *PlatformQos) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (platformQos *PlatformQos) GetSegmentPath() string {
    return "Cisco-IOS-XR-asr9k-qos-oper:platform-qos"
}

func (platformQos *PlatformQos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &platformQos.Nodes
    }
    return nil
}

func (platformQos *PlatformQos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &platformQos.Nodes
    return children
}

func (platformQos *PlatformQos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (platformQos *PlatformQos) GetBundleName() string { return "cisco_ios_xr" }

func (platformQos *PlatformQos) GetYangName() string { return "platform-qos" }

func (platformQos *PlatformQos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (platformQos *PlatformQos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (platformQos *PlatformQos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (platformQos *PlatformQos) SetParent(parent types.Entity) { platformQos.parent = parent }

func (platformQos *PlatformQos) GetParent() types.Entity { return platformQos.parent }

func (platformQos *PlatformQos) GetParentYangName() string { return "Cisco-IOS-XR-asr9k-qos-oper" }

// PlatformQos_Nodes
// List of nodes with platform specific QoS
// configuration
type PlatformQos_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node with platform specific QoS configuration. The type is slice of
    // PlatformQos_Nodes_Node.
    Node []PlatformQos_Nodes_Node
}

func (nodes *PlatformQos_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *PlatformQos_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *PlatformQos_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *PlatformQos_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *PlatformQos_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *PlatformQos_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *PlatformQos_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *PlatformQos_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *PlatformQos_Nodes) GetYangName() string { return "nodes" }

func (nodes *PlatformQos_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *PlatformQos_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *PlatformQos_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *PlatformQos_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *PlatformQos_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *PlatformQos_Nodes) GetParentYangName() string { return "platform-qos" }

// PlatformQos_Nodes_Node
// Node with platform specific QoS configuration
type PlatformQos_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Node name. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // QoS system capability.
    Capability PlatformQos_Nodes_Node_Capability

    // QoS list of interfaces.
    Interfaces PlatformQos_Nodes_Node_Interfaces

    // QoS list of bundle interfaces.
    BundleInterfaces PlatformQos_Nodes_Node_BundleInterfaces
}

func (node *PlatformQos_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *PlatformQos_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *PlatformQos_Nodes_Node) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "capability" { return "Capability" }
    if yname == "interfaces" { return "Interfaces" }
    if yname == "bundle-interfaces" { return "BundleInterfaces" }
    return ""
}

func (node *PlatformQos_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
}

func (node *PlatformQos_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "capability" {
        return &node.Capability
    }
    if childYangName == "interfaces" {
        return &node.Interfaces
    }
    if childYangName == "bundle-interfaces" {
        return &node.BundleInterfaces
    }
    return nil
}

func (node *PlatformQos_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["capability"] = &node.Capability
    children["interfaces"] = &node.Interfaces
    children["bundle-interfaces"] = &node.BundleInterfaces
    return children
}

func (node *PlatformQos_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = node.NodeName
    return leafs
}

func (node *PlatformQos_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *PlatformQos_Nodes_Node) GetYangName() string { return "node" }

func (node *PlatformQos_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *PlatformQos_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *PlatformQos_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *PlatformQos_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *PlatformQos_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *PlatformQos_Nodes_Node) GetParentYangName() string { return "nodes" }

// PlatformQos_Nodes_Node_Capability
// QoS system capability
type PlatformQos_Nodes_Node_Capability struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum policy maps per system. The type is interface{} with range:
    // 0..4294967295.
    MaxPolicyMaps interface{}

    // Maximum policy hierarchy. The type is interface{} with range:
    // 0..4294967295.
    MaxPolicyHierarchy interface{}

    // Maximum policy name length. The type is interface{} with range:
    // 0..4294967295.
    MaxPolicyNameLength interface{}

    // Maximum classes per child policy. The type is interface{} with range:
    // 0..4294967295.
    MaxClassesPerChildPolicy interface{}

    // Maximum classes per policy. The type is interface{} with range:
    // 0..4294967295.
    MaxClassesPerPolicy interface{}

    // Maximum classes per parent policy. The type is interface{} with range:
    // 0..4294967295.
    MaxClassesPerGrandParentPolicy interface{}

    // Maximum police actions per class. The type is interface{} with range:
    // 0..4294967295.
    MaxPoliceActionsPerClass interface{}

    // Maximum marking action  per class. The type is interface{} with range:
    // 0..4294967295.
    MaxMarkingActionsPerClass interface{}

    // Maximum matches per class. The type is interface{} with range:
    // 0..4294967295.
    MaxMatchesPerClass interface{}

    // Maximum classmap name length. The type is interface{} with range:
    // 0..4294967295.
    MaxClassmapNameLength interface{}

    // Maximum bundle members. The type is interface{} with range: 0..4294967295.
    MaxBundleMembers interface{}

    // Maximum instance name length. The type is interface{} with range:
    // 0..4294967295.
    MaxInstanceNameLength interface{}
}

func (capability *PlatformQos_Nodes_Node_Capability) GetFilter() yfilter.YFilter { return capability.YFilter }

func (capability *PlatformQos_Nodes_Node_Capability) SetFilter(yf yfilter.YFilter) { capability.YFilter = yf }

func (capability *PlatformQos_Nodes_Node_Capability) GetGoName(yname string) string {
    if yname == "max-policy-maps" { return "MaxPolicyMaps" }
    if yname == "max-policy-hierarchy" { return "MaxPolicyHierarchy" }
    if yname == "max-policy-name-length" { return "MaxPolicyNameLength" }
    if yname == "max-classes-per-child-policy" { return "MaxClassesPerChildPolicy" }
    if yname == "max-classes-per-policy" { return "MaxClassesPerPolicy" }
    if yname == "max-classes-per-grand-parent-policy" { return "MaxClassesPerGrandParentPolicy" }
    if yname == "max-police-actions-per-class" { return "MaxPoliceActionsPerClass" }
    if yname == "max-marking-actions-per-class" { return "MaxMarkingActionsPerClass" }
    if yname == "max-matches-per-class" { return "MaxMatchesPerClass" }
    if yname == "max-classmap-name-length" { return "MaxClassmapNameLength" }
    if yname == "max-bundle-members" { return "MaxBundleMembers" }
    if yname == "max-instance-name-length" { return "MaxInstanceNameLength" }
    return ""
}

func (capability *PlatformQos_Nodes_Node_Capability) GetSegmentPath() string {
    return "capability"
}

func (capability *PlatformQos_Nodes_Node_Capability) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (capability *PlatformQos_Nodes_Node_Capability) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (capability *PlatformQos_Nodes_Node_Capability) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-policy-maps"] = capability.MaxPolicyMaps
    leafs["max-policy-hierarchy"] = capability.MaxPolicyHierarchy
    leafs["max-policy-name-length"] = capability.MaxPolicyNameLength
    leafs["max-classes-per-child-policy"] = capability.MaxClassesPerChildPolicy
    leafs["max-classes-per-policy"] = capability.MaxClassesPerPolicy
    leafs["max-classes-per-grand-parent-policy"] = capability.MaxClassesPerGrandParentPolicy
    leafs["max-police-actions-per-class"] = capability.MaxPoliceActionsPerClass
    leafs["max-marking-actions-per-class"] = capability.MaxMarkingActionsPerClass
    leafs["max-matches-per-class"] = capability.MaxMatchesPerClass
    leafs["max-classmap-name-length"] = capability.MaxClassmapNameLength
    leafs["max-bundle-members"] = capability.MaxBundleMembers
    leafs["max-instance-name-length"] = capability.MaxInstanceNameLength
    return leafs
}

func (capability *PlatformQos_Nodes_Node_Capability) GetBundleName() string { return "cisco_ios_xr" }

func (capability *PlatformQos_Nodes_Node_Capability) GetYangName() string { return "capability" }

func (capability *PlatformQos_Nodes_Node_Capability) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (capability *PlatformQos_Nodes_Node_Capability) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (capability *PlatformQos_Nodes_Node_Capability) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (capability *PlatformQos_Nodes_Node_Capability) SetParent(parent types.Entity) { capability.parent = parent }

func (capability *PlatformQos_Nodes_Node_Capability) GetParent() types.Entity { return capability.parent }

func (capability *PlatformQos_Nodes_Node_Capability) GetParentYangName() string { return "node" }

// PlatformQos_Nodes_Node_Interfaces
// QoS list of interfaces
type PlatformQos_Nodes_Node_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS interface name. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface.
    Interface []PlatformQos_Nodes_Node_Interfaces_Interface
}

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *PlatformQos_Nodes_Node_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *PlatformQos_Nodes_Node_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *PlatformQos_Nodes_Node_Interfaces) GetParentYangName() string { return "node" }

// PlatformQos_Nodes_Node_Interfaces_Interface
// QoS interface name
type PlatformQos_Nodes_Node_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The name of the interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // QoS policy direction ingress.
    Input PlatformQos_Nodes_Node_Interfaces_Interface_Input

    // QoS policy direction egress.
    Output PlatformQos_Nodes_Node_Interfaces_Interface_Output
}

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "input" { return "Input" }
    if yname == "output" { return "Output" }
    return ""
}

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &self.Input
    }
    if childYangName == "output" {
        return &self.Output
    }
    return nil
}

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &self.Input
    children["output"] = &self.Output
    return children
}

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    return leafs
}

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *PlatformQos_Nodes_Node_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input
// QoS policy direction ingress
type PlatformQos_Nodes_Node_Interfaces_Interface_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS policy direction egress.
    Details PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details
}

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetGoName(yname string) string {
    if yname == "details" { return "Details" }
    return ""
}

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetSegmentPath() string {
    return "input"
}

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "details" {
        return &input.Details
    }
    return nil
}

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["details"] = &input.Details
    return children
}

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetYangName() string { return "input" }

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetParent() types.Entity { return input.parent }

func (input *PlatformQos_Nodes_Node_Interfaces_Interface_Input) GetParentYangName() string { return "interface" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details
// QoS policy direction egress
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS policy header.
    Header PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header

    // Trident QoS policy details.
    Policy PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy

    // Typhoon QoS policy details.
    PolicyTyphoon PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetFilter() yfilter.YFilter { return details.YFilter }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) SetFilter(yf yfilter.YFilter) { details.YFilter = yf }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetGoName(yname string) string {
    if yname == "header" { return "Header" }
    if yname == "policy" { return "Policy" }
    if yname == "policy-typhoon" { return "PolicyTyphoon" }
    return ""
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetSegmentPath() string {
    return "details"
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "header" {
        return &details.Header
    }
    if childYangName == "policy" {
        return &details.Policy
    }
    if childYangName == "policy-typhoon" {
        return &details.PolicyTyphoon
    }
    return nil
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["header"] = &details.Header
    children["policy"] = &details.Policy
    children["policy-typhoon"] = &details.PolicyTyphoon
    return children
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetBundleName() string { return "cisco_ios_xr" }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetYangName() string { return "details" }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) SetParent(parent types.Entity) { details.parent = parent }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetParent() types.Entity { return details.parent }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details) GetParentYangName() string { return "input" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header
// QoS policy header
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of classes. The type is interface{} with range: 0..65535.
    Classes interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Interface config and programmed parameters.
    InterfaceParameters PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters

    // Bandwidth that was programmed.
    ProgrammedBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetGoName(yname string) string {
    if yname == "classes" { return "Classes" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "interface-parameters" { return "InterfaceParameters" }
    if yname == "programmed-bandwidth" { return "ProgrammedBandwidth" }
    return ""
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetSegmentPath() string {
    return "header"
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-parameters" {
        return &header.InterfaceParameters
    }
    if childYangName == "programmed-bandwidth" {
        return &header.ProgrammedBandwidth
    }
    return nil
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-parameters"] = &header.InterfaceParameters
    children["programmed-bandwidth"] = &header.ProgrammedBandwidth
    return children
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["classes"] = header.Classes
    leafs["policy-name"] = header.PolicyName
    return leafs
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetYangName() string { return "header" }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetParent() types.Entity { return header.parent }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters
// Interface config and programmed parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth due to port speed change.
    PortConfigBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth

    // Bandwidth obtain from IM.
    AncpConfigBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth

    // ANCP bandwidth that was programmed.
    AncpProgrammedBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth

    // Bandwidth that was programmed.
    PortShaperRate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetFilter() yfilter.YFilter { return interfaceParameters.YFilter }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) SetFilter(yf yfilter.YFilter) { interfaceParameters.YFilter = yf }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetGoName(yname string) string {
    if yname == "port-config-bandwidth" { return "PortConfigBandwidth" }
    if yname == "ancp-config-bandwidth" { return "AncpConfigBandwidth" }
    if yname == "ancp-programmed-bandwidth" { return "AncpProgrammedBandwidth" }
    if yname == "port-shaper-rate" { return "PortShaperRate" }
    return ""
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetSegmentPath() string {
    return "interface-parameters"
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-config-bandwidth" {
        return &interfaceParameters.PortConfigBandwidth
    }
    if childYangName == "ancp-config-bandwidth" {
        return &interfaceParameters.AncpConfigBandwidth
    }
    if childYangName == "ancp-programmed-bandwidth" {
        return &interfaceParameters.AncpProgrammedBandwidth
    }
    if childYangName == "port-shaper-rate" {
        return &interfaceParameters.PortShaperRate
    }
    return nil
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-config-bandwidth"] = &interfaceParameters.PortConfigBandwidth
    children["ancp-config-bandwidth"] = &interfaceParameters.AncpConfigBandwidth
    children["ancp-programmed-bandwidth"] = &interfaceParameters.AncpProgrammedBandwidth
    children["port-shaper-rate"] = &interfaceParameters.PortShaperRate
    return children
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetYangName() string { return "interface-parameters" }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) SetParent(parent types.Entity) { interfaceParameters.parent = parent }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetParent() types.Entity { return interfaceParameters.parent }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters) GetParentYangName() string { return "header" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth
// Bandwidth due to port speed change
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetFilter() yfilter.YFilter { return portConfigBandwidth.YFilter }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) SetFilter(yf yfilter.YFilter) { portConfigBandwidth.YFilter = yf }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetSegmentPath() string {
    return "port-config-bandwidth"
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = portConfigBandwidth.Value
    leafs["unit"] = portConfigBandwidth.Unit
    return leafs
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetYangName() string { return "port-config-bandwidth" }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) SetParent(parent types.Entity) { portConfigBandwidth.parent = parent }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetParent() types.Entity { return portConfigBandwidth.parent }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortConfigBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth
// Bandwidth obtain from IM
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetFilter() yfilter.YFilter { return ancpConfigBandwidth.YFilter }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) SetFilter(yf yfilter.YFilter) { ancpConfigBandwidth.YFilter = yf }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetSegmentPath() string {
    return "ancp-config-bandwidth"
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = ancpConfigBandwidth.Value
    leafs["unit"] = ancpConfigBandwidth.Unit
    return leafs
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetYangName() string { return "ancp-config-bandwidth" }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) SetParent(parent types.Entity) { ancpConfigBandwidth.parent = parent }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetParent() types.Entity { return ancpConfigBandwidth.parent }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth
// ANCP bandwidth that was programmed
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetFilter() yfilter.YFilter { return ancpProgrammedBandwidth.YFilter }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) SetFilter(yf yfilter.YFilter) { ancpProgrammedBandwidth.YFilter = yf }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetSegmentPath() string {
    return "ancp-programmed-bandwidth"
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = ancpProgrammedBandwidth.Value
    leafs["unit"] = ancpProgrammedBandwidth.Unit
    return leafs
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetYangName() string { return "ancp-programmed-bandwidth" }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) SetParent(parent types.Entity) { ancpProgrammedBandwidth.parent = parent }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetParent() types.Entity { return ancpProgrammedBandwidth.parent }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate
// Bandwidth that was programmed
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetFilter() yfilter.YFilter { return portShaperRate.YFilter }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) SetFilter(yf yfilter.YFilter) { portShaperRate.YFilter = yf }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetSegmentPath() string {
    return "port-shaper-rate"
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = portShaperRate.Value
    leafs["unit"] = portShaperRate.Unit
    return leafs
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetBundleName() string { return "cisco_ios_xr" }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetYangName() string { return "port-shaper-rate" }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) SetParent(parent types.Entity) { portShaperRate.parent = parent }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetParent() types.Entity { return portShaperRate.parent }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_InterfaceParameters_PortShaperRate) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth
// Bandwidth that was programmed
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetFilter() yfilter.YFilter { return programmedBandwidth.YFilter }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) SetFilter(yf yfilter.YFilter) { programmedBandwidth.YFilter = yf }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetSegmentPath() string {
    return "programmed-bandwidth"
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = programmedBandwidth.Value
    leafs["unit"] = programmedBandwidth.Unit
    return leafs
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetYangName() string { return "programmed-bandwidth" }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) SetParent(parent types.Entity) { programmedBandwidth.parent = parent }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetParent() types.Entity { return programmedBandwidth.parent }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Header_ProgrammedBandwidth) GetParentYangName() string { return "header" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy
// Trident QoS policy details
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // qos show ea st v1. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1.
    QosShowEaStV1 []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetFilter() yfilter.YFilter { return policy.YFilter }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) SetFilter(yf yfilter.YFilter) { policy.YFilter = yf }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetGoName(yname string) string {
    if yname == "qos-show-ea-st-v1" { return "QosShowEaStV1" }
    return ""
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetSegmentPath() string {
    return "policy"
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos-show-ea-st-v1" {
        for _, c := range policy.QosShowEaStV1 {
            if policy.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1{}
        policy.QosShowEaStV1 = append(policy.QosShowEaStV1, child)
        return &policy.QosShowEaStV1[len(policy.QosShowEaStV1)-1]
    }
    return nil
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policy.QosShowEaStV1 {
        children[policy.QosShowEaStV1[i].GetSegmentPath()] = &policy.QosShowEaStV1[i]
    }
    return children
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetBundleName() string { return "cisco_ios_xr" }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetYangName() string { return "policy" }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) SetParent(parent types.Entity) { policy.parent = parent }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetParent() types.Entity { return policy.parent }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1
// qos show ea st v1
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class level. The type is interface{} with range: 0..255.
    ClassLevel interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Parent policy name. The type is string with length: 0..65.
    ParentPolicyName interface{}

    // Parent class name. The type is string with length: 0..65.
    ParentClassName interface{}

    // Queue parameters.
    Queue PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue

    // Queue limit parameters.
    QueueLimitParameters PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters

    // Shape parameters.
    Shape PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape

    // Police parameters.
    Police PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police

    // WFQ parameters.
    Wfq PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq

    // WRED parameters.
    Wred PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred

    // Mark parameters.
    Mark PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetFilter() yfilter.YFilter { return qosShowEaStV1.YFilter }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) SetFilter(yf yfilter.YFilter) { qosShowEaStV1.YFilter = yf }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetGoName(yname string) string {
    if yname == "class-level" { return "ClassLevel" }
    if yname == "class-name" { return "ClassName" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "parent-policy-name" { return "ParentPolicyName" }
    if yname == "parent-class-name" { return "ParentClassName" }
    if yname == "queue" { return "Queue" }
    if yname == "queue-limit-parameters" { return "QueueLimitParameters" }
    if yname == "shape" { return "Shape" }
    if yname == "police" { return "Police" }
    if yname == "wfq" { return "Wfq" }
    if yname == "wred" { return "Wred" }
    if yname == "mark" { return "Mark" }
    return ""
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetSegmentPath() string {
    return "qos-show-ea-st-v1"
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue" {
        return &qosShowEaStV1.Queue
    }
    if childYangName == "queue-limit-parameters" {
        return &qosShowEaStV1.QueueLimitParameters
    }
    if childYangName == "shape" {
        return &qosShowEaStV1.Shape
    }
    if childYangName == "police" {
        return &qosShowEaStV1.Police
    }
    if childYangName == "wfq" {
        return &qosShowEaStV1.Wfq
    }
    if childYangName == "wred" {
        return &qosShowEaStV1.Wred
    }
    if childYangName == "mark" {
        return &qosShowEaStV1.Mark
    }
    return nil
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue"] = &qosShowEaStV1.Queue
    children["queue-limit-parameters"] = &qosShowEaStV1.QueueLimitParameters
    children["shape"] = &qosShowEaStV1.Shape
    children["police"] = &qosShowEaStV1.Police
    children["wfq"] = &qosShowEaStV1.Wfq
    children["wred"] = &qosShowEaStV1.Wred
    children["mark"] = &qosShowEaStV1.Mark
    return children
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-level"] = qosShowEaStV1.ClassLevel
    leafs["class-name"] = qosShowEaStV1.ClassName
    leafs["policy-name"] = qosShowEaStV1.PolicyName
    leafs["parent-policy-name"] = qosShowEaStV1.ParentPolicyName
    leafs["parent-class-name"] = qosShowEaStV1.ParentClassName
    return leafs
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetBundleName() string { return "cisco_ios_xr" }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetYangName() string { return "qos-show-ea-st-v1" }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) SetParent(parent types.Entity) { qosShowEaStV1.parent = parent }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetParent() types.Entity { return qosShowEaStV1.parent }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1) GetParentYangName() string { return "policy" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue
// Queue parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Queue ID. The type is interface{} with range: 0..4294967295.
    QueueId interface{}

    // Queue type. The type is Queue.
    QueueType interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetGoName(yname string) string {
    if yname == "queue-id" { return "QueueId" }
    if yname == "queue-type" { return "QueueType" }
    if yname == "class-name" { return "ClassName" }
    return ""
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queue-id"] = queue.QueueId
    leafs["queue-type"] = queue.QueueType
    leafs["class-name"] = queue.ClassName
    return leafs
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetYangName() string { return "queue" }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetParent() types.Entity { return queue.parent }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Queue) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters
// Queue limit parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Scaling profile ID. The type is interface{} with range: 0..4294967295.
    ScalingProfileId interface{}

    // Queue limit in kbytes.
    QueueLimit PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit

    // Config queue limit.
    ConfigQueueLimit PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetFilter() yfilter.YFilter { return queueLimitParameters.YFilter }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) SetFilter(yf yfilter.YFilter) { queueLimitParameters.YFilter = yf }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scaling-profile-id" { return "ScalingProfileId" }
    if yname == "queue-limit" { return "QueueLimit" }
    if yname == "config-queue-limit" { return "ConfigQueueLimit" }
    return ""
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetSegmentPath() string {
    return "queue-limit-parameters"
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue-limit" {
        return &queueLimitParameters.QueueLimit
    }
    if childYangName == "config-queue-limit" {
        return &queueLimitParameters.ConfigQueueLimit
    }
    return nil
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue-limit"] = &queueLimitParameters.QueueLimit
    children["config-queue-limit"] = &queueLimitParameters.ConfigQueueLimit
    return children
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = queueLimitParameters.ProfileId
    leafs["scaling-profile-id"] = queueLimitParameters.ScalingProfileId
    return leafs
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetYangName() string { return "queue-limit-parameters" }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) SetParent(parent types.Entity) { queueLimitParameters.parent = parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetParent() types.Entity { return queueLimitParameters.parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit
// Queue limit in kbytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetFilter() yfilter.YFilter { return queueLimit.YFilter }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) SetFilter(yf yfilter.YFilter) { queueLimit.YFilter = yf }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetSegmentPath() string {
    return "queue-limit"
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = queueLimit.Value
    leafs["unit"] = queueLimit.Unit
    return leafs
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetYangName() string { return "queue-limit" }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) SetParent(parent types.Entity) { queueLimit.parent = parent }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetParent() types.Entity { return queueLimit.parent }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit
// Config queue limit
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetFilter() yfilter.YFilter { return configQueueLimit.YFilter }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) SetFilter(yf yfilter.YFilter) { configQueueLimit.YFilter = yf }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetSegmentPath() string {
    return "config-queue-limit"
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = configQueueLimit.Value
    leafs["unit"] = configQueueLimit.Unit
    return leafs
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetYangName() string { return "config-queue-limit" }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) SetParent(parent types.Entity) { configQueueLimit.parent = parent }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetParent() types.Entity { return configQueueLimit.parent }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape
// Shape parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // CIR in kbps.
    Cir PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir

    // Config bandwidth.
    ConfigBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth

    // CBS in bytes.
    Cbs PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs

    // PIR in kbps.
    Pir PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir

    // PBS in bytes.
    Pbs PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "config-bandwidth" { return "ConfigBandwidth" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    return ""
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &shape.Cir
    }
    if childYangName == "config-bandwidth" {
        return &shape.ConfigBandwidth
    }
    if childYangName == "cbs" {
        return &shape.Cbs
    }
    if childYangName == "pir" {
        return &shape.Pir
    }
    if childYangName == "pbs" {
        return &shape.Pbs
    }
    return nil
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &shape.Cir
    children["config-bandwidth"] = &shape.ConfigBandwidth
    children["cbs"] = &shape.Cbs
    children["pir"] = &shape.Pir
    children["pbs"] = &shape.Pbs
    return children
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = shape.ProfileId
    return leafs
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetYangName() string { return "shape" }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetParent() types.Entity { return shape.parent }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir
// CIR in kbps
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cir) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth
// Config bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum bandwidth rate.
    MinimumRate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetFilter() yfilter.YFilter { return configBandwidth.YFilter }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) SetFilter(yf yfilter.YFilter) { configBandwidth.YFilter = yf }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetGoName(yname string) string {
    if yname == "minimum-rate" { return "MinimumRate" }
    return ""
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetSegmentPath() string {
    return "config-bandwidth"
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minimum-rate" {
        return &configBandwidth.MinimumRate
    }
    return nil
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minimum-rate"] = &configBandwidth.MinimumRate
    return children
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetYangName() string { return "config-bandwidth" }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) SetParent(parent types.Entity) { configBandwidth.parent = parent }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetParent() types.Entity { return configBandwidth.parent }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate
// Minimum bandwidth rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetFilter() yfilter.YFilter { return minimumRate.YFilter }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) SetFilter(yf yfilter.YFilter) { minimumRate.YFilter = yf }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetSegmentPath() string {
    return "minimum-rate"
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minimumRate.Value
    leafs["unit"] = minimumRate.Unit
    return leafs
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetBundleName() string { return "cisco_ios_xr" }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetYangName() string { return "minimum-rate" }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) SetParent(parent types.Entity) { minimumRate.parent = parent }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetParent() types.Entity { return minimumRate.parent }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetParentYangName() string { return "config-bandwidth" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs
// CBS in bytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Cbs) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir
// PIR in kbps
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pir) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs
// PBS in bytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Shape_Pbs) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police
// Police parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policer type. The type is TbAlgorithm.
    PolicerType interface{}

    // Police profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // CIR.
    Cir PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir

    // CBS.
    Cbs PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs

    // PIR.
    Pir PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir

    // PBS.
    Pbs PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs

    // Police config parameters.
    PoliceConfigParameters PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetFilter() yfilter.YFilter { return police.YFilter }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) SetFilter(yf yfilter.YFilter) { police.YFilter = yf }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetGoName(yname string) string {
    if yname == "policer-type" { return "PolicerType" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    if yname == "police-config-parameters" { return "PoliceConfigParameters" }
    return ""
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetSegmentPath() string {
    return "police"
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &police.Cir
    }
    if childYangName == "cbs" {
        return &police.Cbs
    }
    if childYangName == "pir" {
        return &police.Pir
    }
    if childYangName == "pbs" {
        return &police.Pbs
    }
    if childYangName == "police-config-parameters" {
        return &police.PoliceConfigParameters
    }
    return nil
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &police.Cir
    children["cbs"] = &police.Cbs
    children["pir"] = &police.Pir
    children["pbs"] = &police.Pbs
    children["police-config-parameters"] = &police.PoliceConfigParameters
    return children
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policer-type"] = police.PolicerType
    leafs["profile-id"] = police.ProfileId
    return leafs
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetBundleName() string { return "cisco_ios_xr" }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetYangName() string { return "police" }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) SetParent(parent types.Entity) { police.parent = parent }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetParent() types.Entity { return police.parent }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir
// CIR
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs
// CBS
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Cbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir
// PIR
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs
// PBS
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_Pbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters
// Police config parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Average rate.
    AverageRate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate

    // Peak rate.
    PeakRate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate

    // Conform burst.
    ConformBurst PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst

    // Exceed burst.
    ExceedBurst PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetFilter() yfilter.YFilter { return policeConfigParameters.YFilter }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) SetFilter(yf yfilter.YFilter) { policeConfigParameters.YFilter = yf }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetGoName(yname string) string {
    if yname == "average-rate" { return "AverageRate" }
    if yname == "peak-rate" { return "PeakRate" }
    if yname == "conform-burst" { return "ConformBurst" }
    if yname == "exceed-burst" { return "ExceedBurst" }
    return ""
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetSegmentPath() string {
    return "police-config-parameters"
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "average-rate" {
        return &policeConfigParameters.AverageRate
    }
    if childYangName == "peak-rate" {
        return &policeConfigParameters.PeakRate
    }
    if childYangName == "conform-burst" {
        return &policeConfigParameters.ConformBurst
    }
    if childYangName == "exceed-burst" {
        return &policeConfigParameters.ExceedBurst
    }
    return nil
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["average-rate"] = &policeConfigParameters.AverageRate
    children["peak-rate"] = &policeConfigParameters.PeakRate
    children["conform-burst"] = &policeConfigParameters.ConformBurst
    children["exceed-burst"] = &policeConfigParameters.ExceedBurst
    return children
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetBundleName() string { return "cisco_ios_xr" }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetYangName() string { return "police-config-parameters" }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) SetParent(parent types.Entity) { policeConfigParameters.parent = parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetParent() types.Entity { return policeConfigParameters.parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate
// Average rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetFilter() yfilter.YFilter { return averageRate.YFilter }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) SetFilter(yf yfilter.YFilter) { averageRate.YFilter = yf }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetSegmentPath() string {
    return "average-rate"
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = averageRate.Value
    leafs["unit"] = averageRate.Unit
    return leafs
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetBundleName() string { return "cisco_ios_xr" }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetYangName() string { return "average-rate" }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) SetParent(parent types.Entity) { averageRate.parent = parent }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetParent() types.Entity { return averageRate.parent }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate
// Peak rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetFilter() yfilter.YFilter { return peakRate.YFilter }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) SetFilter(yf yfilter.YFilter) { peakRate.YFilter = yf }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetSegmentPath() string {
    return "peak-rate"
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = peakRate.Value
    leafs["unit"] = peakRate.Unit
    return leafs
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetBundleName() string { return "cisco_ios_xr" }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetYangName() string { return "peak-rate" }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) SetParent(parent types.Entity) { peakRate.parent = parent }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetParent() types.Entity { return peakRate.parent }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst
// Conform burst
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetFilter() yfilter.YFilter { return conformBurst.YFilter }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) SetFilter(yf yfilter.YFilter) { conformBurst.YFilter = yf }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetSegmentPath() string {
    return "conform-burst"
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = conformBurst.Value
    leafs["unit"] = conformBurst.Unit
    return leafs
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetBundleName() string { return "cisco_ios_xr" }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetYangName() string { return "conform-burst" }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) SetParent(parent types.Entity) { conformBurst.parent = parent }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetParent() types.Entity { return conformBurst.parent }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst
// Exceed burst
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetFilter() yfilter.YFilter { return exceedBurst.YFilter }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) SetFilter(yf yfilter.YFilter) { exceedBurst.YFilter = yf }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetSegmentPath() string {
    return "exceed-burst"
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = exceedBurst.Value
    leafs["unit"] = exceedBurst.Unit
    return leafs
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetBundleName() string { return "cisco_ios_xr" }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetYangName() string { return "exceed-burst" }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) SetParent(parent types.Entity) { exceedBurst.parent = parent }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetParent() types.Entity { return exceedBurst.parent }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq
// WFQ parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WFQ profile. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Committed weight. The type is interface{} with range: 0..4294967295.
    CommittedWeight interface{}

    // Excess weight. The type is interface{} with range: 0..65535.
    ExcessWeight interface{}

    // Parent Excess ratio. The type is interface{} with range: 0..65535.
    ExcessRatio interface{}

    // Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Level. The type is interface{} with range: 0..255.
    Level interface{}

    // Parent bandwidth.
    ParentBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth

    // CFG Bandwidth.
    Bandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetFilter() yfilter.YFilter { return wfq.YFilter }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) SetFilter(yf yfilter.YFilter) { wfq.YFilter = yf }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "committed-weight" { return "CommittedWeight" }
    if yname == "excess-weight" { return "ExcessWeight" }
    if yname == "excess-ratio" { return "ExcessRatio" }
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "level" { return "Level" }
    if yname == "parent-bandwidth" { return "ParentBandwidth" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetSegmentPath() string {
    return "wfq"
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "parent-bandwidth" {
        return &wfq.ParentBandwidth
    }
    if childYangName == "bandwidth" {
        return &wfq.Bandwidth
    }
    return nil
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["parent-bandwidth"] = &wfq.ParentBandwidth
    children["bandwidth"] = &wfq.Bandwidth
    return children
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = wfq.ProfileId
    leafs["committed-weight"] = wfq.CommittedWeight
    leafs["excess-weight"] = wfq.ExcessWeight
    leafs["excess-ratio"] = wfq.ExcessRatio
    leafs["chunk-id"] = wfq.ChunkId
    leafs["level"] = wfq.Level
    return leafs
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetBundleName() string { return "cisco_ios_xr" }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetYangName() string { return "wfq" }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) SetParent(parent types.Entity) { wfq.parent = parent }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetParent() types.Entity { return wfq.parent }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth
// Parent bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetFilter() yfilter.YFilter { return parentBandwidth.YFilter }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) SetFilter(yf yfilter.YFilter) { parentBandwidth.YFilter = yf }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetSegmentPath() string {
    return "parent-bandwidth"
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = parentBandwidth.Value
    leafs["unit"] = parentBandwidth.Unit
    return leafs
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetYangName() string { return "parent-bandwidth" }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) SetParent(parent types.Entity) { parentBandwidth.parent = parent }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetParent() types.Entity { return parentBandwidth.parent }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth
// CFG Bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = bandwidth.Value
    leafs["unit"] = bandwidth.Unit
    return leafs
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred
// WRED parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED type. The type is Wred.
    Type interface{}

    // Number of curves. The type is interface{} with range: 0..65535.
    CurveXr interface{}

    // Table ID. The type is interface{} with range: 0..255.
    TableId interface{}

    // Profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Scaling profile ID. The type is interface{} with range: 0..4294967295.
    ScalingProfileId interface{}

    // Curve details. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve.
    Curve []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetFilter() yfilter.YFilter { return wred.YFilter }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) SetFilter(yf yfilter.YFilter) { wred.YFilter = yf }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "curve-xr" { return "CurveXr" }
    if yname == "table-id" { return "TableId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scaling-profile-id" { return "ScalingProfileId" }
    if yname == "curve" { return "Curve" }
    return ""
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetSegmentPath() string {
    return "wred"
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "curve" {
        for _, c := range wred.Curve {
            if wred.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve{}
        wred.Curve = append(wred.Curve, child)
        return &wred.Curve[len(wred.Curve)-1]
    }
    return nil
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range wred.Curve {
        children[wred.Curve[i].GetSegmentPath()] = &wred.Curve[i]
    }
    return children
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = wred.Type
    leafs["curve-xr"] = wred.CurveXr
    leafs["table-id"] = wred.TableId
    leafs["profile-id"] = wred.ProfileId
    leafs["scaling-profile-id"] = wred.ScalingProfileId
    return leafs
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetBundleName() string { return "cisco_ios_xr" }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetYangName() string { return "wred" }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) SetParent(parent types.Entity) { wred.parent = parent }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetParent() types.Entity { return wred.parent }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve
// Curve details
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED precedence match if precedence start value equals to end value Format:
    // <start-value> , else range Format: <start-value> <end-value>. The type is
    // string.
    Match interface{}

    // Minimum threshold.
    MinThreshold PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold

    // Minimum threshold WRED context.
    MinThresholdUserConfig PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig

    // Maximum threshold.
    MaxThreshold PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold

    // Maximum threshold WRED context.
    MaxThresholdUserConfig PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetFilter() yfilter.YFilter { return curve.YFilter }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) SetFilter(yf yfilter.YFilter) { curve.YFilter = yf }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetGoName(yname string) string {
    if yname == "match" { return "Match" }
    if yname == "min-threshold" { return "MinThreshold" }
    if yname == "min-threshold-user-config" { return "MinThresholdUserConfig" }
    if yname == "max-threshold" { return "MaxThreshold" }
    if yname == "max-threshold-user-config" { return "MaxThresholdUserConfig" }
    return ""
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetSegmentPath() string {
    return "curve"
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-threshold" {
        return &curve.MinThreshold
    }
    if childYangName == "min-threshold-user-config" {
        return &curve.MinThresholdUserConfig
    }
    if childYangName == "max-threshold" {
        return &curve.MaxThreshold
    }
    if childYangName == "max-threshold-user-config" {
        return &curve.MaxThresholdUserConfig
    }
    return nil
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-threshold"] = &curve.MinThreshold
    children["min-threshold-user-config"] = &curve.MinThresholdUserConfig
    children["max-threshold"] = &curve.MaxThreshold
    children["max-threshold-user-config"] = &curve.MaxThresholdUserConfig
    return children
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["match"] = curve.Match
    return leafs
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetBundleName() string { return "cisco_ios_xr" }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetYangName() string { return "curve" }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) SetParent(parent types.Entity) { curve.parent = parent }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetParent() types.Entity { return curve.parent }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve) GetParentYangName() string { return "wred" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold
// Minimum threshold
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetFilter() yfilter.YFilter { return minThreshold.YFilter }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) SetFilter(yf yfilter.YFilter) { minThreshold.YFilter = yf }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetSegmentPath() string {
    return "min-threshold"
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThreshold.Value
    leafs["unit"] = minThreshold.Unit
    return leafs
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetYangName() string { return "min-threshold" }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) SetParent(parent types.Entity) { minThreshold.parent = parent }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetParent() types.Entity { return minThreshold.parent }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig
// Minimum threshold WRED context
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetFilter() yfilter.YFilter { return minThresholdUserConfig.YFilter }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) SetFilter(yf yfilter.YFilter) { minThresholdUserConfig.YFilter = yf }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetSegmentPath() string {
    return "min-threshold-user-config"
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThresholdUserConfig.Value
    leafs["unit"] = minThresholdUserConfig.Unit
    return leafs
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetYangName() string { return "min-threshold-user-config" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) SetParent(parent types.Entity) { minThresholdUserConfig.parent = parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetParent() types.Entity { return minThresholdUserConfig.parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold
// Maximum threshold
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetFilter() yfilter.YFilter { return maxThreshold.YFilter }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) SetFilter(yf yfilter.YFilter) { maxThreshold.YFilter = yf }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetSegmentPath() string {
    return "max-threshold"
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThreshold.Value
    leafs["unit"] = maxThreshold.Unit
    return leafs
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetYangName() string { return "max-threshold" }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) SetParent(parent types.Entity) { maxThreshold.parent = parent }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetParent() types.Entity { return maxThreshold.parent }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig
// Maximum threshold WRED context
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetFilter() yfilter.YFilter { return maxThresholdUserConfig.YFilter }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) SetFilter(yf yfilter.YFilter) { maxThresholdUserConfig.YFilter = yf }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetSegmentPath() string {
    return "max-threshold-user-config"
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThresholdUserConfig.Value
    leafs["unit"] = maxThresholdUserConfig.Unit
    return leafs
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetYangName() string { return "max-threshold-user-config" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) SetParent(parent types.Entity) { maxThresholdUserConfig.parent = parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetParent() types.Entity { return maxThresholdUserConfig.parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark
// Mark parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Child mark only.
    ChildMark PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark

    // Child police conform mark.
    PoliceConform PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform

    // Child police exceed mark.
    PoliceExceed PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed

    // Child police violate mark.
    PoliceViolate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate

    // Parent mark only.
    ParentMark PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark

    // Parent police conform mark.
    ParentPoliceConform PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform

    // Parent police exceed mark.
    ParentPoliceExceed PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed

    // Parent police violate mark.
    ParentPoliceViolate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetFilter() yfilter.YFilter { return mark.YFilter }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) SetFilter(yf yfilter.YFilter) { mark.YFilter = yf }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetGoName(yname string) string {
    if yname == "child-mark" { return "ChildMark" }
    if yname == "police-conform" { return "PoliceConform" }
    if yname == "police-exceed" { return "PoliceExceed" }
    if yname == "police-violate" { return "PoliceViolate" }
    if yname == "parent-mark" { return "ParentMark" }
    if yname == "parent-police-conform" { return "ParentPoliceConform" }
    if yname == "parent-police-exceed" { return "ParentPoliceExceed" }
    if yname == "parent-police-violate" { return "ParentPoliceViolate" }
    return ""
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetSegmentPath() string {
    return "mark"
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "child-mark" {
        return &mark.ChildMark
    }
    if childYangName == "police-conform" {
        return &mark.PoliceConform
    }
    if childYangName == "police-exceed" {
        return &mark.PoliceExceed
    }
    if childYangName == "police-violate" {
        return &mark.PoliceViolate
    }
    if childYangName == "parent-mark" {
        return &mark.ParentMark
    }
    if childYangName == "parent-police-conform" {
        return &mark.ParentPoliceConform
    }
    if childYangName == "parent-police-exceed" {
        return &mark.ParentPoliceExceed
    }
    if childYangName == "parent-police-violate" {
        return &mark.ParentPoliceViolate
    }
    return nil
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["child-mark"] = &mark.ChildMark
    children["police-conform"] = &mark.PoliceConform
    children["police-exceed"] = &mark.PoliceExceed
    children["police-violate"] = &mark.PoliceViolate
    children["parent-mark"] = &mark.ParentMark
    children["parent-police-conform"] = &mark.ParentPoliceConform
    children["parent-police-exceed"] = &mark.ParentPoliceExceed
    children["parent-police-violate"] = &mark.ParentPoliceViolate
    return children
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetBundleName() string { return "cisco_ios_xr" }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetYangName() string { return "mark" }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) SetParent(parent types.Entity) { mark.parent = parent }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetParent() types.Entity { return mark.parent }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark
// Child mark only
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetFilter() yfilter.YFilter { return childMark.YFilter }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) SetFilter(yf yfilter.YFilter) { childMark.YFilter = yf }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetSegmentPath() string {
    return "child-mark"
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range childMark.MarkDetail {
            if childMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail{}
        childMark.MarkDetail = append(childMark.MarkDetail, child)
        return &childMark.MarkDetail[len(childMark.MarkDetail)-1]
    }
    return nil
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range childMark.MarkDetail {
        children[childMark.MarkDetail[i].GetSegmentPath()] = &childMark.MarkDetail[i]
    }
    return children
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = childMark.ActionType
    return leafs
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetBundleName() string { return "cisco_ios_xr" }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetYangName() string { return "child-mark" }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) SetParent(parent types.Entity) { childMark.parent = parent }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetParent() types.Entity { return childMark.parent }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetParentYangName() string { return "child-mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform
// Child police conform mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetFilter() yfilter.YFilter { return policeConform.YFilter }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) SetFilter(yf yfilter.YFilter) { policeConform.YFilter = yf }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetSegmentPath() string {
    return "police-conform"
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeConform.MarkDetail {
            if policeConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail{}
        policeConform.MarkDetail = append(policeConform.MarkDetail, child)
        return &policeConform.MarkDetail[len(policeConform.MarkDetail)-1]
    }
    return nil
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeConform.MarkDetail {
        children[policeConform.MarkDetail[i].GetSegmentPath()] = &policeConform.MarkDetail[i]
    }
    return children
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeConform.ActionType
    return leafs
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetYangName() string { return "police-conform" }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) SetParent(parent types.Entity) { policeConform.parent = parent }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetParent() types.Entity { return policeConform.parent }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetParentYangName() string { return "police-conform" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed
// Child police exceed mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetFilter() yfilter.YFilter { return policeExceed.YFilter }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) SetFilter(yf yfilter.YFilter) { policeExceed.YFilter = yf }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetSegmentPath() string {
    return "police-exceed"
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeExceed.MarkDetail {
            if policeExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail{}
        policeExceed.MarkDetail = append(policeExceed.MarkDetail, child)
        return &policeExceed.MarkDetail[len(policeExceed.MarkDetail)-1]
    }
    return nil
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeExceed.MarkDetail {
        children[policeExceed.MarkDetail[i].GetSegmentPath()] = &policeExceed.MarkDetail[i]
    }
    return children
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeExceed.ActionType
    return leafs
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetYangName() string { return "police-exceed" }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) SetParent(parent types.Entity) { policeExceed.parent = parent }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetParent() types.Entity { return policeExceed.parent }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetParentYangName() string { return "police-exceed" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate
// Child police violate mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetFilter() yfilter.YFilter { return policeViolate.YFilter }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) SetFilter(yf yfilter.YFilter) { policeViolate.YFilter = yf }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetSegmentPath() string {
    return "police-violate"
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeViolate.MarkDetail {
            if policeViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail{}
        policeViolate.MarkDetail = append(policeViolate.MarkDetail, child)
        return &policeViolate.MarkDetail[len(policeViolate.MarkDetail)-1]
    }
    return nil
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeViolate.MarkDetail {
        children[policeViolate.MarkDetail[i].GetSegmentPath()] = &policeViolate.MarkDetail[i]
    }
    return children
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeViolate.ActionType
    return leafs
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetYangName() string { return "police-violate" }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) SetParent(parent types.Entity) { policeViolate.parent = parent }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetParent() types.Entity { return policeViolate.parent }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetParentYangName() string { return "police-violate" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark
// Parent mark only
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetFilter() yfilter.YFilter { return parentMark.YFilter }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) SetFilter(yf yfilter.YFilter) { parentMark.YFilter = yf }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetSegmentPath() string {
    return "parent-mark"
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentMark.MarkDetail {
            if parentMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail{}
        parentMark.MarkDetail = append(parentMark.MarkDetail, child)
        return &parentMark.MarkDetail[len(parentMark.MarkDetail)-1]
    }
    return nil
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentMark.MarkDetail {
        children[parentMark.MarkDetail[i].GetSegmentPath()] = &parentMark.MarkDetail[i]
    }
    return children
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentMark.ActionType
    return leafs
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetBundleName() string { return "cisco_ios_xr" }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetYangName() string { return "parent-mark" }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) SetParent(parent types.Entity) { parentMark.parent = parent }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetParent() types.Entity { return parentMark.parent }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetParentYangName() string { return "parent-mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform
// Parent police conform mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetFilter() yfilter.YFilter { return parentPoliceConform.YFilter }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) SetFilter(yf yfilter.YFilter) { parentPoliceConform.YFilter = yf }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetSegmentPath() string {
    return "parent-police-conform"
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceConform.MarkDetail {
            if parentPoliceConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail{}
        parentPoliceConform.MarkDetail = append(parentPoliceConform.MarkDetail, child)
        return &parentPoliceConform.MarkDetail[len(parentPoliceConform.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceConform.MarkDetail {
        children[parentPoliceConform.MarkDetail[i].GetSegmentPath()] = &parentPoliceConform.MarkDetail[i]
    }
    return children
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceConform.ActionType
    return leafs
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetYangName() string { return "parent-police-conform" }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) SetParent(parent types.Entity) { parentPoliceConform.parent = parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetParent() types.Entity { return parentPoliceConform.parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetParentYangName() string { return "parent-police-conform" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed
// Parent police exceed mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetFilter() yfilter.YFilter { return parentPoliceExceed.YFilter }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) SetFilter(yf yfilter.YFilter) { parentPoliceExceed.YFilter = yf }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetSegmentPath() string {
    return "parent-police-exceed"
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceExceed.MarkDetail {
            if parentPoliceExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail{}
        parentPoliceExceed.MarkDetail = append(parentPoliceExceed.MarkDetail, child)
        return &parentPoliceExceed.MarkDetail[len(parentPoliceExceed.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceExceed.MarkDetail {
        children[parentPoliceExceed.MarkDetail[i].GetSegmentPath()] = &parentPoliceExceed.MarkDetail[i]
    }
    return children
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceExceed.ActionType
    return leafs
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetYangName() string { return "parent-police-exceed" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) SetParent(parent types.Entity) { parentPoliceExceed.parent = parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetParent() types.Entity { return parentPoliceExceed.parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetParentYangName() string { return "parent-police-exceed" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate
// Parent police violate mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetFilter() yfilter.YFilter { return parentPoliceViolate.YFilter }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) SetFilter(yf yfilter.YFilter) { parentPoliceViolate.YFilter = yf }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetSegmentPath() string {
    return "parent-police-violate"
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceViolate.MarkDetail {
            if parentPoliceViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail{}
        parentPoliceViolate.MarkDetail = append(parentPoliceViolate.MarkDetail, child)
        return &parentPoliceViolate.MarkDetail[len(parentPoliceViolate.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceViolate.MarkDetail {
        children[parentPoliceViolate.MarkDetail[i].GetSegmentPath()] = &parentPoliceViolate.MarkDetail[i]
    }
    return children
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceViolate.ActionType
    return leafs
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetYangName() string { return "parent-police-violate" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) SetParent(parent types.Entity) { parentPoliceViolate.parent = parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetParent() types.Entity { return parentPoliceViolate.parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetParentYangName() string { return "parent-police-violate" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon
// Typhoon QoS policy details
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // qos show ea st v2. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2.
    QosShowEaStV2 []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetFilter() yfilter.YFilter { return policyTyphoon.YFilter }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) SetFilter(yf yfilter.YFilter) { policyTyphoon.YFilter = yf }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetGoName(yname string) string {
    if yname == "qos-show-ea-st-v2" { return "QosShowEaStV2" }
    return ""
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetSegmentPath() string {
    return "policy-typhoon"
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos-show-ea-st-v2" {
        for _, c := range policyTyphoon.QosShowEaStV2 {
            if policyTyphoon.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2{}
        policyTyphoon.QosShowEaStV2 = append(policyTyphoon.QosShowEaStV2, child)
        return &policyTyphoon.QosShowEaStV2[len(policyTyphoon.QosShowEaStV2)-1]
    }
    return nil
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policyTyphoon.QosShowEaStV2 {
        children[policyTyphoon.QosShowEaStV2[i].GetSegmentPath()] = &policyTyphoon.QosShowEaStV2[i]
    }
    return children
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetBundleName() string { return "cisco_ios_xr" }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetYangName() string { return "policy-typhoon" }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) SetParent(parent types.Entity) { policyTyphoon.parent = parent }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetParent() types.Entity { return policyTyphoon.parent }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2
// qos show ea st v2
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class level. The type is interface{} with range: 0..255.
    ClassLevel interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Parent policy name. The type is string with length: 0..65.
    ParentPolicyName interface{}

    // Parent class name. The type is string with length: 0..65.
    ParentClassName interface{}

    // Queue parameters.
    Queue PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue

    // Queue limit parameters.
    QueueLimitParameters PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters

    // Shape parameters.
    Shape PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape

    // Police parameters.
    Police PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police

    // WFQ parameters.
    Wfq PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq

    // WRED parameters.
    Wred PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred

    // Mark parameters.
    Mark PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetFilter() yfilter.YFilter { return qosShowEaStV2.YFilter }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) SetFilter(yf yfilter.YFilter) { qosShowEaStV2.YFilter = yf }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetGoName(yname string) string {
    if yname == "class-level" { return "ClassLevel" }
    if yname == "class-name" { return "ClassName" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "parent-policy-name" { return "ParentPolicyName" }
    if yname == "parent-class-name" { return "ParentClassName" }
    if yname == "queue" { return "Queue" }
    if yname == "queue-limit-parameters" { return "QueueLimitParameters" }
    if yname == "shape" { return "Shape" }
    if yname == "police" { return "Police" }
    if yname == "wfq" { return "Wfq" }
    if yname == "wred" { return "Wred" }
    if yname == "mark" { return "Mark" }
    return ""
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetSegmentPath() string {
    return "qos-show-ea-st-v2"
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue" {
        return &qosShowEaStV2.Queue
    }
    if childYangName == "queue-limit-parameters" {
        return &qosShowEaStV2.QueueLimitParameters
    }
    if childYangName == "shape" {
        return &qosShowEaStV2.Shape
    }
    if childYangName == "police" {
        return &qosShowEaStV2.Police
    }
    if childYangName == "wfq" {
        return &qosShowEaStV2.Wfq
    }
    if childYangName == "wred" {
        return &qosShowEaStV2.Wred
    }
    if childYangName == "mark" {
        return &qosShowEaStV2.Mark
    }
    return nil
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue"] = &qosShowEaStV2.Queue
    children["queue-limit-parameters"] = &qosShowEaStV2.QueueLimitParameters
    children["shape"] = &qosShowEaStV2.Shape
    children["police"] = &qosShowEaStV2.Police
    children["wfq"] = &qosShowEaStV2.Wfq
    children["wred"] = &qosShowEaStV2.Wred
    children["mark"] = &qosShowEaStV2.Mark
    return children
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-level"] = qosShowEaStV2.ClassLevel
    leafs["class-name"] = qosShowEaStV2.ClassName
    leafs["policy-name"] = qosShowEaStV2.PolicyName
    leafs["parent-policy-name"] = qosShowEaStV2.ParentPolicyName
    leafs["parent-class-name"] = qosShowEaStV2.ParentClassName
    return leafs
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetBundleName() string { return "cisco_ios_xr" }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetYangName() string { return "qos-show-ea-st-v2" }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) SetParent(parent types.Entity) { qosShowEaStV2.parent = parent }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetParent() types.Entity { return qosShowEaStV2.parent }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2) GetParentYangName() string { return "policy-typhoon" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue
// Queue parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Queue ID. The type is interface{} with range: 0..4294967295.
    QueueId interface{}

    // Queue type. The type is Queue.
    QueueType interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetGoName(yname string) string {
    if yname == "queue-id" { return "QueueId" }
    if yname == "queue-type" { return "QueueType" }
    if yname == "class-name" { return "ClassName" }
    return ""
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queue-id"] = queue.QueueId
    leafs["queue-type"] = queue.QueueType
    leafs["class-name"] = queue.ClassName
    return leafs
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetYangName() string { return "queue" }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetParent() types.Entity { return queue.parent }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters
// Queue limit parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Absolute Index. The type is interface{} with range: 0..65535.
    AbsoluteIndex interface{}

    // Template ID. The type is interface{} with range: 0..65535.
    TemplateId interface{}

    // Curve ID. The type is interface{} with range: 0..65535.
    CurveId interface{}

    // Queue limit in kbytes.
    QueueLimit PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit

    // Config queue limit.
    ConfigQueueLimit PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetFilter() yfilter.YFilter { return queueLimitParameters.YFilter }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) SetFilter(yf yfilter.YFilter) { queueLimitParameters.YFilter = yf }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetGoName(yname string) string {
    if yname == "absolute-index" { return "AbsoluteIndex" }
    if yname == "template-id" { return "TemplateId" }
    if yname == "curve-id" { return "CurveId" }
    if yname == "queue-limit" { return "QueueLimit" }
    if yname == "config-queue-limit" { return "ConfigQueueLimit" }
    return ""
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetSegmentPath() string {
    return "queue-limit-parameters"
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue-limit" {
        return &queueLimitParameters.QueueLimit
    }
    if childYangName == "config-queue-limit" {
        return &queueLimitParameters.ConfigQueueLimit
    }
    return nil
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue-limit"] = &queueLimitParameters.QueueLimit
    children["config-queue-limit"] = &queueLimitParameters.ConfigQueueLimit
    return children
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["absolute-index"] = queueLimitParameters.AbsoluteIndex
    leafs["template-id"] = queueLimitParameters.TemplateId
    leafs["curve-id"] = queueLimitParameters.CurveId
    return leafs
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetYangName() string { return "queue-limit-parameters" }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) SetParent(parent types.Entity) { queueLimitParameters.parent = parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetParent() types.Entity { return queueLimitParameters.parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit
// Queue limit in kbytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetFilter() yfilter.YFilter { return queueLimit.YFilter }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) SetFilter(yf yfilter.YFilter) { queueLimit.YFilter = yf }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetSegmentPath() string {
    return "queue-limit"
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = queueLimit.Value
    leafs["unit"] = queueLimit.Unit
    return leafs
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetYangName() string { return "queue-limit" }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) SetParent(parent types.Entity) { queueLimit.parent = parent }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetParent() types.Entity { return queueLimit.parent }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit
// Config queue limit
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetFilter() yfilter.YFilter { return configQueueLimit.YFilter }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) SetFilter(yf yfilter.YFilter) { configQueueLimit.YFilter = yf }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetSegmentPath() string {
    return "config-queue-limit"
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = configQueueLimit.Value
    leafs["unit"] = configQueueLimit.Unit
    return leafs
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetYangName() string { return "config-queue-limit" }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) SetParent(parent types.Entity) { configQueueLimit.parent = parent }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetParent() types.Entity { return configQueueLimit.parent }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape
// Shape parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // CIR Shaper type. The type is ShapeProfiletypeV2.
    CirShapeType interface{}

    // PIR Shaper type. The type is ShapeProfiletypeV2.
    PirShapeType interface{}

    // CIR shaper params.
    CirShape PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape

    // PIR shaper params.
    PirShape PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetGoName(yname string) string {
    if yname == "cir-shape-type" { return "CirShapeType" }
    if yname == "pir-shape-type" { return "PirShapeType" }
    if yname == "cir-shape" { return "CirShape" }
    if yname == "pir-shape" { return "PirShape" }
    return ""
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir-shape" {
        return &shape.CirShape
    }
    if childYangName == "pir-shape" {
        return &shape.PirShape
    }
    return nil
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir-shape"] = &shape.CirShape
    children["pir-shape"] = &shape.PirShape
    return children
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cir-shape-type"] = shape.CirShapeType
    leafs["pir-shape-type"] = shape.PirShapeType
    return leafs
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetYangName() string { return "shape" }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetParent() types.Entity { return shape.parent }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape
// CIR shaper params
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // Scale Factor. The type is interface{} with range: 0..65535.
    ScaleFactor interface{}

    // CIR in kbps.
    Cir PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir

    // Config bandwidth.
    ConfigBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth

    // CBS in bytes.
    Cbs PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetFilter() yfilter.YFilter { return cirShape.YFilter }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) SetFilter(yf yfilter.YFilter) { cirShape.YFilter = yf }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetGoName(yname string) string {
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scale-factor" { return "ScaleFactor" }
    if yname == "cir" { return "Cir" }
    if yname == "config-bandwidth" { return "ConfigBandwidth" }
    if yname == "cbs" { return "Cbs" }
    return ""
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetSegmentPath() string {
    return "cir-shape"
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &cirShape.Cir
    }
    if childYangName == "config-bandwidth" {
        return &cirShape.ConfigBandwidth
    }
    if childYangName == "cbs" {
        return &cirShape.Cbs
    }
    return nil
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &cirShape.Cir
    children["config-bandwidth"] = &cirShape.ConfigBandwidth
    children["cbs"] = &cirShape.Cbs
    return children
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["chunk-id"] = cirShape.ChunkId
    leafs["profile-id"] = cirShape.ProfileId
    leafs["scale-factor"] = cirShape.ScaleFactor
    return leafs
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetBundleName() string { return "cisco_ios_xr" }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetYangName() string { return "cir-shape" }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) SetParent(parent types.Entity) { cirShape.parent = parent }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetParent() types.Entity { return cirShape.parent }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir
// CIR in kbps
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth
// Config bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum bandwidth rate.
    MinimumRate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetFilter() yfilter.YFilter { return configBandwidth.YFilter }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) SetFilter(yf yfilter.YFilter) { configBandwidth.YFilter = yf }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetGoName(yname string) string {
    if yname == "minimum-rate" { return "MinimumRate" }
    return ""
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetSegmentPath() string {
    return "config-bandwidth"
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minimum-rate" {
        return &configBandwidth.MinimumRate
    }
    return nil
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minimum-rate"] = &configBandwidth.MinimumRate
    return children
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetYangName() string { return "config-bandwidth" }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) SetParent(parent types.Entity) { configBandwidth.parent = parent }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetParent() types.Entity { return configBandwidth.parent }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate
// Minimum bandwidth rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetFilter() yfilter.YFilter { return minimumRate.YFilter }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) SetFilter(yf yfilter.YFilter) { minimumRate.YFilter = yf }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetSegmentPath() string {
    return "minimum-rate"
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minimumRate.Value
    leafs["unit"] = minimumRate.Unit
    return leafs
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetBundleName() string { return "cisco_ios_xr" }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetYangName() string { return "minimum-rate" }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) SetParent(parent types.Entity) { minimumRate.parent = parent }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetParent() types.Entity { return minimumRate.parent }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetParentYangName() string { return "config-bandwidth" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs
// CBS in bytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape
// PIR shaper params
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // Scale Factor. The type is interface{} with range: 0..65535.
    ScaleFactor interface{}

    // PIR in kbps.
    Pir PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir

    // PBS in bytes.
    Pbs PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetFilter() yfilter.YFilter { return pirShape.YFilter }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) SetFilter(yf yfilter.YFilter) { pirShape.YFilter = yf }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetGoName(yname string) string {
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scale-factor" { return "ScaleFactor" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    return ""
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetSegmentPath() string {
    return "pir-shape"
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pir" {
        return &pirShape.Pir
    }
    if childYangName == "pbs" {
        return &pirShape.Pbs
    }
    return nil
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pir"] = &pirShape.Pir
    children["pbs"] = &pirShape.Pbs
    return children
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["chunk-id"] = pirShape.ChunkId
    leafs["profile-id"] = pirShape.ProfileId
    leafs["scale-factor"] = pirShape.ScaleFactor
    return leafs
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetBundleName() string { return "cisco_ios_xr" }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetYangName() string { return "pir-shape" }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) SetParent(parent types.Entity) { pirShape.parent = parent }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetParent() types.Entity { return pirShape.parent }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir
// PIR in kbps
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetParentYangName() string { return "pir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs
// PBS in bytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetParentYangName() string { return "pir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police
// Police parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policer type. The type is TbAlgorithm.
    PolicerType interface{}

    // Police profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // CIR.
    Cir PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir

    // CBS.
    Cbs PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs

    // PIR.
    Pir PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir

    // PBS.
    Pbs PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs

    // Police config parameters.
    PoliceConfigParameters PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetFilter() yfilter.YFilter { return police.YFilter }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) SetFilter(yf yfilter.YFilter) { police.YFilter = yf }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetGoName(yname string) string {
    if yname == "policer-type" { return "PolicerType" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    if yname == "police-config-parameters" { return "PoliceConfigParameters" }
    return ""
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetSegmentPath() string {
    return "police"
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &police.Cir
    }
    if childYangName == "cbs" {
        return &police.Cbs
    }
    if childYangName == "pir" {
        return &police.Pir
    }
    if childYangName == "pbs" {
        return &police.Pbs
    }
    if childYangName == "police-config-parameters" {
        return &police.PoliceConfigParameters
    }
    return nil
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &police.Cir
    children["cbs"] = &police.Cbs
    children["pir"] = &police.Pir
    children["pbs"] = &police.Pbs
    children["police-config-parameters"] = &police.PoliceConfigParameters
    return children
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policer-type"] = police.PolicerType
    leafs["profile-id"] = police.ProfileId
    return leafs
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetBundleName() string { return "cisco_ios_xr" }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetYangName() string { return "police" }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) SetParent(parent types.Entity) { police.parent = parent }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetParent() types.Entity { return police.parent }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir
// CIR
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs
// CBS
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir
// PIR
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs
// PBS
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters
// Police config parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Average rate.
    AverageRate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate

    // Peak rate.
    PeakRate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate

    // Conform burst.
    ConformBurst PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst

    // Exceed burst.
    ExceedBurst PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetFilter() yfilter.YFilter { return policeConfigParameters.YFilter }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) SetFilter(yf yfilter.YFilter) { policeConfigParameters.YFilter = yf }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetGoName(yname string) string {
    if yname == "average-rate" { return "AverageRate" }
    if yname == "peak-rate" { return "PeakRate" }
    if yname == "conform-burst" { return "ConformBurst" }
    if yname == "exceed-burst" { return "ExceedBurst" }
    return ""
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetSegmentPath() string {
    return "police-config-parameters"
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "average-rate" {
        return &policeConfigParameters.AverageRate
    }
    if childYangName == "peak-rate" {
        return &policeConfigParameters.PeakRate
    }
    if childYangName == "conform-burst" {
        return &policeConfigParameters.ConformBurst
    }
    if childYangName == "exceed-burst" {
        return &policeConfigParameters.ExceedBurst
    }
    return nil
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["average-rate"] = &policeConfigParameters.AverageRate
    children["peak-rate"] = &policeConfigParameters.PeakRate
    children["conform-burst"] = &policeConfigParameters.ConformBurst
    children["exceed-burst"] = &policeConfigParameters.ExceedBurst
    return children
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetBundleName() string { return "cisco_ios_xr" }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetYangName() string { return "police-config-parameters" }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) SetParent(parent types.Entity) { policeConfigParameters.parent = parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetParent() types.Entity { return policeConfigParameters.parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate
// Average rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetFilter() yfilter.YFilter { return averageRate.YFilter }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) SetFilter(yf yfilter.YFilter) { averageRate.YFilter = yf }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetSegmentPath() string {
    return "average-rate"
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = averageRate.Value
    leafs["unit"] = averageRate.Unit
    return leafs
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetBundleName() string { return "cisco_ios_xr" }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetYangName() string { return "average-rate" }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) SetParent(parent types.Entity) { averageRate.parent = parent }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetParent() types.Entity { return averageRate.parent }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate
// Peak rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetFilter() yfilter.YFilter { return peakRate.YFilter }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) SetFilter(yf yfilter.YFilter) { peakRate.YFilter = yf }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetSegmentPath() string {
    return "peak-rate"
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = peakRate.Value
    leafs["unit"] = peakRate.Unit
    return leafs
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetBundleName() string { return "cisco_ios_xr" }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetYangName() string { return "peak-rate" }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) SetParent(parent types.Entity) { peakRate.parent = parent }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetParent() types.Entity { return peakRate.parent }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst
// Conform burst
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetFilter() yfilter.YFilter { return conformBurst.YFilter }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) SetFilter(yf yfilter.YFilter) { conformBurst.YFilter = yf }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetSegmentPath() string {
    return "conform-burst"
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = conformBurst.Value
    leafs["unit"] = conformBurst.Unit
    return leafs
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetBundleName() string { return "cisco_ios_xr" }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetYangName() string { return "conform-burst" }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) SetParent(parent types.Entity) { conformBurst.parent = parent }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetParent() types.Entity { return conformBurst.parent }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst
// Exceed burst
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetFilter() yfilter.YFilter { return exceedBurst.YFilter }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) SetFilter(yf yfilter.YFilter) { exceedBurst.YFilter = yf }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetSegmentPath() string {
    return "exceed-burst"
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = exceedBurst.Value
    leafs["unit"] = exceedBurst.Unit
    return leafs
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetBundleName() string { return "cisco_ios_xr" }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetYangName() string { return "exceed-burst" }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) SetParent(parent types.Entity) { exceedBurst.parent = parent }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetParent() types.Entity { return exceedBurst.parent }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq
// WFQ parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WFQ profile. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Committed weight. The type is interface{} with range: 0..4294967295.
    CommittedWeight interface{}

    // Excess weight. The type is interface{} with range: 0..65535.
    ExcessWeight interface{}

    // Parent Excess ratio. The type is interface{} with range: 0..65535.
    ExcessRatio interface{}

    // Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Level. The type is interface{} with range: 0..255.
    Level interface{}

    // Parent bandwidth.
    ParentBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth

    // CFG Bandwidth.
    Bandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetFilter() yfilter.YFilter { return wfq.YFilter }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) SetFilter(yf yfilter.YFilter) { wfq.YFilter = yf }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "committed-weight" { return "CommittedWeight" }
    if yname == "excess-weight" { return "ExcessWeight" }
    if yname == "excess-ratio" { return "ExcessRatio" }
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "level" { return "Level" }
    if yname == "parent-bandwidth" { return "ParentBandwidth" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetSegmentPath() string {
    return "wfq"
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "parent-bandwidth" {
        return &wfq.ParentBandwidth
    }
    if childYangName == "bandwidth" {
        return &wfq.Bandwidth
    }
    return nil
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["parent-bandwidth"] = &wfq.ParentBandwidth
    children["bandwidth"] = &wfq.Bandwidth
    return children
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = wfq.ProfileId
    leafs["committed-weight"] = wfq.CommittedWeight
    leafs["excess-weight"] = wfq.ExcessWeight
    leafs["excess-ratio"] = wfq.ExcessRatio
    leafs["chunk-id"] = wfq.ChunkId
    leafs["level"] = wfq.Level
    return leafs
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetBundleName() string { return "cisco_ios_xr" }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetYangName() string { return "wfq" }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) SetParent(parent types.Entity) { wfq.parent = parent }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetParent() types.Entity { return wfq.parent }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth
// Parent bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetFilter() yfilter.YFilter { return parentBandwidth.YFilter }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) SetFilter(yf yfilter.YFilter) { parentBandwidth.YFilter = yf }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetSegmentPath() string {
    return "parent-bandwidth"
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = parentBandwidth.Value
    leafs["unit"] = parentBandwidth.Unit
    return leafs
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetYangName() string { return "parent-bandwidth" }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) SetParent(parent types.Entity) { parentBandwidth.parent = parent }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetParent() types.Entity { return parentBandwidth.parent }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth
// CFG Bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = bandwidth.Value
    leafs["unit"] = bandwidth.Unit
    return leafs
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred
// WRED parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED type. The type is Wred.
    Type interface{}

    // Number of curves. The type is interface{} with range: 0..65535.
    CurveXr interface{}

    // Curve details. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve.
    Curve []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetFilter() yfilter.YFilter { return wred.YFilter }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) SetFilter(yf yfilter.YFilter) { wred.YFilter = yf }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "curve-xr" { return "CurveXr" }
    if yname == "curve" { return "Curve" }
    return ""
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetSegmentPath() string {
    return "wred"
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "curve" {
        for _, c := range wred.Curve {
            if wred.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve{}
        wred.Curve = append(wred.Curve, child)
        return &wred.Curve[len(wred.Curve)-1]
    }
    return nil
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range wred.Curve {
        children[wred.Curve[i].GetSegmentPath()] = &wred.Curve[i]
    }
    return children
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = wred.Type
    leafs["curve-xr"] = wred.CurveXr
    return leafs
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetBundleName() string { return "cisco_ios_xr" }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetYangName() string { return "wred" }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) SetParent(parent types.Entity) { wred.parent = parent }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetParent() types.Entity { return wred.parent }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve
// Curve details
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Absolute Index. The type is interface{} with range: 0..65535.
    AbsoluteIndex interface{}

    // Template ID. The type is interface{} with range: 0..65535.
    TemplateId interface{}

    // Curve ID. The type is interface{} with range: 0..65535.
    CurveId interface{}

    // WRED match if precedence start value equals to end value Format:
    // <start-value> , else range Format: <start-value> <end-value>. The type is
    // string.
    Match interface{}

    // WRED exp match if EXP start value equals to end value Format: <start-value>
    // , else range Format: <start-value> <end-value>. The type is string.
    ExpMatch interface{}

    // Minimum threshold.
    MinThreshold PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold

    // Minimum threshold WRED context.
    MinThresholdUserConfig PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig

    // Maximum threshold.
    MaxThreshold PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold

    // Maximum threshold WRED context.
    MaxThresholdUserConfig PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetFilter() yfilter.YFilter { return curve.YFilter }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) SetFilter(yf yfilter.YFilter) { curve.YFilter = yf }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetGoName(yname string) string {
    if yname == "absolute-index" { return "AbsoluteIndex" }
    if yname == "template-id" { return "TemplateId" }
    if yname == "curve-id" { return "CurveId" }
    if yname == "match" { return "Match" }
    if yname == "exp-match" { return "ExpMatch" }
    if yname == "min-threshold" { return "MinThreshold" }
    if yname == "min-threshold-user-config" { return "MinThresholdUserConfig" }
    if yname == "max-threshold" { return "MaxThreshold" }
    if yname == "max-threshold-user-config" { return "MaxThresholdUserConfig" }
    return ""
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetSegmentPath() string {
    return "curve"
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-threshold" {
        return &curve.MinThreshold
    }
    if childYangName == "min-threshold-user-config" {
        return &curve.MinThresholdUserConfig
    }
    if childYangName == "max-threshold" {
        return &curve.MaxThreshold
    }
    if childYangName == "max-threshold-user-config" {
        return &curve.MaxThresholdUserConfig
    }
    return nil
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-threshold"] = &curve.MinThreshold
    children["min-threshold-user-config"] = &curve.MinThresholdUserConfig
    children["max-threshold"] = &curve.MaxThreshold
    children["max-threshold-user-config"] = &curve.MaxThresholdUserConfig
    return children
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["absolute-index"] = curve.AbsoluteIndex
    leafs["template-id"] = curve.TemplateId
    leafs["curve-id"] = curve.CurveId
    leafs["match"] = curve.Match
    leafs["exp-match"] = curve.ExpMatch
    return leafs
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetBundleName() string { return "cisco_ios_xr" }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetYangName() string { return "curve" }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) SetParent(parent types.Entity) { curve.parent = parent }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetParent() types.Entity { return curve.parent }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetParentYangName() string { return "wred" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold
// Minimum threshold
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetFilter() yfilter.YFilter { return minThreshold.YFilter }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) SetFilter(yf yfilter.YFilter) { minThreshold.YFilter = yf }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetSegmentPath() string {
    return "min-threshold"
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThreshold.Value
    leafs["unit"] = minThreshold.Unit
    return leafs
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetYangName() string { return "min-threshold" }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) SetParent(parent types.Entity) { minThreshold.parent = parent }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetParent() types.Entity { return minThreshold.parent }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig
// Minimum threshold WRED context
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetFilter() yfilter.YFilter { return minThresholdUserConfig.YFilter }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) SetFilter(yf yfilter.YFilter) { minThresholdUserConfig.YFilter = yf }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetSegmentPath() string {
    return "min-threshold-user-config"
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThresholdUserConfig.Value
    leafs["unit"] = minThresholdUserConfig.Unit
    return leafs
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetYangName() string { return "min-threshold-user-config" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) SetParent(parent types.Entity) { minThresholdUserConfig.parent = parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetParent() types.Entity { return minThresholdUserConfig.parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold
// Maximum threshold
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetFilter() yfilter.YFilter { return maxThreshold.YFilter }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) SetFilter(yf yfilter.YFilter) { maxThreshold.YFilter = yf }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetSegmentPath() string {
    return "max-threshold"
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThreshold.Value
    leafs["unit"] = maxThreshold.Unit
    return leafs
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetYangName() string { return "max-threshold" }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) SetParent(parent types.Entity) { maxThreshold.parent = parent }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetParent() types.Entity { return maxThreshold.parent }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig
// Maximum threshold WRED context
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetFilter() yfilter.YFilter { return maxThresholdUserConfig.YFilter }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) SetFilter(yf yfilter.YFilter) { maxThresholdUserConfig.YFilter = yf }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetSegmentPath() string {
    return "max-threshold-user-config"
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThresholdUserConfig.Value
    leafs["unit"] = maxThresholdUserConfig.Unit
    return leafs
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetYangName() string { return "max-threshold-user-config" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) SetParent(parent types.Entity) { maxThresholdUserConfig.parent = parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetParent() types.Entity { return maxThresholdUserConfig.parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark
// Mark parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Child mark only.
    ChildMark PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark

    // Child police conform mark.
    PoliceConform PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform

    // Child police exceed mark.
    PoliceExceed PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed

    // Child police violate mark.
    PoliceViolate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate

    // Parent mark only.
    ParentMark PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark

    // Parent police conform mark.
    ParentPoliceConform PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform

    // Parent police exceed mark.
    ParentPoliceExceed PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed

    // Parent police violate mark.
    ParentPoliceViolate PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetFilter() yfilter.YFilter { return mark.YFilter }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) SetFilter(yf yfilter.YFilter) { mark.YFilter = yf }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetGoName(yname string) string {
    if yname == "child-mark" { return "ChildMark" }
    if yname == "police-conform" { return "PoliceConform" }
    if yname == "police-exceed" { return "PoliceExceed" }
    if yname == "police-violate" { return "PoliceViolate" }
    if yname == "parent-mark" { return "ParentMark" }
    if yname == "parent-police-conform" { return "ParentPoliceConform" }
    if yname == "parent-police-exceed" { return "ParentPoliceExceed" }
    if yname == "parent-police-violate" { return "ParentPoliceViolate" }
    return ""
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetSegmentPath() string {
    return "mark"
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "child-mark" {
        return &mark.ChildMark
    }
    if childYangName == "police-conform" {
        return &mark.PoliceConform
    }
    if childYangName == "police-exceed" {
        return &mark.PoliceExceed
    }
    if childYangName == "police-violate" {
        return &mark.PoliceViolate
    }
    if childYangName == "parent-mark" {
        return &mark.ParentMark
    }
    if childYangName == "parent-police-conform" {
        return &mark.ParentPoliceConform
    }
    if childYangName == "parent-police-exceed" {
        return &mark.ParentPoliceExceed
    }
    if childYangName == "parent-police-violate" {
        return &mark.ParentPoliceViolate
    }
    return nil
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["child-mark"] = &mark.ChildMark
    children["police-conform"] = &mark.PoliceConform
    children["police-exceed"] = &mark.PoliceExceed
    children["police-violate"] = &mark.PoliceViolate
    children["parent-mark"] = &mark.ParentMark
    children["parent-police-conform"] = &mark.ParentPoliceConform
    children["parent-police-exceed"] = &mark.ParentPoliceExceed
    children["parent-police-violate"] = &mark.ParentPoliceViolate
    return children
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetBundleName() string { return "cisco_ios_xr" }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetYangName() string { return "mark" }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) SetParent(parent types.Entity) { mark.parent = parent }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetParent() types.Entity { return mark.parent }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark
// Child mark only
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetFilter() yfilter.YFilter { return childMark.YFilter }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) SetFilter(yf yfilter.YFilter) { childMark.YFilter = yf }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetSegmentPath() string {
    return "child-mark"
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range childMark.MarkDetail {
            if childMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail{}
        childMark.MarkDetail = append(childMark.MarkDetail, child)
        return &childMark.MarkDetail[len(childMark.MarkDetail)-1]
    }
    return nil
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range childMark.MarkDetail {
        children[childMark.MarkDetail[i].GetSegmentPath()] = &childMark.MarkDetail[i]
    }
    return children
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = childMark.ActionType
    return leafs
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetBundleName() string { return "cisco_ios_xr" }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetYangName() string { return "child-mark" }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) SetParent(parent types.Entity) { childMark.parent = parent }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetParent() types.Entity { return childMark.parent }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetParentYangName() string { return "child-mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform
// Child police conform mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetFilter() yfilter.YFilter { return policeConform.YFilter }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) SetFilter(yf yfilter.YFilter) { policeConform.YFilter = yf }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetSegmentPath() string {
    return "police-conform"
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeConform.MarkDetail {
            if policeConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail{}
        policeConform.MarkDetail = append(policeConform.MarkDetail, child)
        return &policeConform.MarkDetail[len(policeConform.MarkDetail)-1]
    }
    return nil
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeConform.MarkDetail {
        children[policeConform.MarkDetail[i].GetSegmentPath()] = &policeConform.MarkDetail[i]
    }
    return children
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeConform.ActionType
    return leafs
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetYangName() string { return "police-conform" }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) SetParent(parent types.Entity) { policeConform.parent = parent }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetParent() types.Entity { return policeConform.parent }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetParentYangName() string { return "police-conform" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed
// Child police exceed mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetFilter() yfilter.YFilter { return policeExceed.YFilter }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) SetFilter(yf yfilter.YFilter) { policeExceed.YFilter = yf }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetSegmentPath() string {
    return "police-exceed"
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeExceed.MarkDetail {
            if policeExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail{}
        policeExceed.MarkDetail = append(policeExceed.MarkDetail, child)
        return &policeExceed.MarkDetail[len(policeExceed.MarkDetail)-1]
    }
    return nil
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeExceed.MarkDetail {
        children[policeExceed.MarkDetail[i].GetSegmentPath()] = &policeExceed.MarkDetail[i]
    }
    return children
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeExceed.ActionType
    return leafs
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetYangName() string { return "police-exceed" }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) SetParent(parent types.Entity) { policeExceed.parent = parent }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetParent() types.Entity { return policeExceed.parent }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetParentYangName() string { return "police-exceed" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate
// Child police violate mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetFilter() yfilter.YFilter { return policeViolate.YFilter }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) SetFilter(yf yfilter.YFilter) { policeViolate.YFilter = yf }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetSegmentPath() string {
    return "police-violate"
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeViolate.MarkDetail {
            if policeViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail{}
        policeViolate.MarkDetail = append(policeViolate.MarkDetail, child)
        return &policeViolate.MarkDetail[len(policeViolate.MarkDetail)-1]
    }
    return nil
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeViolate.MarkDetail {
        children[policeViolate.MarkDetail[i].GetSegmentPath()] = &policeViolate.MarkDetail[i]
    }
    return children
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeViolate.ActionType
    return leafs
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetYangName() string { return "police-violate" }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) SetParent(parent types.Entity) { policeViolate.parent = parent }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetParent() types.Entity { return policeViolate.parent }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetParentYangName() string { return "police-violate" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark
// Parent mark only
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetFilter() yfilter.YFilter { return parentMark.YFilter }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) SetFilter(yf yfilter.YFilter) { parentMark.YFilter = yf }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetSegmentPath() string {
    return "parent-mark"
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentMark.MarkDetail {
            if parentMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail{}
        parentMark.MarkDetail = append(parentMark.MarkDetail, child)
        return &parentMark.MarkDetail[len(parentMark.MarkDetail)-1]
    }
    return nil
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentMark.MarkDetail {
        children[parentMark.MarkDetail[i].GetSegmentPath()] = &parentMark.MarkDetail[i]
    }
    return children
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentMark.ActionType
    return leafs
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetBundleName() string { return "cisco_ios_xr" }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetYangName() string { return "parent-mark" }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) SetParent(parent types.Entity) { parentMark.parent = parent }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetParent() types.Entity { return parentMark.parent }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetParentYangName() string { return "parent-mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform
// Parent police conform mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetFilter() yfilter.YFilter { return parentPoliceConform.YFilter }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) SetFilter(yf yfilter.YFilter) { parentPoliceConform.YFilter = yf }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetSegmentPath() string {
    return "parent-police-conform"
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceConform.MarkDetail {
            if parentPoliceConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail{}
        parentPoliceConform.MarkDetail = append(parentPoliceConform.MarkDetail, child)
        return &parentPoliceConform.MarkDetail[len(parentPoliceConform.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceConform.MarkDetail {
        children[parentPoliceConform.MarkDetail[i].GetSegmentPath()] = &parentPoliceConform.MarkDetail[i]
    }
    return children
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceConform.ActionType
    return leafs
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetYangName() string { return "parent-police-conform" }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) SetParent(parent types.Entity) { parentPoliceConform.parent = parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetParent() types.Entity { return parentPoliceConform.parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetParentYangName() string { return "parent-police-conform" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed
// Parent police exceed mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetFilter() yfilter.YFilter { return parentPoliceExceed.YFilter }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) SetFilter(yf yfilter.YFilter) { parentPoliceExceed.YFilter = yf }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetSegmentPath() string {
    return "parent-police-exceed"
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceExceed.MarkDetail {
            if parentPoliceExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail{}
        parentPoliceExceed.MarkDetail = append(parentPoliceExceed.MarkDetail, child)
        return &parentPoliceExceed.MarkDetail[len(parentPoliceExceed.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceExceed.MarkDetail {
        children[parentPoliceExceed.MarkDetail[i].GetSegmentPath()] = &parentPoliceExceed.MarkDetail[i]
    }
    return children
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceExceed.ActionType
    return leafs
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetYangName() string { return "parent-police-exceed" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) SetParent(parent types.Entity) { parentPoliceExceed.parent = parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetParent() types.Entity { return parentPoliceExceed.parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetParentYangName() string { return "parent-police-exceed" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate
// Parent police violate mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetFilter() yfilter.YFilter { return parentPoliceViolate.YFilter }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) SetFilter(yf yfilter.YFilter) { parentPoliceViolate.YFilter = yf }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetSegmentPath() string {
    return "parent-police-violate"
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceViolate.MarkDetail {
            if parentPoliceViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail{}
        parentPoliceViolate.MarkDetail = append(parentPoliceViolate.MarkDetail, child)
        return &parentPoliceViolate.MarkDetail[len(parentPoliceViolate.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceViolate.MarkDetail {
        children[parentPoliceViolate.MarkDetail[i].GetSegmentPath()] = &parentPoliceViolate.MarkDetail[i]
    }
    return children
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceViolate.ActionType
    return leafs
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetYangName() string { return "parent-police-violate" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) SetParent(parent types.Entity) { parentPoliceViolate.parent = parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetParent() types.Entity { return parentPoliceViolate.parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Input_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetParentYangName() string { return "parent-police-violate" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output
// QoS policy direction egress
type PlatformQos_Nodes_Node_Interfaces_Interface_Output struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS policy direction egress.
    Details PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details
}

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetFilter() yfilter.YFilter { return output.YFilter }

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) SetFilter(yf yfilter.YFilter) { output.YFilter = yf }

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetGoName(yname string) string {
    if yname == "details" { return "Details" }
    return ""
}

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetSegmentPath() string {
    return "output"
}

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "details" {
        return &output.Details
    }
    return nil
}

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["details"] = &output.Details
    return children
}

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetBundleName() string { return "cisco_ios_xr" }

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetYangName() string { return "output" }

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) SetParent(parent types.Entity) { output.parent = parent }

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetParent() types.Entity { return output.parent }

func (output *PlatformQos_Nodes_Node_Interfaces_Interface_Output) GetParentYangName() string { return "interface" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details
// QoS policy direction egress
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS policy header.
    Header PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header

    // Trident QoS policy details.
    Policy PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy

    // Typhoon QoS policy details.
    PolicyTyphoon PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetFilter() yfilter.YFilter { return details.YFilter }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) SetFilter(yf yfilter.YFilter) { details.YFilter = yf }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetGoName(yname string) string {
    if yname == "header" { return "Header" }
    if yname == "policy" { return "Policy" }
    if yname == "policy-typhoon" { return "PolicyTyphoon" }
    return ""
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetSegmentPath() string {
    return "details"
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "header" {
        return &details.Header
    }
    if childYangName == "policy" {
        return &details.Policy
    }
    if childYangName == "policy-typhoon" {
        return &details.PolicyTyphoon
    }
    return nil
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["header"] = &details.Header
    children["policy"] = &details.Policy
    children["policy-typhoon"] = &details.PolicyTyphoon
    return children
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetBundleName() string { return "cisco_ios_xr" }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetYangName() string { return "details" }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) SetParent(parent types.Entity) { details.parent = parent }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetParent() types.Entity { return details.parent }

func (details *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details) GetParentYangName() string { return "output" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header
// QoS policy header
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of classes. The type is interface{} with range: 0..65535.
    Classes interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Interface config and programmed parameters.
    InterfaceParameters PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters

    // Bandwidth that was programmed.
    ProgrammedBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetGoName(yname string) string {
    if yname == "classes" { return "Classes" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "interface-parameters" { return "InterfaceParameters" }
    if yname == "programmed-bandwidth" { return "ProgrammedBandwidth" }
    return ""
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetSegmentPath() string {
    return "header"
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-parameters" {
        return &header.InterfaceParameters
    }
    if childYangName == "programmed-bandwidth" {
        return &header.ProgrammedBandwidth
    }
    return nil
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-parameters"] = &header.InterfaceParameters
    children["programmed-bandwidth"] = &header.ProgrammedBandwidth
    return children
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["classes"] = header.Classes
    leafs["policy-name"] = header.PolicyName
    return leafs
}

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetYangName() string { return "header" }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetParent() types.Entity { return header.parent }

func (header *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters
// Interface config and programmed parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth due to port speed change.
    PortConfigBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth

    // Bandwidth obtain from IM.
    AncpConfigBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth

    // ANCP bandwidth that was programmed.
    AncpProgrammedBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth

    // Bandwidth that was programmed.
    PortShaperRate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetFilter() yfilter.YFilter { return interfaceParameters.YFilter }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) SetFilter(yf yfilter.YFilter) { interfaceParameters.YFilter = yf }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetGoName(yname string) string {
    if yname == "port-config-bandwidth" { return "PortConfigBandwidth" }
    if yname == "ancp-config-bandwidth" { return "AncpConfigBandwidth" }
    if yname == "ancp-programmed-bandwidth" { return "AncpProgrammedBandwidth" }
    if yname == "port-shaper-rate" { return "PortShaperRate" }
    return ""
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetSegmentPath() string {
    return "interface-parameters"
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-config-bandwidth" {
        return &interfaceParameters.PortConfigBandwidth
    }
    if childYangName == "ancp-config-bandwidth" {
        return &interfaceParameters.AncpConfigBandwidth
    }
    if childYangName == "ancp-programmed-bandwidth" {
        return &interfaceParameters.AncpProgrammedBandwidth
    }
    if childYangName == "port-shaper-rate" {
        return &interfaceParameters.PortShaperRate
    }
    return nil
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-config-bandwidth"] = &interfaceParameters.PortConfigBandwidth
    children["ancp-config-bandwidth"] = &interfaceParameters.AncpConfigBandwidth
    children["ancp-programmed-bandwidth"] = &interfaceParameters.AncpProgrammedBandwidth
    children["port-shaper-rate"] = &interfaceParameters.PortShaperRate
    return children
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetYangName() string { return "interface-parameters" }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) SetParent(parent types.Entity) { interfaceParameters.parent = parent }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetParent() types.Entity { return interfaceParameters.parent }

func (interfaceParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters) GetParentYangName() string { return "header" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth
// Bandwidth due to port speed change
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetFilter() yfilter.YFilter { return portConfigBandwidth.YFilter }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) SetFilter(yf yfilter.YFilter) { portConfigBandwidth.YFilter = yf }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetSegmentPath() string {
    return "port-config-bandwidth"
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = portConfigBandwidth.Value
    leafs["unit"] = portConfigBandwidth.Unit
    return leafs
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetYangName() string { return "port-config-bandwidth" }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) SetParent(parent types.Entity) { portConfigBandwidth.parent = parent }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetParent() types.Entity { return portConfigBandwidth.parent }

func (portConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortConfigBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth
// Bandwidth obtain from IM
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetFilter() yfilter.YFilter { return ancpConfigBandwidth.YFilter }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) SetFilter(yf yfilter.YFilter) { ancpConfigBandwidth.YFilter = yf }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetSegmentPath() string {
    return "ancp-config-bandwidth"
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = ancpConfigBandwidth.Value
    leafs["unit"] = ancpConfigBandwidth.Unit
    return leafs
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetYangName() string { return "ancp-config-bandwidth" }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) SetParent(parent types.Entity) { ancpConfigBandwidth.parent = parent }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetParent() types.Entity { return ancpConfigBandwidth.parent }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth
// ANCP bandwidth that was programmed
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetFilter() yfilter.YFilter { return ancpProgrammedBandwidth.YFilter }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) SetFilter(yf yfilter.YFilter) { ancpProgrammedBandwidth.YFilter = yf }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetSegmentPath() string {
    return "ancp-programmed-bandwidth"
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = ancpProgrammedBandwidth.Value
    leafs["unit"] = ancpProgrammedBandwidth.Unit
    return leafs
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetYangName() string { return "ancp-programmed-bandwidth" }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) SetParent(parent types.Entity) { ancpProgrammedBandwidth.parent = parent }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetParent() types.Entity { return ancpProgrammedBandwidth.parent }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate
// Bandwidth that was programmed
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetFilter() yfilter.YFilter { return portShaperRate.YFilter }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) SetFilter(yf yfilter.YFilter) { portShaperRate.YFilter = yf }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetSegmentPath() string {
    return "port-shaper-rate"
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = portShaperRate.Value
    leafs["unit"] = portShaperRate.Unit
    return leafs
}

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetBundleName() string { return "cisco_ios_xr" }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetYangName() string { return "port-shaper-rate" }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) SetParent(parent types.Entity) { portShaperRate.parent = parent }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetParent() types.Entity { return portShaperRate.parent }

func (portShaperRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_InterfaceParameters_PortShaperRate) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth
// Bandwidth that was programmed
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetFilter() yfilter.YFilter { return programmedBandwidth.YFilter }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) SetFilter(yf yfilter.YFilter) { programmedBandwidth.YFilter = yf }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetSegmentPath() string {
    return "programmed-bandwidth"
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = programmedBandwidth.Value
    leafs["unit"] = programmedBandwidth.Unit
    return leafs
}

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetYangName() string { return "programmed-bandwidth" }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) SetParent(parent types.Entity) { programmedBandwidth.parent = parent }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetParent() types.Entity { return programmedBandwidth.parent }

func (programmedBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Header_ProgrammedBandwidth) GetParentYangName() string { return "header" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy
// Trident QoS policy details
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // qos show ea st v1. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1.
    QosShowEaStV1 []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetFilter() yfilter.YFilter { return policy.YFilter }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) SetFilter(yf yfilter.YFilter) { policy.YFilter = yf }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetGoName(yname string) string {
    if yname == "qos-show-ea-st-v1" { return "QosShowEaStV1" }
    return ""
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetSegmentPath() string {
    return "policy"
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos-show-ea-st-v1" {
        for _, c := range policy.QosShowEaStV1 {
            if policy.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1{}
        policy.QosShowEaStV1 = append(policy.QosShowEaStV1, child)
        return &policy.QosShowEaStV1[len(policy.QosShowEaStV1)-1]
    }
    return nil
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policy.QosShowEaStV1 {
        children[policy.QosShowEaStV1[i].GetSegmentPath()] = &policy.QosShowEaStV1[i]
    }
    return children
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetBundleName() string { return "cisco_ios_xr" }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetYangName() string { return "policy" }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) SetParent(parent types.Entity) { policy.parent = parent }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetParent() types.Entity { return policy.parent }

func (policy *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1
// qos show ea st v1
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class level. The type is interface{} with range: 0..255.
    ClassLevel interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Parent policy name. The type is string with length: 0..65.
    ParentPolicyName interface{}

    // Parent class name. The type is string with length: 0..65.
    ParentClassName interface{}

    // Queue parameters.
    Queue PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue

    // Queue limit parameters.
    QueueLimitParameters PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters

    // Shape parameters.
    Shape PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape

    // Police parameters.
    Police PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police

    // WFQ parameters.
    Wfq PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq

    // WRED parameters.
    Wred PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred

    // Mark parameters.
    Mark PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetFilter() yfilter.YFilter { return qosShowEaStV1.YFilter }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) SetFilter(yf yfilter.YFilter) { qosShowEaStV1.YFilter = yf }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetGoName(yname string) string {
    if yname == "class-level" { return "ClassLevel" }
    if yname == "class-name" { return "ClassName" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "parent-policy-name" { return "ParentPolicyName" }
    if yname == "parent-class-name" { return "ParentClassName" }
    if yname == "queue" { return "Queue" }
    if yname == "queue-limit-parameters" { return "QueueLimitParameters" }
    if yname == "shape" { return "Shape" }
    if yname == "police" { return "Police" }
    if yname == "wfq" { return "Wfq" }
    if yname == "wred" { return "Wred" }
    if yname == "mark" { return "Mark" }
    return ""
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetSegmentPath() string {
    return "qos-show-ea-st-v1"
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue" {
        return &qosShowEaStV1.Queue
    }
    if childYangName == "queue-limit-parameters" {
        return &qosShowEaStV1.QueueLimitParameters
    }
    if childYangName == "shape" {
        return &qosShowEaStV1.Shape
    }
    if childYangName == "police" {
        return &qosShowEaStV1.Police
    }
    if childYangName == "wfq" {
        return &qosShowEaStV1.Wfq
    }
    if childYangName == "wred" {
        return &qosShowEaStV1.Wred
    }
    if childYangName == "mark" {
        return &qosShowEaStV1.Mark
    }
    return nil
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue"] = &qosShowEaStV1.Queue
    children["queue-limit-parameters"] = &qosShowEaStV1.QueueLimitParameters
    children["shape"] = &qosShowEaStV1.Shape
    children["police"] = &qosShowEaStV1.Police
    children["wfq"] = &qosShowEaStV1.Wfq
    children["wred"] = &qosShowEaStV1.Wred
    children["mark"] = &qosShowEaStV1.Mark
    return children
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-level"] = qosShowEaStV1.ClassLevel
    leafs["class-name"] = qosShowEaStV1.ClassName
    leafs["policy-name"] = qosShowEaStV1.PolicyName
    leafs["parent-policy-name"] = qosShowEaStV1.ParentPolicyName
    leafs["parent-class-name"] = qosShowEaStV1.ParentClassName
    return leafs
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetBundleName() string { return "cisco_ios_xr" }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetYangName() string { return "qos-show-ea-st-v1" }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) SetParent(parent types.Entity) { qosShowEaStV1.parent = parent }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetParent() types.Entity { return qosShowEaStV1.parent }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1) GetParentYangName() string { return "policy" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue
// Queue parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Queue ID. The type is interface{} with range: 0..4294967295.
    QueueId interface{}

    // Queue type. The type is Queue.
    QueueType interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetGoName(yname string) string {
    if yname == "queue-id" { return "QueueId" }
    if yname == "queue-type" { return "QueueType" }
    if yname == "class-name" { return "ClassName" }
    return ""
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queue-id"] = queue.QueueId
    leafs["queue-type"] = queue.QueueType
    leafs["class-name"] = queue.ClassName
    return leafs
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetYangName() string { return "queue" }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetParent() types.Entity { return queue.parent }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Queue) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters
// Queue limit parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Scaling profile ID. The type is interface{} with range: 0..4294967295.
    ScalingProfileId interface{}

    // Queue limit in kbytes.
    QueueLimit PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit

    // Config queue limit.
    ConfigQueueLimit PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetFilter() yfilter.YFilter { return queueLimitParameters.YFilter }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) SetFilter(yf yfilter.YFilter) { queueLimitParameters.YFilter = yf }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scaling-profile-id" { return "ScalingProfileId" }
    if yname == "queue-limit" { return "QueueLimit" }
    if yname == "config-queue-limit" { return "ConfigQueueLimit" }
    return ""
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetSegmentPath() string {
    return "queue-limit-parameters"
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue-limit" {
        return &queueLimitParameters.QueueLimit
    }
    if childYangName == "config-queue-limit" {
        return &queueLimitParameters.ConfigQueueLimit
    }
    return nil
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue-limit"] = &queueLimitParameters.QueueLimit
    children["config-queue-limit"] = &queueLimitParameters.ConfigQueueLimit
    return children
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = queueLimitParameters.ProfileId
    leafs["scaling-profile-id"] = queueLimitParameters.ScalingProfileId
    return leafs
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetYangName() string { return "queue-limit-parameters" }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) SetParent(parent types.Entity) { queueLimitParameters.parent = parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetParent() types.Entity { return queueLimitParameters.parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit
// Queue limit in kbytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetFilter() yfilter.YFilter { return queueLimit.YFilter }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) SetFilter(yf yfilter.YFilter) { queueLimit.YFilter = yf }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetSegmentPath() string {
    return "queue-limit"
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = queueLimit.Value
    leafs["unit"] = queueLimit.Unit
    return leafs
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetYangName() string { return "queue-limit" }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) SetParent(parent types.Entity) { queueLimit.parent = parent }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetParent() types.Entity { return queueLimit.parent }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit
// Config queue limit
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetFilter() yfilter.YFilter { return configQueueLimit.YFilter }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) SetFilter(yf yfilter.YFilter) { configQueueLimit.YFilter = yf }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetSegmentPath() string {
    return "config-queue-limit"
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = configQueueLimit.Value
    leafs["unit"] = configQueueLimit.Unit
    return leafs
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetYangName() string { return "config-queue-limit" }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) SetParent(parent types.Entity) { configQueueLimit.parent = parent }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetParent() types.Entity { return configQueueLimit.parent }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape
// Shape parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // CIR in kbps.
    Cir PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir

    // Config bandwidth.
    ConfigBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth

    // CBS in bytes.
    Cbs PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs

    // PIR in kbps.
    Pir PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir

    // PBS in bytes.
    Pbs PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "config-bandwidth" { return "ConfigBandwidth" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    return ""
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &shape.Cir
    }
    if childYangName == "config-bandwidth" {
        return &shape.ConfigBandwidth
    }
    if childYangName == "cbs" {
        return &shape.Cbs
    }
    if childYangName == "pir" {
        return &shape.Pir
    }
    if childYangName == "pbs" {
        return &shape.Pbs
    }
    return nil
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &shape.Cir
    children["config-bandwidth"] = &shape.ConfigBandwidth
    children["cbs"] = &shape.Cbs
    children["pir"] = &shape.Pir
    children["pbs"] = &shape.Pbs
    return children
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = shape.ProfileId
    return leafs
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetYangName() string { return "shape" }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetParent() types.Entity { return shape.parent }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir
// CIR in kbps
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cir) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth
// Config bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum bandwidth rate.
    MinimumRate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetFilter() yfilter.YFilter { return configBandwidth.YFilter }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) SetFilter(yf yfilter.YFilter) { configBandwidth.YFilter = yf }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetGoName(yname string) string {
    if yname == "minimum-rate" { return "MinimumRate" }
    return ""
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetSegmentPath() string {
    return "config-bandwidth"
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minimum-rate" {
        return &configBandwidth.MinimumRate
    }
    return nil
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minimum-rate"] = &configBandwidth.MinimumRate
    return children
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetYangName() string { return "config-bandwidth" }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) SetParent(parent types.Entity) { configBandwidth.parent = parent }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetParent() types.Entity { return configBandwidth.parent }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate
// Minimum bandwidth rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetFilter() yfilter.YFilter { return minimumRate.YFilter }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) SetFilter(yf yfilter.YFilter) { minimumRate.YFilter = yf }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetSegmentPath() string {
    return "minimum-rate"
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minimumRate.Value
    leafs["unit"] = minimumRate.Unit
    return leafs
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetBundleName() string { return "cisco_ios_xr" }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetYangName() string { return "minimum-rate" }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) SetParent(parent types.Entity) { minimumRate.parent = parent }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetParent() types.Entity { return minimumRate.parent }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetParentYangName() string { return "config-bandwidth" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs
// CBS in bytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Cbs) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir
// PIR in kbps
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pir) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs
// PBS in bytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Shape_Pbs) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police
// Police parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policer type. The type is TbAlgorithm.
    PolicerType interface{}

    // Police profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // CIR.
    Cir PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir

    // CBS.
    Cbs PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs

    // PIR.
    Pir PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir

    // PBS.
    Pbs PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs

    // Police config parameters.
    PoliceConfigParameters PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetFilter() yfilter.YFilter { return police.YFilter }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) SetFilter(yf yfilter.YFilter) { police.YFilter = yf }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetGoName(yname string) string {
    if yname == "policer-type" { return "PolicerType" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    if yname == "police-config-parameters" { return "PoliceConfigParameters" }
    return ""
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetSegmentPath() string {
    return "police"
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &police.Cir
    }
    if childYangName == "cbs" {
        return &police.Cbs
    }
    if childYangName == "pir" {
        return &police.Pir
    }
    if childYangName == "pbs" {
        return &police.Pbs
    }
    if childYangName == "police-config-parameters" {
        return &police.PoliceConfigParameters
    }
    return nil
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &police.Cir
    children["cbs"] = &police.Cbs
    children["pir"] = &police.Pir
    children["pbs"] = &police.Pbs
    children["police-config-parameters"] = &police.PoliceConfigParameters
    return children
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policer-type"] = police.PolicerType
    leafs["profile-id"] = police.ProfileId
    return leafs
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetBundleName() string { return "cisco_ios_xr" }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetYangName() string { return "police" }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) SetParent(parent types.Entity) { police.parent = parent }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetParent() types.Entity { return police.parent }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir
// CIR
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs
// CBS
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Cbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir
// PIR
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs
// PBS
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_Pbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters
// Police config parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Average rate.
    AverageRate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate

    // Peak rate.
    PeakRate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate

    // Conform burst.
    ConformBurst PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst

    // Exceed burst.
    ExceedBurst PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetFilter() yfilter.YFilter { return policeConfigParameters.YFilter }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) SetFilter(yf yfilter.YFilter) { policeConfigParameters.YFilter = yf }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetGoName(yname string) string {
    if yname == "average-rate" { return "AverageRate" }
    if yname == "peak-rate" { return "PeakRate" }
    if yname == "conform-burst" { return "ConformBurst" }
    if yname == "exceed-burst" { return "ExceedBurst" }
    return ""
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetSegmentPath() string {
    return "police-config-parameters"
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "average-rate" {
        return &policeConfigParameters.AverageRate
    }
    if childYangName == "peak-rate" {
        return &policeConfigParameters.PeakRate
    }
    if childYangName == "conform-burst" {
        return &policeConfigParameters.ConformBurst
    }
    if childYangName == "exceed-burst" {
        return &policeConfigParameters.ExceedBurst
    }
    return nil
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["average-rate"] = &policeConfigParameters.AverageRate
    children["peak-rate"] = &policeConfigParameters.PeakRate
    children["conform-burst"] = &policeConfigParameters.ConformBurst
    children["exceed-burst"] = &policeConfigParameters.ExceedBurst
    return children
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetBundleName() string { return "cisco_ios_xr" }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetYangName() string { return "police-config-parameters" }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) SetParent(parent types.Entity) { policeConfigParameters.parent = parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetParent() types.Entity { return policeConfigParameters.parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate
// Average rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetFilter() yfilter.YFilter { return averageRate.YFilter }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) SetFilter(yf yfilter.YFilter) { averageRate.YFilter = yf }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetSegmentPath() string {
    return "average-rate"
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = averageRate.Value
    leafs["unit"] = averageRate.Unit
    return leafs
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetBundleName() string { return "cisco_ios_xr" }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetYangName() string { return "average-rate" }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) SetParent(parent types.Entity) { averageRate.parent = parent }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetParent() types.Entity { return averageRate.parent }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate
// Peak rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetFilter() yfilter.YFilter { return peakRate.YFilter }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) SetFilter(yf yfilter.YFilter) { peakRate.YFilter = yf }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetSegmentPath() string {
    return "peak-rate"
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = peakRate.Value
    leafs["unit"] = peakRate.Unit
    return leafs
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetBundleName() string { return "cisco_ios_xr" }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetYangName() string { return "peak-rate" }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) SetParent(parent types.Entity) { peakRate.parent = parent }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetParent() types.Entity { return peakRate.parent }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst
// Conform burst
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetFilter() yfilter.YFilter { return conformBurst.YFilter }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) SetFilter(yf yfilter.YFilter) { conformBurst.YFilter = yf }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetSegmentPath() string {
    return "conform-burst"
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = conformBurst.Value
    leafs["unit"] = conformBurst.Unit
    return leafs
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetBundleName() string { return "cisco_ios_xr" }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetYangName() string { return "conform-burst" }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) SetParent(parent types.Entity) { conformBurst.parent = parent }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetParent() types.Entity { return conformBurst.parent }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst
// Exceed burst
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetFilter() yfilter.YFilter { return exceedBurst.YFilter }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) SetFilter(yf yfilter.YFilter) { exceedBurst.YFilter = yf }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetSegmentPath() string {
    return "exceed-burst"
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = exceedBurst.Value
    leafs["unit"] = exceedBurst.Unit
    return leafs
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetBundleName() string { return "cisco_ios_xr" }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetYangName() string { return "exceed-burst" }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) SetParent(parent types.Entity) { exceedBurst.parent = parent }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetParent() types.Entity { return exceedBurst.parent }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq
// WFQ parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WFQ profile. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Committed weight. The type is interface{} with range: 0..4294967295.
    CommittedWeight interface{}

    // Excess weight. The type is interface{} with range: 0..65535.
    ExcessWeight interface{}

    // Parent Excess ratio. The type is interface{} with range: 0..65535.
    ExcessRatio interface{}

    // Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Level. The type is interface{} with range: 0..255.
    Level interface{}

    // Parent bandwidth.
    ParentBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth

    // CFG Bandwidth.
    Bandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetFilter() yfilter.YFilter { return wfq.YFilter }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) SetFilter(yf yfilter.YFilter) { wfq.YFilter = yf }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "committed-weight" { return "CommittedWeight" }
    if yname == "excess-weight" { return "ExcessWeight" }
    if yname == "excess-ratio" { return "ExcessRatio" }
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "level" { return "Level" }
    if yname == "parent-bandwidth" { return "ParentBandwidth" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetSegmentPath() string {
    return "wfq"
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "parent-bandwidth" {
        return &wfq.ParentBandwidth
    }
    if childYangName == "bandwidth" {
        return &wfq.Bandwidth
    }
    return nil
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["parent-bandwidth"] = &wfq.ParentBandwidth
    children["bandwidth"] = &wfq.Bandwidth
    return children
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = wfq.ProfileId
    leafs["committed-weight"] = wfq.CommittedWeight
    leafs["excess-weight"] = wfq.ExcessWeight
    leafs["excess-ratio"] = wfq.ExcessRatio
    leafs["chunk-id"] = wfq.ChunkId
    leafs["level"] = wfq.Level
    return leafs
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetBundleName() string { return "cisco_ios_xr" }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetYangName() string { return "wfq" }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) SetParent(parent types.Entity) { wfq.parent = parent }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetParent() types.Entity { return wfq.parent }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth
// Parent bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetFilter() yfilter.YFilter { return parentBandwidth.YFilter }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) SetFilter(yf yfilter.YFilter) { parentBandwidth.YFilter = yf }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetSegmentPath() string {
    return "parent-bandwidth"
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = parentBandwidth.Value
    leafs["unit"] = parentBandwidth.Unit
    return leafs
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetYangName() string { return "parent-bandwidth" }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) SetParent(parent types.Entity) { parentBandwidth.parent = parent }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetParent() types.Entity { return parentBandwidth.parent }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth
// CFG Bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = bandwidth.Value
    leafs["unit"] = bandwidth.Unit
    return leafs
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred
// WRED parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED type. The type is Wred.
    Type interface{}

    // Number of curves. The type is interface{} with range: 0..65535.
    CurveXr interface{}

    // Table ID. The type is interface{} with range: 0..255.
    TableId interface{}

    // Profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Scaling profile ID. The type is interface{} with range: 0..4294967295.
    ScalingProfileId interface{}

    // Curve details. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve.
    Curve []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetFilter() yfilter.YFilter { return wred.YFilter }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) SetFilter(yf yfilter.YFilter) { wred.YFilter = yf }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "curve-xr" { return "CurveXr" }
    if yname == "table-id" { return "TableId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scaling-profile-id" { return "ScalingProfileId" }
    if yname == "curve" { return "Curve" }
    return ""
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetSegmentPath() string {
    return "wred"
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "curve" {
        for _, c := range wred.Curve {
            if wred.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve{}
        wred.Curve = append(wred.Curve, child)
        return &wred.Curve[len(wred.Curve)-1]
    }
    return nil
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range wred.Curve {
        children[wred.Curve[i].GetSegmentPath()] = &wred.Curve[i]
    }
    return children
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = wred.Type
    leafs["curve-xr"] = wred.CurveXr
    leafs["table-id"] = wred.TableId
    leafs["profile-id"] = wred.ProfileId
    leafs["scaling-profile-id"] = wred.ScalingProfileId
    return leafs
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetBundleName() string { return "cisco_ios_xr" }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetYangName() string { return "wred" }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) SetParent(parent types.Entity) { wred.parent = parent }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetParent() types.Entity { return wred.parent }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve
// Curve details
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED precedence match if precedence start value equals to end value Format:
    // <start-value> , else range Format: <start-value> <end-value>. The type is
    // string.
    Match interface{}

    // Minimum threshold.
    MinThreshold PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold

    // Minimum threshold WRED context.
    MinThresholdUserConfig PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig

    // Maximum threshold.
    MaxThreshold PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold

    // Maximum threshold WRED context.
    MaxThresholdUserConfig PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetFilter() yfilter.YFilter { return curve.YFilter }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) SetFilter(yf yfilter.YFilter) { curve.YFilter = yf }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetGoName(yname string) string {
    if yname == "match" { return "Match" }
    if yname == "min-threshold" { return "MinThreshold" }
    if yname == "min-threshold-user-config" { return "MinThresholdUserConfig" }
    if yname == "max-threshold" { return "MaxThreshold" }
    if yname == "max-threshold-user-config" { return "MaxThresholdUserConfig" }
    return ""
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetSegmentPath() string {
    return "curve"
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-threshold" {
        return &curve.MinThreshold
    }
    if childYangName == "min-threshold-user-config" {
        return &curve.MinThresholdUserConfig
    }
    if childYangName == "max-threshold" {
        return &curve.MaxThreshold
    }
    if childYangName == "max-threshold-user-config" {
        return &curve.MaxThresholdUserConfig
    }
    return nil
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-threshold"] = &curve.MinThreshold
    children["min-threshold-user-config"] = &curve.MinThresholdUserConfig
    children["max-threshold"] = &curve.MaxThreshold
    children["max-threshold-user-config"] = &curve.MaxThresholdUserConfig
    return children
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["match"] = curve.Match
    return leafs
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetBundleName() string { return "cisco_ios_xr" }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetYangName() string { return "curve" }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) SetParent(parent types.Entity) { curve.parent = parent }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetParent() types.Entity { return curve.parent }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve) GetParentYangName() string { return "wred" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold
// Minimum threshold
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetFilter() yfilter.YFilter { return minThreshold.YFilter }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) SetFilter(yf yfilter.YFilter) { minThreshold.YFilter = yf }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetSegmentPath() string {
    return "min-threshold"
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThreshold.Value
    leafs["unit"] = minThreshold.Unit
    return leafs
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetYangName() string { return "min-threshold" }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) SetParent(parent types.Entity) { minThreshold.parent = parent }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetParent() types.Entity { return minThreshold.parent }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig
// Minimum threshold WRED context
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetFilter() yfilter.YFilter { return minThresholdUserConfig.YFilter }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) SetFilter(yf yfilter.YFilter) { minThresholdUserConfig.YFilter = yf }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetSegmentPath() string {
    return "min-threshold-user-config"
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThresholdUserConfig.Value
    leafs["unit"] = minThresholdUserConfig.Unit
    return leafs
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetYangName() string { return "min-threshold-user-config" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) SetParent(parent types.Entity) { minThresholdUserConfig.parent = parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetParent() types.Entity { return minThresholdUserConfig.parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold
// Maximum threshold
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetFilter() yfilter.YFilter { return maxThreshold.YFilter }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) SetFilter(yf yfilter.YFilter) { maxThreshold.YFilter = yf }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetSegmentPath() string {
    return "max-threshold"
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThreshold.Value
    leafs["unit"] = maxThreshold.Unit
    return leafs
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetYangName() string { return "max-threshold" }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) SetParent(parent types.Entity) { maxThreshold.parent = parent }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetParent() types.Entity { return maxThreshold.parent }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig
// Maximum threshold WRED context
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetFilter() yfilter.YFilter { return maxThresholdUserConfig.YFilter }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) SetFilter(yf yfilter.YFilter) { maxThresholdUserConfig.YFilter = yf }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetSegmentPath() string {
    return "max-threshold-user-config"
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThresholdUserConfig.Value
    leafs["unit"] = maxThresholdUserConfig.Unit
    return leafs
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetYangName() string { return "max-threshold-user-config" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) SetParent(parent types.Entity) { maxThresholdUserConfig.parent = parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetParent() types.Entity { return maxThresholdUserConfig.parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark
// Mark parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Child mark only.
    ChildMark PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark

    // Child police conform mark.
    PoliceConform PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform

    // Child police exceed mark.
    PoliceExceed PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed

    // Child police violate mark.
    PoliceViolate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate

    // Parent mark only.
    ParentMark PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark

    // Parent police conform mark.
    ParentPoliceConform PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform

    // Parent police exceed mark.
    ParentPoliceExceed PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed

    // Parent police violate mark.
    ParentPoliceViolate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetFilter() yfilter.YFilter { return mark.YFilter }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) SetFilter(yf yfilter.YFilter) { mark.YFilter = yf }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetGoName(yname string) string {
    if yname == "child-mark" { return "ChildMark" }
    if yname == "police-conform" { return "PoliceConform" }
    if yname == "police-exceed" { return "PoliceExceed" }
    if yname == "police-violate" { return "PoliceViolate" }
    if yname == "parent-mark" { return "ParentMark" }
    if yname == "parent-police-conform" { return "ParentPoliceConform" }
    if yname == "parent-police-exceed" { return "ParentPoliceExceed" }
    if yname == "parent-police-violate" { return "ParentPoliceViolate" }
    return ""
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetSegmentPath() string {
    return "mark"
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "child-mark" {
        return &mark.ChildMark
    }
    if childYangName == "police-conform" {
        return &mark.PoliceConform
    }
    if childYangName == "police-exceed" {
        return &mark.PoliceExceed
    }
    if childYangName == "police-violate" {
        return &mark.PoliceViolate
    }
    if childYangName == "parent-mark" {
        return &mark.ParentMark
    }
    if childYangName == "parent-police-conform" {
        return &mark.ParentPoliceConform
    }
    if childYangName == "parent-police-exceed" {
        return &mark.ParentPoliceExceed
    }
    if childYangName == "parent-police-violate" {
        return &mark.ParentPoliceViolate
    }
    return nil
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["child-mark"] = &mark.ChildMark
    children["police-conform"] = &mark.PoliceConform
    children["police-exceed"] = &mark.PoliceExceed
    children["police-violate"] = &mark.PoliceViolate
    children["parent-mark"] = &mark.ParentMark
    children["parent-police-conform"] = &mark.ParentPoliceConform
    children["parent-police-exceed"] = &mark.ParentPoliceExceed
    children["parent-police-violate"] = &mark.ParentPoliceViolate
    return children
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetBundleName() string { return "cisco_ios_xr" }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetYangName() string { return "mark" }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) SetParent(parent types.Entity) { mark.parent = parent }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetParent() types.Entity { return mark.parent }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark
// Child mark only
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetFilter() yfilter.YFilter { return childMark.YFilter }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) SetFilter(yf yfilter.YFilter) { childMark.YFilter = yf }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetSegmentPath() string {
    return "child-mark"
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range childMark.MarkDetail {
            if childMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail{}
        childMark.MarkDetail = append(childMark.MarkDetail, child)
        return &childMark.MarkDetail[len(childMark.MarkDetail)-1]
    }
    return nil
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range childMark.MarkDetail {
        children[childMark.MarkDetail[i].GetSegmentPath()] = &childMark.MarkDetail[i]
    }
    return children
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = childMark.ActionType
    return leafs
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetBundleName() string { return "cisco_ios_xr" }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetYangName() string { return "child-mark" }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) SetParent(parent types.Entity) { childMark.parent = parent }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetParent() types.Entity { return childMark.parent }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetParentYangName() string { return "child-mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform
// Child police conform mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetFilter() yfilter.YFilter { return policeConform.YFilter }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) SetFilter(yf yfilter.YFilter) { policeConform.YFilter = yf }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetSegmentPath() string {
    return "police-conform"
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeConform.MarkDetail {
            if policeConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail{}
        policeConform.MarkDetail = append(policeConform.MarkDetail, child)
        return &policeConform.MarkDetail[len(policeConform.MarkDetail)-1]
    }
    return nil
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeConform.MarkDetail {
        children[policeConform.MarkDetail[i].GetSegmentPath()] = &policeConform.MarkDetail[i]
    }
    return children
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeConform.ActionType
    return leafs
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetYangName() string { return "police-conform" }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) SetParent(parent types.Entity) { policeConform.parent = parent }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetParent() types.Entity { return policeConform.parent }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetParentYangName() string { return "police-conform" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed
// Child police exceed mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetFilter() yfilter.YFilter { return policeExceed.YFilter }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) SetFilter(yf yfilter.YFilter) { policeExceed.YFilter = yf }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetSegmentPath() string {
    return "police-exceed"
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeExceed.MarkDetail {
            if policeExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail{}
        policeExceed.MarkDetail = append(policeExceed.MarkDetail, child)
        return &policeExceed.MarkDetail[len(policeExceed.MarkDetail)-1]
    }
    return nil
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeExceed.MarkDetail {
        children[policeExceed.MarkDetail[i].GetSegmentPath()] = &policeExceed.MarkDetail[i]
    }
    return children
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeExceed.ActionType
    return leafs
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetYangName() string { return "police-exceed" }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) SetParent(parent types.Entity) { policeExceed.parent = parent }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetParent() types.Entity { return policeExceed.parent }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetParentYangName() string { return "police-exceed" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate
// Child police violate mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetFilter() yfilter.YFilter { return policeViolate.YFilter }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) SetFilter(yf yfilter.YFilter) { policeViolate.YFilter = yf }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetSegmentPath() string {
    return "police-violate"
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeViolate.MarkDetail {
            if policeViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail{}
        policeViolate.MarkDetail = append(policeViolate.MarkDetail, child)
        return &policeViolate.MarkDetail[len(policeViolate.MarkDetail)-1]
    }
    return nil
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeViolate.MarkDetail {
        children[policeViolate.MarkDetail[i].GetSegmentPath()] = &policeViolate.MarkDetail[i]
    }
    return children
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeViolate.ActionType
    return leafs
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetYangName() string { return "police-violate" }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) SetParent(parent types.Entity) { policeViolate.parent = parent }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetParent() types.Entity { return policeViolate.parent }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetParentYangName() string { return "police-violate" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark
// Parent mark only
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetFilter() yfilter.YFilter { return parentMark.YFilter }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) SetFilter(yf yfilter.YFilter) { parentMark.YFilter = yf }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetSegmentPath() string {
    return "parent-mark"
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentMark.MarkDetail {
            if parentMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail{}
        parentMark.MarkDetail = append(parentMark.MarkDetail, child)
        return &parentMark.MarkDetail[len(parentMark.MarkDetail)-1]
    }
    return nil
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentMark.MarkDetail {
        children[parentMark.MarkDetail[i].GetSegmentPath()] = &parentMark.MarkDetail[i]
    }
    return children
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentMark.ActionType
    return leafs
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetBundleName() string { return "cisco_ios_xr" }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetYangName() string { return "parent-mark" }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) SetParent(parent types.Entity) { parentMark.parent = parent }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetParent() types.Entity { return parentMark.parent }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetParentYangName() string { return "parent-mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform
// Parent police conform mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetFilter() yfilter.YFilter { return parentPoliceConform.YFilter }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) SetFilter(yf yfilter.YFilter) { parentPoliceConform.YFilter = yf }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetSegmentPath() string {
    return "parent-police-conform"
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceConform.MarkDetail {
            if parentPoliceConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail{}
        parentPoliceConform.MarkDetail = append(parentPoliceConform.MarkDetail, child)
        return &parentPoliceConform.MarkDetail[len(parentPoliceConform.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceConform.MarkDetail {
        children[parentPoliceConform.MarkDetail[i].GetSegmentPath()] = &parentPoliceConform.MarkDetail[i]
    }
    return children
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceConform.ActionType
    return leafs
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetYangName() string { return "parent-police-conform" }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) SetParent(parent types.Entity) { parentPoliceConform.parent = parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetParent() types.Entity { return parentPoliceConform.parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetParentYangName() string { return "parent-police-conform" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed
// Parent police exceed mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetFilter() yfilter.YFilter { return parentPoliceExceed.YFilter }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) SetFilter(yf yfilter.YFilter) { parentPoliceExceed.YFilter = yf }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetSegmentPath() string {
    return "parent-police-exceed"
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceExceed.MarkDetail {
            if parentPoliceExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail{}
        parentPoliceExceed.MarkDetail = append(parentPoliceExceed.MarkDetail, child)
        return &parentPoliceExceed.MarkDetail[len(parentPoliceExceed.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceExceed.MarkDetail {
        children[parentPoliceExceed.MarkDetail[i].GetSegmentPath()] = &parentPoliceExceed.MarkDetail[i]
    }
    return children
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceExceed.ActionType
    return leafs
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetYangName() string { return "parent-police-exceed" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) SetParent(parent types.Entity) { parentPoliceExceed.parent = parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetParent() types.Entity { return parentPoliceExceed.parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetParentYangName() string { return "parent-police-exceed" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate
// Parent police violate mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetFilter() yfilter.YFilter { return parentPoliceViolate.YFilter }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) SetFilter(yf yfilter.YFilter) { parentPoliceViolate.YFilter = yf }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetSegmentPath() string {
    return "parent-police-violate"
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceViolate.MarkDetail {
            if parentPoliceViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail{}
        parentPoliceViolate.MarkDetail = append(parentPoliceViolate.MarkDetail, child)
        return &parentPoliceViolate.MarkDetail[len(parentPoliceViolate.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceViolate.MarkDetail {
        children[parentPoliceViolate.MarkDetail[i].GetSegmentPath()] = &parentPoliceViolate.MarkDetail[i]
    }
    return children
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceViolate.ActionType
    return leafs
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetYangName() string { return "parent-police-violate" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) SetParent(parent types.Entity) { parentPoliceViolate.parent = parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetParent() types.Entity { return parentPoliceViolate.parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetParentYangName() string { return "parent-police-violate" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon
// Typhoon QoS policy details
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // qos show ea st v2. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2.
    QosShowEaStV2 []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetFilter() yfilter.YFilter { return policyTyphoon.YFilter }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) SetFilter(yf yfilter.YFilter) { policyTyphoon.YFilter = yf }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetGoName(yname string) string {
    if yname == "qos-show-ea-st-v2" { return "QosShowEaStV2" }
    return ""
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetSegmentPath() string {
    return "policy-typhoon"
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos-show-ea-st-v2" {
        for _, c := range policyTyphoon.QosShowEaStV2 {
            if policyTyphoon.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2{}
        policyTyphoon.QosShowEaStV2 = append(policyTyphoon.QosShowEaStV2, child)
        return &policyTyphoon.QosShowEaStV2[len(policyTyphoon.QosShowEaStV2)-1]
    }
    return nil
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policyTyphoon.QosShowEaStV2 {
        children[policyTyphoon.QosShowEaStV2[i].GetSegmentPath()] = &policyTyphoon.QosShowEaStV2[i]
    }
    return children
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetBundleName() string { return "cisco_ios_xr" }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetYangName() string { return "policy-typhoon" }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) SetParent(parent types.Entity) { policyTyphoon.parent = parent }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetParent() types.Entity { return policyTyphoon.parent }

func (policyTyphoon *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2
// qos show ea st v2
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class level. The type is interface{} with range: 0..255.
    ClassLevel interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Parent policy name. The type is string with length: 0..65.
    ParentPolicyName interface{}

    // Parent class name. The type is string with length: 0..65.
    ParentClassName interface{}

    // Queue parameters.
    Queue PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue

    // Queue limit parameters.
    QueueLimitParameters PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters

    // Shape parameters.
    Shape PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape

    // Police parameters.
    Police PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police

    // WFQ parameters.
    Wfq PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq

    // WRED parameters.
    Wred PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred

    // Mark parameters.
    Mark PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetFilter() yfilter.YFilter { return qosShowEaStV2.YFilter }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) SetFilter(yf yfilter.YFilter) { qosShowEaStV2.YFilter = yf }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetGoName(yname string) string {
    if yname == "class-level" { return "ClassLevel" }
    if yname == "class-name" { return "ClassName" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "parent-policy-name" { return "ParentPolicyName" }
    if yname == "parent-class-name" { return "ParentClassName" }
    if yname == "queue" { return "Queue" }
    if yname == "queue-limit-parameters" { return "QueueLimitParameters" }
    if yname == "shape" { return "Shape" }
    if yname == "police" { return "Police" }
    if yname == "wfq" { return "Wfq" }
    if yname == "wred" { return "Wred" }
    if yname == "mark" { return "Mark" }
    return ""
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetSegmentPath() string {
    return "qos-show-ea-st-v2"
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue" {
        return &qosShowEaStV2.Queue
    }
    if childYangName == "queue-limit-parameters" {
        return &qosShowEaStV2.QueueLimitParameters
    }
    if childYangName == "shape" {
        return &qosShowEaStV2.Shape
    }
    if childYangName == "police" {
        return &qosShowEaStV2.Police
    }
    if childYangName == "wfq" {
        return &qosShowEaStV2.Wfq
    }
    if childYangName == "wred" {
        return &qosShowEaStV2.Wred
    }
    if childYangName == "mark" {
        return &qosShowEaStV2.Mark
    }
    return nil
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue"] = &qosShowEaStV2.Queue
    children["queue-limit-parameters"] = &qosShowEaStV2.QueueLimitParameters
    children["shape"] = &qosShowEaStV2.Shape
    children["police"] = &qosShowEaStV2.Police
    children["wfq"] = &qosShowEaStV2.Wfq
    children["wred"] = &qosShowEaStV2.Wred
    children["mark"] = &qosShowEaStV2.Mark
    return children
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-level"] = qosShowEaStV2.ClassLevel
    leafs["class-name"] = qosShowEaStV2.ClassName
    leafs["policy-name"] = qosShowEaStV2.PolicyName
    leafs["parent-policy-name"] = qosShowEaStV2.ParentPolicyName
    leafs["parent-class-name"] = qosShowEaStV2.ParentClassName
    return leafs
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetBundleName() string { return "cisco_ios_xr" }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetYangName() string { return "qos-show-ea-st-v2" }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) SetParent(parent types.Entity) { qosShowEaStV2.parent = parent }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetParent() types.Entity { return qosShowEaStV2.parent }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2) GetParentYangName() string { return "policy-typhoon" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue
// Queue parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Queue ID. The type is interface{} with range: 0..4294967295.
    QueueId interface{}

    // Queue type. The type is Queue.
    QueueType interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetGoName(yname string) string {
    if yname == "queue-id" { return "QueueId" }
    if yname == "queue-type" { return "QueueType" }
    if yname == "class-name" { return "ClassName" }
    return ""
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queue-id"] = queue.QueueId
    leafs["queue-type"] = queue.QueueType
    leafs["class-name"] = queue.ClassName
    return leafs
}

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetYangName() string { return "queue" }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetParent() types.Entity { return queue.parent }

func (queue *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters
// Queue limit parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Absolute Index. The type is interface{} with range: 0..65535.
    AbsoluteIndex interface{}

    // Template ID. The type is interface{} with range: 0..65535.
    TemplateId interface{}

    // Curve ID. The type is interface{} with range: 0..65535.
    CurveId interface{}

    // Queue limit in kbytes.
    QueueLimit PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit

    // Config queue limit.
    ConfigQueueLimit PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetFilter() yfilter.YFilter { return queueLimitParameters.YFilter }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) SetFilter(yf yfilter.YFilter) { queueLimitParameters.YFilter = yf }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetGoName(yname string) string {
    if yname == "absolute-index" { return "AbsoluteIndex" }
    if yname == "template-id" { return "TemplateId" }
    if yname == "curve-id" { return "CurveId" }
    if yname == "queue-limit" { return "QueueLimit" }
    if yname == "config-queue-limit" { return "ConfigQueueLimit" }
    return ""
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetSegmentPath() string {
    return "queue-limit-parameters"
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue-limit" {
        return &queueLimitParameters.QueueLimit
    }
    if childYangName == "config-queue-limit" {
        return &queueLimitParameters.ConfigQueueLimit
    }
    return nil
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue-limit"] = &queueLimitParameters.QueueLimit
    children["config-queue-limit"] = &queueLimitParameters.ConfigQueueLimit
    return children
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["absolute-index"] = queueLimitParameters.AbsoluteIndex
    leafs["template-id"] = queueLimitParameters.TemplateId
    leafs["curve-id"] = queueLimitParameters.CurveId
    return leafs
}

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetYangName() string { return "queue-limit-parameters" }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) SetParent(parent types.Entity) { queueLimitParameters.parent = parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetParent() types.Entity { return queueLimitParameters.parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit
// Queue limit in kbytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetFilter() yfilter.YFilter { return queueLimit.YFilter }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) SetFilter(yf yfilter.YFilter) { queueLimit.YFilter = yf }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetSegmentPath() string {
    return "queue-limit"
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = queueLimit.Value
    leafs["unit"] = queueLimit.Unit
    return leafs
}

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetYangName() string { return "queue-limit" }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) SetParent(parent types.Entity) { queueLimit.parent = parent }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetParent() types.Entity { return queueLimit.parent }

func (queueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit
// Config queue limit
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetFilter() yfilter.YFilter { return configQueueLimit.YFilter }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) SetFilter(yf yfilter.YFilter) { configQueueLimit.YFilter = yf }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetSegmentPath() string {
    return "config-queue-limit"
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = configQueueLimit.Value
    leafs["unit"] = configQueueLimit.Unit
    return leafs
}

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetYangName() string { return "config-queue-limit" }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) SetParent(parent types.Entity) { configQueueLimit.parent = parent }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetParent() types.Entity { return configQueueLimit.parent }

func (configQueueLimit *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape
// Shape parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // CIR Shaper type. The type is ShapeProfiletypeV2.
    CirShapeType interface{}

    // PIR Shaper type. The type is ShapeProfiletypeV2.
    PirShapeType interface{}

    // CIR shaper params.
    CirShape PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape

    // PIR shaper params.
    PirShape PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetGoName(yname string) string {
    if yname == "cir-shape-type" { return "CirShapeType" }
    if yname == "pir-shape-type" { return "PirShapeType" }
    if yname == "cir-shape" { return "CirShape" }
    if yname == "pir-shape" { return "PirShape" }
    return ""
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir-shape" {
        return &shape.CirShape
    }
    if childYangName == "pir-shape" {
        return &shape.PirShape
    }
    return nil
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir-shape"] = &shape.CirShape
    children["pir-shape"] = &shape.PirShape
    return children
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cir-shape-type"] = shape.CirShapeType
    leafs["pir-shape-type"] = shape.PirShapeType
    return leafs
}

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetYangName() string { return "shape" }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetParent() types.Entity { return shape.parent }

func (shape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape
// CIR shaper params
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // Scale Factor. The type is interface{} with range: 0..65535.
    ScaleFactor interface{}

    // CIR in kbps.
    Cir PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir

    // Config bandwidth.
    ConfigBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth

    // CBS in bytes.
    Cbs PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetFilter() yfilter.YFilter { return cirShape.YFilter }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) SetFilter(yf yfilter.YFilter) { cirShape.YFilter = yf }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetGoName(yname string) string {
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scale-factor" { return "ScaleFactor" }
    if yname == "cir" { return "Cir" }
    if yname == "config-bandwidth" { return "ConfigBandwidth" }
    if yname == "cbs" { return "Cbs" }
    return ""
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetSegmentPath() string {
    return "cir-shape"
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &cirShape.Cir
    }
    if childYangName == "config-bandwidth" {
        return &cirShape.ConfigBandwidth
    }
    if childYangName == "cbs" {
        return &cirShape.Cbs
    }
    return nil
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &cirShape.Cir
    children["config-bandwidth"] = &cirShape.ConfigBandwidth
    children["cbs"] = &cirShape.Cbs
    return children
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["chunk-id"] = cirShape.ChunkId
    leafs["profile-id"] = cirShape.ProfileId
    leafs["scale-factor"] = cirShape.ScaleFactor
    return leafs
}

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetBundleName() string { return "cisco_ios_xr" }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetYangName() string { return "cir-shape" }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) SetParent(parent types.Entity) { cirShape.parent = parent }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetParent() types.Entity { return cirShape.parent }

func (cirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir
// CIR in kbps
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth
// Config bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum bandwidth rate.
    MinimumRate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetFilter() yfilter.YFilter { return configBandwidth.YFilter }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) SetFilter(yf yfilter.YFilter) { configBandwidth.YFilter = yf }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetGoName(yname string) string {
    if yname == "minimum-rate" { return "MinimumRate" }
    return ""
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetSegmentPath() string {
    return "config-bandwidth"
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minimum-rate" {
        return &configBandwidth.MinimumRate
    }
    return nil
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minimum-rate"] = &configBandwidth.MinimumRate
    return children
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetYangName() string { return "config-bandwidth" }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) SetParent(parent types.Entity) { configBandwidth.parent = parent }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetParent() types.Entity { return configBandwidth.parent }

func (configBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate
// Minimum bandwidth rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetFilter() yfilter.YFilter { return minimumRate.YFilter }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) SetFilter(yf yfilter.YFilter) { minimumRate.YFilter = yf }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetSegmentPath() string {
    return "minimum-rate"
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minimumRate.Value
    leafs["unit"] = minimumRate.Unit
    return leafs
}

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetBundleName() string { return "cisco_ios_xr" }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetYangName() string { return "minimum-rate" }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) SetParent(parent types.Entity) { minimumRate.parent = parent }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetParent() types.Entity { return minimumRate.parent }

func (minimumRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetParentYangName() string { return "config-bandwidth" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs
// CBS in bytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape
// PIR shaper params
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // Scale Factor. The type is interface{} with range: 0..65535.
    ScaleFactor interface{}

    // PIR in kbps.
    Pir PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir

    // PBS in bytes.
    Pbs PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetFilter() yfilter.YFilter { return pirShape.YFilter }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) SetFilter(yf yfilter.YFilter) { pirShape.YFilter = yf }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetGoName(yname string) string {
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scale-factor" { return "ScaleFactor" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    return ""
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetSegmentPath() string {
    return "pir-shape"
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pir" {
        return &pirShape.Pir
    }
    if childYangName == "pbs" {
        return &pirShape.Pbs
    }
    return nil
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pir"] = &pirShape.Pir
    children["pbs"] = &pirShape.Pbs
    return children
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["chunk-id"] = pirShape.ChunkId
    leafs["profile-id"] = pirShape.ProfileId
    leafs["scale-factor"] = pirShape.ScaleFactor
    return leafs
}

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetBundleName() string { return "cisco_ios_xr" }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetYangName() string { return "pir-shape" }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) SetParent(parent types.Entity) { pirShape.parent = parent }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetParent() types.Entity { return pirShape.parent }

func (pirShape *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir
// PIR in kbps
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetParentYangName() string { return "pir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs
// PBS in bytes
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetParentYangName() string { return "pir-shape" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police
// Police parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policer type. The type is TbAlgorithm.
    PolicerType interface{}

    // Police profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // CIR.
    Cir PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir

    // CBS.
    Cbs PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs

    // PIR.
    Pir PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir

    // PBS.
    Pbs PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs

    // Police config parameters.
    PoliceConfigParameters PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetFilter() yfilter.YFilter { return police.YFilter }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) SetFilter(yf yfilter.YFilter) { police.YFilter = yf }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetGoName(yname string) string {
    if yname == "policer-type" { return "PolicerType" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    if yname == "police-config-parameters" { return "PoliceConfigParameters" }
    return ""
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetSegmentPath() string {
    return "police"
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &police.Cir
    }
    if childYangName == "cbs" {
        return &police.Cbs
    }
    if childYangName == "pir" {
        return &police.Pir
    }
    if childYangName == "pbs" {
        return &police.Pbs
    }
    if childYangName == "police-config-parameters" {
        return &police.PoliceConfigParameters
    }
    return nil
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &police.Cir
    children["cbs"] = &police.Cbs
    children["pir"] = &police.Pir
    children["pbs"] = &police.Pbs
    children["police-config-parameters"] = &police.PoliceConfigParameters
    return children
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policer-type"] = police.PolicerType
    leafs["profile-id"] = police.ProfileId
    return leafs
}

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetBundleName() string { return "cisco_ios_xr" }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetYangName() string { return "police" }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) SetParent(parent types.Entity) { police.parent = parent }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetParent() types.Entity { return police.parent }

func (police *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir
// CIR
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs
// CBS
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir
// PIR
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs
// PBS
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters
// Police config parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Average rate.
    AverageRate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate

    // Peak rate.
    PeakRate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate

    // Conform burst.
    ConformBurst PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst

    // Exceed burst.
    ExceedBurst PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetFilter() yfilter.YFilter { return policeConfigParameters.YFilter }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) SetFilter(yf yfilter.YFilter) { policeConfigParameters.YFilter = yf }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetGoName(yname string) string {
    if yname == "average-rate" { return "AverageRate" }
    if yname == "peak-rate" { return "PeakRate" }
    if yname == "conform-burst" { return "ConformBurst" }
    if yname == "exceed-burst" { return "ExceedBurst" }
    return ""
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetSegmentPath() string {
    return "police-config-parameters"
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "average-rate" {
        return &policeConfigParameters.AverageRate
    }
    if childYangName == "peak-rate" {
        return &policeConfigParameters.PeakRate
    }
    if childYangName == "conform-burst" {
        return &policeConfigParameters.ConformBurst
    }
    if childYangName == "exceed-burst" {
        return &policeConfigParameters.ExceedBurst
    }
    return nil
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["average-rate"] = &policeConfigParameters.AverageRate
    children["peak-rate"] = &policeConfigParameters.PeakRate
    children["conform-burst"] = &policeConfigParameters.ConformBurst
    children["exceed-burst"] = &policeConfigParameters.ExceedBurst
    return children
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetBundleName() string { return "cisco_ios_xr" }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetYangName() string { return "police-config-parameters" }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) SetParent(parent types.Entity) { policeConfigParameters.parent = parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetParent() types.Entity { return policeConfigParameters.parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate
// Average rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetFilter() yfilter.YFilter { return averageRate.YFilter }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) SetFilter(yf yfilter.YFilter) { averageRate.YFilter = yf }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetSegmentPath() string {
    return "average-rate"
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = averageRate.Value
    leafs["unit"] = averageRate.Unit
    return leafs
}

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetBundleName() string { return "cisco_ios_xr" }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetYangName() string { return "average-rate" }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) SetParent(parent types.Entity) { averageRate.parent = parent }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetParent() types.Entity { return averageRate.parent }

func (averageRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate
// Peak rate
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetFilter() yfilter.YFilter { return peakRate.YFilter }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) SetFilter(yf yfilter.YFilter) { peakRate.YFilter = yf }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetSegmentPath() string {
    return "peak-rate"
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = peakRate.Value
    leafs["unit"] = peakRate.Unit
    return leafs
}

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetBundleName() string { return "cisco_ios_xr" }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetYangName() string { return "peak-rate" }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) SetParent(parent types.Entity) { peakRate.parent = parent }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetParent() types.Entity { return peakRate.parent }

func (peakRate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst
// Conform burst
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetFilter() yfilter.YFilter { return conformBurst.YFilter }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) SetFilter(yf yfilter.YFilter) { conformBurst.YFilter = yf }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetSegmentPath() string {
    return "conform-burst"
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = conformBurst.Value
    leafs["unit"] = conformBurst.Unit
    return leafs
}

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetBundleName() string { return "cisco_ios_xr" }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetYangName() string { return "conform-burst" }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) SetParent(parent types.Entity) { conformBurst.parent = parent }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetParent() types.Entity { return conformBurst.parent }

func (conformBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst
// Exceed burst
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetFilter() yfilter.YFilter { return exceedBurst.YFilter }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) SetFilter(yf yfilter.YFilter) { exceedBurst.YFilter = yf }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetSegmentPath() string {
    return "exceed-burst"
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = exceedBurst.Value
    leafs["unit"] = exceedBurst.Unit
    return leafs
}

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetBundleName() string { return "cisco_ios_xr" }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetYangName() string { return "exceed-burst" }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) SetParent(parent types.Entity) { exceedBurst.parent = parent }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetParent() types.Entity { return exceedBurst.parent }

func (exceedBurst *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq
// WFQ parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WFQ profile. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Committed weight. The type is interface{} with range: 0..4294967295.
    CommittedWeight interface{}

    // Excess weight. The type is interface{} with range: 0..65535.
    ExcessWeight interface{}

    // Parent Excess ratio. The type is interface{} with range: 0..65535.
    ExcessRatio interface{}

    // Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Level. The type is interface{} with range: 0..255.
    Level interface{}

    // Parent bandwidth.
    ParentBandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth

    // CFG Bandwidth.
    Bandwidth PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetFilter() yfilter.YFilter { return wfq.YFilter }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) SetFilter(yf yfilter.YFilter) { wfq.YFilter = yf }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "committed-weight" { return "CommittedWeight" }
    if yname == "excess-weight" { return "ExcessWeight" }
    if yname == "excess-ratio" { return "ExcessRatio" }
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "level" { return "Level" }
    if yname == "parent-bandwidth" { return "ParentBandwidth" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetSegmentPath() string {
    return "wfq"
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "parent-bandwidth" {
        return &wfq.ParentBandwidth
    }
    if childYangName == "bandwidth" {
        return &wfq.Bandwidth
    }
    return nil
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["parent-bandwidth"] = &wfq.ParentBandwidth
    children["bandwidth"] = &wfq.Bandwidth
    return children
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = wfq.ProfileId
    leafs["committed-weight"] = wfq.CommittedWeight
    leafs["excess-weight"] = wfq.ExcessWeight
    leafs["excess-ratio"] = wfq.ExcessRatio
    leafs["chunk-id"] = wfq.ChunkId
    leafs["level"] = wfq.Level
    return leafs
}

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetBundleName() string { return "cisco_ios_xr" }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetYangName() string { return "wfq" }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) SetParent(parent types.Entity) { wfq.parent = parent }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetParent() types.Entity { return wfq.parent }

func (wfq *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth
// Parent bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetFilter() yfilter.YFilter { return parentBandwidth.YFilter }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) SetFilter(yf yfilter.YFilter) { parentBandwidth.YFilter = yf }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetSegmentPath() string {
    return "parent-bandwidth"
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = parentBandwidth.Value
    leafs["unit"] = parentBandwidth.Unit
    return leafs
}

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetYangName() string { return "parent-bandwidth" }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) SetParent(parent types.Entity) { parentBandwidth.parent = parent }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetParent() types.Entity { return parentBandwidth.parent }

func (parentBandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth
// CFG Bandwidth
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = bandwidth.Value
    leafs["unit"] = bandwidth.Unit
    return leafs
}

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred
// WRED parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED type. The type is Wred.
    Type interface{}

    // Number of curves. The type is interface{} with range: 0..65535.
    CurveXr interface{}

    // Curve details. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve.
    Curve []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetFilter() yfilter.YFilter { return wred.YFilter }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) SetFilter(yf yfilter.YFilter) { wred.YFilter = yf }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "curve-xr" { return "CurveXr" }
    if yname == "curve" { return "Curve" }
    return ""
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetSegmentPath() string {
    return "wred"
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "curve" {
        for _, c := range wred.Curve {
            if wred.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve{}
        wred.Curve = append(wred.Curve, child)
        return &wred.Curve[len(wred.Curve)-1]
    }
    return nil
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range wred.Curve {
        children[wred.Curve[i].GetSegmentPath()] = &wred.Curve[i]
    }
    return children
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = wred.Type
    leafs["curve-xr"] = wred.CurveXr
    return leafs
}

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetBundleName() string { return "cisco_ios_xr" }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetYangName() string { return "wred" }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) SetParent(parent types.Entity) { wred.parent = parent }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetParent() types.Entity { return wred.parent }

func (wred *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve
// Curve details
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Absolute Index. The type is interface{} with range: 0..65535.
    AbsoluteIndex interface{}

    // Template ID. The type is interface{} with range: 0..65535.
    TemplateId interface{}

    // Curve ID. The type is interface{} with range: 0..65535.
    CurveId interface{}

    // WRED match if precedence start value equals to end value Format:
    // <start-value> , else range Format: <start-value> <end-value>. The type is
    // string.
    Match interface{}

    // WRED exp match if EXP start value equals to end value Format: <start-value>
    // , else range Format: <start-value> <end-value>. The type is string.
    ExpMatch interface{}

    // Minimum threshold.
    MinThreshold PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold

    // Minimum threshold WRED context.
    MinThresholdUserConfig PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig

    // Maximum threshold.
    MaxThreshold PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold

    // Maximum threshold WRED context.
    MaxThresholdUserConfig PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetFilter() yfilter.YFilter { return curve.YFilter }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) SetFilter(yf yfilter.YFilter) { curve.YFilter = yf }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetGoName(yname string) string {
    if yname == "absolute-index" { return "AbsoluteIndex" }
    if yname == "template-id" { return "TemplateId" }
    if yname == "curve-id" { return "CurveId" }
    if yname == "match" { return "Match" }
    if yname == "exp-match" { return "ExpMatch" }
    if yname == "min-threshold" { return "MinThreshold" }
    if yname == "min-threshold-user-config" { return "MinThresholdUserConfig" }
    if yname == "max-threshold" { return "MaxThreshold" }
    if yname == "max-threshold-user-config" { return "MaxThresholdUserConfig" }
    return ""
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetSegmentPath() string {
    return "curve"
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-threshold" {
        return &curve.MinThreshold
    }
    if childYangName == "min-threshold-user-config" {
        return &curve.MinThresholdUserConfig
    }
    if childYangName == "max-threshold" {
        return &curve.MaxThreshold
    }
    if childYangName == "max-threshold-user-config" {
        return &curve.MaxThresholdUserConfig
    }
    return nil
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-threshold"] = &curve.MinThreshold
    children["min-threshold-user-config"] = &curve.MinThresholdUserConfig
    children["max-threshold"] = &curve.MaxThreshold
    children["max-threshold-user-config"] = &curve.MaxThresholdUserConfig
    return children
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["absolute-index"] = curve.AbsoluteIndex
    leafs["template-id"] = curve.TemplateId
    leafs["curve-id"] = curve.CurveId
    leafs["match"] = curve.Match
    leafs["exp-match"] = curve.ExpMatch
    return leafs
}

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetBundleName() string { return "cisco_ios_xr" }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetYangName() string { return "curve" }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) SetParent(parent types.Entity) { curve.parent = parent }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetParent() types.Entity { return curve.parent }

func (curve *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetParentYangName() string { return "wred" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold
// Minimum threshold
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetFilter() yfilter.YFilter { return minThreshold.YFilter }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) SetFilter(yf yfilter.YFilter) { minThreshold.YFilter = yf }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetSegmentPath() string {
    return "min-threshold"
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThreshold.Value
    leafs["unit"] = minThreshold.Unit
    return leafs
}

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetYangName() string { return "min-threshold" }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) SetParent(parent types.Entity) { minThreshold.parent = parent }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetParent() types.Entity { return minThreshold.parent }

func (minThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig
// Minimum threshold WRED context
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetFilter() yfilter.YFilter { return minThresholdUserConfig.YFilter }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) SetFilter(yf yfilter.YFilter) { minThresholdUserConfig.YFilter = yf }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetSegmentPath() string {
    return "min-threshold-user-config"
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThresholdUserConfig.Value
    leafs["unit"] = minThresholdUserConfig.Unit
    return leafs
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetYangName() string { return "min-threshold-user-config" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) SetParent(parent types.Entity) { minThresholdUserConfig.parent = parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetParent() types.Entity { return minThresholdUserConfig.parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold
// Maximum threshold
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetFilter() yfilter.YFilter { return maxThreshold.YFilter }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) SetFilter(yf yfilter.YFilter) { maxThreshold.YFilter = yf }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetSegmentPath() string {
    return "max-threshold"
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThreshold.Value
    leafs["unit"] = maxThreshold.Unit
    return leafs
}

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetYangName() string { return "max-threshold" }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) SetParent(parent types.Entity) { maxThreshold.parent = parent }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetParent() types.Entity { return maxThreshold.parent }

func (maxThreshold *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig
// Maximum threshold WRED context
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetFilter() yfilter.YFilter { return maxThresholdUserConfig.YFilter }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) SetFilter(yf yfilter.YFilter) { maxThresholdUserConfig.YFilter = yf }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetSegmentPath() string {
    return "max-threshold-user-config"
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThresholdUserConfig.Value
    leafs["unit"] = maxThresholdUserConfig.Unit
    return leafs
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetYangName() string { return "max-threshold-user-config" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) SetParent(parent types.Entity) { maxThresholdUserConfig.parent = parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetParent() types.Entity { return maxThresholdUserConfig.parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark
// Mark parameters
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Child mark only.
    ChildMark PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark

    // Child police conform mark.
    PoliceConform PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform

    // Child police exceed mark.
    PoliceExceed PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed

    // Child police violate mark.
    PoliceViolate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate

    // Parent mark only.
    ParentMark PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark

    // Parent police conform mark.
    ParentPoliceConform PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform

    // Parent police exceed mark.
    ParentPoliceExceed PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed

    // Parent police violate mark.
    ParentPoliceViolate PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetFilter() yfilter.YFilter { return mark.YFilter }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) SetFilter(yf yfilter.YFilter) { mark.YFilter = yf }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetGoName(yname string) string {
    if yname == "child-mark" { return "ChildMark" }
    if yname == "police-conform" { return "PoliceConform" }
    if yname == "police-exceed" { return "PoliceExceed" }
    if yname == "police-violate" { return "PoliceViolate" }
    if yname == "parent-mark" { return "ParentMark" }
    if yname == "parent-police-conform" { return "ParentPoliceConform" }
    if yname == "parent-police-exceed" { return "ParentPoliceExceed" }
    if yname == "parent-police-violate" { return "ParentPoliceViolate" }
    return ""
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetSegmentPath() string {
    return "mark"
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "child-mark" {
        return &mark.ChildMark
    }
    if childYangName == "police-conform" {
        return &mark.PoliceConform
    }
    if childYangName == "police-exceed" {
        return &mark.PoliceExceed
    }
    if childYangName == "police-violate" {
        return &mark.PoliceViolate
    }
    if childYangName == "parent-mark" {
        return &mark.ParentMark
    }
    if childYangName == "parent-police-conform" {
        return &mark.ParentPoliceConform
    }
    if childYangName == "parent-police-exceed" {
        return &mark.ParentPoliceExceed
    }
    if childYangName == "parent-police-violate" {
        return &mark.ParentPoliceViolate
    }
    return nil
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["child-mark"] = &mark.ChildMark
    children["police-conform"] = &mark.PoliceConform
    children["police-exceed"] = &mark.PoliceExceed
    children["police-violate"] = &mark.PoliceViolate
    children["parent-mark"] = &mark.ParentMark
    children["parent-police-conform"] = &mark.ParentPoliceConform
    children["parent-police-exceed"] = &mark.ParentPoliceExceed
    children["parent-police-violate"] = &mark.ParentPoliceViolate
    return children
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetBundleName() string { return "cisco_ios_xr" }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetYangName() string { return "mark" }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) SetParent(parent types.Entity) { mark.parent = parent }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetParent() types.Entity { return mark.parent }

func (mark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark
// Child mark only
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetFilter() yfilter.YFilter { return childMark.YFilter }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) SetFilter(yf yfilter.YFilter) { childMark.YFilter = yf }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetSegmentPath() string {
    return "child-mark"
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range childMark.MarkDetail {
            if childMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail{}
        childMark.MarkDetail = append(childMark.MarkDetail, child)
        return &childMark.MarkDetail[len(childMark.MarkDetail)-1]
    }
    return nil
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range childMark.MarkDetail {
        children[childMark.MarkDetail[i].GetSegmentPath()] = &childMark.MarkDetail[i]
    }
    return children
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = childMark.ActionType
    return leafs
}

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetBundleName() string { return "cisco_ios_xr" }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetYangName() string { return "child-mark" }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) SetParent(parent types.Entity) { childMark.parent = parent }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetParent() types.Entity { return childMark.parent }

func (childMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetParentYangName() string { return "child-mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform
// Child police conform mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetFilter() yfilter.YFilter { return policeConform.YFilter }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) SetFilter(yf yfilter.YFilter) { policeConform.YFilter = yf }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetSegmentPath() string {
    return "police-conform"
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeConform.MarkDetail {
            if policeConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail{}
        policeConform.MarkDetail = append(policeConform.MarkDetail, child)
        return &policeConform.MarkDetail[len(policeConform.MarkDetail)-1]
    }
    return nil
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeConform.MarkDetail {
        children[policeConform.MarkDetail[i].GetSegmentPath()] = &policeConform.MarkDetail[i]
    }
    return children
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeConform.ActionType
    return leafs
}

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetYangName() string { return "police-conform" }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) SetParent(parent types.Entity) { policeConform.parent = parent }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetParent() types.Entity { return policeConform.parent }

func (policeConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetParentYangName() string { return "police-conform" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed
// Child police exceed mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetFilter() yfilter.YFilter { return policeExceed.YFilter }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) SetFilter(yf yfilter.YFilter) { policeExceed.YFilter = yf }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetSegmentPath() string {
    return "police-exceed"
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeExceed.MarkDetail {
            if policeExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail{}
        policeExceed.MarkDetail = append(policeExceed.MarkDetail, child)
        return &policeExceed.MarkDetail[len(policeExceed.MarkDetail)-1]
    }
    return nil
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeExceed.MarkDetail {
        children[policeExceed.MarkDetail[i].GetSegmentPath()] = &policeExceed.MarkDetail[i]
    }
    return children
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeExceed.ActionType
    return leafs
}

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetYangName() string { return "police-exceed" }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) SetParent(parent types.Entity) { policeExceed.parent = parent }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetParent() types.Entity { return policeExceed.parent }

func (policeExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetParentYangName() string { return "police-exceed" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate
// Child police violate mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetFilter() yfilter.YFilter { return policeViolate.YFilter }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) SetFilter(yf yfilter.YFilter) { policeViolate.YFilter = yf }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetSegmentPath() string {
    return "police-violate"
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeViolate.MarkDetail {
            if policeViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail{}
        policeViolate.MarkDetail = append(policeViolate.MarkDetail, child)
        return &policeViolate.MarkDetail[len(policeViolate.MarkDetail)-1]
    }
    return nil
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeViolate.MarkDetail {
        children[policeViolate.MarkDetail[i].GetSegmentPath()] = &policeViolate.MarkDetail[i]
    }
    return children
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeViolate.ActionType
    return leafs
}

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetYangName() string { return "police-violate" }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) SetParent(parent types.Entity) { policeViolate.parent = parent }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetParent() types.Entity { return policeViolate.parent }

func (policeViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetParentYangName() string { return "police-violate" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark
// Parent mark only
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetFilter() yfilter.YFilter { return parentMark.YFilter }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) SetFilter(yf yfilter.YFilter) { parentMark.YFilter = yf }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetSegmentPath() string {
    return "parent-mark"
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentMark.MarkDetail {
            if parentMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail{}
        parentMark.MarkDetail = append(parentMark.MarkDetail, child)
        return &parentMark.MarkDetail[len(parentMark.MarkDetail)-1]
    }
    return nil
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentMark.MarkDetail {
        children[parentMark.MarkDetail[i].GetSegmentPath()] = &parentMark.MarkDetail[i]
    }
    return children
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentMark.ActionType
    return leafs
}

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetBundleName() string { return "cisco_ios_xr" }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetYangName() string { return "parent-mark" }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) SetParent(parent types.Entity) { parentMark.parent = parent }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetParent() types.Entity { return parentMark.parent }

func (parentMark *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetParentYangName() string { return "parent-mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform
// Parent police conform mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetFilter() yfilter.YFilter { return parentPoliceConform.YFilter }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) SetFilter(yf yfilter.YFilter) { parentPoliceConform.YFilter = yf }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetSegmentPath() string {
    return "parent-police-conform"
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceConform.MarkDetail {
            if parentPoliceConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail{}
        parentPoliceConform.MarkDetail = append(parentPoliceConform.MarkDetail, child)
        return &parentPoliceConform.MarkDetail[len(parentPoliceConform.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceConform.MarkDetail {
        children[parentPoliceConform.MarkDetail[i].GetSegmentPath()] = &parentPoliceConform.MarkDetail[i]
    }
    return children
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceConform.ActionType
    return leafs
}

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetYangName() string { return "parent-police-conform" }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) SetParent(parent types.Entity) { parentPoliceConform.parent = parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetParent() types.Entity { return parentPoliceConform.parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetParentYangName() string { return "parent-police-conform" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed
// Parent police exceed mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetFilter() yfilter.YFilter { return parentPoliceExceed.YFilter }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) SetFilter(yf yfilter.YFilter) { parentPoliceExceed.YFilter = yf }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetSegmentPath() string {
    return "parent-police-exceed"
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceExceed.MarkDetail {
            if parentPoliceExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail{}
        parentPoliceExceed.MarkDetail = append(parentPoliceExceed.MarkDetail, child)
        return &parentPoliceExceed.MarkDetail[len(parentPoliceExceed.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceExceed.MarkDetail {
        children[parentPoliceExceed.MarkDetail[i].GetSegmentPath()] = &parentPoliceExceed.MarkDetail[i]
    }
    return children
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceExceed.ActionType
    return leafs
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetYangName() string { return "parent-police-exceed" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) SetParent(parent types.Entity) { parentPoliceExceed.parent = parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetParent() types.Entity { return parentPoliceExceed.parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetParentYangName() string { return "parent-police-exceed" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate
// Parent police violate mark
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetFilter() yfilter.YFilter { return parentPoliceViolate.YFilter }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) SetFilter(yf yfilter.YFilter) { parentPoliceViolate.YFilter = yf }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetSegmentPath() string {
    return "parent-police-violate"
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceViolate.MarkDetail {
            if parentPoliceViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail{}
        parentPoliceViolate.MarkDetail = append(parentPoliceViolate.MarkDetail, child)
        return &parentPoliceViolate.MarkDetail[len(parentPoliceViolate.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceViolate.MarkDetail {
        children[parentPoliceViolate.MarkDetail[i].GetSegmentPath()] = &parentPoliceViolate.MarkDetail[i]
    }
    return children
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceViolate.ActionType
    return leafs
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetYangName() string { return "parent-police-violate" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) SetParent(parent types.Entity) { parentPoliceViolate.parent = parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetParent() types.Entity { return parentPoliceViolate.parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_Interfaces_Interface_Output_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetParentYangName() string { return "parent-police-violate" }

// PlatformQos_Nodes_Node_BundleInterfaces
// QoS list of bundle interfaces
type PlatformQos_Nodes_Node_BundleInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS interface name. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface.
    BundleInterface []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface
}

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetFilter() yfilter.YFilter { return bundleInterfaces.YFilter }

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) SetFilter(yf yfilter.YFilter) { bundleInterfaces.YFilter = yf }

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    return ""
}

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetSegmentPath() string {
    return "bundle-interfaces"
}

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-interface" {
        for _, c := range bundleInterfaces.BundleInterface {
            if bundleInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface{}
        bundleInterfaces.BundleInterface = append(bundleInterfaces.BundleInterface, child)
        return &bundleInterfaces.BundleInterface[len(bundleInterfaces.BundleInterface)-1]
    }
    return nil
}

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleInterfaces.BundleInterface {
        children[bundleInterfaces.BundleInterface[i].GetSegmentPath()] = &bundleInterfaces.BundleInterface[i]
    }
    return children
}

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetYangName() string { return "bundle-interfaces" }

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) SetParent(parent types.Entity) { bundleInterfaces.parent = parent }

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetParent() types.Entity { return bundleInterfaces.parent }

func (bundleInterfaces *PlatformQos_Nodes_Node_BundleInterfaces) GetParentYangName() string { return "node" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface
// QoS interface name
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface name. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // QoS policy direction output.
    BundleOutput PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput

    // QoS policy direction output.
    BundleInput PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput
}

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetFilter() yfilter.YFilter { return bundleInterface.YFilter }

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) SetFilter(yf yfilter.YFilter) { bundleInterface.YFilter = yf }

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "bundle-output" { return "BundleOutput" }
    if yname == "bundle-input" { return "BundleInput" }
    return ""
}

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetSegmentPath() string {
    return "bundle-interface" + "[interface-name='" + fmt.Sprintf("%v", bundleInterface.InterfaceName) + "']"
}

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-output" {
        return &bundleInterface.BundleOutput
    }
    if childYangName == "bundle-input" {
        return &bundleInterface.BundleInput
    }
    return nil
}

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-output"] = &bundleInterface.BundleOutput
    children["bundle-input"] = &bundleInterface.BundleInput
    return children
}

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = bundleInterface.InterfaceName
    return leafs
}

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetBundleName() string { return "cisco_ios_xr" }

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetYangName() string { return "bundle-interface" }

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) SetParent(parent types.Entity) { bundleInterface.parent = parent }

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetParent() types.Entity { return bundleInterface.parent }

func (bundleInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface) GetParentYangName() string { return "bundle-interfaces" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput
// QoS policy direction output
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS list of member interfaces.
    MemberInterfaces PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces
}

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetFilter() yfilter.YFilter { return bundleOutput.YFilter }

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) SetFilter(yf yfilter.YFilter) { bundleOutput.YFilter = yf }

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetGoName(yname string) string {
    if yname == "member-interfaces" { return "MemberInterfaces" }
    return ""
}

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetSegmentPath() string {
    return "bundle-output"
}

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-interfaces" {
        return &bundleOutput.MemberInterfaces
    }
    return nil
}

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-interfaces"] = &bundleOutput.MemberInterfaces
    return children
}

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetBundleName() string { return "cisco_ios_xr" }

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetYangName() string { return "bundle-output" }

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) SetParent(parent types.Entity) { bundleOutput.parent = parent }

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetParent() types.Entity { return bundleOutput.parent }

func (bundleOutput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput) GetParentYangName() string { return "bundle-interface" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces
// QoS list of member interfaces
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS interface name. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface.
    MemberInterface []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetFilter() yfilter.YFilter { return memberInterfaces.YFilter }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) SetFilter(yf yfilter.YFilter) { memberInterfaces.YFilter = yf }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    return ""
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetSegmentPath() string {
    return "member-interfaces"
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-interface" {
        for _, c := range memberInterfaces.MemberInterface {
            if memberInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface{}
        memberInterfaces.MemberInterface = append(memberInterfaces.MemberInterface, child)
        return &memberInterfaces.MemberInterface[len(memberInterfaces.MemberInterface)-1]
    }
    return nil
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range memberInterfaces.MemberInterface {
        children[memberInterfaces.MemberInterface[i].GetSegmentPath()] = &memberInterfaces.MemberInterface[i]
    }
    return children
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetYangName() string { return "member-interfaces" }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) SetParent(parent types.Entity) { memberInterfaces.parent = parent }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetParent() types.Entity { return memberInterfaces.parent }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces) GetParentYangName() string { return "bundle-output" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface
// QoS interface name
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Memeber interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // QoS policy direction egress.
    Details PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetFilter() yfilter.YFilter { return memberInterface.YFilter }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) SetFilter(yf yfilter.YFilter) { memberInterface.YFilter = yf }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "details" { return "Details" }
    return ""
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetSegmentPath() string {
    return "member-interface" + "[interface-name='" + fmt.Sprintf("%v", memberInterface.InterfaceName) + "']"
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "details" {
        return &memberInterface.Details
    }
    return nil
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["details"] = &memberInterface.Details
    return children
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = memberInterface.InterfaceName
    return leafs
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetBundleName() string { return "cisco_ios_xr" }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetYangName() string { return "member-interface" }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) SetParent(parent types.Entity) { memberInterface.parent = parent }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetParent() types.Entity { return memberInterface.parent }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface) GetParentYangName() string { return "member-interfaces" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details
// QoS policy direction egress
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS policy header.
    Header PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header

    // Trident QoS policy details.
    Policy PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy

    // Typhoon QoS policy details.
    PolicyTyphoon PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetFilter() yfilter.YFilter { return details.YFilter }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) SetFilter(yf yfilter.YFilter) { details.YFilter = yf }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetGoName(yname string) string {
    if yname == "header" { return "Header" }
    if yname == "policy" { return "Policy" }
    if yname == "policy-typhoon" { return "PolicyTyphoon" }
    return ""
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetSegmentPath() string {
    return "details"
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "header" {
        return &details.Header
    }
    if childYangName == "policy" {
        return &details.Policy
    }
    if childYangName == "policy-typhoon" {
        return &details.PolicyTyphoon
    }
    return nil
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["header"] = &details.Header
    children["policy"] = &details.Policy
    children["policy-typhoon"] = &details.PolicyTyphoon
    return children
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetBundleName() string { return "cisco_ios_xr" }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetYangName() string { return "details" }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) SetParent(parent types.Entity) { details.parent = parent }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetParent() types.Entity { return details.parent }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details) GetParentYangName() string { return "member-interface" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header
// QoS policy header
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of classes. The type is interface{} with range: 0..65535.
    Classes interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Interface config and programmed parameters.
    InterfaceParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters

    // Bandwidth that was programmed.
    ProgrammedBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetGoName(yname string) string {
    if yname == "classes" { return "Classes" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "interface-parameters" { return "InterfaceParameters" }
    if yname == "programmed-bandwidth" { return "ProgrammedBandwidth" }
    return ""
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetSegmentPath() string {
    return "header"
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-parameters" {
        return &header.InterfaceParameters
    }
    if childYangName == "programmed-bandwidth" {
        return &header.ProgrammedBandwidth
    }
    return nil
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-parameters"] = &header.InterfaceParameters
    children["programmed-bandwidth"] = &header.ProgrammedBandwidth
    return children
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["classes"] = header.Classes
    leafs["policy-name"] = header.PolicyName
    return leafs
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetYangName() string { return "header" }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetParent() types.Entity { return header.parent }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters
// Interface config and programmed parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth due to port speed change.
    PortConfigBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth

    // Bandwidth obtain from IM.
    AncpConfigBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth

    // ANCP bandwidth that was programmed.
    AncpProgrammedBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth

    // Bandwidth that was programmed.
    PortShaperRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetFilter() yfilter.YFilter { return interfaceParameters.YFilter }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) SetFilter(yf yfilter.YFilter) { interfaceParameters.YFilter = yf }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetGoName(yname string) string {
    if yname == "port-config-bandwidth" { return "PortConfigBandwidth" }
    if yname == "ancp-config-bandwidth" { return "AncpConfigBandwidth" }
    if yname == "ancp-programmed-bandwidth" { return "AncpProgrammedBandwidth" }
    if yname == "port-shaper-rate" { return "PortShaperRate" }
    return ""
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetSegmentPath() string {
    return "interface-parameters"
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-config-bandwidth" {
        return &interfaceParameters.PortConfigBandwidth
    }
    if childYangName == "ancp-config-bandwidth" {
        return &interfaceParameters.AncpConfigBandwidth
    }
    if childYangName == "ancp-programmed-bandwidth" {
        return &interfaceParameters.AncpProgrammedBandwidth
    }
    if childYangName == "port-shaper-rate" {
        return &interfaceParameters.PortShaperRate
    }
    return nil
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-config-bandwidth"] = &interfaceParameters.PortConfigBandwidth
    children["ancp-config-bandwidth"] = &interfaceParameters.AncpConfigBandwidth
    children["ancp-programmed-bandwidth"] = &interfaceParameters.AncpProgrammedBandwidth
    children["port-shaper-rate"] = &interfaceParameters.PortShaperRate
    return children
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetYangName() string { return "interface-parameters" }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) SetParent(parent types.Entity) { interfaceParameters.parent = parent }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetParent() types.Entity { return interfaceParameters.parent }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetParentYangName() string { return "header" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth
// Bandwidth due to port speed change
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetFilter() yfilter.YFilter { return portConfigBandwidth.YFilter }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) SetFilter(yf yfilter.YFilter) { portConfigBandwidth.YFilter = yf }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetSegmentPath() string {
    return "port-config-bandwidth"
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = portConfigBandwidth.Value
    leafs["unit"] = portConfigBandwidth.Unit
    return leafs
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetYangName() string { return "port-config-bandwidth" }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) SetParent(parent types.Entity) { portConfigBandwidth.parent = parent }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetParent() types.Entity { return portConfigBandwidth.parent }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth
// Bandwidth obtain from IM
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetFilter() yfilter.YFilter { return ancpConfigBandwidth.YFilter }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) SetFilter(yf yfilter.YFilter) { ancpConfigBandwidth.YFilter = yf }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetSegmentPath() string {
    return "ancp-config-bandwidth"
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = ancpConfigBandwidth.Value
    leafs["unit"] = ancpConfigBandwidth.Unit
    return leafs
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetYangName() string { return "ancp-config-bandwidth" }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) SetParent(parent types.Entity) { ancpConfigBandwidth.parent = parent }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetParent() types.Entity { return ancpConfigBandwidth.parent }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth
// ANCP bandwidth that was programmed
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetFilter() yfilter.YFilter { return ancpProgrammedBandwidth.YFilter }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) SetFilter(yf yfilter.YFilter) { ancpProgrammedBandwidth.YFilter = yf }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetSegmentPath() string {
    return "ancp-programmed-bandwidth"
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = ancpProgrammedBandwidth.Value
    leafs["unit"] = ancpProgrammedBandwidth.Unit
    return leafs
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetYangName() string { return "ancp-programmed-bandwidth" }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) SetParent(parent types.Entity) { ancpProgrammedBandwidth.parent = parent }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetParent() types.Entity { return ancpProgrammedBandwidth.parent }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate
// Bandwidth that was programmed
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetFilter() yfilter.YFilter { return portShaperRate.YFilter }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) SetFilter(yf yfilter.YFilter) { portShaperRate.YFilter = yf }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetSegmentPath() string {
    return "port-shaper-rate"
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = portShaperRate.Value
    leafs["unit"] = portShaperRate.Unit
    return leafs
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetBundleName() string { return "cisco_ios_xr" }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetYangName() string { return "port-shaper-rate" }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) SetParent(parent types.Entity) { portShaperRate.parent = parent }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetParent() types.Entity { return portShaperRate.parent }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth
// Bandwidth that was programmed
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetFilter() yfilter.YFilter { return programmedBandwidth.YFilter }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) SetFilter(yf yfilter.YFilter) { programmedBandwidth.YFilter = yf }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetSegmentPath() string {
    return "programmed-bandwidth"
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = programmedBandwidth.Value
    leafs["unit"] = programmedBandwidth.Unit
    return leafs
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetYangName() string { return "programmed-bandwidth" }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) SetParent(parent types.Entity) { programmedBandwidth.parent = parent }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetParent() types.Entity { return programmedBandwidth.parent }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetParentYangName() string { return "header" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy
// Trident QoS policy details
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // qos show ea st v1. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1.
    QosShowEaStV1 []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetFilter() yfilter.YFilter { return policy.YFilter }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) SetFilter(yf yfilter.YFilter) { policy.YFilter = yf }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetGoName(yname string) string {
    if yname == "qos-show-ea-st-v1" { return "QosShowEaStV1" }
    return ""
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetSegmentPath() string {
    return "policy"
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos-show-ea-st-v1" {
        for _, c := range policy.QosShowEaStV1 {
            if policy.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1{}
        policy.QosShowEaStV1 = append(policy.QosShowEaStV1, child)
        return &policy.QosShowEaStV1[len(policy.QosShowEaStV1)-1]
    }
    return nil
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policy.QosShowEaStV1 {
        children[policy.QosShowEaStV1[i].GetSegmentPath()] = &policy.QosShowEaStV1[i]
    }
    return children
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetBundleName() string { return "cisco_ios_xr" }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetYangName() string { return "policy" }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) SetParent(parent types.Entity) { policy.parent = parent }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetParent() types.Entity { return policy.parent }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1
// qos show ea st v1
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class level. The type is interface{} with range: 0..255.
    ClassLevel interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Parent policy name. The type is string with length: 0..65.
    ParentPolicyName interface{}

    // Parent class name. The type is string with length: 0..65.
    ParentClassName interface{}

    // Queue parameters.
    Queue PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue

    // Queue limit parameters.
    QueueLimitParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters

    // Shape parameters.
    Shape PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape

    // Police parameters.
    Police PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police

    // WFQ parameters.
    Wfq PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq

    // WRED parameters.
    Wred PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred

    // Mark parameters.
    Mark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetFilter() yfilter.YFilter { return qosShowEaStV1.YFilter }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) SetFilter(yf yfilter.YFilter) { qosShowEaStV1.YFilter = yf }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetGoName(yname string) string {
    if yname == "class-level" { return "ClassLevel" }
    if yname == "class-name" { return "ClassName" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "parent-policy-name" { return "ParentPolicyName" }
    if yname == "parent-class-name" { return "ParentClassName" }
    if yname == "queue" { return "Queue" }
    if yname == "queue-limit-parameters" { return "QueueLimitParameters" }
    if yname == "shape" { return "Shape" }
    if yname == "police" { return "Police" }
    if yname == "wfq" { return "Wfq" }
    if yname == "wred" { return "Wred" }
    if yname == "mark" { return "Mark" }
    return ""
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetSegmentPath() string {
    return "qos-show-ea-st-v1"
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue" {
        return &qosShowEaStV1.Queue
    }
    if childYangName == "queue-limit-parameters" {
        return &qosShowEaStV1.QueueLimitParameters
    }
    if childYangName == "shape" {
        return &qosShowEaStV1.Shape
    }
    if childYangName == "police" {
        return &qosShowEaStV1.Police
    }
    if childYangName == "wfq" {
        return &qosShowEaStV1.Wfq
    }
    if childYangName == "wred" {
        return &qosShowEaStV1.Wred
    }
    if childYangName == "mark" {
        return &qosShowEaStV1.Mark
    }
    return nil
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue"] = &qosShowEaStV1.Queue
    children["queue-limit-parameters"] = &qosShowEaStV1.QueueLimitParameters
    children["shape"] = &qosShowEaStV1.Shape
    children["police"] = &qosShowEaStV1.Police
    children["wfq"] = &qosShowEaStV1.Wfq
    children["wred"] = &qosShowEaStV1.Wred
    children["mark"] = &qosShowEaStV1.Mark
    return children
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-level"] = qosShowEaStV1.ClassLevel
    leafs["class-name"] = qosShowEaStV1.ClassName
    leafs["policy-name"] = qosShowEaStV1.PolicyName
    leafs["parent-policy-name"] = qosShowEaStV1.ParentPolicyName
    leafs["parent-class-name"] = qosShowEaStV1.ParentClassName
    return leafs
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetBundleName() string { return "cisco_ios_xr" }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetYangName() string { return "qos-show-ea-st-v1" }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) SetParent(parent types.Entity) { qosShowEaStV1.parent = parent }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetParent() types.Entity { return qosShowEaStV1.parent }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetParentYangName() string { return "policy" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue
// Queue parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Queue ID. The type is interface{} with range: 0..4294967295.
    QueueId interface{}

    // Queue type. The type is Queue.
    QueueType interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetGoName(yname string) string {
    if yname == "queue-id" { return "QueueId" }
    if yname == "queue-type" { return "QueueType" }
    if yname == "class-name" { return "ClassName" }
    return ""
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queue-id"] = queue.QueueId
    leafs["queue-type"] = queue.QueueType
    leafs["class-name"] = queue.ClassName
    return leafs
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetYangName() string { return "queue" }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetParent() types.Entity { return queue.parent }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters
// Queue limit parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Scaling profile ID. The type is interface{} with range: 0..4294967295.
    ScalingProfileId interface{}

    // Queue limit in kbytes.
    QueueLimit PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit

    // Config queue limit.
    ConfigQueueLimit PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetFilter() yfilter.YFilter { return queueLimitParameters.YFilter }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) SetFilter(yf yfilter.YFilter) { queueLimitParameters.YFilter = yf }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scaling-profile-id" { return "ScalingProfileId" }
    if yname == "queue-limit" { return "QueueLimit" }
    if yname == "config-queue-limit" { return "ConfigQueueLimit" }
    return ""
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetSegmentPath() string {
    return "queue-limit-parameters"
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue-limit" {
        return &queueLimitParameters.QueueLimit
    }
    if childYangName == "config-queue-limit" {
        return &queueLimitParameters.ConfigQueueLimit
    }
    return nil
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue-limit"] = &queueLimitParameters.QueueLimit
    children["config-queue-limit"] = &queueLimitParameters.ConfigQueueLimit
    return children
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = queueLimitParameters.ProfileId
    leafs["scaling-profile-id"] = queueLimitParameters.ScalingProfileId
    return leafs
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetYangName() string { return "queue-limit-parameters" }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) SetParent(parent types.Entity) { queueLimitParameters.parent = parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetParent() types.Entity { return queueLimitParameters.parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit
// Queue limit in kbytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetFilter() yfilter.YFilter { return queueLimit.YFilter }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) SetFilter(yf yfilter.YFilter) { queueLimit.YFilter = yf }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetSegmentPath() string {
    return "queue-limit"
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = queueLimit.Value
    leafs["unit"] = queueLimit.Unit
    return leafs
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetYangName() string { return "queue-limit" }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) SetParent(parent types.Entity) { queueLimit.parent = parent }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetParent() types.Entity { return queueLimit.parent }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit
// Config queue limit
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetFilter() yfilter.YFilter { return configQueueLimit.YFilter }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) SetFilter(yf yfilter.YFilter) { configQueueLimit.YFilter = yf }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetSegmentPath() string {
    return "config-queue-limit"
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = configQueueLimit.Value
    leafs["unit"] = configQueueLimit.Unit
    return leafs
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetYangName() string { return "config-queue-limit" }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) SetParent(parent types.Entity) { configQueueLimit.parent = parent }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetParent() types.Entity { return configQueueLimit.parent }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape
// Shape parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // CIR in kbps.
    Cir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir

    // Config bandwidth.
    ConfigBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth

    // CBS in bytes.
    Cbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs

    // PIR in kbps.
    Pir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir

    // PBS in bytes.
    Pbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "config-bandwidth" { return "ConfigBandwidth" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    return ""
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &shape.Cir
    }
    if childYangName == "config-bandwidth" {
        return &shape.ConfigBandwidth
    }
    if childYangName == "cbs" {
        return &shape.Cbs
    }
    if childYangName == "pir" {
        return &shape.Pir
    }
    if childYangName == "pbs" {
        return &shape.Pbs
    }
    return nil
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &shape.Cir
    children["config-bandwidth"] = &shape.ConfigBandwidth
    children["cbs"] = &shape.Cbs
    children["pir"] = &shape.Pir
    children["pbs"] = &shape.Pbs
    return children
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = shape.ProfileId
    return leafs
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetYangName() string { return "shape" }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetParent() types.Entity { return shape.parent }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir
// CIR in kbps
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth
// Config bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum bandwidth rate.
    MinimumRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetFilter() yfilter.YFilter { return configBandwidth.YFilter }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) SetFilter(yf yfilter.YFilter) { configBandwidth.YFilter = yf }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetGoName(yname string) string {
    if yname == "minimum-rate" { return "MinimumRate" }
    return ""
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetSegmentPath() string {
    return "config-bandwidth"
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minimum-rate" {
        return &configBandwidth.MinimumRate
    }
    return nil
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minimum-rate"] = &configBandwidth.MinimumRate
    return children
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetYangName() string { return "config-bandwidth" }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) SetParent(parent types.Entity) { configBandwidth.parent = parent }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetParent() types.Entity { return configBandwidth.parent }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate
// Minimum bandwidth rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetFilter() yfilter.YFilter { return minimumRate.YFilter }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) SetFilter(yf yfilter.YFilter) { minimumRate.YFilter = yf }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetSegmentPath() string {
    return "minimum-rate"
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minimumRate.Value
    leafs["unit"] = minimumRate.Unit
    return leafs
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetBundleName() string { return "cisco_ios_xr" }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetYangName() string { return "minimum-rate" }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) SetParent(parent types.Entity) { minimumRate.parent = parent }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetParent() types.Entity { return minimumRate.parent }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetParentYangName() string { return "config-bandwidth" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs
// CBS in bytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir
// PIR in kbps
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs
// PBS in bytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police
// Police parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policer type. The type is TbAlgorithm.
    PolicerType interface{}

    // Police profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // CIR.
    Cir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir

    // CBS.
    Cbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs

    // PIR.
    Pir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir

    // PBS.
    Pbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs

    // Police config parameters.
    PoliceConfigParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetFilter() yfilter.YFilter { return police.YFilter }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) SetFilter(yf yfilter.YFilter) { police.YFilter = yf }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetGoName(yname string) string {
    if yname == "policer-type" { return "PolicerType" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    if yname == "police-config-parameters" { return "PoliceConfigParameters" }
    return ""
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetSegmentPath() string {
    return "police"
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &police.Cir
    }
    if childYangName == "cbs" {
        return &police.Cbs
    }
    if childYangName == "pir" {
        return &police.Pir
    }
    if childYangName == "pbs" {
        return &police.Pbs
    }
    if childYangName == "police-config-parameters" {
        return &police.PoliceConfigParameters
    }
    return nil
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &police.Cir
    children["cbs"] = &police.Cbs
    children["pir"] = &police.Pir
    children["pbs"] = &police.Pbs
    children["police-config-parameters"] = &police.PoliceConfigParameters
    return children
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policer-type"] = police.PolicerType
    leafs["profile-id"] = police.ProfileId
    return leafs
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetBundleName() string { return "cisco_ios_xr" }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetYangName() string { return "police" }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) SetParent(parent types.Entity) { police.parent = parent }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetParent() types.Entity { return police.parent }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir
// CIR
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs
// CBS
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir
// PIR
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs
// PBS
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters
// Police config parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Average rate.
    AverageRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate

    // Peak rate.
    PeakRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate

    // Conform burst.
    ConformBurst PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst

    // Exceed burst.
    ExceedBurst PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetFilter() yfilter.YFilter { return policeConfigParameters.YFilter }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) SetFilter(yf yfilter.YFilter) { policeConfigParameters.YFilter = yf }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetGoName(yname string) string {
    if yname == "average-rate" { return "AverageRate" }
    if yname == "peak-rate" { return "PeakRate" }
    if yname == "conform-burst" { return "ConformBurst" }
    if yname == "exceed-burst" { return "ExceedBurst" }
    return ""
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetSegmentPath() string {
    return "police-config-parameters"
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "average-rate" {
        return &policeConfigParameters.AverageRate
    }
    if childYangName == "peak-rate" {
        return &policeConfigParameters.PeakRate
    }
    if childYangName == "conform-burst" {
        return &policeConfigParameters.ConformBurst
    }
    if childYangName == "exceed-burst" {
        return &policeConfigParameters.ExceedBurst
    }
    return nil
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["average-rate"] = &policeConfigParameters.AverageRate
    children["peak-rate"] = &policeConfigParameters.PeakRate
    children["conform-burst"] = &policeConfigParameters.ConformBurst
    children["exceed-burst"] = &policeConfigParameters.ExceedBurst
    return children
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetBundleName() string { return "cisco_ios_xr" }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetYangName() string { return "police-config-parameters" }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) SetParent(parent types.Entity) { policeConfigParameters.parent = parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetParent() types.Entity { return policeConfigParameters.parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate
// Average rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetFilter() yfilter.YFilter { return averageRate.YFilter }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) SetFilter(yf yfilter.YFilter) { averageRate.YFilter = yf }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetSegmentPath() string {
    return "average-rate"
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = averageRate.Value
    leafs["unit"] = averageRate.Unit
    return leafs
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetBundleName() string { return "cisco_ios_xr" }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetYangName() string { return "average-rate" }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) SetParent(parent types.Entity) { averageRate.parent = parent }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetParent() types.Entity { return averageRate.parent }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate
// Peak rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetFilter() yfilter.YFilter { return peakRate.YFilter }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) SetFilter(yf yfilter.YFilter) { peakRate.YFilter = yf }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetSegmentPath() string {
    return "peak-rate"
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = peakRate.Value
    leafs["unit"] = peakRate.Unit
    return leafs
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetBundleName() string { return "cisco_ios_xr" }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetYangName() string { return "peak-rate" }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) SetParent(parent types.Entity) { peakRate.parent = parent }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetParent() types.Entity { return peakRate.parent }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst
// Conform burst
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetFilter() yfilter.YFilter { return conformBurst.YFilter }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) SetFilter(yf yfilter.YFilter) { conformBurst.YFilter = yf }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetSegmentPath() string {
    return "conform-burst"
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = conformBurst.Value
    leafs["unit"] = conformBurst.Unit
    return leafs
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetBundleName() string { return "cisco_ios_xr" }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetYangName() string { return "conform-burst" }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) SetParent(parent types.Entity) { conformBurst.parent = parent }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetParent() types.Entity { return conformBurst.parent }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst
// Exceed burst
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetFilter() yfilter.YFilter { return exceedBurst.YFilter }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) SetFilter(yf yfilter.YFilter) { exceedBurst.YFilter = yf }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetSegmentPath() string {
    return "exceed-burst"
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = exceedBurst.Value
    leafs["unit"] = exceedBurst.Unit
    return leafs
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetBundleName() string { return "cisco_ios_xr" }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetYangName() string { return "exceed-burst" }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) SetParent(parent types.Entity) { exceedBurst.parent = parent }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetParent() types.Entity { return exceedBurst.parent }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq
// WFQ parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WFQ profile. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Committed weight. The type is interface{} with range: 0..4294967295.
    CommittedWeight interface{}

    // Excess weight. The type is interface{} with range: 0..65535.
    ExcessWeight interface{}

    // Parent Excess ratio. The type is interface{} with range: 0..65535.
    ExcessRatio interface{}

    // Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Level. The type is interface{} with range: 0..255.
    Level interface{}

    // Parent bandwidth.
    ParentBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth

    // CFG Bandwidth.
    Bandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetFilter() yfilter.YFilter { return wfq.YFilter }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) SetFilter(yf yfilter.YFilter) { wfq.YFilter = yf }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "committed-weight" { return "CommittedWeight" }
    if yname == "excess-weight" { return "ExcessWeight" }
    if yname == "excess-ratio" { return "ExcessRatio" }
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "level" { return "Level" }
    if yname == "parent-bandwidth" { return "ParentBandwidth" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetSegmentPath() string {
    return "wfq"
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "parent-bandwidth" {
        return &wfq.ParentBandwidth
    }
    if childYangName == "bandwidth" {
        return &wfq.Bandwidth
    }
    return nil
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["parent-bandwidth"] = &wfq.ParentBandwidth
    children["bandwidth"] = &wfq.Bandwidth
    return children
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = wfq.ProfileId
    leafs["committed-weight"] = wfq.CommittedWeight
    leafs["excess-weight"] = wfq.ExcessWeight
    leafs["excess-ratio"] = wfq.ExcessRatio
    leafs["chunk-id"] = wfq.ChunkId
    leafs["level"] = wfq.Level
    return leafs
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetBundleName() string { return "cisco_ios_xr" }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetYangName() string { return "wfq" }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) SetParent(parent types.Entity) { wfq.parent = parent }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetParent() types.Entity { return wfq.parent }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth
// Parent bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetFilter() yfilter.YFilter { return parentBandwidth.YFilter }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) SetFilter(yf yfilter.YFilter) { parentBandwidth.YFilter = yf }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetSegmentPath() string {
    return "parent-bandwidth"
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = parentBandwidth.Value
    leafs["unit"] = parentBandwidth.Unit
    return leafs
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetYangName() string { return "parent-bandwidth" }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) SetParent(parent types.Entity) { parentBandwidth.parent = parent }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetParent() types.Entity { return parentBandwidth.parent }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth
// CFG Bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = bandwidth.Value
    leafs["unit"] = bandwidth.Unit
    return leafs
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred
// WRED parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED type. The type is Wred.
    Type interface{}

    // Number of curves. The type is interface{} with range: 0..65535.
    CurveXr interface{}

    // Table ID. The type is interface{} with range: 0..255.
    TableId interface{}

    // Profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Scaling profile ID. The type is interface{} with range: 0..4294967295.
    ScalingProfileId interface{}

    // Curve details. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve.
    Curve []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetFilter() yfilter.YFilter { return wred.YFilter }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) SetFilter(yf yfilter.YFilter) { wred.YFilter = yf }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "curve-xr" { return "CurveXr" }
    if yname == "table-id" { return "TableId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scaling-profile-id" { return "ScalingProfileId" }
    if yname == "curve" { return "Curve" }
    return ""
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetSegmentPath() string {
    return "wred"
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "curve" {
        for _, c := range wred.Curve {
            if wred.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve{}
        wred.Curve = append(wred.Curve, child)
        return &wred.Curve[len(wred.Curve)-1]
    }
    return nil
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range wred.Curve {
        children[wred.Curve[i].GetSegmentPath()] = &wred.Curve[i]
    }
    return children
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = wred.Type
    leafs["curve-xr"] = wred.CurveXr
    leafs["table-id"] = wred.TableId
    leafs["profile-id"] = wred.ProfileId
    leafs["scaling-profile-id"] = wred.ScalingProfileId
    return leafs
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetBundleName() string { return "cisco_ios_xr" }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetYangName() string { return "wred" }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) SetParent(parent types.Entity) { wred.parent = parent }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetParent() types.Entity { return wred.parent }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve
// Curve details
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED precedence match if precedence start value equals to end value Format:
    // <start-value> , else range Format: <start-value> <end-value>. The type is
    // string.
    Match interface{}

    // Minimum threshold.
    MinThreshold PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold

    // Minimum threshold WRED context.
    MinThresholdUserConfig PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig

    // Maximum threshold.
    MaxThreshold PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold

    // Maximum threshold WRED context.
    MaxThresholdUserConfig PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetFilter() yfilter.YFilter { return curve.YFilter }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) SetFilter(yf yfilter.YFilter) { curve.YFilter = yf }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetGoName(yname string) string {
    if yname == "match" { return "Match" }
    if yname == "min-threshold" { return "MinThreshold" }
    if yname == "min-threshold-user-config" { return "MinThresholdUserConfig" }
    if yname == "max-threshold" { return "MaxThreshold" }
    if yname == "max-threshold-user-config" { return "MaxThresholdUserConfig" }
    return ""
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetSegmentPath() string {
    return "curve"
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-threshold" {
        return &curve.MinThreshold
    }
    if childYangName == "min-threshold-user-config" {
        return &curve.MinThresholdUserConfig
    }
    if childYangName == "max-threshold" {
        return &curve.MaxThreshold
    }
    if childYangName == "max-threshold-user-config" {
        return &curve.MaxThresholdUserConfig
    }
    return nil
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-threshold"] = &curve.MinThreshold
    children["min-threshold-user-config"] = &curve.MinThresholdUserConfig
    children["max-threshold"] = &curve.MaxThreshold
    children["max-threshold-user-config"] = &curve.MaxThresholdUserConfig
    return children
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["match"] = curve.Match
    return leafs
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetBundleName() string { return "cisco_ios_xr" }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetYangName() string { return "curve" }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) SetParent(parent types.Entity) { curve.parent = parent }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetParent() types.Entity { return curve.parent }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetParentYangName() string { return "wred" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold
// Minimum threshold
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetFilter() yfilter.YFilter { return minThreshold.YFilter }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) SetFilter(yf yfilter.YFilter) { minThreshold.YFilter = yf }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetSegmentPath() string {
    return "min-threshold"
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThreshold.Value
    leafs["unit"] = minThreshold.Unit
    return leafs
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetYangName() string { return "min-threshold" }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) SetParent(parent types.Entity) { minThreshold.parent = parent }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetParent() types.Entity { return minThreshold.parent }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig
// Minimum threshold WRED context
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetFilter() yfilter.YFilter { return minThresholdUserConfig.YFilter }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) SetFilter(yf yfilter.YFilter) { minThresholdUserConfig.YFilter = yf }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetSegmentPath() string {
    return "min-threshold-user-config"
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThresholdUserConfig.Value
    leafs["unit"] = minThresholdUserConfig.Unit
    return leafs
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetYangName() string { return "min-threshold-user-config" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) SetParent(parent types.Entity) { minThresholdUserConfig.parent = parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetParent() types.Entity { return minThresholdUserConfig.parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold
// Maximum threshold
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetFilter() yfilter.YFilter { return maxThreshold.YFilter }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) SetFilter(yf yfilter.YFilter) { maxThreshold.YFilter = yf }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetSegmentPath() string {
    return "max-threshold"
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThreshold.Value
    leafs["unit"] = maxThreshold.Unit
    return leafs
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetYangName() string { return "max-threshold" }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) SetParent(parent types.Entity) { maxThreshold.parent = parent }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetParent() types.Entity { return maxThreshold.parent }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig
// Maximum threshold WRED context
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetFilter() yfilter.YFilter { return maxThresholdUserConfig.YFilter }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) SetFilter(yf yfilter.YFilter) { maxThresholdUserConfig.YFilter = yf }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetSegmentPath() string {
    return "max-threshold-user-config"
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThresholdUserConfig.Value
    leafs["unit"] = maxThresholdUserConfig.Unit
    return leafs
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetYangName() string { return "max-threshold-user-config" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) SetParent(parent types.Entity) { maxThresholdUserConfig.parent = parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetParent() types.Entity { return maxThresholdUserConfig.parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark
// Mark parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Child mark only.
    ChildMark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark

    // Child police conform mark.
    PoliceConform PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform

    // Child police exceed mark.
    PoliceExceed PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed

    // Child police violate mark.
    PoliceViolate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate

    // Parent mark only.
    ParentMark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark

    // Parent police conform mark.
    ParentPoliceConform PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform

    // Parent police exceed mark.
    ParentPoliceExceed PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed

    // Parent police violate mark.
    ParentPoliceViolate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetFilter() yfilter.YFilter { return mark.YFilter }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) SetFilter(yf yfilter.YFilter) { mark.YFilter = yf }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetGoName(yname string) string {
    if yname == "child-mark" { return "ChildMark" }
    if yname == "police-conform" { return "PoliceConform" }
    if yname == "police-exceed" { return "PoliceExceed" }
    if yname == "police-violate" { return "PoliceViolate" }
    if yname == "parent-mark" { return "ParentMark" }
    if yname == "parent-police-conform" { return "ParentPoliceConform" }
    if yname == "parent-police-exceed" { return "ParentPoliceExceed" }
    if yname == "parent-police-violate" { return "ParentPoliceViolate" }
    return ""
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetSegmentPath() string {
    return "mark"
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "child-mark" {
        return &mark.ChildMark
    }
    if childYangName == "police-conform" {
        return &mark.PoliceConform
    }
    if childYangName == "police-exceed" {
        return &mark.PoliceExceed
    }
    if childYangName == "police-violate" {
        return &mark.PoliceViolate
    }
    if childYangName == "parent-mark" {
        return &mark.ParentMark
    }
    if childYangName == "parent-police-conform" {
        return &mark.ParentPoliceConform
    }
    if childYangName == "parent-police-exceed" {
        return &mark.ParentPoliceExceed
    }
    if childYangName == "parent-police-violate" {
        return &mark.ParentPoliceViolate
    }
    return nil
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["child-mark"] = &mark.ChildMark
    children["police-conform"] = &mark.PoliceConform
    children["police-exceed"] = &mark.PoliceExceed
    children["police-violate"] = &mark.PoliceViolate
    children["parent-mark"] = &mark.ParentMark
    children["parent-police-conform"] = &mark.ParentPoliceConform
    children["parent-police-exceed"] = &mark.ParentPoliceExceed
    children["parent-police-violate"] = &mark.ParentPoliceViolate
    return children
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetBundleName() string { return "cisco_ios_xr" }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetYangName() string { return "mark" }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) SetParent(parent types.Entity) { mark.parent = parent }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetParent() types.Entity { return mark.parent }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark
// Child mark only
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetFilter() yfilter.YFilter { return childMark.YFilter }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) SetFilter(yf yfilter.YFilter) { childMark.YFilter = yf }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetSegmentPath() string {
    return "child-mark"
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range childMark.MarkDetail {
            if childMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail{}
        childMark.MarkDetail = append(childMark.MarkDetail, child)
        return &childMark.MarkDetail[len(childMark.MarkDetail)-1]
    }
    return nil
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range childMark.MarkDetail {
        children[childMark.MarkDetail[i].GetSegmentPath()] = &childMark.MarkDetail[i]
    }
    return children
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = childMark.ActionType
    return leafs
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetBundleName() string { return "cisco_ios_xr" }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetYangName() string { return "child-mark" }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) SetParent(parent types.Entity) { childMark.parent = parent }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetParent() types.Entity { return childMark.parent }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetParentYangName() string { return "child-mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform
// Child police conform mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetFilter() yfilter.YFilter { return policeConform.YFilter }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) SetFilter(yf yfilter.YFilter) { policeConform.YFilter = yf }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetSegmentPath() string {
    return "police-conform"
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeConform.MarkDetail {
            if policeConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail{}
        policeConform.MarkDetail = append(policeConform.MarkDetail, child)
        return &policeConform.MarkDetail[len(policeConform.MarkDetail)-1]
    }
    return nil
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeConform.MarkDetail {
        children[policeConform.MarkDetail[i].GetSegmentPath()] = &policeConform.MarkDetail[i]
    }
    return children
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeConform.ActionType
    return leafs
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetYangName() string { return "police-conform" }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) SetParent(parent types.Entity) { policeConform.parent = parent }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetParent() types.Entity { return policeConform.parent }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetParentYangName() string { return "police-conform" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed
// Child police exceed mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetFilter() yfilter.YFilter { return policeExceed.YFilter }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) SetFilter(yf yfilter.YFilter) { policeExceed.YFilter = yf }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetSegmentPath() string {
    return "police-exceed"
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeExceed.MarkDetail {
            if policeExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail{}
        policeExceed.MarkDetail = append(policeExceed.MarkDetail, child)
        return &policeExceed.MarkDetail[len(policeExceed.MarkDetail)-1]
    }
    return nil
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeExceed.MarkDetail {
        children[policeExceed.MarkDetail[i].GetSegmentPath()] = &policeExceed.MarkDetail[i]
    }
    return children
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeExceed.ActionType
    return leafs
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetYangName() string { return "police-exceed" }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) SetParent(parent types.Entity) { policeExceed.parent = parent }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetParent() types.Entity { return policeExceed.parent }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetParentYangName() string { return "police-exceed" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate
// Child police violate mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetFilter() yfilter.YFilter { return policeViolate.YFilter }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) SetFilter(yf yfilter.YFilter) { policeViolate.YFilter = yf }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetSegmentPath() string {
    return "police-violate"
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeViolate.MarkDetail {
            if policeViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail{}
        policeViolate.MarkDetail = append(policeViolate.MarkDetail, child)
        return &policeViolate.MarkDetail[len(policeViolate.MarkDetail)-1]
    }
    return nil
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeViolate.MarkDetail {
        children[policeViolate.MarkDetail[i].GetSegmentPath()] = &policeViolate.MarkDetail[i]
    }
    return children
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeViolate.ActionType
    return leafs
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetYangName() string { return "police-violate" }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) SetParent(parent types.Entity) { policeViolate.parent = parent }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetParent() types.Entity { return policeViolate.parent }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetParentYangName() string { return "police-violate" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark
// Parent mark only
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetFilter() yfilter.YFilter { return parentMark.YFilter }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) SetFilter(yf yfilter.YFilter) { parentMark.YFilter = yf }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetSegmentPath() string {
    return "parent-mark"
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentMark.MarkDetail {
            if parentMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail{}
        parentMark.MarkDetail = append(parentMark.MarkDetail, child)
        return &parentMark.MarkDetail[len(parentMark.MarkDetail)-1]
    }
    return nil
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentMark.MarkDetail {
        children[parentMark.MarkDetail[i].GetSegmentPath()] = &parentMark.MarkDetail[i]
    }
    return children
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentMark.ActionType
    return leafs
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetBundleName() string { return "cisco_ios_xr" }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetYangName() string { return "parent-mark" }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) SetParent(parent types.Entity) { parentMark.parent = parent }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetParent() types.Entity { return parentMark.parent }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetParentYangName() string { return "parent-mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform
// Parent police conform mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetFilter() yfilter.YFilter { return parentPoliceConform.YFilter }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) SetFilter(yf yfilter.YFilter) { parentPoliceConform.YFilter = yf }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetSegmentPath() string {
    return "parent-police-conform"
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceConform.MarkDetail {
            if parentPoliceConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail{}
        parentPoliceConform.MarkDetail = append(parentPoliceConform.MarkDetail, child)
        return &parentPoliceConform.MarkDetail[len(parentPoliceConform.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceConform.MarkDetail {
        children[parentPoliceConform.MarkDetail[i].GetSegmentPath()] = &parentPoliceConform.MarkDetail[i]
    }
    return children
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceConform.ActionType
    return leafs
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetYangName() string { return "parent-police-conform" }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) SetParent(parent types.Entity) { parentPoliceConform.parent = parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetParent() types.Entity { return parentPoliceConform.parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetParentYangName() string { return "parent-police-conform" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed
// Parent police exceed mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetFilter() yfilter.YFilter { return parentPoliceExceed.YFilter }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) SetFilter(yf yfilter.YFilter) { parentPoliceExceed.YFilter = yf }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetSegmentPath() string {
    return "parent-police-exceed"
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceExceed.MarkDetail {
            if parentPoliceExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail{}
        parentPoliceExceed.MarkDetail = append(parentPoliceExceed.MarkDetail, child)
        return &parentPoliceExceed.MarkDetail[len(parentPoliceExceed.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceExceed.MarkDetail {
        children[parentPoliceExceed.MarkDetail[i].GetSegmentPath()] = &parentPoliceExceed.MarkDetail[i]
    }
    return children
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceExceed.ActionType
    return leafs
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetYangName() string { return "parent-police-exceed" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) SetParent(parent types.Entity) { parentPoliceExceed.parent = parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetParent() types.Entity { return parentPoliceExceed.parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetParentYangName() string { return "parent-police-exceed" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate
// Parent police violate mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetFilter() yfilter.YFilter { return parentPoliceViolate.YFilter }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) SetFilter(yf yfilter.YFilter) { parentPoliceViolate.YFilter = yf }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetSegmentPath() string {
    return "parent-police-violate"
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceViolate.MarkDetail {
            if parentPoliceViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail{}
        parentPoliceViolate.MarkDetail = append(parentPoliceViolate.MarkDetail, child)
        return &parentPoliceViolate.MarkDetail[len(parentPoliceViolate.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceViolate.MarkDetail {
        children[parentPoliceViolate.MarkDetail[i].GetSegmentPath()] = &parentPoliceViolate.MarkDetail[i]
    }
    return children
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceViolate.ActionType
    return leafs
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetYangName() string { return "parent-police-violate" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) SetParent(parent types.Entity) { parentPoliceViolate.parent = parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetParent() types.Entity { return parentPoliceViolate.parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetParentYangName() string { return "parent-police-violate" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon
// Typhoon QoS policy details
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // qos show ea st v2. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2.
    QosShowEaStV2 []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetFilter() yfilter.YFilter { return policyTyphoon.YFilter }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) SetFilter(yf yfilter.YFilter) { policyTyphoon.YFilter = yf }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetGoName(yname string) string {
    if yname == "qos-show-ea-st-v2" { return "QosShowEaStV2" }
    return ""
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetSegmentPath() string {
    return "policy-typhoon"
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos-show-ea-st-v2" {
        for _, c := range policyTyphoon.QosShowEaStV2 {
            if policyTyphoon.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2{}
        policyTyphoon.QosShowEaStV2 = append(policyTyphoon.QosShowEaStV2, child)
        return &policyTyphoon.QosShowEaStV2[len(policyTyphoon.QosShowEaStV2)-1]
    }
    return nil
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policyTyphoon.QosShowEaStV2 {
        children[policyTyphoon.QosShowEaStV2[i].GetSegmentPath()] = &policyTyphoon.QosShowEaStV2[i]
    }
    return children
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetBundleName() string { return "cisco_ios_xr" }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetYangName() string { return "policy-typhoon" }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) SetParent(parent types.Entity) { policyTyphoon.parent = parent }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetParent() types.Entity { return policyTyphoon.parent }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2
// qos show ea st v2
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class level. The type is interface{} with range: 0..255.
    ClassLevel interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Parent policy name. The type is string with length: 0..65.
    ParentPolicyName interface{}

    // Parent class name. The type is string with length: 0..65.
    ParentClassName interface{}

    // Queue parameters.
    Queue PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue

    // Queue limit parameters.
    QueueLimitParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters

    // Shape parameters.
    Shape PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape

    // Police parameters.
    Police PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police

    // WFQ parameters.
    Wfq PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq

    // WRED parameters.
    Wred PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred

    // Mark parameters.
    Mark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetFilter() yfilter.YFilter { return qosShowEaStV2.YFilter }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) SetFilter(yf yfilter.YFilter) { qosShowEaStV2.YFilter = yf }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetGoName(yname string) string {
    if yname == "class-level" { return "ClassLevel" }
    if yname == "class-name" { return "ClassName" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "parent-policy-name" { return "ParentPolicyName" }
    if yname == "parent-class-name" { return "ParentClassName" }
    if yname == "queue" { return "Queue" }
    if yname == "queue-limit-parameters" { return "QueueLimitParameters" }
    if yname == "shape" { return "Shape" }
    if yname == "police" { return "Police" }
    if yname == "wfq" { return "Wfq" }
    if yname == "wred" { return "Wred" }
    if yname == "mark" { return "Mark" }
    return ""
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetSegmentPath() string {
    return "qos-show-ea-st-v2"
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue" {
        return &qosShowEaStV2.Queue
    }
    if childYangName == "queue-limit-parameters" {
        return &qosShowEaStV2.QueueLimitParameters
    }
    if childYangName == "shape" {
        return &qosShowEaStV2.Shape
    }
    if childYangName == "police" {
        return &qosShowEaStV2.Police
    }
    if childYangName == "wfq" {
        return &qosShowEaStV2.Wfq
    }
    if childYangName == "wred" {
        return &qosShowEaStV2.Wred
    }
    if childYangName == "mark" {
        return &qosShowEaStV2.Mark
    }
    return nil
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue"] = &qosShowEaStV2.Queue
    children["queue-limit-parameters"] = &qosShowEaStV2.QueueLimitParameters
    children["shape"] = &qosShowEaStV2.Shape
    children["police"] = &qosShowEaStV2.Police
    children["wfq"] = &qosShowEaStV2.Wfq
    children["wred"] = &qosShowEaStV2.Wred
    children["mark"] = &qosShowEaStV2.Mark
    return children
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-level"] = qosShowEaStV2.ClassLevel
    leafs["class-name"] = qosShowEaStV2.ClassName
    leafs["policy-name"] = qosShowEaStV2.PolicyName
    leafs["parent-policy-name"] = qosShowEaStV2.ParentPolicyName
    leafs["parent-class-name"] = qosShowEaStV2.ParentClassName
    return leafs
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetBundleName() string { return "cisco_ios_xr" }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetYangName() string { return "qos-show-ea-st-v2" }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) SetParent(parent types.Entity) { qosShowEaStV2.parent = parent }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetParent() types.Entity { return qosShowEaStV2.parent }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetParentYangName() string { return "policy-typhoon" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue
// Queue parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Queue ID. The type is interface{} with range: 0..4294967295.
    QueueId interface{}

    // Queue type. The type is Queue.
    QueueType interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetGoName(yname string) string {
    if yname == "queue-id" { return "QueueId" }
    if yname == "queue-type" { return "QueueType" }
    if yname == "class-name" { return "ClassName" }
    return ""
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queue-id"] = queue.QueueId
    leafs["queue-type"] = queue.QueueType
    leafs["class-name"] = queue.ClassName
    return leafs
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetYangName() string { return "queue" }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetParent() types.Entity { return queue.parent }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters
// Queue limit parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Absolute Index. The type is interface{} with range: 0..65535.
    AbsoluteIndex interface{}

    // Template ID. The type is interface{} with range: 0..65535.
    TemplateId interface{}

    // Curve ID. The type is interface{} with range: 0..65535.
    CurveId interface{}

    // Queue limit in kbytes.
    QueueLimit PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit

    // Config queue limit.
    ConfigQueueLimit PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetFilter() yfilter.YFilter { return queueLimitParameters.YFilter }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) SetFilter(yf yfilter.YFilter) { queueLimitParameters.YFilter = yf }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetGoName(yname string) string {
    if yname == "absolute-index" { return "AbsoluteIndex" }
    if yname == "template-id" { return "TemplateId" }
    if yname == "curve-id" { return "CurveId" }
    if yname == "queue-limit" { return "QueueLimit" }
    if yname == "config-queue-limit" { return "ConfigQueueLimit" }
    return ""
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetSegmentPath() string {
    return "queue-limit-parameters"
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue-limit" {
        return &queueLimitParameters.QueueLimit
    }
    if childYangName == "config-queue-limit" {
        return &queueLimitParameters.ConfigQueueLimit
    }
    return nil
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue-limit"] = &queueLimitParameters.QueueLimit
    children["config-queue-limit"] = &queueLimitParameters.ConfigQueueLimit
    return children
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["absolute-index"] = queueLimitParameters.AbsoluteIndex
    leafs["template-id"] = queueLimitParameters.TemplateId
    leafs["curve-id"] = queueLimitParameters.CurveId
    return leafs
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetYangName() string { return "queue-limit-parameters" }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) SetParent(parent types.Entity) { queueLimitParameters.parent = parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetParent() types.Entity { return queueLimitParameters.parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit
// Queue limit in kbytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetFilter() yfilter.YFilter { return queueLimit.YFilter }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) SetFilter(yf yfilter.YFilter) { queueLimit.YFilter = yf }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetSegmentPath() string {
    return "queue-limit"
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = queueLimit.Value
    leafs["unit"] = queueLimit.Unit
    return leafs
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetYangName() string { return "queue-limit" }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) SetParent(parent types.Entity) { queueLimit.parent = parent }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetParent() types.Entity { return queueLimit.parent }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit
// Config queue limit
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetFilter() yfilter.YFilter { return configQueueLimit.YFilter }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) SetFilter(yf yfilter.YFilter) { configQueueLimit.YFilter = yf }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetSegmentPath() string {
    return "config-queue-limit"
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = configQueueLimit.Value
    leafs["unit"] = configQueueLimit.Unit
    return leafs
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetYangName() string { return "config-queue-limit" }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) SetParent(parent types.Entity) { configQueueLimit.parent = parent }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetParent() types.Entity { return configQueueLimit.parent }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape
// Shape parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // CIR Shaper type. The type is ShapeProfiletypeV2.
    CirShapeType interface{}

    // PIR Shaper type. The type is ShapeProfiletypeV2.
    PirShapeType interface{}

    // CIR shaper params.
    CirShape PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape

    // PIR shaper params.
    PirShape PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetGoName(yname string) string {
    if yname == "cir-shape-type" { return "CirShapeType" }
    if yname == "pir-shape-type" { return "PirShapeType" }
    if yname == "cir-shape" { return "CirShape" }
    if yname == "pir-shape" { return "PirShape" }
    return ""
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir-shape" {
        return &shape.CirShape
    }
    if childYangName == "pir-shape" {
        return &shape.PirShape
    }
    return nil
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir-shape"] = &shape.CirShape
    children["pir-shape"] = &shape.PirShape
    return children
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cir-shape-type"] = shape.CirShapeType
    leafs["pir-shape-type"] = shape.PirShapeType
    return leafs
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetYangName() string { return "shape" }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetParent() types.Entity { return shape.parent }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape
// CIR shaper params
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // Scale Factor. The type is interface{} with range: 0..65535.
    ScaleFactor interface{}

    // CIR in kbps.
    Cir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir

    // Config bandwidth.
    ConfigBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth

    // CBS in bytes.
    Cbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetFilter() yfilter.YFilter { return cirShape.YFilter }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) SetFilter(yf yfilter.YFilter) { cirShape.YFilter = yf }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetGoName(yname string) string {
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scale-factor" { return "ScaleFactor" }
    if yname == "cir" { return "Cir" }
    if yname == "config-bandwidth" { return "ConfigBandwidth" }
    if yname == "cbs" { return "Cbs" }
    return ""
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetSegmentPath() string {
    return "cir-shape"
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &cirShape.Cir
    }
    if childYangName == "config-bandwidth" {
        return &cirShape.ConfigBandwidth
    }
    if childYangName == "cbs" {
        return &cirShape.Cbs
    }
    return nil
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &cirShape.Cir
    children["config-bandwidth"] = &cirShape.ConfigBandwidth
    children["cbs"] = &cirShape.Cbs
    return children
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["chunk-id"] = cirShape.ChunkId
    leafs["profile-id"] = cirShape.ProfileId
    leafs["scale-factor"] = cirShape.ScaleFactor
    return leafs
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetBundleName() string { return "cisco_ios_xr" }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetYangName() string { return "cir-shape" }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) SetParent(parent types.Entity) { cirShape.parent = parent }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetParent() types.Entity { return cirShape.parent }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir
// CIR in kbps
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth
// Config bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum bandwidth rate.
    MinimumRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetFilter() yfilter.YFilter { return configBandwidth.YFilter }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) SetFilter(yf yfilter.YFilter) { configBandwidth.YFilter = yf }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetGoName(yname string) string {
    if yname == "minimum-rate" { return "MinimumRate" }
    return ""
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetSegmentPath() string {
    return "config-bandwidth"
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minimum-rate" {
        return &configBandwidth.MinimumRate
    }
    return nil
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minimum-rate"] = &configBandwidth.MinimumRate
    return children
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetYangName() string { return "config-bandwidth" }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) SetParent(parent types.Entity) { configBandwidth.parent = parent }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetParent() types.Entity { return configBandwidth.parent }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate
// Minimum bandwidth rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetFilter() yfilter.YFilter { return minimumRate.YFilter }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) SetFilter(yf yfilter.YFilter) { minimumRate.YFilter = yf }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetSegmentPath() string {
    return "minimum-rate"
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minimumRate.Value
    leafs["unit"] = minimumRate.Unit
    return leafs
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetBundleName() string { return "cisco_ios_xr" }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetYangName() string { return "minimum-rate" }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) SetParent(parent types.Entity) { minimumRate.parent = parent }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetParent() types.Entity { return minimumRate.parent }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetParentYangName() string { return "config-bandwidth" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs
// CBS in bytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape
// PIR shaper params
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // Scale Factor. The type is interface{} with range: 0..65535.
    ScaleFactor interface{}

    // PIR in kbps.
    Pir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir

    // PBS in bytes.
    Pbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetFilter() yfilter.YFilter { return pirShape.YFilter }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) SetFilter(yf yfilter.YFilter) { pirShape.YFilter = yf }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetGoName(yname string) string {
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scale-factor" { return "ScaleFactor" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    return ""
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetSegmentPath() string {
    return "pir-shape"
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pir" {
        return &pirShape.Pir
    }
    if childYangName == "pbs" {
        return &pirShape.Pbs
    }
    return nil
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pir"] = &pirShape.Pir
    children["pbs"] = &pirShape.Pbs
    return children
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["chunk-id"] = pirShape.ChunkId
    leafs["profile-id"] = pirShape.ProfileId
    leafs["scale-factor"] = pirShape.ScaleFactor
    return leafs
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetBundleName() string { return "cisco_ios_xr" }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetYangName() string { return "pir-shape" }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) SetParent(parent types.Entity) { pirShape.parent = parent }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetParent() types.Entity { return pirShape.parent }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir
// PIR in kbps
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetParentYangName() string { return "pir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs
// PBS in bytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetParentYangName() string { return "pir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police
// Police parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policer type. The type is TbAlgorithm.
    PolicerType interface{}

    // Police profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // CIR.
    Cir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir

    // CBS.
    Cbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs

    // PIR.
    Pir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir

    // PBS.
    Pbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs

    // Police config parameters.
    PoliceConfigParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetFilter() yfilter.YFilter { return police.YFilter }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) SetFilter(yf yfilter.YFilter) { police.YFilter = yf }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetGoName(yname string) string {
    if yname == "policer-type" { return "PolicerType" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    if yname == "police-config-parameters" { return "PoliceConfigParameters" }
    return ""
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetSegmentPath() string {
    return "police"
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &police.Cir
    }
    if childYangName == "cbs" {
        return &police.Cbs
    }
    if childYangName == "pir" {
        return &police.Pir
    }
    if childYangName == "pbs" {
        return &police.Pbs
    }
    if childYangName == "police-config-parameters" {
        return &police.PoliceConfigParameters
    }
    return nil
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &police.Cir
    children["cbs"] = &police.Cbs
    children["pir"] = &police.Pir
    children["pbs"] = &police.Pbs
    children["police-config-parameters"] = &police.PoliceConfigParameters
    return children
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policer-type"] = police.PolicerType
    leafs["profile-id"] = police.ProfileId
    return leafs
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetBundleName() string { return "cisco_ios_xr" }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetYangName() string { return "police" }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) SetParent(parent types.Entity) { police.parent = parent }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetParent() types.Entity { return police.parent }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir
// CIR
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs
// CBS
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir
// PIR
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs
// PBS
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters
// Police config parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Average rate.
    AverageRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate

    // Peak rate.
    PeakRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate

    // Conform burst.
    ConformBurst PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst

    // Exceed burst.
    ExceedBurst PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetFilter() yfilter.YFilter { return policeConfigParameters.YFilter }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) SetFilter(yf yfilter.YFilter) { policeConfigParameters.YFilter = yf }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetGoName(yname string) string {
    if yname == "average-rate" { return "AverageRate" }
    if yname == "peak-rate" { return "PeakRate" }
    if yname == "conform-burst" { return "ConformBurst" }
    if yname == "exceed-burst" { return "ExceedBurst" }
    return ""
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetSegmentPath() string {
    return "police-config-parameters"
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "average-rate" {
        return &policeConfigParameters.AverageRate
    }
    if childYangName == "peak-rate" {
        return &policeConfigParameters.PeakRate
    }
    if childYangName == "conform-burst" {
        return &policeConfigParameters.ConformBurst
    }
    if childYangName == "exceed-burst" {
        return &policeConfigParameters.ExceedBurst
    }
    return nil
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["average-rate"] = &policeConfigParameters.AverageRate
    children["peak-rate"] = &policeConfigParameters.PeakRate
    children["conform-burst"] = &policeConfigParameters.ConformBurst
    children["exceed-burst"] = &policeConfigParameters.ExceedBurst
    return children
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetBundleName() string { return "cisco_ios_xr" }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetYangName() string { return "police-config-parameters" }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) SetParent(parent types.Entity) { policeConfigParameters.parent = parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetParent() types.Entity { return policeConfigParameters.parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate
// Average rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetFilter() yfilter.YFilter { return averageRate.YFilter }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) SetFilter(yf yfilter.YFilter) { averageRate.YFilter = yf }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetSegmentPath() string {
    return "average-rate"
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = averageRate.Value
    leafs["unit"] = averageRate.Unit
    return leafs
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetBundleName() string { return "cisco_ios_xr" }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetYangName() string { return "average-rate" }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) SetParent(parent types.Entity) { averageRate.parent = parent }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetParent() types.Entity { return averageRate.parent }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate
// Peak rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetFilter() yfilter.YFilter { return peakRate.YFilter }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) SetFilter(yf yfilter.YFilter) { peakRate.YFilter = yf }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetSegmentPath() string {
    return "peak-rate"
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = peakRate.Value
    leafs["unit"] = peakRate.Unit
    return leafs
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetBundleName() string { return "cisco_ios_xr" }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetYangName() string { return "peak-rate" }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) SetParent(parent types.Entity) { peakRate.parent = parent }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetParent() types.Entity { return peakRate.parent }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst
// Conform burst
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetFilter() yfilter.YFilter { return conformBurst.YFilter }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) SetFilter(yf yfilter.YFilter) { conformBurst.YFilter = yf }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetSegmentPath() string {
    return "conform-burst"
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = conformBurst.Value
    leafs["unit"] = conformBurst.Unit
    return leafs
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetBundleName() string { return "cisco_ios_xr" }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetYangName() string { return "conform-burst" }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) SetParent(parent types.Entity) { conformBurst.parent = parent }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetParent() types.Entity { return conformBurst.parent }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst
// Exceed burst
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetFilter() yfilter.YFilter { return exceedBurst.YFilter }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) SetFilter(yf yfilter.YFilter) { exceedBurst.YFilter = yf }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetSegmentPath() string {
    return "exceed-burst"
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = exceedBurst.Value
    leafs["unit"] = exceedBurst.Unit
    return leafs
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetBundleName() string { return "cisco_ios_xr" }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetYangName() string { return "exceed-burst" }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) SetParent(parent types.Entity) { exceedBurst.parent = parent }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetParent() types.Entity { return exceedBurst.parent }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq
// WFQ parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WFQ profile. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Committed weight. The type is interface{} with range: 0..4294967295.
    CommittedWeight interface{}

    // Excess weight. The type is interface{} with range: 0..65535.
    ExcessWeight interface{}

    // Parent Excess ratio. The type is interface{} with range: 0..65535.
    ExcessRatio interface{}

    // Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Level. The type is interface{} with range: 0..255.
    Level interface{}

    // Parent bandwidth.
    ParentBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth

    // CFG Bandwidth.
    Bandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetFilter() yfilter.YFilter { return wfq.YFilter }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) SetFilter(yf yfilter.YFilter) { wfq.YFilter = yf }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "committed-weight" { return "CommittedWeight" }
    if yname == "excess-weight" { return "ExcessWeight" }
    if yname == "excess-ratio" { return "ExcessRatio" }
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "level" { return "Level" }
    if yname == "parent-bandwidth" { return "ParentBandwidth" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetSegmentPath() string {
    return "wfq"
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "parent-bandwidth" {
        return &wfq.ParentBandwidth
    }
    if childYangName == "bandwidth" {
        return &wfq.Bandwidth
    }
    return nil
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["parent-bandwidth"] = &wfq.ParentBandwidth
    children["bandwidth"] = &wfq.Bandwidth
    return children
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = wfq.ProfileId
    leafs["committed-weight"] = wfq.CommittedWeight
    leafs["excess-weight"] = wfq.ExcessWeight
    leafs["excess-ratio"] = wfq.ExcessRatio
    leafs["chunk-id"] = wfq.ChunkId
    leafs["level"] = wfq.Level
    return leafs
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetBundleName() string { return "cisco_ios_xr" }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetYangName() string { return "wfq" }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) SetParent(parent types.Entity) { wfq.parent = parent }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetParent() types.Entity { return wfq.parent }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth
// Parent bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetFilter() yfilter.YFilter { return parentBandwidth.YFilter }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) SetFilter(yf yfilter.YFilter) { parentBandwidth.YFilter = yf }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetSegmentPath() string {
    return "parent-bandwidth"
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = parentBandwidth.Value
    leafs["unit"] = parentBandwidth.Unit
    return leafs
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetYangName() string { return "parent-bandwidth" }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) SetParent(parent types.Entity) { parentBandwidth.parent = parent }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetParent() types.Entity { return parentBandwidth.parent }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth
// CFG Bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = bandwidth.Value
    leafs["unit"] = bandwidth.Unit
    return leafs
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred
// WRED parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED type. The type is Wred.
    Type interface{}

    // Number of curves. The type is interface{} with range: 0..65535.
    CurveXr interface{}

    // Curve details. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve.
    Curve []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetFilter() yfilter.YFilter { return wred.YFilter }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) SetFilter(yf yfilter.YFilter) { wred.YFilter = yf }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "curve-xr" { return "CurveXr" }
    if yname == "curve" { return "Curve" }
    return ""
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetSegmentPath() string {
    return "wred"
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "curve" {
        for _, c := range wred.Curve {
            if wred.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve{}
        wred.Curve = append(wred.Curve, child)
        return &wred.Curve[len(wred.Curve)-1]
    }
    return nil
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range wred.Curve {
        children[wred.Curve[i].GetSegmentPath()] = &wred.Curve[i]
    }
    return children
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = wred.Type
    leafs["curve-xr"] = wred.CurveXr
    return leafs
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetBundleName() string { return "cisco_ios_xr" }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetYangName() string { return "wred" }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) SetParent(parent types.Entity) { wred.parent = parent }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetParent() types.Entity { return wred.parent }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve
// Curve details
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Absolute Index. The type is interface{} with range: 0..65535.
    AbsoluteIndex interface{}

    // Template ID. The type is interface{} with range: 0..65535.
    TemplateId interface{}

    // Curve ID. The type is interface{} with range: 0..65535.
    CurveId interface{}

    // WRED match if precedence start value equals to end value Format:
    // <start-value> , else range Format: <start-value> <end-value>. The type is
    // string.
    Match interface{}

    // WRED exp match if EXP start value equals to end value Format: <start-value>
    // , else range Format: <start-value> <end-value>. The type is string.
    ExpMatch interface{}

    // Minimum threshold.
    MinThreshold PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold

    // Minimum threshold WRED context.
    MinThresholdUserConfig PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig

    // Maximum threshold.
    MaxThreshold PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold

    // Maximum threshold WRED context.
    MaxThresholdUserConfig PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetFilter() yfilter.YFilter { return curve.YFilter }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) SetFilter(yf yfilter.YFilter) { curve.YFilter = yf }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetGoName(yname string) string {
    if yname == "absolute-index" { return "AbsoluteIndex" }
    if yname == "template-id" { return "TemplateId" }
    if yname == "curve-id" { return "CurveId" }
    if yname == "match" { return "Match" }
    if yname == "exp-match" { return "ExpMatch" }
    if yname == "min-threshold" { return "MinThreshold" }
    if yname == "min-threshold-user-config" { return "MinThresholdUserConfig" }
    if yname == "max-threshold" { return "MaxThreshold" }
    if yname == "max-threshold-user-config" { return "MaxThresholdUserConfig" }
    return ""
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetSegmentPath() string {
    return "curve"
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-threshold" {
        return &curve.MinThreshold
    }
    if childYangName == "min-threshold-user-config" {
        return &curve.MinThresholdUserConfig
    }
    if childYangName == "max-threshold" {
        return &curve.MaxThreshold
    }
    if childYangName == "max-threshold-user-config" {
        return &curve.MaxThresholdUserConfig
    }
    return nil
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-threshold"] = &curve.MinThreshold
    children["min-threshold-user-config"] = &curve.MinThresholdUserConfig
    children["max-threshold"] = &curve.MaxThreshold
    children["max-threshold-user-config"] = &curve.MaxThresholdUserConfig
    return children
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["absolute-index"] = curve.AbsoluteIndex
    leafs["template-id"] = curve.TemplateId
    leafs["curve-id"] = curve.CurveId
    leafs["match"] = curve.Match
    leafs["exp-match"] = curve.ExpMatch
    return leafs
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetBundleName() string { return "cisco_ios_xr" }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetYangName() string { return "curve" }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) SetParent(parent types.Entity) { curve.parent = parent }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetParent() types.Entity { return curve.parent }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetParentYangName() string { return "wred" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold
// Minimum threshold
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetFilter() yfilter.YFilter { return minThreshold.YFilter }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) SetFilter(yf yfilter.YFilter) { minThreshold.YFilter = yf }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetSegmentPath() string {
    return "min-threshold"
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThreshold.Value
    leafs["unit"] = minThreshold.Unit
    return leafs
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetYangName() string { return "min-threshold" }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) SetParent(parent types.Entity) { minThreshold.parent = parent }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetParent() types.Entity { return minThreshold.parent }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig
// Minimum threshold WRED context
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetFilter() yfilter.YFilter { return minThresholdUserConfig.YFilter }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) SetFilter(yf yfilter.YFilter) { minThresholdUserConfig.YFilter = yf }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetSegmentPath() string {
    return "min-threshold-user-config"
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThresholdUserConfig.Value
    leafs["unit"] = minThresholdUserConfig.Unit
    return leafs
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetYangName() string { return "min-threshold-user-config" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) SetParent(parent types.Entity) { minThresholdUserConfig.parent = parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetParent() types.Entity { return minThresholdUserConfig.parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold
// Maximum threshold
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetFilter() yfilter.YFilter { return maxThreshold.YFilter }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) SetFilter(yf yfilter.YFilter) { maxThreshold.YFilter = yf }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetSegmentPath() string {
    return "max-threshold"
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThreshold.Value
    leafs["unit"] = maxThreshold.Unit
    return leafs
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetYangName() string { return "max-threshold" }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) SetParent(parent types.Entity) { maxThreshold.parent = parent }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetParent() types.Entity { return maxThreshold.parent }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig
// Maximum threshold WRED context
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetFilter() yfilter.YFilter { return maxThresholdUserConfig.YFilter }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) SetFilter(yf yfilter.YFilter) { maxThresholdUserConfig.YFilter = yf }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetSegmentPath() string {
    return "max-threshold-user-config"
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThresholdUserConfig.Value
    leafs["unit"] = maxThresholdUserConfig.Unit
    return leafs
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetYangName() string { return "max-threshold-user-config" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) SetParent(parent types.Entity) { maxThresholdUserConfig.parent = parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetParent() types.Entity { return maxThresholdUserConfig.parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark
// Mark parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Child mark only.
    ChildMark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark

    // Child police conform mark.
    PoliceConform PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform

    // Child police exceed mark.
    PoliceExceed PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed

    // Child police violate mark.
    PoliceViolate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate

    // Parent mark only.
    ParentMark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark

    // Parent police conform mark.
    ParentPoliceConform PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform

    // Parent police exceed mark.
    ParentPoliceExceed PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed

    // Parent police violate mark.
    ParentPoliceViolate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetFilter() yfilter.YFilter { return mark.YFilter }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) SetFilter(yf yfilter.YFilter) { mark.YFilter = yf }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetGoName(yname string) string {
    if yname == "child-mark" { return "ChildMark" }
    if yname == "police-conform" { return "PoliceConform" }
    if yname == "police-exceed" { return "PoliceExceed" }
    if yname == "police-violate" { return "PoliceViolate" }
    if yname == "parent-mark" { return "ParentMark" }
    if yname == "parent-police-conform" { return "ParentPoliceConform" }
    if yname == "parent-police-exceed" { return "ParentPoliceExceed" }
    if yname == "parent-police-violate" { return "ParentPoliceViolate" }
    return ""
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetSegmentPath() string {
    return "mark"
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "child-mark" {
        return &mark.ChildMark
    }
    if childYangName == "police-conform" {
        return &mark.PoliceConform
    }
    if childYangName == "police-exceed" {
        return &mark.PoliceExceed
    }
    if childYangName == "police-violate" {
        return &mark.PoliceViolate
    }
    if childYangName == "parent-mark" {
        return &mark.ParentMark
    }
    if childYangName == "parent-police-conform" {
        return &mark.ParentPoliceConform
    }
    if childYangName == "parent-police-exceed" {
        return &mark.ParentPoliceExceed
    }
    if childYangName == "parent-police-violate" {
        return &mark.ParentPoliceViolate
    }
    return nil
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["child-mark"] = &mark.ChildMark
    children["police-conform"] = &mark.PoliceConform
    children["police-exceed"] = &mark.PoliceExceed
    children["police-violate"] = &mark.PoliceViolate
    children["parent-mark"] = &mark.ParentMark
    children["parent-police-conform"] = &mark.ParentPoliceConform
    children["parent-police-exceed"] = &mark.ParentPoliceExceed
    children["parent-police-violate"] = &mark.ParentPoliceViolate
    return children
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetBundleName() string { return "cisco_ios_xr" }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetYangName() string { return "mark" }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) SetParent(parent types.Entity) { mark.parent = parent }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetParent() types.Entity { return mark.parent }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark
// Child mark only
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetFilter() yfilter.YFilter { return childMark.YFilter }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) SetFilter(yf yfilter.YFilter) { childMark.YFilter = yf }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetSegmentPath() string {
    return "child-mark"
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range childMark.MarkDetail {
            if childMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail{}
        childMark.MarkDetail = append(childMark.MarkDetail, child)
        return &childMark.MarkDetail[len(childMark.MarkDetail)-1]
    }
    return nil
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range childMark.MarkDetail {
        children[childMark.MarkDetail[i].GetSegmentPath()] = &childMark.MarkDetail[i]
    }
    return children
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = childMark.ActionType
    return leafs
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetBundleName() string { return "cisco_ios_xr" }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetYangName() string { return "child-mark" }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) SetParent(parent types.Entity) { childMark.parent = parent }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetParent() types.Entity { return childMark.parent }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetParentYangName() string { return "child-mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform
// Child police conform mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetFilter() yfilter.YFilter { return policeConform.YFilter }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) SetFilter(yf yfilter.YFilter) { policeConform.YFilter = yf }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetSegmentPath() string {
    return "police-conform"
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeConform.MarkDetail {
            if policeConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail{}
        policeConform.MarkDetail = append(policeConform.MarkDetail, child)
        return &policeConform.MarkDetail[len(policeConform.MarkDetail)-1]
    }
    return nil
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeConform.MarkDetail {
        children[policeConform.MarkDetail[i].GetSegmentPath()] = &policeConform.MarkDetail[i]
    }
    return children
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeConform.ActionType
    return leafs
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetYangName() string { return "police-conform" }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) SetParent(parent types.Entity) { policeConform.parent = parent }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetParent() types.Entity { return policeConform.parent }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetParentYangName() string { return "police-conform" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed
// Child police exceed mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetFilter() yfilter.YFilter { return policeExceed.YFilter }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) SetFilter(yf yfilter.YFilter) { policeExceed.YFilter = yf }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetSegmentPath() string {
    return "police-exceed"
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeExceed.MarkDetail {
            if policeExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail{}
        policeExceed.MarkDetail = append(policeExceed.MarkDetail, child)
        return &policeExceed.MarkDetail[len(policeExceed.MarkDetail)-1]
    }
    return nil
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeExceed.MarkDetail {
        children[policeExceed.MarkDetail[i].GetSegmentPath()] = &policeExceed.MarkDetail[i]
    }
    return children
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeExceed.ActionType
    return leafs
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetYangName() string { return "police-exceed" }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) SetParent(parent types.Entity) { policeExceed.parent = parent }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetParent() types.Entity { return policeExceed.parent }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetParentYangName() string { return "police-exceed" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate
// Child police violate mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetFilter() yfilter.YFilter { return policeViolate.YFilter }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) SetFilter(yf yfilter.YFilter) { policeViolate.YFilter = yf }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetSegmentPath() string {
    return "police-violate"
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeViolate.MarkDetail {
            if policeViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail{}
        policeViolate.MarkDetail = append(policeViolate.MarkDetail, child)
        return &policeViolate.MarkDetail[len(policeViolate.MarkDetail)-1]
    }
    return nil
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeViolate.MarkDetail {
        children[policeViolate.MarkDetail[i].GetSegmentPath()] = &policeViolate.MarkDetail[i]
    }
    return children
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeViolate.ActionType
    return leafs
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetYangName() string { return "police-violate" }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) SetParent(parent types.Entity) { policeViolate.parent = parent }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetParent() types.Entity { return policeViolate.parent }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetParentYangName() string { return "police-violate" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark
// Parent mark only
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetFilter() yfilter.YFilter { return parentMark.YFilter }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) SetFilter(yf yfilter.YFilter) { parentMark.YFilter = yf }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetSegmentPath() string {
    return "parent-mark"
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentMark.MarkDetail {
            if parentMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail{}
        parentMark.MarkDetail = append(parentMark.MarkDetail, child)
        return &parentMark.MarkDetail[len(parentMark.MarkDetail)-1]
    }
    return nil
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentMark.MarkDetail {
        children[parentMark.MarkDetail[i].GetSegmentPath()] = &parentMark.MarkDetail[i]
    }
    return children
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentMark.ActionType
    return leafs
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetBundleName() string { return "cisco_ios_xr" }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetYangName() string { return "parent-mark" }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) SetParent(parent types.Entity) { parentMark.parent = parent }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetParent() types.Entity { return parentMark.parent }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetParentYangName() string { return "parent-mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform
// Parent police conform mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetFilter() yfilter.YFilter { return parentPoliceConform.YFilter }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) SetFilter(yf yfilter.YFilter) { parentPoliceConform.YFilter = yf }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetSegmentPath() string {
    return "parent-police-conform"
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceConform.MarkDetail {
            if parentPoliceConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail{}
        parentPoliceConform.MarkDetail = append(parentPoliceConform.MarkDetail, child)
        return &parentPoliceConform.MarkDetail[len(parentPoliceConform.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceConform.MarkDetail {
        children[parentPoliceConform.MarkDetail[i].GetSegmentPath()] = &parentPoliceConform.MarkDetail[i]
    }
    return children
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceConform.ActionType
    return leafs
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetYangName() string { return "parent-police-conform" }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) SetParent(parent types.Entity) { parentPoliceConform.parent = parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetParent() types.Entity { return parentPoliceConform.parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetParentYangName() string { return "parent-police-conform" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed
// Parent police exceed mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetFilter() yfilter.YFilter { return parentPoliceExceed.YFilter }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) SetFilter(yf yfilter.YFilter) { parentPoliceExceed.YFilter = yf }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetSegmentPath() string {
    return "parent-police-exceed"
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceExceed.MarkDetail {
            if parentPoliceExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail{}
        parentPoliceExceed.MarkDetail = append(parentPoliceExceed.MarkDetail, child)
        return &parentPoliceExceed.MarkDetail[len(parentPoliceExceed.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceExceed.MarkDetail {
        children[parentPoliceExceed.MarkDetail[i].GetSegmentPath()] = &parentPoliceExceed.MarkDetail[i]
    }
    return children
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceExceed.ActionType
    return leafs
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetYangName() string { return "parent-police-exceed" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) SetParent(parent types.Entity) { parentPoliceExceed.parent = parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetParent() types.Entity { return parentPoliceExceed.parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetParentYangName() string { return "parent-police-exceed" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate
// Parent police violate mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetFilter() yfilter.YFilter { return parentPoliceViolate.YFilter }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) SetFilter(yf yfilter.YFilter) { parentPoliceViolate.YFilter = yf }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetSegmentPath() string {
    return "parent-police-violate"
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceViolate.MarkDetail {
            if parentPoliceViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail{}
        parentPoliceViolate.MarkDetail = append(parentPoliceViolate.MarkDetail, child)
        return &parentPoliceViolate.MarkDetail[len(parentPoliceViolate.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceViolate.MarkDetail {
        children[parentPoliceViolate.MarkDetail[i].GetSegmentPath()] = &parentPoliceViolate.MarkDetail[i]
    }
    return children
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceViolate.ActionType
    return leafs
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetYangName() string { return "parent-police-violate" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) SetParent(parent types.Entity) { parentPoliceViolate.parent = parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetParent() types.Entity { return parentPoliceViolate.parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleOutput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetParentYangName() string { return "parent-police-violate" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput
// QoS policy direction output
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS list of member interfaces.
    MemberInterfaces PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces
}

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetFilter() yfilter.YFilter { return bundleInput.YFilter }

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) SetFilter(yf yfilter.YFilter) { bundleInput.YFilter = yf }

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetGoName(yname string) string {
    if yname == "member-interfaces" { return "MemberInterfaces" }
    return ""
}

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetSegmentPath() string {
    return "bundle-input"
}

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-interfaces" {
        return &bundleInput.MemberInterfaces
    }
    return nil
}

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-interfaces"] = &bundleInput.MemberInterfaces
    return children
}

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetBundleName() string { return "cisco_ios_xr" }

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetYangName() string { return "bundle-input" }

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) SetParent(parent types.Entity) { bundleInput.parent = parent }

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetParent() types.Entity { return bundleInput.parent }

func (bundleInput *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput) GetParentYangName() string { return "bundle-interface" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces
// QoS list of member interfaces
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS interface name. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface.
    MemberInterface []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetFilter() yfilter.YFilter { return memberInterfaces.YFilter }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) SetFilter(yf yfilter.YFilter) { memberInterfaces.YFilter = yf }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    return ""
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetSegmentPath() string {
    return "member-interfaces"
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-interface" {
        for _, c := range memberInterfaces.MemberInterface {
            if memberInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface{}
        memberInterfaces.MemberInterface = append(memberInterfaces.MemberInterface, child)
        return &memberInterfaces.MemberInterface[len(memberInterfaces.MemberInterface)-1]
    }
    return nil
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range memberInterfaces.MemberInterface {
        children[memberInterfaces.MemberInterface[i].GetSegmentPath()] = &memberInterfaces.MemberInterface[i]
    }
    return children
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetYangName() string { return "member-interfaces" }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) SetParent(parent types.Entity) { memberInterfaces.parent = parent }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetParent() types.Entity { return memberInterfaces.parent }

func (memberInterfaces *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces) GetParentYangName() string { return "bundle-input" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface
// QoS interface name
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Memeber interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // QoS policy direction egress.
    Details PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetFilter() yfilter.YFilter { return memberInterface.YFilter }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) SetFilter(yf yfilter.YFilter) { memberInterface.YFilter = yf }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "details" { return "Details" }
    return ""
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetSegmentPath() string {
    return "member-interface" + "[interface-name='" + fmt.Sprintf("%v", memberInterface.InterfaceName) + "']"
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "details" {
        return &memberInterface.Details
    }
    return nil
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["details"] = &memberInterface.Details
    return children
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = memberInterface.InterfaceName
    return leafs
}

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetBundleName() string { return "cisco_ios_xr" }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetYangName() string { return "member-interface" }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) SetParent(parent types.Entity) { memberInterface.parent = parent }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetParent() types.Entity { return memberInterface.parent }

func (memberInterface *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface) GetParentYangName() string { return "member-interfaces" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details
// QoS policy direction egress
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QoS policy header.
    Header PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header

    // Trident QoS policy details.
    Policy PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy

    // Typhoon QoS policy details.
    PolicyTyphoon PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetFilter() yfilter.YFilter { return details.YFilter }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) SetFilter(yf yfilter.YFilter) { details.YFilter = yf }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetGoName(yname string) string {
    if yname == "header" { return "Header" }
    if yname == "policy" { return "Policy" }
    if yname == "policy-typhoon" { return "PolicyTyphoon" }
    return ""
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetSegmentPath() string {
    return "details"
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "header" {
        return &details.Header
    }
    if childYangName == "policy" {
        return &details.Policy
    }
    if childYangName == "policy-typhoon" {
        return &details.PolicyTyphoon
    }
    return nil
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["header"] = &details.Header
    children["policy"] = &details.Policy
    children["policy-typhoon"] = &details.PolicyTyphoon
    return children
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetBundleName() string { return "cisco_ios_xr" }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetYangName() string { return "details" }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) SetParent(parent types.Entity) { details.parent = parent }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetParent() types.Entity { return details.parent }

func (details *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details) GetParentYangName() string { return "member-interface" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header
// QoS policy header
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of classes. The type is interface{} with range: 0..65535.
    Classes interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Interface config and programmed parameters.
    InterfaceParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters

    // Bandwidth that was programmed.
    ProgrammedBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetGoName(yname string) string {
    if yname == "classes" { return "Classes" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "interface-parameters" { return "InterfaceParameters" }
    if yname == "programmed-bandwidth" { return "ProgrammedBandwidth" }
    return ""
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetSegmentPath() string {
    return "header"
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-parameters" {
        return &header.InterfaceParameters
    }
    if childYangName == "programmed-bandwidth" {
        return &header.ProgrammedBandwidth
    }
    return nil
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-parameters"] = &header.InterfaceParameters
    children["programmed-bandwidth"] = &header.ProgrammedBandwidth
    return children
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["classes"] = header.Classes
    leafs["policy-name"] = header.PolicyName
    return leafs
}

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetYangName() string { return "header" }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetParent() types.Entity { return header.parent }

func (header *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters
// Interface config and programmed parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth due to port speed change.
    PortConfigBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth

    // Bandwidth obtain from IM.
    AncpConfigBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth

    // ANCP bandwidth that was programmed.
    AncpProgrammedBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth

    // Bandwidth that was programmed.
    PortShaperRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetFilter() yfilter.YFilter { return interfaceParameters.YFilter }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) SetFilter(yf yfilter.YFilter) { interfaceParameters.YFilter = yf }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetGoName(yname string) string {
    if yname == "port-config-bandwidth" { return "PortConfigBandwidth" }
    if yname == "ancp-config-bandwidth" { return "AncpConfigBandwidth" }
    if yname == "ancp-programmed-bandwidth" { return "AncpProgrammedBandwidth" }
    if yname == "port-shaper-rate" { return "PortShaperRate" }
    return ""
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetSegmentPath() string {
    return "interface-parameters"
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-config-bandwidth" {
        return &interfaceParameters.PortConfigBandwidth
    }
    if childYangName == "ancp-config-bandwidth" {
        return &interfaceParameters.AncpConfigBandwidth
    }
    if childYangName == "ancp-programmed-bandwidth" {
        return &interfaceParameters.AncpProgrammedBandwidth
    }
    if childYangName == "port-shaper-rate" {
        return &interfaceParameters.PortShaperRate
    }
    return nil
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-config-bandwidth"] = &interfaceParameters.PortConfigBandwidth
    children["ancp-config-bandwidth"] = &interfaceParameters.AncpConfigBandwidth
    children["ancp-programmed-bandwidth"] = &interfaceParameters.AncpProgrammedBandwidth
    children["port-shaper-rate"] = &interfaceParameters.PortShaperRate
    return children
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetYangName() string { return "interface-parameters" }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) SetParent(parent types.Entity) { interfaceParameters.parent = parent }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetParent() types.Entity { return interfaceParameters.parent }

func (interfaceParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters) GetParentYangName() string { return "header" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth
// Bandwidth due to port speed change
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetFilter() yfilter.YFilter { return portConfigBandwidth.YFilter }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) SetFilter(yf yfilter.YFilter) { portConfigBandwidth.YFilter = yf }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetSegmentPath() string {
    return "port-config-bandwidth"
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = portConfigBandwidth.Value
    leafs["unit"] = portConfigBandwidth.Unit
    return leafs
}

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetYangName() string { return "port-config-bandwidth" }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) SetParent(parent types.Entity) { portConfigBandwidth.parent = parent }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetParent() types.Entity { return portConfigBandwidth.parent }

func (portConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortConfigBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth
// Bandwidth obtain from IM
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetFilter() yfilter.YFilter { return ancpConfigBandwidth.YFilter }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) SetFilter(yf yfilter.YFilter) { ancpConfigBandwidth.YFilter = yf }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetSegmentPath() string {
    return "ancp-config-bandwidth"
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = ancpConfigBandwidth.Value
    leafs["unit"] = ancpConfigBandwidth.Unit
    return leafs
}

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetYangName() string { return "ancp-config-bandwidth" }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) SetParent(parent types.Entity) { ancpConfigBandwidth.parent = parent }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetParent() types.Entity { return ancpConfigBandwidth.parent }

func (ancpConfigBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpConfigBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth
// ANCP bandwidth that was programmed
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetFilter() yfilter.YFilter { return ancpProgrammedBandwidth.YFilter }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) SetFilter(yf yfilter.YFilter) { ancpProgrammedBandwidth.YFilter = yf }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetSegmentPath() string {
    return "ancp-programmed-bandwidth"
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = ancpProgrammedBandwidth.Value
    leafs["unit"] = ancpProgrammedBandwidth.Unit
    return leafs
}

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetYangName() string { return "ancp-programmed-bandwidth" }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) SetParent(parent types.Entity) { ancpProgrammedBandwidth.parent = parent }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetParent() types.Entity { return ancpProgrammedBandwidth.parent }

func (ancpProgrammedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_AncpProgrammedBandwidth) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate
// Bandwidth that was programmed
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetFilter() yfilter.YFilter { return portShaperRate.YFilter }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) SetFilter(yf yfilter.YFilter) { portShaperRate.YFilter = yf }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetSegmentPath() string {
    return "port-shaper-rate"
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = portShaperRate.Value
    leafs["unit"] = portShaperRate.Unit
    return leafs
}

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetBundleName() string { return "cisco_ios_xr" }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetYangName() string { return "port-shaper-rate" }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) SetParent(parent types.Entity) { portShaperRate.parent = parent }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetParent() types.Entity { return portShaperRate.parent }

func (portShaperRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_InterfaceParameters_PortShaperRate) GetParentYangName() string { return "interface-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth
// Bandwidth that was programmed
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetFilter() yfilter.YFilter { return programmedBandwidth.YFilter }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) SetFilter(yf yfilter.YFilter) { programmedBandwidth.YFilter = yf }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetSegmentPath() string {
    return "programmed-bandwidth"
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = programmedBandwidth.Value
    leafs["unit"] = programmedBandwidth.Unit
    return leafs
}

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetYangName() string { return "programmed-bandwidth" }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) SetParent(parent types.Entity) { programmedBandwidth.parent = parent }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetParent() types.Entity { return programmedBandwidth.parent }

func (programmedBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Header_ProgrammedBandwidth) GetParentYangName() string { return "header" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy
// Trident QoS policy details
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // qos show ea st v1. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1.
    QosShowEaStV1 []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetFilter() yfilter.YFilter { return policy.YFilter }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) SetFilter(yf yfilter.YFilter) { policy.YFilter = yf }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetGoName(yname string) string {
    if yname == "qos-show-ea-st-v1" { return "QosShowEaStV1" }
    return ""
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetSegmentPath() string {
    return "policy"
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos-show-ea-st-v1" {
        for _, c := range policy.QosShowEaStV1 {
            if policy.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1{}
        policy.QosShowEaStV1 = append(policy.QosShowEaStV1, child)
        return &policy.QosShowEaStV1[len(policy.QosShowEaStV1)-1]
    }
    return nil
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policy.QosShowEaStV1 {
        children[policy.QosShowEaStV1[i].GetSegmentPath()] = &policy.QosShowEaStV1[i]
    }
    return children
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetBundleName() string { return "cisco_ios_xr" }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetYangName() string { return "policy" }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) SetParent(parent types.Entity) { policy.parent = parent }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetParent() types.Entity { return policy.parent }

func (policy *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1
// qos show ea st v1
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class level. The type is interface{} with range: 0..255.
    ClassLevel interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Parent policy name. The type is string with length: 0..65.
    ParentPolicyName interface{}

    // Parent class name. The type is string with length: 0..65.
    ParentClassName interface{}

    // Queue parameters.
    Queue PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue

    // Queue limit parameters.
    QueueLimitParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters

    // Shape parameters.
    Shape PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape

    // Police parameters.
    Police PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police

    // WFQ parameters.
    Wfq PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq

    // WRED parameters.
    Wred PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred

    // Mark parameters.
    Mark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetFilter() yfilter.YFilter { return qosShowEaStV1.YFilter }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) SetFilter(yf yfilter.YFilter) { qosShowEaStV1.YFilter = yf }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetGoName(yname string) string {
    if yname == "class-level" { return "ClassLevel" }
    if yname == "class-name" { return "ClassName" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "parent-policy-name" { return "ParentPolicyName" }
    if yname == "parent-class-name" { return "ParentClassName" }
    if yname == "queue" { return "Queue" }
    if yname == "queue-limit-parameters" { return "QueueLimitParameters" }
    if yname == "shape" { return "Shape" }
    if yname == "police" { return "Police" }
    if yname == "wfq" { return "Wfq" }
    if yname == "wred" { return "Wred" }
    if yname == "mark" { return "Mark" }
    return ""
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetSegmentPath() string {
    return "qos-show-ea-st-v1"
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue" {
        return &qosShowEaStV1.Queue
    }
    if childYangName == "queue-limit-parameters" {
        return &qosShowEaStV1.QueueLimitParameters
    }
    if childYangName == "shape" {
        return &qosShowEaStV1.Shape
    }
    if childYangName == "police" {
        return &qosShowEaStV1.Police
    }
    if childYangName == "wfq" {
        return &qosShowEaStV1.Wfq
    }
    if childYangName == "wred" {
        return &qosShowEaStV1.Wred
    }
    if childYangName == "mark" {
        return &qosShowEaStV1.Mark
    }
    return nil
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue"] = &qosShowEaStV1.Queue
    children["queue-limit-parameters"] = &qosShowEaStV1.QueueLimitParameters
    children["shape"] = &qosShowEaStV1.Shape
    children["police"] = &qosShowEaStV1.Police
    children["wfq"] = &qosShowEaStV1.Wfq
    children["wred"] = &qosShowEaStV1.Wred
    children["mark"] = &qosShowEaStV1.Mark
    return children
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-level"] = qosShowEaStV1.ClassLevel
    leafs["class-name"] = qosShowEaStV1.ClassName
    leafs["policy-name"] = qosShowEaStV1.PolicyName
    leafs["parent-policy-name"] = qosShowEaStV1.ParentPolicyName
    leafs["parent-class-name"] = qosShowEaStV1.ParentClassName
    return leafs
}

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetBundleName() string { return "cisco_ios_xr" }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetYangName() string { return "qos-show-ea-st-v1" }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) SetParent(parent types.Entity) { qosShowEaStV1.parent = parent }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetParent() types.Entity { return qosShowEaStV1.parent }

func (qosShowEaStV1 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1) GetParentYangName() string { return "policy" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue
// Queue parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Queue ID. The type is interface{} with range: 0..4294967295.
    QueueId interface{}

    // Queue type. The type is Queue.
    QueueType interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetGoName(yname string) string {
    if yname == "queue-id" { return "QueueId" }
    if yname == "queue-type" { return "QueueType" }
    if yname == "class-name" { return "ClassName" }
    return ""
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queue-id"] = queue.QueueId
    leafs["queue-type"] = queue.QueueType
    leafs["class-name"] = queue.ClassName
    return leafs
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetYangName() string { return "queue" }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetParent() types.Entity { return queue.parent }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Queue) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters
// Queue limit parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Scaling profile ID. The type is interface{} with range: 0..4294967295.
    ScalingProfileId interface{}

    // Queue limit in kbytes.
    QueueLimit PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit

    // Config queue limit.
    ConfigQueueLimit PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetFilter() yfilter.YFilter { return queueLimitParameters.YFilter }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) SetFilter(yf yfilter.YFilter) { queueLimitParameters.YFilter = yf }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scaling-profile-id" { return "ScalingProfileId" }
    if yname == "queue-limit" { return "QueueLimit" }
    if yname == "config-queue-limit" { return "ConfigQueueLimit" }
    return ""
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetSegmentPath() string {
    return "queue-limit-parameters"
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue-limit" {
        return &queueLimitParameters.QueueLimit
    }
    if childYangName == "config-queue-limit" {
        return &queueLimitParameters.ConfigQueueLimit
    }
    return nil
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue-limit"] = &queueLimitParameters.QueueLimit
    children["config-queue-limit"] = &queueLimitParameters.ConfigQueueLimit
    return children
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = queueLimitParameters.ProfileId
    leafs["scaling-profile-id"] = queueLimitParameters.ScalingProfileId
    return leafs
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetYangName() string { return "queue-limit-parameters" }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) SetParent(parent types.Entity) { queueLimitParameters.parent = parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetParent() types.Entity { return queueLimitParameters.parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit
// Queue limit in kbytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetFilter() yfilter.YFilter { return queueLimit.YFilter }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) SetFilter(yf yfilter.YFilter) { queueLimit.YFilter = yf }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetSegmentPath() string {
    return "queue-limit"
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = queueLimit.Value
    leafs["unit"] = queueLimit.Unit
    return leafs
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetYangName() string { return "queue-limit" }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) SetParent(parent types.Entity) { queueLimit.parent = parent }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetParent() types.Entity { return queueLimit.parent }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_QueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit
// Config queue limit
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetFilter() yfilter.YFilter { return configQueueLimit.YFilter }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) SetFilter(yf yfilter.YFilter) { configQueueLimit.YFilter = yf }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetSegmentPath() string {
    return "config-queue-limit"
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = configQueueLimit.Value
    leafs["unit"] = configQueueLimit.Unit
    return leafs
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetYangName() string { return "config-queue-limit" }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) SetParent(parent types.Entity) { configQueueLimit.parent = parent }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetParent() types.Entity { return configQueueLimit.parent }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_QueueLimitParameters_ConfigQueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape
// Shape parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // CIR in kbps.
    Cir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir

    // Config bandwidth.
    ConfigBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth

    // CBS in bytes.
    Cbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs

    // PIR in kbps.
    Pir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir

    // PBS in bytes.
    Pbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "config-bandwidth" { return "ConfigBandwidth" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    return ""
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &shape.Cir
    }
    if childYangName == "config-bandwidth" {
        return &shape.ConfigBandwidth
    }
    if childYangName == "cbs" {
        return &shape.Cbs
    }
    if childYangName == "pir" {
        return &shape.Pir
    }
    if childYangName == "pbs" {
        return &shape.Pbs
    }
    return nil
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &shape.Cir
    children["config-bandwidth"] = &shape.ConfigBandwidth
    children["cbs"] = &shape.Cbs
    children["pir"] = &shape.Pir
    children["pbs"] = &shape.Pbs
    return children
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = shape.ProfileId
    return leafs
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetYangName() string { return "shape" }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetParent() types.Entity { return shape.parent }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir
// CIR in kbps
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cir) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth
// Config bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum bandwidth rate.
    MinimumRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetFilter() yfilter.YFilter { return configBandwidth.YFilter }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) SetFilter(yf yfilter.YFilter) { configBandwidth.YFilter = yf }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetGoName(yname string) string {
    if yname == "minimum-rate" { return "MinimumRate" }
    return ""
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetSegmentPath() string {
    return "config-bandwidth"
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minimum-rate" {
        return &configBandwidth.MinimumRate
    }
    return nil
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minimum-rate"] = &configBandwidth.MinimumRate
    return children
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetYangName() string { return "config-bandwidth" }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) SetParent(parent types.Entity) { configBandwidth.parent = parent }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetParent() types.Entity { return configBandwidth.parent }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate
// Minimum bandwidth rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetFilter() yfilter.YFilter { return minimumRate.YFilter }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) SetFilter(yf yfilter.YFilter) { minimumRate.YFilter = yf }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetSegmentPath() string {
    return "minimum-rate"
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minimumRate.Value
    leafs["unit"] = minimumRate.Unit
    return leafs
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetBundleName() string { return "cisco_ios_xr" }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetYangName() string { return "minimum-rate" }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) SetParent(parent types.Entity) { minimumRate.parent = parent }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetParent() types.Entity { return minimumRate.parent }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_ConfigBandwidth_MinimumRate) GetParentYangName() string { return "config-bandwidth" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs
// CBS in bytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Cbs) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir
// PIR in kbps
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pir) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs
// PBS in bytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Shape_Pbs) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police
// Police parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policer type. The type is TbAlgorithm.
    PolicerType interface{}

    // Police profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // CIR.
    Cir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir

    // CBS.
    Cbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs

    // PIR.
    Pir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir

    // PBS.
    Pbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs

    // Police config parameters.
    PoliceConfigParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetFilter() yfilter.YFilter { return police.YFilter }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) SetFilter(yf yfilter.YFilter) { police.YFilter = yf }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetGoName(yname string) string {
    if yname == "policer-type" { return "PolicerType" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    if yname == "police-config-parameters" { return "PoliceConfigParameters" }
    return ""
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetSegmentPath() string {
    return "police"
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &police.Cir
    }
    if childYangName == "cbs" {
        return &police.Cbs
    }
    if childYangName == "pir" {
        return &police.Pir
    }
    if childYangName == "pbs" {
        return &police.Pbs
    }
    if childYangName == "police-config-parameters" {
        return &police.PoliceConfigParameters
    }
    return nil
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &police.Cir
    children["cbs"] = &police.Cbs
    children["pir"] = &police.Pir
    children["pbs"] = &police.Pbs
    children["police-config-parameters"] = &police.PoliceConfigParameters
    return children
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policer-type"] = police.PolicerType
    leafs["profile-id"] = police.ProfileId
    return leafs
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetBundleName() string { return "cisco_ios_xr" }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetYangName() string { return "police" }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) SetParent(parent types.Entity) { police.parent = parent }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetParent() types.Entity { return police.parent }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir
// CIR
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs
// CBS
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Cbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir
// PIR
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs
// PBS
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_Pbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters
// Police config parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Average rate.
    AverageRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate

    // Peak rate.
    PeakRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate

    // Conform burst.
    ConformBurst PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst

    // Exceed burst.
    ExceedBurst PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetFilter() yfilter.YFilter { return policeConfigParameters.YFilter }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) SetFilter(yf yfilter.YFilter) { policeConfigParameters.YFilter = yf }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetGoName(yname string) string {
    if yname == "average-rate" { return "AverageRate" }
    if yname == "peak-rate" { return "PeakRate" }
    if yname == "conform-burst" { return "ConformBurst" }
    if yname == "exceed-burst" { return "ExceedBurst" }
    return ""
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetSegmentPath() string {
    return "police-config-parameters"
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "average-rate" {
        return &policeConfigParameters.AverageRate
    }
    if childYangName == "peak-rate" {
        return &policeConfigParameters.PeakRate
    }
    if childYangName == "conform-burst" {
        return &policeConfigParameters.ConformBurst
    }
    if childYangName == "exceed-burst" {
        return &policeConfigParameters.ExceedBurst
    }
    return nil
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["average-rate"] = &policeConfigParameters.AverageRate
    children["peak-rate"] = &policeConfigParameters.PeakRate
    children["conform-burst"] = &policeConfigParameters.ConformBurst
    children["exceed-burst"] = &policeConfigParameters.ExceedBurst
    return children
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetBundleName() string { return "cisco_ios_xr" }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetYangName() string { return "police-config-parameters" }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) SetParent(parent types.Entity) { policeConfigParameters.parent = parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetParent() types.Entity { return policeConfigParameters.parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate
// Average rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetFilter() yfilter.YFilter { return averageRate.YFilter }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) SetFilter(yf yfilter.YFilter) { averageRate.YFilter = yf }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetSegmentPath() string {
    return "average-rate"
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = averageRate.Value
    leafs["unit"] = averageRate.Unit
    return leafs
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetBundleName() string { return "cisco_ios_xr" }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetYangName() string { return "average-rate" }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) SetParent(parent types.Entity) { averageRate.parent = parent }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetParent() types.Entity { return averageRate.parent }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_AverageRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate
// Peak rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetFilter() yfilter.YFilter { return peakRate.YFilter }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) SetFilter(yf yfilter.YFilter) { peakRate.YFilter = yf }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetSegmentPath() string {
    return "peak-rate"
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = peakRate.Value
    leafs["unit"] = peakRate.Unit
    return leafs
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetBundleName() string { return "cisco_ios_xr" }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetYangName() string { return "peak-rate" }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) SetParent(parent types.Entity) { peakRate.parent = parent }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetParent() types.Entity { return peakRate.parent }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_PeakRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst
// Conform burst
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetFilter() yfilter.YFilter { return conformBurst.YFilter }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) SetFilter(yf yfilter.YFilter) { conformBurst.YFilter = yf }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetSegmentPath() string {
    return "conform-burst"
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = conformBurst.Value
    leafs["unit"] = conformBurst.Unit
    return leafs
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetBundleName() string { return "cisco_ios_xr" }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetYangName() string { return "conform-burst" }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) SetParent(parent types.Entity) { conformBurst.parent = parent }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetParent() types.Entity { return conformBurst.parent }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ConformBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst
// Exceed burst
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetFilter() yfilter.YFilter { return exceedBurst.YFilter }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) SetFilter(yf yfilter.YFilter) { exceedBurst.YFilter = yf }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetSegmentPath() string {
    return "exceed-burst"
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = exceedBurst.Value
    leafs["unit"] = exceedBurst.Unit
    return leafs
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetBundleName() string { return "cisco_ios_xr" }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetYangName() string { return "exceed-burst" }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) SetParent(parent types.Entity) { exceedBurst.parent = parent }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetParent() types.Entity { return exceedBurst.parent }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Police_PoliceConfigParameters_ExceedBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq
// WFQ parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WFQ profile. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Committed weight. The type is interface{} with range: 0..4294967295.
    CommittedWeight interface{}

    // Excess weight. The type is interface{} with range: 0..65535.
    ExcessWeight interface{}

    // Parent Excess ratio. The type is interface{} with range: 0..65535.
    ExcessRatio interface{}

    // Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Level. The type is interface{} with range: 0..255.
    Level interface{}

    // Parent bandwidth.
    ParentBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth

    // CFG Bandwidth.
    Bandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetFilter() yfilter.YFilter { return wfq.YFilter }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) SetFilter(yf yfilter.YFilter) { wfq.YFilter = yf }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "committed-weight" { return "CommittedWeight" }
    if yname == "excess-weight" { return "ExcessWeight" }
    if yname == "excess-ratio" { return "ExcessRatio" }
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "level" { return "Level" }
    if yname == "parent-bandwidth" { return "ParentBandwidth" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetSegmentPath() string {
    return "wfq"
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "parent-bandwidth" {
        return &wfq.ParentBandwidth
    }
    if childYangName == "bandwidth" {
        return &wfq.Bandwidth
    }
    return nil
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["parent-bandwidth"] = &wfq.ParentBandwidth
    children["bandwidth"] = &wfq.Bandwidth
    return children
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = wfq.ProfileId
    leafs["committed-weight"] = wfq.CommittedWeight
    leafs["excess-weight"] = wfq.ExcessWeight
    leafs["excess-ratio"] = wfq.ExcessRatio
    leafs["chunk-id"] = wfq.ChunkId
    leafs["level"] = wfq.Level
    return leafs
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetBundleName() string { return "cisco_ios_xr" }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetYangName() string { return "wfq" }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) SetParent(parent types.Entity) { wfq.parent = parent }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetParent() types.Entity { return wfq.parent }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth
// Parent bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetFilter() yfilter.YFilter { return parentBandwidth.YFilter }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) SetFilter(yf yfilter.YFilter) { parentBandwidth.YFilter = yf }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetSegmentPath() string {
    return "parent-bandwidth"
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = parentBandwidth.Value
    leafs["unit"] = parentBandwidth.Unit
    return leafs
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetYangName() string { return "parent-bandwidth" }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) SetParent(parent types.Entity) { parentBandwidth.parent = parent }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetParent() types.Entity { return parentBandwidth.parent }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_ParentBandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth
// CFG Bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = bandwidth.Value
    leafs["unit"] = bandwidth.Unit
    return leafs
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wfq_Bandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred
// WRED parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED type. The type is Wred.
    Type interface{}

    // Number of curves. The type is interface{} with range: 0..65535.
    CurveXr interface{}

    // Table ID. The type is interface{} with range: 0..255.
    TableId interface{}

    // Profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Scaling profile ID. The type is interface{} with range: 0..4294967295.
    ScalingProfileId interface{}

    // Curve details. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve.
    Curve []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetFilter() yfilter.YFilter { return wred.YFilter }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) SetFilter(yf yfilter.YFilter) { wred.YFilter = yf }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "curve-xr" { return "CurveXr" }
    if yname == "table-id" { return "TableId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scaling-profile-id" { return "ScalingProfileId" }
    if yname == "curve" { return "Curve" }
    return ""
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetSegmentPath() string {
    return "wred"
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "curve" {
        for _, c := range wred.Curve {
            if wred.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve{}
        wred.Curve = append(wred.Curve, child)
        return &wred.Curve[len(wred.Curve)-1]
    }
    return nil
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range wred.Curve {
        children[wred.Curve[i].GetSegmentPath()] = &wred.Curve[i]
    }
    return children
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = wred.Type
    leafs["curve-xr"] = wred.CurveXr
    leafs["table-id"] = wred.TableId
    leafs["profile-id"] = wred.ProfileId
    leafs["scaling-profile-id"] = wred.ScalingProfileId
    return leafs
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetBundleName() string { return "cisco_ios_xr" }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetYangName() string { return "wred" }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) SetParent(parent types.Entity) { wred.parent = parent }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetParent() types.Entity { return wred.parent }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve
// Curve details
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED precedence match if precedence start value equals to end value Format:
    // <start-value> , else range Format: <start-value> <end-value>. The type is
    // string.
    Match interface{}

    // Minimum threshold.
    MinThreshold PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold

    // Minimum threshold WRED context.
    MinThresholdUserConfig PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig

    // Maximum threshold.
    MaxThreshold PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold

    // Maximum threshold WRED context.
    MaxThresholdUserConfig PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetFilter() yfilter.YFilter { return curve.YFilter }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) SetFilter(yf yfilter.YFilter) { curve.YFilter = yf }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetGoName(yname string) string {
    if yname == "match" { return "Match" }
    if yname == "min-threshold" { return "MinThreshold" }
    if yname == "min-threshold-user-config" { return "MinThresholdUserConfig" }
    if yname == "max-threshold" { return "MaxThreshold" }
    if yname == "max-threshold-user-config" { return "MaxThresholdUserConfig" }
    return ""
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetSegmentPath() string {
    return "curve"
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-threshold" {
        return &curve.MinThreshold
    }
    if childYangName == "min-threshold-user-config" {
        return &curve.MinThresholdUserConfig
    }
    if childYangName == "max-threshold" {
        return &curve.MaxThreshold
    }
    if childYangName == "max-threshold-user-config" {
        return &curve.MaxThresholdUserConfig
    }
    return nil
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-threshold"] = &curve.MinThreshold
    children["min-threshold-user-config"] = &curve.MinThresholdUserConfig
    children["max-threshold"] = &curve.MaxThreshold
    children["max-threshold-user-config"] = &curve.MaxThresholdUserConfig
    return children
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["match"] = curve.Match
    return leafs
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetBundleName() string { return "cisco_ios_xr" }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetYangName() string { return "curve" }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) SetParent(parent types.Entity) { curve.parent = parent }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetParent() types.Entity { return curve.parent }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve) GetParentYangName() string { return "wred" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold
// Minimum threshold
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetFilter() yfilter.YFilter { return minThreshold.YFilter }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) SetFilter(yf yfilter.YFilter) { minThreshold.YFilter = yf }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetSegmentPath() string {
    return "min-threshold"
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThreshold.Value
    leafs["unit"] = minThreshold.Unit
    return leafs
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetYangName() string { return "min-threshold" }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) SetParent(parent types.Entity) { minThreshold.parent = parent }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetParent() types.Entity { return minThreshold.parent }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig
// Minimum threshold WRED context
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetFilter() yfilter.YFilter { return minThresholdUserConfig.YFilter }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) SetFilter(yf yfilter.YFilter) { minThresholdUserConfig.YFilter = yf }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetSegmentPath() string {
    return "min-threshold-user-config"
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThresholdUserConfig.Value
    leafs["unit"] = minThresholdUserConfig.Unit
    return leafs
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetYangName() string { return "min-threshold-user-config" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) SetParent(parent types.Entity) { minThresholdUserConfig.parent = parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetParent() types.Entity { return minThresholdUserConfig.parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MinThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold
// Maximum threshold
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetFilter() yfilter.YFilter { return maxThreshold.YFilter }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) SetFilter(yf yfilter.YFilter) { maxThreshold.YFilter = yf }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetSegmentPath() string {
    return "max-threshold"
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThreshold.Value
    leafs["unit"] = maxThreshold.Unit
    return leafs
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetYangName() string { return "max-threshold" }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) SetParent(parent types.Entity) { maxThreshold.parent = parent }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetParent() types.Entity { return maxThreshold.parent }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig
// Maximum threshold WRED context
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetFilter() yfilter.YFilter { return maxThresholdUserConfig.YFilter }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) SetFilter(yf yfilter.YFilter) { maxThresholdUserConfig.YFilter = yf }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetSegmentPath() string {
    return "max-threshold-user-config"
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThresholdUserConfig.Value
    leafs["unit"] = maxThresholdUserConfig.Unit
    return leafs
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetYangName() string { return "max-threshold-user-config" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) SetParent(parent types.Entity) { maxThresholdUserConfig.parent = parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetParent() types.Entity { return maxThresholdUserConfig.parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Wred_Curve_MaxThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark
// Mark parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Child mark only.
    ChildMark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark

    // Child police conform mark.
    PoliceConform PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform

    // Child police exceed mark.
    PoliceExceed PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed

    // Child police violate mark.
    PoliceViolate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate

    // Parent mark only.
    ParentMark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark

    // Parent police conform mark.
    ParentPoliceConform PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform

    // Parent police exceed mark.
    ParentPoliceExceed PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed

    // Parent police violate mark.
    ParentPoliceViolate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetFilter() yfilter.YFilter { return mark.YFilter }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) SetFilter(yf yfilter.YFilter) { mark.YFilter = yf }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetGoName(yname string) string {
    if yname == "child-mark" { return "ChildMark" }
    if yname == "police-conform" { return "PoliceConform" }
    if yname == "police-exceed" { return "PoliceExceed" }
    if yname == "police-violate" { return "PoliceViolate" }
    if yname == "parent-mark" { return "ParentMark" }
    if yname == "parent-police-conform" { return "ParentPoliceConform" }
    if yname == "parent-police-exceed" { return "ParentPoliceExceed" }
    if yname == "parent-police-violate" { return "ParentPoliceViolate" }
    return ""
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetSegmentPath() string {
    return "mark"
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "child-mark" {
        return &mark.ChildMark
    }
    if childYangName == "police-conform" {
        return &mark.PoliceConform
    }
    if childYangName == "police-exceed" {
        return &mark.PoliceExceed
    }
    if childYangName == "police-violate" {
        return &mark.PoliceViolate
    }
    if childYangName == "parent-mark" {
        return &mark.ParentMark
    }
    if childYangName == "parent-police-conform" {
        return &mark.ParentPoliceConform
    }
    if childYangName == "parent-police-exceed" {
        return &mark.ParentPoliceExceed
    }
    if childYangName == "parent-police-violate" {
        return &mark.ParentPoliceViolate
    }
    return nil
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["child-mark"] = &mark.ChildMark
    children["police-conform"] = &mark.PoliceConform
    children["police-exceed"] = &mark.PoliceExceed
    children["police-violate"] = &mark.PoliceViolate
    children["parent-mark"] = &mark.ParentMark
    children["parent-police-conform"] = &mark.ParentPoliceConform
    children["parent-police-exceed"] = &mark.ParentPoliceExceed
    children["parent-police-violate"] = &mark.ParentPoliceViolate
    return children
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetBundleName() string { return "cisco_ios_xr" }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetYangName() string { return "mark" }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) SetParent(parent types.Entity) { mark.parent = parent }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetParent() types.Entity { return mark.parent }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark) GetParentYangName() string { return "qos-show-ea-st-v1" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark
// Child mark only
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetFilter() yfilter.YFilter { return childMark.YFilter }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) SetFilter(yf yfilter.YFilter) { childMark.YFilter = yf }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetSegmentPath() string {
    return "child-mark"
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range childMark.MarkDetail {
            if childMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail{}
        childMark.MarkDetail = append(childMark.MarkDetail, child)
        return &childMark.MarkDetail[len(childMark.MarkDetail)-1]
    }
    return nil
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range childMark.MarkDetail {
        children[childMark.MarkDetail[i].GetSegmentPath()] = &childMark.MarkDetail[i]
    }
    return children
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = childMark.ActionType
    return leafs
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetBundleName() string { return "cisco_ios_xr" }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetYangName() string { return "child-mark" }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) SetParent(parent types.Entity) { childMark.parent = parent }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetParent() types.Entity { return childMark.parent }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ChildMark_MarkDetail) GetParentYangName() string { return "child-mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform
// Child police conform mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetFilter() yfilter.YFilter { return policeConform.YFilter }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) SetFilter(yf yfilter.YFilter) { policeConform.YFilter = yf }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetSegmentPath() string {
    return "police-conform"
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeConform.MarkDetail {
            if policeConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail{}
        policeConform.MarkDetail = append(policeConform.MarkDetail, child)
        return &policeConform.MarkDetail[len(policeConform.MarkDetail)-1]
    }
    return nil
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeConform.MarkDetail {
        children[policeConform.MarkDetail[i].GetSegmentPath()] = &policeConform.MarkDetail[i]
    }
    return children
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeConform.ActionType
    return leafs
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetYangName() string { return "police-conform" }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) SetParent(parent types.Entity) { policeConform.parent = parent }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetParent() types.Entity { return policeConform.parent }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceConform_MarkDetail) GetParentYangName() string { return "police-conform" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed
// Child police exceed mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetFilter() yfilter.YFilter { return policeExceed.YFilter }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) SetFilter(yf yfilter.YFilter) { policeExceed.YFilter = yf }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetSegmentPath() string {
    return "police-exceed"
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeExceed.MarkDetail {
            if policeExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail{}
        policeExceed.MarkDetail = append(policeExceed.MarkDetail, child)
        return &policeExceed.MarkDetail[len(policeExceed.MarkDetail)-1]
    }
    return nil
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeExceed.MarkDetail {
        children[policeExceed.MarkDetail[i].GetSegmentPath()] = &policeExceed.MarkDetail[i]
    }
    return children
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeExceed.ActionType
    return leafs
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetYangName() string { return "police-exceed" }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) SetParent(parent types.Entity) { policeExceed.parent = parent }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetParent() types.Entity { return policeExceed.parent }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceExceed_MarkDetail) GetParentYangName() string { return "police-exceed" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate
// Child police violate mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetFilter() yfilter.YFilter { return policeViolate.YFilter }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) SetFilter(yf yfilter.YFilter) { policeViolate.YFilter = yf }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetSegmentPath() string {
    return "police-violate"
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeViolate.MarkDetail {
            if policeViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail{}
        policeViolate.MarkDetail = append(policeViolate.MarkDetail, child)
        return &policeViolate.MarkDetail[len(policeViolate.MarkDetail)-1]
    }
    return nil
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeViolate.MarkDetail {
        children[policeViolate.MarkDetail[i].GetSegmentPath()] = &policeViolate.MarkDetail[i]
    }
    return children
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeViolate.ActionType
    return leafs
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetYangName() string { return "police-violate" }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) SetParent(parent types.Entity) { policeViolate.parent = parent }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetParent() types.Entity { return policeViolate.parent }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_PoliceViolate_MarkDetail) GetParentYangName() string { return "police-violate" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark
// Parent mark only
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetFilter() yfilter.YFilter { return parentMark.YFilter }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) SetFilter(yf yfilter.YFilter) { parentMark.YFilter = yf }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetSegmentPath() string {
    return "parent-mark"
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentMark.MarkDetail {
            if parentMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail{}
        parentMark.MarkDetail = append(parentMark.MarkDetail, child)
        return &parentMark.MarkDetail[len(parentMark.MarkDetail)-1]
    }
    return nil
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentMark.MarkDetail {
        children[parentMark.MarkDetail[i].GetSegmentPath()] = &parentMark.MarkDetail[i]
    }
    return children
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentMark.ActionType
    return leafs
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetBundleName() string { return "cisco_ios_xr" }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetYangName() string { return "parent-mark" }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) SetParent(parent types.Entity) { parentMark.parent = parent }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetParent() types.Entity { return parentMark.parent }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentMark_MarkDetail) GetParentYangName() string { return "parent-mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform
// Parent police conform mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetFilter() yfilter.YFilter { return parentPoliceConform.YFilter }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) SetFilter(yf yfilter.YFilter) { parentPoliceConform.YFilter = yf }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetSegmentPath() string {
    return "parent-police-conform"
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceConform.MarkDetail {
            if parentPoliceConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail{}
        parentPoliceConform.MarkDetail = append(parentPoliceConform.MarkDetail, child)
        return &parentPoliceConform.MarkDetail[len(parentPoliceConform.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceConform.MarkDetail {
        children[parentPoliceConform.MarkDetail[i].GetSegmentPath()] = &parentPoliceConform.MarkDetail[i]
    }
    return children
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceConform.ActionType
    return leafs
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetYangName() string { return "parent-police-conform" }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) SetParent(parent types.Entity) { parentPoliceConform.parent = parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetParent() types.Entity { return parentPoliceConform.parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceConform_MarkDetail) GetParentYangName() string { return "parent-police-conform" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed
// Parent police exceed mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetFilter() yfilter.YFilter { return parentPoliceExceed.YFilter }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) SetFilter(yf yfilter.YFilter) { parentPoliceExceed.YFilter = yf }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetSegmentPath() string {
    return "parent-police-exceed"
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceExceed.MarkDetail {
            if parentPoliceExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail{}
        parentPoliceExceed.MarkDetail = append(parentPoliceExceed.MarkDetail, child)
        return &parentPoliceExceed.MarkDetail[len(parentPoliceExceed.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceExceed.MarkDetail {
        children[parentPoliceExceed.MarkDetail[i].GetSegmentPath()] = &parentPoliceExceed.MarkDetail[i]
    }
    return children
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceExceed.ActionType
    return leafs
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetYangName() string { return "parent-police-exceed" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) SetParent(parent types.Entity) { parentPoliceExceed.parent = parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetParent() types.Entity { return parentPoliceExceed.parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceExceed_MarkDetail) GetParentYangName() string { return "parent-police-exceed" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate
// Parent police violate mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetFilter() yfilter.YFilter { return parentPoliceViolate.YFilter }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) SetFilter(yf yfilter.YFilter) { parentPoliceViolate.YFilter = yf }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetSegmentPath() string {
    return "parent-police-violate"
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceViolate.MarkDetail {
            if parentPoliceViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail{}
        parentPoliceViolate.MarkDetail = append(parentPoliceViolate.MarkDetail, child)
        return &parentPoliceViolate.MarkDetail[len(parentPoliceViolate.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceViolate.MarkDetail {
        children[parentPoliceViolate.MarkDetail[i].GetSegmentPath()] = &parentPoliceViolate.MarkDetail[i]
    }
    return children
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceViolate.ActionType
    return leafs
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetYangName() string { return "parent-police-violate" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) SetParent(parent types.Entity) { parentPoliceViolate.parent = parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetParent() types.Entity { return parentPoliceViolate.parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_Policy_QosShowEaStV1_Mark_ParentPoliceViolate_MarkDetail) GetParentYangName() string { return "parent-police-violate" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon
// Typhoon QoS policy details
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // qos show ea st v2. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2.
    QosShowEaStV2 []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetFilter() yfilter.YFilter { return policyTyphoon.YFilter }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) SetFilter(yf yfilter.YFilter) { policyTyphoon.YFilter = yf }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetGoName(yname string) string {
    if yname == "qos-show-ea-st-v2" { return "QosShowEaStV2" }
    return ""
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetSegmentPath() string {
    return "policy-typhoon"
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos-show-ea-st-v2" {
        for _, c := range policyTyphoon.QosShowEaStV2 {
            if policyTyphoon.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2{}
        policyTyphoon.QosShowEaStV2 = append(policyTyphoon.QosShowEaStV2, child)
        return &policyTyphoon.QosShowEaStV2[len(policyTyphoon.QosShowEaStV2)-1]
    }
    return nil
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policyTyphoon.QosShowEaStV2 {
        children[policyTyphoon.QosShowEaStV2[i].GetSegmentPath()] = &policyTyphoon.QosShowEaStV2[i]
    }
    return children
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetBundleName() string { return "cisco_ios_xr" }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetYangName() string { return "policy-typhoon" }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) SetParent(parent types.Entity) { policyTyphoon.parent = parent }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetParent() types.Entity { return policyTyphoon.parent }

func (policyTyphoon *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon) GetParentYangName() string { return "details" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2
// qos show ea st v2
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class level. The type is interface{} with range: 0..255.
    ClassLevel interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}

    // Policy name. The type is string with length: 0..65.
    PolicyName interface{}

    // Parent policy name. The type is string with length: 0..65.
    ParentPolicyName interface{}

    // Parent class name. The type is string with length: 0..65.
    ParentClassName interface{}

    // Queue parameters.
    Queue PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue

    // Queue limit parameters.
    QueueLimitParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters

    // Shape parameters.
    Shape PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape

    // Police parameters.
    Police PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police

    // WFQ parameters.
    Wfq PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq

    // WRED parameters.
    Wred PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred

    // Mark parameters.
    Mark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetFilter() yfilter.YFilter { return qosShowEaStV2.YFilter }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) SetFilter(yf yfilter.YFilter) { qosShowEaStV2.YFilter = yf }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetGoName(yname string) string {
    if yname == "class-level" { return "ClassLevel" }
    if yname == "class-name" { return "ClassName" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "parent-policy-name" { return "ParentPolicyName" }
    if yname == "parent-class-name" { return "ParentClassName" }
    if yname == "queue" { return "Queue" }
    if yname == "queue-limit-parameters" { return "QueueLimitParameters" }
    if yname == "shape" { return "Shape" }
    if yname == "police" { return "Police" }
    if yname == "wfq" { return "Wfq" }
    if yname == "wred" { return "Wred" }
    if yname == "mark" { return "Mark" }
    return ""
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetSegmentPath() string {
    return "qos-show-ea-st-v2"
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue" {
        return &qosShowEaStV2.Queue
    }
    if childYangName == "queue-limit-parameters" {
        return &qosShowEaStV2.QueueLimitParameters
    }
    if childYangName == "shape" {
        return &qosShowEaStV2.Shape
    }
    if childYangName == "police" {
        return &qosShowEaStV2.Police
    }
    if childYangName == "wfq" {
        return &qosShowEaStV2.Wfq
    }
    if childYangName == "wred" {
        return &qosShowEaStV2.Wred
    }
    if childYangName == "mark" {
        return &qosShowEaStV2.Mark
    }
    return nil
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue"] = &qosShowEaStV2.Queue
    children["queue-limit-parameters"] = &qosShowEaStV2.QueueLimitParameters
    children["shape"] = &qosShowEaStV2.Shape
    children["police"] = &qosShowEaStV2.Police
    children["wfq"] = &qosShowEaStV2.Wfq
    children["wred"] = &qosShowEaStV2.Wred
    children["mark"] = &qosShowEaStV2.Mark
    return children
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-level"] = qosShowEaStV2.ClassLevel
    leafs["class-name"] = qosShowEaStV2.ClassName
    leafs["policy-name"] = qosShowEaStV2.PolicyName
    leafs["parent-policy-name"] = qosShowEaStV2.ParentPolicyName
    leafs["parent-class-name"] = qosShowEaStV2.ParentClassName
    return leafs
}

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetBundleName() string { return "cisco_ios_xr" }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetYangName() string { return "qos-show-ea-st-v2" }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) SetParent(parent types.Entity) { qosShowEaStV2.parent = parent }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetParent() types.Entity { return qosShowEaStV2.parent }

func (qosShowEaStV2 *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2) GetParentYangName() string { return "policy-typhoon" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue
// Queue parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Queue ID. The type is interface{} with range: 0..4294967295.
    QueueId interface{}

    // Queue type. The type is Queue.
    QueueType interface{}

    // Class name. The type is string with length: 0..65.
    ClassName interface{}
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetGoName(yname string) string {
    if yname == "queue-id" { return "QueueId" }
    if yname == "queue-type" { return "QueueType" }
    if yname == "class-name" { return "ClassName" }
    return ""
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["queue-id"] = queue.QueueId
    leafs["queue-type"] = queue.QueueType
    leafs["class-name"] = queue.ClassName
    return leafs
}

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetYangName() string { return "queue" }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetParent() types.Entity { return queue.parent }

func (queue *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Queue) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters
// Queue limit parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Absolute Index. The type is interface{} with range: 0..65535.
    AbsoluteIndex interface{}

    // Template ID. The type is interface{} with range: 0..65535.
    TemplateId interface{}

    // Curve ID. The type is interface{} with range: 0..65535.
    CurveId interface{}

    // Queue limit in kbytes.
    QueueLimit PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit

    // Config queue limit.
    ConfigQueueLimit PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetFilter() yfilter.YFilter { return queueLimitParameters.YFilter }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) SetFilter(yf yfilter.YFilter) { queueLimitParameters.YFilter = yf }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetGoName(yname string) string {
    if yname == "absolute-index" { return "AbsoluteIndex" }
    if yname == "template-id" { return "TemplateId" }
    if yname == "curve-id" { return "CurveId" }
    if yname == "queue-limit" { return "QueueLimit" }
    if yname == "config-queue-limit" { return "ConfigQueueLimit" }
    return ""
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetSegmentPath() string {
    return "queue-limit-parameters"
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue-limit" {
        return &queueLimitParameters.QueueLimit
    }
    if childYangName == "config-queue-limit" {
        return &queueLimitParameters.ConfigQueueLimit
    }
    return nil
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["queue-limit"] = &queueLimitParameters.QueueLimit
    children["config-queue-limit"] = &queueLimitParameters.ConfigQueueLimit
    return children
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["absolute-index"] = queueLimitParameters.AbsoluteIndex
    leafs["template-id"] = queueLimitParameters.TemplateId
    leafs["curve-id"] = queueLimitParameters.CurveId
    return leafs
}

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetYangName() string { return "queue-limit-parameters" }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) SetParent(parent types.Entity) { queueLimitParameters.parent = parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetParent() types.Entity { return queueLimitParameters.parent }

func (queueLimitParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit
// Queue limit in kbytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetFilter() yfilter.YFilter { return queueLimit.YFilter }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) SetFilter(yf yfilter.YFilter) { queueLimit.YFilter = yf }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetSegmentPath() string {
    return "queue-limit"
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = queueLimit.Value
    leafs["unit"] = queueLimit.Unit
    return leafs
}

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetYangName() string { return "queue-limit" }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) SetParent(parent types.Entity) { queueLimit.parent = parent }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetParent() types.Entity { return queueLimit.parent }

func (queueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_QueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit
// Config queue limit
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetFilter() yfilter.YFilter { return configQueueLimit.YFilter }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) SetFilter(yf yfilter.YFilter) { configQueueLimit.YFilter = yf }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetSegmentPath() string {
    return "config-queue-limit"
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = configQueueLimit.Value
    leafs["unit"] = configQueueLimit.Unit
    return leafs
}

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetBundleName() string { return "cisco_ios_xr" }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetYangName() string { return "config-queue-limit" }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) SetParent(parent types.Entity) { configQueueLimit.parent = parent }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetParent() types.Entity { return configQueueLimit.parent }

func (configQueueLimit *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_QueueLimitParameters_ConfigQueueLimit) GetParentYangName() string { return "queue-limit-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape
// Shape parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // CIR Shaper type. The type is ShapeProfiletypeV2.
    CirShapeType interface{}

    // PIR Shaper type. The type is ShapeProfiletypeV2.
    PirShapeType interface{}

    // CIR shaper params.
    CirShape PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape

    // PIR shaper params.
    PirShape PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetGoName(yname string) string {
    if yname == "cir-shape-type" { return "CirShapeType" }
    if yname == "pir-shape-type" { return "PirShapeType" }
    if yname == "cir-shape" { return "CirShape" }
    if yname == "pir-shape" { return "PirShape" }
    return ""
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir-shape" {
        return &shape.CirShape
    }
    if childYangName == "pir-shape" {
        return &shape.PirShape
    }
    return nil
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir-shape"] = &shape.CirShape
    children["pir-shape"] = &shape.PirShape
    return children
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cir-shape-type"] = shape.CirShapeType
    leafs["pir-shape-type"] = shape.PirShapeType
    return leafs
}

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetYangName() string { return "shape" }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetParent() types.Entity { return shape.parent }

func (shape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape
// CIR shaper params
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // Scale Factor. The type is interface{} with range: 0..65535.
    ScaleFactor interface{}

    // CIR in kbps.
    Cir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir

    // Config bandwidth.
    ConfigBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth

    // CBS in bytes.
    Cbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetFilter() yfilter.YFilter { return cirShape.YFilter }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) SetFilter(yf yfilter.YFilter) { cirShape.YFilter = yf }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetGoName(yname string) string {
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scale-factor" { return "ScaleFactor" }
    if yname == "cir" { return "Cir" }
    if yname == "config-bandwidth" { return "ConfigBandwidth" }
    if yname == "cbs" { return "Cbs" }
    return ""
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetSegmentPath() string {
    return "cir-shape"
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &cirShape.Cir
    }
    if childYangName == "config-bandwidth" {
        return &cirShape.ConfigBandwidth
    }
    if childYangName == "cbs" {
        return &cirShape.Cbs
    }
    return nil
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &cirShape.Cir
    children["config-bandwidth"] = &cirShape.ConfigBandwidth
    children["cbs"] = &cirShape.Cbs
    return children
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["chunk-id"] = cirShape.ChunkId
    leafs["profile-id"] = cirShape.ProfileId
    leafs["scale-factor"] = cirShape.ScaleFactor
    return leafs
}

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetBundleName() string { return "cisco_ios_xr" }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetYangName() string { return "cir-shape" }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) SetParent(parent types.Entity) { cirShape.parent = parent }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetParent() types.Entity { return cirShape.parent }

func (cirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir
// CIR in kbps
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cir) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth
// Config bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum bandwidth rate.
    MinimumRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetFilter() yfilter.YFilter { return configBandwidth.YFilter }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) SetFilter(yf yfilter.YFilter) { configBandwidth.YFilter = yf }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetGoName(yname string) string {
    if yname == "minimum-rate" { return "MinimumRate" }
    return ""
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetSegmentPath() string {
    return "config-bandwidth"
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minimum-rate" {
        return &configBandwidth.MinimumRate
    }
    return nil
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minimum-rate"] = &configBandwidth.MinimumRate
    return children
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetYangName() string { return "config-bandwidth" }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) SetParent(parent types.Entity) { configBandwidth.parent = parent }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetParent() types.Entity { return configBandwidth.parent }

func (configBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate
// Minimum bandwidth rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetFilter() yfilter.YFilter { return minimumRate.YFilter }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) SetFilter(yf yfilter.YFilter) { minimumRate.YFilter = yf }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetSegmentPath() string {
    return "minimum-rate"
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minimumRate.Value
    leafs["unit"] = minimumRate.Unit
    return leafs
}

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetBundleName() string { return "cisco_ios_xr" }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetYangName() string { return "minimum-rate" }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) SetParent(parent types.Entity) { minimumRate.parent = parent }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetParent() types.Entity { return minimumRate.parent }

func (minimumRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_ConfigBandwidth_MinimumRate) GetParentYangName() string { return "config-bandwidth" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs
// CBS in bytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_CirShape_Cbs) GetParentYangName() string { return "cir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape
// PIR shaper params
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Shape Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Shape profile ID. The type is interface{} with range: 0..65535.
    ProfileId interface{}

    // Scale Factor. The type is interface{} with range: 0..65535.
    ScaleFactor interface{}

    // PIR in kbps.
    Pir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir

    // PBS in bytes.
    Pbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetFilter() yfilter.YFilter { return pirShape.YFilter }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) SetFilter(yf yfilter.YFilter) { pirShape.YFilter = yf }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetGoName(yname string) string {
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "scale-factor" { return "ScaleFactor" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    return ""
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetSegmentPath() string {
    return "pir-shape"
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pir" {
        return &pirShape.Pir
    }
    if childYangName == "pbs" {
        return &pirShape.Pbs
    }
    return nil
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pir"] = &pirShape.Pir
    children["pbs"] = &pirShape.Pbs
    return children
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["chunk-id"] = pirShape.ChunkId
    leafs["profile-id"] = pirShape.ProfileId
    leafs["scale-factor"] = pirShape.ScaleFactor
    return leafs
}

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetBundleName() string { return "cisco_ios_xr" }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetYangName() string { return "pir-shape" }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) SetParent(parent types.Entity) { pirShape.parent = parent }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetParent() types.Entity { return pirShape.parent }

func (pirShape *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape) GetParentYangName() string { return "shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir
// PIR in kbps
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pir) GetParentYangName() string { return "pir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs
// PBS in bytes
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Shape_PirShape_Pbs) GetParentYangName() string { return "pir-shape" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police
// Police parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policer type. The type is TbAlgorithm.
    PolicerType interface{}

    // Police profile ID. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // CIR.
    Cir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir

    // CBS.
    Cbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs

    // PIR.
    Pir PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir

    // PBS.
    Pbs PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs

    // Police config parameters.
    PoliceConfigParameters PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetFilter() yfilter.YFilter { return police.YFilter }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) SetFilter(yf yfilter.YFilter) { police.YFilter = yf }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetGoName(yname string) string {
    if yname == "policer-type" { return "PolicerType" }
    if yname == "profile-id" { return "ProfileId" }
    if yname == "cir" { return "Cir" }
    if yname == "cbs" { return "Cbs" }
    if yname == "pir" { return "Pir" }
    if yname == "pbs" { return "Pbs" }
    if yname == "police-config-parameters" { return "PoliceConfigParameters" }
    return ""
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetSegmentPath() string {
    return "police"
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cir" {
        return &police.Cir
    }
    if childYangName == "cbs" {
        return &police.Cbs
    }
    if childYangName == "pir" {
        return &police.Pir
    }
    if childYangName == "pbs" {
        return &police.Pbs
    }
    if childYangName == "police-config-parameters" {
        return &police.PoliceConfigParameters
    }
    return nil
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cir"] = &police.Cir
    children["cbs"] = &police.Cbs
    children["pir"] = &police.Pir
    children["pbs"] = &police.Pbs
    children["police-config-parameters"] = &police.PoliceConfigParameters
    return children
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policer-type"] = police.PolicerType
    leafs["profile-id"] = police.ProfileId
    return leafs
}

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetBundleName() string { return "cisco_ios_xr" }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetYangName() string { return "police" }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) SetParent(parent types.Entity) { police.parent = parent }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetParent() types.Entity { return police.parent }

func (police *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir
// CIR
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetFilter() yfilter.YFilter { return cir.YFilter }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) SetFilter(yf yfilter.YFilter) { cir.YFilter = yf }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetSegmentPath() string {
    return "cir"
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cir.Value
    leafs["unit"] = cir.Unit
    return leafs
}

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetBundleName() string { return "cisco_ios_xr" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetYangName() string { return "cir" }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) SetParent(parent types.Entity) { cir.parent = parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetParent() types.Entity { return cir.parent }

func (cir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs
// CBS
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetFilter() yfilter.YFilter { return cbs.YFilter }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) SetFilter(yf yfilter.YFilter) { cbs.YFilter = yf }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetSegmentPath() string {
    return "cbs"
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = cbs.Value
    leafs["unit"] = cbs.Unit
    return leafs
}

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetBundleName() string { return "cisco_ios_xr" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetYangName() string { return "cbs" }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) SetParent(parent types.Entity) { cbs.parent = parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetParent() types.Entity { return cbs.parent }

func (cbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Cbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir
// PIR
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetFilter() yfilter.YFilter { return pir.YFilter }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) SetFilter(yf yfilter.YFilter) { pir.YFilter = yf }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetSegmentPath() string {
    return "pir"
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pir.Value
    leafs["unit"] = pir.Unit
    return leafs
}

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetBundleName() string { return "cisco_ios_xr" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetYangName() string { return "pir" }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) SetParent(parent types.Entity) { pir.parent = parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetParent() types.Entity { return pir.parent }

func (pir *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pir) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs
// PBS
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetFilter() yfilter.YFilter { return pbs.YFilter }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) SetFilter(yf yfilter.YFilter) { pbs.YFilter = yf }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetSegmentPath() string {
    return "pbs"
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = pbs.Value
    leafs["unit"] = pbs.Unit
    return leafs
}

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetBundleName() string { return "cisco_ios_xr" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetYangName() string { return "pbs" }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) SetParent(parent types.Entity) { pbs.parent = parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetParent() types.Entity { return pbs.parent }

func (pbs *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_Pbs) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters
// Police config parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Average rate.
    AverageRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate

    // Peak rate.
    PeakRate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate

    // Conform burst.
    ConformBurst PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst

    // Exceed burst.
    ExceedBurst PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetFilter() yfilter.YFilter { return policeConfigParameters.YFilter }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) SetFilter(yf yfilter.YFilter) { policeConfigParameters.YFilter = yf }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetGoName(yname string) string {
    if yname == "average-rate" { return "AverageRate" }
    if yname == "peak-rate" { return "PeakRate" }
    if yname == "conform-burst" { return "ConformBurst" }
    if yname == "exceed-burst" { return "ExceedBurst" }
    return ""
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetSegmentPath() string {
    return "police-config-parameters"
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "average-rate" {
        return &policeConfigParameters.AverageRate
    }
    if childYangName == "peak-rate" {
        return &policeConfigParameters.PeakRate
    }
    if childYangName == "conform-burst" {
        return &policeConfigParameters.ConformBurst
    }
    if childYangName == "exceed-burst" {
        return &policeConfigParameters.ExceedBurst
    }
    return nil
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["average-rate"] = &policeConfigParameters.AverageRate
    children["peak-rate"] = &policeConfigParameters.PeakRate
    children["conform-burst"] = &policeConfigParameters.ConformBurst
    children["exceed-burst"] = &policeConfigParameters.ExceedBurst
    return children
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetBundleName() string { return "cisco_ios_xr" }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetYangName() string { return "police-config-parameters" }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) SetParent(parent types.Entity) { policeConfigParameters.parent = parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetParent() types.Entity { return policeConfigParameters.parent }

func (policeConfigParameters *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters) GetParentYangName() string { return "police" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate
// Average rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetFilter() yfilter.YFilter { return averageRate.YFilter }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) SetFilter(yf yfilter.YFilter) { averageRate.YFilter = yf }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetSegmentPath() string {
    return "average-rate"
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = averageRate.Value
    leafs["unit"] = averageRate.Unit
    return leafs
}

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetBundleName() string { return "cisco_ios_xr" }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetYangName() string { return "average-rate" }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) SetParent(parent types.Entity) { averageRate.parent = parent }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetParent() types.Entity { return averageRate.parent }

func (averageRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_AverageRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate
// Peak rate
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetFilter() yfilter.YFilter { return peakRate.YFilter }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) SetFilter(yf yfilter.YFilter) { peakRate.YFilter = yf }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetSegmentPath() string {
    return "peak-rate"
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = peakRate.Value
    leafs["unit"] = peakRate.Unit
    return leafs
}

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetBundleName() string { return "cisco_ios_xr" }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetYangName() string { return "peak-rate" }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) SetParent(parent types.Entity) { peakRate.parent = parent }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetParent() types.Entity { return peakRate.parent }

func (peakRate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_PeakRate) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst
// Conform burst
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetFilter() yfilter.YFilter { return conformBurst.YFilter }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) SetFilter(yf yfilter.YFilter) { conformBurst.YFilter = yf }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetSegmentPath() string {
    return "conform-burst"
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = conformBurst.Value
    leafs["unit"] = conformBurst.Unit
    return leafs
}

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetBundleName() string { return "cisco_ios_xr" }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetYangName() string { return "conform-burst" }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) SetParent(parent types.Entity) { conformBurst.parent = parent }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetParent() types.Entity { return conformBurst.parent }

func (conformBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ConformBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst
// Exceed burst
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetFilter() yfilter.YFilter { return exceedBurst.YFilter }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) SetFilter(yf yfilter.YFilter) { exceedBurst.YFilter = yf }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetSegmentPath() string {
    return "exceed-burst"
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = exceedBurst.Value
    leafs["unit"] = exceedBurst.Unit
    return leafs
}

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetBundleName() string { return "cisco_ios_xr" }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetYangName() string { return "exceed-burst" }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) SetParent(parent types.Entity) { exceedBurst.parent = parent }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetParent() types.Entity { return exceedBurst.parent }

func (exceedBurst *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Police_PoliceConfigParameters_ExceedBurst) GetParentYangName() string { return "police-config-parameters" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq
// WFQ parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WFQ profile. The type is interface{} with range: 0..4294967295.
    ProfileId interface{}

    // Committed weight. The type is interface{} with range: 0..4294967295.
    CommittedWeight interface{}

    // Excess weight. The type is interface{} with range: 0..65535.
    ExcessWeight interface{}

    // Parent Excess ratio. The type is interface{} with range: 0..65535.
    ExcessRatio interface{}

    // Chunk ID. The type is interface{} with range: 0..4294967295.
    ChunkId interface{}

    // Level. The type is interface{} with range: 0..255.
    Level interface{}

    // Parent bandwidth.
    ParentBandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth

    // CFG Bandwidth.
    Bandwidth PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetFilter() yfilter.YFilter { return wfq.YFilter }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) SetFilter(yf yfilter.YFilter) { wfq.YFilter = yf }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "committed-weight" { return "CommittedWeight" }
    if yname == "excess-weight" { return "ExcessWeight" }
    if yname == "excess-ratio" { return "ExcessRatio" }
    if yname == "chunk-id" { return "ChunkId" }
    if yname == "level" { return "Level" }
    if yname == "parent-bandwidth" { return "ParentBandwidth" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetSegmentPath() string {
    return "wfq"
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "parent-bandwidth" {
        return &wfq.ParentBandwidth
    }
    if childYangName == "bandwidth" {
        return &wfq.Bandwidth
    }
    return nil
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["parent-bandwidth"] = &wfq.ParentBandwidth
    children["bandwidth"] = &wfq.Bandwidth
    return children
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = wfq.ProfileId
    leafs["committed-weight"] = wfq.CommittedWeight
    leafs["excess-weight"] = wfq.ExcessWeight
    leafs["excess-ratio"] = wfq.ExcessRatio
    leafs["chunk-id"] = wfq.ChunkId
    leafs["level"] = wfq.Level
    return leafs
}

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetBundleName() string { return "cisco_ios_xr" }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetYangName() string { return "wfq" }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) SetParent(parent types.Entity) { wfq.parent = parent }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetParent() types.Entity { return wfq.parent }

func (wfq *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth
// Parent bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetFilter() yfilter.YFilter { return parentBandwidth.YFilter }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) SetFilter(yf yfilter.YFilter) { parentBandwidth.YFilter = yf }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetSegmentPath() string {
    return "parent-bandwidth"
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = parentBandwidth.Value
    leafs["unit"] = parentBandwidth.Unit
    return leafs
}

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetYangName() string { return "parent-bandwidth" }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) SetParent(parent types.Entity) { parentBandwidth.parent = parent }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetParent() types.Entity { return parentBandwidth.parent }

func (parentBandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_ParentBandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth
// CFG Bandwidth
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = bandwidth.Value
    leafs["unit"] = bandwidth.Unit
    return leafs
}

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wfq_Bandwidth) GetParentYangName() string { return "wfq" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred
// WRED parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // WRED type. The type is Wred.
    Type interface{}

    // Number of curves. The type is interface{} with range: 0..65535.
    CurveXr interface{}

    // Curve details. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve.
    Curve []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetFilter() yfilter.YFilter { return wred.YFilter }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) SetFilter(yf yfilter.YFilter) { wred.YFilter = yf }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "curve-xr" { return "CurveXr" }
    if yname == "curve" { return "Curve" }
    return ""
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetSegmentPath() string {
    return "wred"
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "curve" {
        for _, c := range wred.Curve {
            if wred.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve{}
        wred.Curve = append(wred.Curve, child)
        return &wred.Curve[len(wred.Curve)-1]
    }
    return nil
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range wred.Curve {
        children[wred.Curve[i].GetSegmentPath()] = &wred.Curve[i]
    }
    return children
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = wred.Type
    leafs["curve-xr"] = wred.CurveXr
    return leafs
}

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetBundleName() string { return "cisco_ios_xr" }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetYangName() string { return "wred" }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) SetParent(parent types.Entity) { wred.parent = parent }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetParent() types.Entity { return wred.parent }

func (wred *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve
// Curve details
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Absolute Index. The type is interface{} with range: 0..65535.
    AbsoluteIndex interface{}

    // Template ID. The type is interface{} with range: 0..65535.
    TemplateId interface{}

    // Curve ID. The type is interface{} with range: 0..65535.
    CurveId interface{}

    // WRED match if precedence start value equals to end value Format:
    // <start-value> , else range Format: <start-value> <end-value>. The type is
    // string.
    Match interface{}

    // WRED exp match if EXP start value equals to end value Format: <start-value>
    // , else range Format: <start-value> <end-value>. The type is string.
    ExpMatch interface{}

    // Minimum threshold.
    MinThreshold PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold

    // Minimum threshold WRED context.
    MinThresholdUserConfig PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig

    // Maximum threshold.
    MaxThreshold PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold

    // Maximum threshold WRED context.
    MaxThresholdUserConfig PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetFilter() yfilter.YFilter { return curve.YFilter }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) SetFilter(yf yfilter.YFilter) { curve.YFilter = yf }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetGoName(yname string) string {
    if yname == "absolute-index" { return "AbsoluteIndex" }
    if yname == "template-id" { return "TemplateId" }
    if yname == "curve-id" { return "CurveId" }
    if yname == "match" { return "Match" }
    if yname == "exp-match" { return "ExpMatch" }
    if yname == "min-threshold" { return "MinThreshold" }
    if yname == "min-threshold-user-config" { return "MinThresholdUserConfig" }
    if yname == "max-threshold" { return "MaxThreshold" }
    if yname == "max-threshold-user-config" { return "MaxThresholdUserConfig" }
    return ""
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetSegmentPath() string {
    return "curve"
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-threshold" {
        return &curve.MinThreshold
    }
    if childYangName == "min-threshold-user-config" {
        return &curve.MinThresholdUserConfig
    }
    if childYangName == "max-threshold" {
        return &curve.MaxThreshold
    }
    if childYangName == "max-threshold-user-config" {
        return &curve.MaxThresholdUserConfig
    }
    return nil
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-threshold"] = &curve.MinThreshold
    children["min-threshold-user-config"] = &curve.MinThresholdUserConfig
    children["max-threshold"] = &curve.MaxThreshold
    children["max-threshold-user-config"] = &curve.MaxThresholdUserConfig
    return children
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["absolute-index"] = curve.AbsoluteIndex
    leafs["template-id"] = curve.TemplateId
    leafs["curve-id"] = curve.CurveId
    leafs["match"] = curve.Match
    leafs["exp-match"] = curve.ExpMatch
    return leafs
}

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetBundleName() string { return "cisco_ios_xr" }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetYangName() string { return "curve" }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) SetParent(parent types.Entity) { curve.parent = parent }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetParent() types.Entity { return curve.parent }

func (curve *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve) GetParentYangName() string { return "wred" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold
// Minimum threshold
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetFilter() yfilter.YFilter { return minThreshold.YFilter }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) SetFilter(yf yfilter.YFilter) { minThreshold.YFilter = yf }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetSegmentPath() string {
    return "min-threshold"
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThreshold.Value
    leafs["unit"] = minThreshold.Unit
    return leafs
}

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetYangName() string { return "min-threshold" }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) SetParent(parent types.Entity) { minThreshold.parent = parent }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetParent() types.Entity { return minThreshold.parent }

func (minThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig
// Minimum threshold WRED context
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetFilter() yfilter.YFilter { return minThresholdUserConfig.YFilter }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) SetFilter(yf yfilter.YFilter) { minThresholdUserConfig.YFilter = yf }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetSegmentPath() string {
    return "min-threshold-user-config"
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = minThresholdUserConfig.Value
    leafs["unit"] = minThresholdUserConfig.Unit
    return leafs
}

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetYangName() string { return "min-threshold-user-config" }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) SetParent(parent types.Entity) { minThresholdUserConfig.parent = parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetParent() types.Entity { return minThresholdUserConfig.parent }

func (minThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MinThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold
// Maximum threshold
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetFilter() yfilter.YFilter { return maxThreshold.YFilter }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) SetFilter(yf yfilter.YFilter) { maxThreshold.YFilter = yf }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetSegmentPath() string {
    return "max-threshold"
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThreshold.Value
    leafs["unit"] = maxThreshold.Unit
    return leafs
}

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetYangName() string { return "max-threshold" }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) SetParent(parent types.Entity) { maxThreshold.parent = parent }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetParent() types.Entity { return maxThreshold.parent }

func (maxThreshold *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThreshold) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig
// Maximum threshold WRED context
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Config value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Config unit. The type is QosUnit.
    Unit interface{}
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetFilter() yfilter.YFilter { return maxThresholdUserConfig.YFilter }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) SetFilter(yf yfilter.YFilter) { maxThresholdUserConfig.YFilter = yf }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "unit" { return "Unit" }
    return ""
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetSegmentPath() string {
    return "max-threshold-user-config"
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = maxThresholdUserConfig.Value
    leafs["unit"] = maxThresholdUserConfig.Unit
    return leafs
}

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetBundleName() string { return "cisco_ios_xr" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetYangName() string { return "max-threshold-user-config" }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) SetParent(parent types.Entity) { maxThresholdUserConfig.parent = parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetParent() types.Entity { return maxThresholdUserConfig.parent }

func (maxThresholdUserConfig *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Wred_Curve_MaxThresholdUserConfig) GetParentYangName() string { return "curve" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark
// Mark parameters
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Child mark only.
    ChildMark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark

    // Child police conform mark.
    PoliceConform PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform

    // Child police exceed mark.
    PoliceExceed PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed

    // Child police violate mark.
    PoliceViolate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate

    // Parent mark only.
    ParentMark PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark

    // Parent police conform mark.
    ParentPoliceConform PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform

    // Parent police exceed mark.
    ParentPoliceExceed PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed

    // Parent police violate mark.
    ParentPoliceViolate PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetFilter() yfilter.YFilter { return mark.YFilter }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) SetFilter(yf yfilter.YFilter) { mark.YFilter = yf }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetGoName(yname string) string {
    if yname == "child-mark" { return "ChildMark" }
    if yname == "police-conform" { return "PoliceConform" }
    if yname == "police-exceed" { return "PoliceExceed" }
    if yname == "police-violate" { return "PoliceViolate" }
    if yname == "parent-mark" { return "ParentMark" }
    if yname == "parent-police-conform" { return "ParentPoliceConform" }
    if yname == "parent-police-exceed" { return "ParentPoliceExceed" }
    if yname == "parent-police-violate" { return "ParentPoliceViolate" }
    return ""
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetSegmentPath() string {
    return "mark"
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "child-mark" {
        return &mark.ChildMark
    }
    if childYangName == "police-conform" {
        return &mark.PoliceConform
    }
    if childYangName == "police-exceed" {
        return &mark.PoliceExceed
    }
    if childYangName == "police-violate" {
        return &mark.PoliceViolate
    }
    if childYangName == "parent-mark" {
        return &mark.ParentMark
    }
    if childYangName == "parent-police-conform" {
        return &mark.ParentPoliceConform
    }
    if childYangName == "parent-police-exceed" {
        return &mark.ParentPoliceExceed
    }
    if childYangName == "parent-police-violate" {
        return &mark.ParentPoliceViolate
    }
    return nil
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["child-mark"] = &mark.ChildMark
    children["police-conform"] = &mark.PoliceConform
    children["police-exceed"] = &mark.PoliceExceed
    children["police-violate"] = &mark.PoliceViolate
    children["parent-mark"] = &mark.ParentMark
    children["parent-police-conform"] = &mark.ParentPoliceConform
    children["parent-police-exceed"] = &mark.ParentPoliceExceed
    children["parent-police-violate"] = &mark.ParentPoliceViolate
    return children
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetBundleName() string { return "cisco_ios_xr" }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetYangName() string { return "mark" }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) SetParent(parent types.Entity) { mark.parent = parent }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetParent() types.Entity { return mark.parent }

func (mark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark) GetParentYangName() string { return "qos-show-ea-st-v2" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark
// Child mark only
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetFilter() yfilter.YFilter { return childMark.YFilter }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) SetFilter(yf yfilter.YFilter) { childMark.YFilter = yf }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetSegmentPath() string {
    return "child-mark"
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range childMark.MarkDetail {
            if childMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail{}
        childMark.MarkDetail = append(childMark.MarkDetail, child)
        return &childMark.MarkDetail[len(childMark.MarkDetail)-1]
    }
    return nil
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range childMark.MarkDetail {
        children[childMark.MarkDetail[i].GetSegmentPath()] = &childMark.MarkDetail[i]
    }
    return children
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = childMark.ActionType
    return leafs
}

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetBundleName() string { return "cisco_ios_xr" }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetYangName() string { return "child-mark" }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) SetParent(parent types.Entity) { childMark.parent = parent }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetParent() types.Entity { return childMark.parent }

func (childMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ChildMark_MarkDetail) GetParentYangName() string { return "child-mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform
// Child police conform mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetFilter() yfilter.YFilter { return policeConform.YFilter }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) SetFilter(yf yfilter.YFilter) { policeConform.YFilter = yf }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetSegmentPath() string {
    return "police-conform"
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeConform.MarkDetail {
            if policeConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail{}
        policeConform.MarkDetail = append(policeConform.MarkDetail, child)
        return &policeConform.MarkDetail[len(policeConform.MarkDetail)-1]
    }
    return nil
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeConform.MarkDetail {
        children[policeConform.MarkDetail[i].GetSegmentPath()] = &policeConform.MarkDetail[i]
    }
    return children
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeConform.ActionType
    return leafs
}

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetYangName() string { return "police-conform" }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) SetParent(parent types.Entity) { policeConform.parent = parent }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetParent() types.Entity { return policeConform.parent }

func (policeConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceConform_MarkDetail) GetParentYangName() string { return "police-conform" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed
// Child police exceed mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetFilter() yfilter.YFilter { return policeExceed.YFilter }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) SetFilter(yf yfilter.YFilter) { policeExceed.YFilter = yf }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetSegmentPath() string {
    return "police-exceed"
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeExceed.MarkDetail {
            if policeExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail{}
        policeExceed.MarkDetail = append(policeExceed.MarkDetail, child)
        return &policeExceed.MarkDetail[len(policeExceed.MarkDetail)-1]
    }
    return nil
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeExceed.MarkDetail {
        children[policeExceed.MarkDetail[i].GetSegmentPath()] = &policeExceed.MarkDetail[i]
    }
    return children
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeExceed.ActionType
    return leafs
}

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetYangName() string { return "police-exceed" }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) SetParent(parent types.Entity) { policeExceed.parent = parent }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetParent() types.Entity { return policeExceed.parent }

func (policeExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceExceed_MarkDetail) GetParentYangName() string { return "police-exceed" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate
// Child police violate mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetFilter() yfilter.YFilter { return policeViolate.YFilter }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) SetFilter(yf yfilter.YFilter) { policeViolate.YFilter = yf }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetSegmentPath() string {
    return "police-violate"
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range policeViolate.MarkDetail {
            if policeViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail{}
        policeViolate.MarkDetail = append(policeViolate.MarkDetail, child)
        return &policeViolate.MarkDetail[len(policeViolate.MarkDetail)-1]
    }
    return nil
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range policeViolate.MarkDetail {
        children[policeViolate.MarkDetail[i].GetSegmentPath()] = &policeViolate.MarkDetail[i]
    }
    return children
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = policeViolate.ActionType
    return leafs
}

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetYangName() string { return "police-violate" }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) SetParent(parent types.Entity) { policeViolate.parent = parent }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetParent() types.Entity { return policeViolate.parent }

func (policeViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_PoliceViolate_MarkDetail) GetParentYangName() string { return "police-violate" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark
// Parent mark only
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetFilter() yfilter.YFilter { return parentMark.YFilter }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) SetFilter(yf yfilter.YFilter) { parentMark.YFilter = yf }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetSegmentPath() string {
    return "parent-mark"
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentMark.MarkDetail {
            if parentMark.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail{}
        parentMark.MarkDetail = append(parentMark.MarkDetail, child)
        return &parentMark.MarkDetail[len(parentMark.MarkDetail)-1]
    }
    return nil
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentMark.MarkDetail {
        children[parentMark.MarkDetail[i].GetSegmentPath()] = &parentMark.MarkDetail[i]
    }
    return children
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentMark.ActionType
    return leafs
}

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetBundleName() string { return "cisco_ios_xr" }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetYangName() string { return "parent-mark" }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) SetParent(parent types.Entity) { parentMark.parent = parent }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetParent() types.Entity { return parentMark.parent }

func (parentMark *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentMark_MarkDetail) GetParentYangName() string { return "parent-mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform
// Parent police conform mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetFilter() yfilter.YFilter { return parentPoliceConform.YFilter }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) SetFilter(yf yfilter.YFilter) { parentPoliceConform.YFilter = yf }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetSegmentPath() string {
    return "parent-police-conform"
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceConform.MarkDetail {
            if parentPoliceConform.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail{}
        parentPoliceConform.MarkDetail = append(parentPoliceConform.MarkDetail, child)
        return &parentPoliceConform.MarkDetail[len(parentPoliceConform.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceConform.MarkDetail {
        children[parentPoliceConform.MarkDetail[i].GetSegmentPath()] = &parentPoliceConform.MarkDetail[i]
    }
    return children
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceConform.ActionType
    return leafs
}

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetYangName() string { return "parent-police-conform" }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) SetParent(parent types.Entity) { parentPoliceConform.parent = parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetParent() types.Entity { return parentPoliceConform.parent }

func (parentPoliceConform *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceConform_MarkDetail) GetParentYangName() string { return "parent-police-conform" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed
// Parent police exceed mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetFilter() yfilter.YFilter { return parentPoliceExceed.YFilter }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) SetFilter(yf yfilter.YFilter) { parentPoliceExceed.YFilter = yf }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetSegmentPath() string {
    return "parent-police-exceed"
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceExceed.MarkDetail {
            if parentPoliceExceed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail{}
        parentPoliceExceed.MarkDetail = append(parentPoliceExceed.MarkDetail, child)
        return &parentPoliceExceed.MarkDetail[len(parentPoliceExceed.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceExceed.MarkDetail {
        children[parentPoliceExceed.MarkDetail[i].GetSegmentPath()] = &parentPoliceExceed.MarkDetail[i]
    }
    return children
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceExceed.ActionType
    return leafs
}

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetYangName() string { return "parent-police-exceed" }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) SetParent(parent types.Entity) { parentPoliceExceed.parent = parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetParent() types.Entity { return parentPoliceExceed.parent }

func (parentPoliceExceed *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceExceed_MarkDetail) GetParentYangName() string { return "parent-police-exceed" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate
// Parent police violate mark
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action type. The type is Action.
    ActionType interface{}

    // Mark value. The type is slice of
    // PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail.
    MarkDetail []PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetFilter() yfilter.YFilter { return parentPoliceViolate.YFilter }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) SetFilter(yf yfilter.YFilter) { parentPoliceViolate.YFilter = yf }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetGoName(yname string) string {
    if yname == "action-type" { return "ActionType" }
    if yname == "mark-detail" { return "MarkDetail" }
    return ""
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetSegmentPath() string {
    return "parent-police-violate"
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mark-detail" {
        for _, c := range parentPoliceViolate.MarkDetail {
            if parentPoliceViolate.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail{}
        parentPoliceViolate.MarkDetail = append(parentPoliceViolate.MarkDetail, child)
        return &parentPoliceViolate.MarkDetail[len(parentPoliceViolate.MarkDetail)-1]
    }
    return nil
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range parentPoliceViolate.MarkDetail {
        children[parentPoliceViolate.MarkDetail[i].GetSegmentPath()] = &parentPoliceViolate.MarkDetail[i]
    }
    return children
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["action-type"] = parentPoliceViolate.ActionType
    return leafs
}

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetBundleName() string { return "cisco_ios_xr" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetYangName() string { return "parent-police-violate" }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) SetParent(parent types.Entity) { parentPoliceViolate.parent = parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetParent() types.Entity { return parentPoliceViolate.parent }

func (parentPoliceViolate *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate) GetParentYangName() string { return "mark" }

// PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail
// Mark value
type PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mark value. The type is interface{} with range: 0..255.
    MarkValue interface{}

    // Action opcode. The type is ActionOpcode.
    ActionOpcode interface{}
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetFilter() yfilter.YFilter { return markDetail.YFilter }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) SetFilter(yf yfilter.YFilter) { markDetail.YFilter = yf }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetGoName(yname string) string {
    if yname == "mark-value" { return "MarkValue" }
    if yname == "action-opcode" { return "ActionOpcode" }
    return ""
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetSegmentPath() string {
    return "mark-detail"
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mark-value"] = markDetail.MarkValue
    leafs["action-opcode"] = markDetail.ActionOpcode
    return leafs
}

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetBundleName() string { return "cisco_ios_xr" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetYangName() string { return "mark-detail" }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) SetParent(parent types.Entity) { markDetail.parent = parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetParent() types.Entity { return markDetail.parent }

func (markDetail *PlatformQos_Nodes_Node_BundleInterfaces_BundleInterface_BundleInput_MemberInterfaces_MemberInterface_Details_PolicyTyphoon_QosShowEaStV2_Mark_ParentPoliceViolate_MarkDetail) GetParentYangName() string { return "parent-police-violate" }

