// This module contains definitions
// for the Calvados model objects.
// 
// This module contains a collection of YANG
// definitions for Cisco IOS-XR SysAdmin configuration.
// 
// This module defines the top level container for
// all hardware devices managed in Sysadmin.
// 
// Copyright(c) 2015-2016 by Cisco Systems, Inc.
// All rights reserved.
// 
// Copyright (c) 2012-2018 by Cisco Systems, Inc.
// All rights reserved.
package sysadmin_controllers_ncs55a1

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package sysadmin_controllers_ncs55a1"))
    ydk.RegisterEntity("{http://www.cisco.com/ns/yang/Cisco-IOS-XR-sysadmin-controllers-NCS55A1 set}", reflect.TypeOf(Set{}))
    ydk.RegisterEntity("Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set", reflect.TypeOf(Set{}))
    ydk.RegisterEntity("{http://www.cisco.com/ns/yang/Cisco-IOS-XR-sysadmin-controllers-NCS55A1 controller}", reflect.TypeOf(Controller{}))
    ydk.RegisterEntity("Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller", reflect.TypeOf(Controller{}))
}

// Set
type Set struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Controller Set_Controller
}

func (set *Set) GetEntityData() *types.CommonEntityData {
    set.EntityData.YFilter = set.YFilter
    set.EntityData.YangName = "set"
    set.EntityData.BundleName = "cisco_ios_xr"
    set.EntityData.ParentYangName = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1"
    set.EntityData.SegmentPath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set"
    set.EntityData.AbsolutePath = set.EntityData.SegmentPath
    set.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    set.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    set.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    set.EntityData.Children = types.NewOrderedMap()
    set.EntityData.Children.Append("controller", types.YChild{"Controller", &set.Controller})
    set.EntityData.Leafs = types.NewOrderedMap()

    set.EntityData.YListKeys = []string {}

    return &(set.EntityData)
}

// Set_Controller
type Set_Controller struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Set_Controller_Asic.
    Asic []*Set_Controller_Asic
}

func (controller *Set_Controller) GetEntityData() *types.CommonEntityData {
    controller.EntityData.YFilter = controller.YFilter
    controller.EntityData.YangName = "controller"
    controller.EntityData.BundleName = "cisco_ios_xr"
    controller.EntityData.ParentYangName = "set"
    controller.EntityData.SegmentPath = "controller"
    controller.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/" + controller.EntityData.SegmentPath
    controller.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controller.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controller.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controller.EntityData.Children = types.NewOrderedMap()
    controller.EntityData.Children.Append("asic", types.YChild{"Asic", nil})
    for i := range controller.Asic {
        controller.EntityData.Children.Append(types.GetSegmentPath(controller.Asic[i]), types.YChild{"Asic", controller.Asic[i]})
    }
    controller.EntityData.Leafs = types.NewOrderedMap()

    controller.EntityData.YListKeys = []string {}

    return &(controller.EntityData)
}

// Set_Controller_Asic
type Set_Controller_Asic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    AsicName interface{}

    // The type is slice of Set_Controller_Asic_Instance.
    Instance []*Set_Controller_Asic_Instance
}

func (asic *Set_Controller_Asic) GetEntityData() *types.CommonEntityData {
    asic.EntityData.YFilter = asic.YFilter
    asic.EntityData.YangName = "asic"
    asic.EntityData.BundleName = "cisco_ios_xr"
    asic.EntityData.ParentYangName = "controller"
    asic.EntityData.SegmentPath = "asic" + types.AddKeyToken(asic.AsicName, "asic-name")
    asic.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/" + asic.EntityData.SegmentPath
    asic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asic.EntityData.Children = types.NewOrderedMap()
    asic.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range asic.Instance {
        asic.EntityData.Children.Append(types.GetSegmentPath(asic.Instance[i]), types.YChild{"Instance", asic.Instance[i]})
    }
    asic.EntityData.Leafs = types.NewOrderedMap()
    asic.EntityData.Leafs.Append("asic-name", types.YLeaf{"AsicName", asic.AsicName})

    asic.EntityData.YListKeys = []string {"AsicName"}

    return &(asic.EntityData)
}

// Set_Controller_Asic_Instance
type Set_Controller_Asic_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    InstanceIds interface{}

    
    FaultInjection Set_Controller_Asic_Instance_FaultInjection
}

func (instance *Set_Controller_Asic_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "asic"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceIds, "instance-ids")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("fault-injection", types.YChild{"FaultInjection", &instance.FaultInjection})
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-ids", types.YLeaf{"InstanceIds", instance.InstanceIds})

    instance.EntityData.YListKeys = []string {"InstanceIds"}

    return &(instance.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection
type Set_Controller_Asic_Instance_FaultInjection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Set_Controller_Asic_Instance_FaultInjection_Module.
    Module []*Set_Controller_Asic_Instance_FaultInjection_Module
}

func (faultInjection *Set_Controller_Asic_Instance_FaultInjection) GetEntityData() *types.CommonEntityData {
    faultInjection.EntityData.YFilter = faultInjection.YFilter
    faultInjection.EntityData.YangName = "fault-injection"
    faultInjection.EntityData.BundleName = "cisco_ios_xr"
    faultInjection.EntityData.ParentYangName = "instance"
    faultInjection.EntityData.SegmentPath = "fault-injection"
    faultInjection.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/" + faultInjection.EntityData.SegmentPath
    faultInjection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    faultInjection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    faultInjection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    faultInjection.EntityData.Children = types.NewOrderedMap()
    faultInjection.EntityData.Children.Append("module", types.YChild{"Module", nil})
    for i := range faultInjection.Module {
        faultInjection.EntityData.Children.Append(types.GetSegmentPath(faultInjection.Module[i]), types.YChild{"Module", faultInjection.Module[i]})
    }
    faultInjection.EntityData.Leafs = types.NewOrderedMap()

    faultInjection.EntityData.YListKeys = []string {}

    return &(faultInjection.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module
type Set_Controller_Asic_Instance_FaultInjection_Module struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    ModuleName interface{}

    
    FaultType Set_Controller_Asic_Instance_FaultInjection_Module_FaultType
}

func (module *Set_Controller_Asic_Instance_FaultInjection_Module) GetEntityData() *types.CommonEntityData {
    module.EntityData.YFilter = module.YFilter
    module.EntityData.YangName = "module"
    module.EntityData.BundleName = "cisco_ios_xr"
    module.EntityData.ParentYangName = "fault-injection"
    module.EntityData.SegmentPath = "module" + types.AddKeyToken(module.ModuleName, "module-name")
    module.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/" + module.EntityData.SegmentPath
    module.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    module.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    module.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    module.EntityData.Children = types.NewOrderedMap()
    module.EntityData.Children.Append("fault-type", types.YChild{"FaultType", &module.FaultType})
    module.EntityData.Leafs = types.NewOrderedMap()
    module.EntityData.Leafs.Append("module-name", types.YLeaf{"ModuleName", module.ModuleName})

    module.EntityData.YListKeys = []string {"ModuleName"}

    return &(module.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Ecc Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc

    
    Parity Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity

    
    Other Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other
}

func (faultType *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType) GetEntityData() *types.CommonEntityData {
    faultType.EntityData.YFilter = faultType.YFilter
    faultType.EntityData.YangName = "fault-type"
    faultType.EntityData.BundleName = "cisco_ios_xr"
    faultType.EntityData.ParentYangName = "module"
    faultType.EntityData.SegmentPath = "fault-type"
    faultType.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/" + faultType.EntityData.SegmentPath
    faultType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    faultType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    faultType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    faultType.EntityData.Children = types.NewOrderedMap()
    faultType.EntityData.Children.Append("ecc", types.YChild{"Ecc", &faultType.Ecc})
    faultType.EntityData.Children.Append("parity", types.YChild{"Parity", &faultType.Parity})
    faultType.EntityData.Children.Append("other", types.YChild{"Other", &faultType.Other})
    faultType.EntityData.Leafs = types.NewOrderedMap()

    faultType.EntityData.YListKeys = []string {}

    return &(faultType.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst.
    BlockNameLst []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst
}

func (ecc *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc) GetEntityData() *types.CommonEntityData {
    ecc.EntityData.YFilter = ecc.YFilter
    ecc.EntityData.YangName = "ecc"
    ecc.EntityData.BundleName = "cisco_ios_xr"
    ecc.EntityData.ParentYangName = "fault-type"
    ecc.EntityData.SegmentPath = "ecc"
    ecc.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/" + ecc.EntityData.SegmentPath
    ecc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ecc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ecc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ecc.EntityData.Children = types.NewOrderedMap()
    ecc.EntityData.Children.Append("all", types.YChild{"All", &ecc.All})
    ecc.EntityData.Children.Append("block-name-lst", types.YChild{"BlockNameLst", nil})
    for i := range ecc.BlockNameLst {
        ecc.EntityData.Children.Append(types.GetSegmentPath(ecc.BlockNameLst[i]), types.YChild{"BlockNameLst", ecc.BlockNameLst[i]})
    }
    ecc.EntityData.Leafs = types.NewOrderedMap()

    ecc.EntityData.YListKeys = []string {}

    return &(ecc.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold.
    Threshold []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location
}

func (all *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "ecc"
    all.EntityData.SegmentPath = "all"
    all.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/" + all.EntityData.SegmentPath
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("threshold", types.YChild{"Threshold", nil})
    for i := range all.Threshold {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Threshold[i]), types.YChild{"Threshold", all.Threshold[i]})
    }
    all.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range all.Location {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Location[i]), types.YChild{"Location", all.Location[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location
}

func (threshold *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "all"
    threshold.EntityData.SegmentPath = "threshold" + types.AddKeyToken(threshold.NumSeconds, "num-seconds")
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/all/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range threshold.Location {
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.Location[i]), types.YChild{"Location", threshold.Location[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", threshold.NumSeconds})

    threshold.EntityData.YListKeys = []string {"NumSeconds"}

    return &(threshold.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "threshold"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/all/threshold/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "all"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/all/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    BlockName interface{}

    
    One Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One

    
    Continuous Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous

    
    Stop Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop
}

func (blockNameLst *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst) GetEntityData() *types.CommonEntityData {
    blockNameLst.EntityData.YFilter = blockNameLst.YFilter
    blockNameLst.EntityData.YangName = "block-name-lst"
    blockNameLst.EntityData.BundleName = "cisco_ios_xr"
    blockNameLst.EntityData.ParentYangName = "ecc"
    blockNameLst.EntityData.SegmentPath = "block-name-lst" + types.AddKeyToken(blockNameLst.BlockName, "block-name")
    blockNameLst.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/" + blockNameLst.EntityData.SegmentPath
    blockNameLst.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNameLst.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNameLst.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNameLst.EntityData.Children = types.NewOrderedMap()
    blockNameLst.EntityData.Children.Append("one", types.YChild{"One", &blockNameLst.One})
    blockNameLst.EntityData.Children.Append("continuous", types.YChild{"Continuous", &blockNameLst.Continuous})
    blockNameLst.EntityData.Children.Append("stop", types.YChild{"Stop", &blockNameLst.Stop})
    blockNameLst.EntityData.Leafs = types.NewOrderedMap()
    blockNameLst.EntityData.Leafs.Append("block-name", types.YLeaf{"BlockName", blockNameLst.BlockName})

    blockNameLst.EntityData.YListKeys = []string {"BlockName"}

    return &(blockNameLst.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location
}

func (one *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One) GetEntityData() *types.CommonEntityData {
    one.EntityData.YFilter = one.YFilter
    one.EntityData.YangName = "one"
    one.EntityData.BundleName = "cisco_ios_xr"
    one.EntityData.ParentYangName = "block-name-lst"
    one.EntityData.SegmentPath = "one"
    one.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/" + one.EntityData.SegmentPath
    one.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    one.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    one.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    one.EntityData.Children = types.NewOrderedMap()
    one.EntityData.Children.Append("rate", types.YChild{"Rate", &one.Rate})
    one.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range one.Location {
        one.EntityData.Children.Append(types.GetSegmentPath(one.Location[i]), types.YChild{"Location", one.Location[i]})
    }
    one.EntityData.Leafs = types.NewOrderedMap()

    one.EntityData.YListKeys = []string {}

    return &(one.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "one"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/one/" + rate.EntityData.SegmentPath
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/one/rate/" + errorNumber.EntityData.SegmentPath
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/one/rate/error-number/" + duration.EntityData.SegmentPath
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/one/rate/error-number/duration/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "one"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/one/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location
}

func (continuous *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous) GetEntityData() *types.CommonEntityData {
    continuous.EntityData.YFilter = continuous.YFilter
    continuous.EntityData.YangName = "continuous"
    continuous.EntityData.BundleName = "cisco_ios_xr"
    continuous.EntityData.ParentYangName = "block-name-lst"
    continuous.EntityData.SegmentPath = "continuous"
    continuous.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/" + continuous.EntityData.SegmentPath
    continuous.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    continuous.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    continuous.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    continuous.EntityData.Children = types.NewOrderedMap()
    continuous.EntityData.Children.Append("rate", types.YChild{"Rate", &continuous.Rate})
    continuous.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range continuous.Location {
        continuous.EntityData.Children.Append(types.GetSegmentPath(continuous.Location[i]), types.YChild{"Location", continuous.Location[i]})
    }
    continuous.EntityData.Leafs = types.NewOrderedMap()

    continuous.EntityData.YListKeys = []string {}

    return &(continuous.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "continuous"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/continuous/" + rate.EntityData.SegmentPath
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/continuous/rate/" + errorNumber.EntityData.SegmentPath
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/continuous/rate/error-number/" + duration.EntityData.SegmentPath
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/continuous/rate/error-number/duration/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "continuous"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/continuous/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location
}

func (stop *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop) GetEntityData() *types.CommonEntityData {
    stop.EntityData.YFilter = stop.YFilter
    stop.EntityData.YangName = "stop"
    stop.EntityData.BundleName = "cisco_ios_xr"
    stop.EntityData.ParentYangName = "block-name-lst"
    stop.EntityData.SegmentPath = "stop"
    stop.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/" + stop.EntityData.SegmentPath
    stop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stop.EntityData.Children = types.NewOrderedMap()
    stop.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range stop.Location {
        stop.EntityData.Children.Append(types.GetSegmentPath(stop.Location[i]), types.YChild{"Location", stop.Location[i]})
    }
    stop.EntityData.Leafs = types.NewOrderedMap()

    stop.EntityData.YListKeys = []string {}

    return &(stop.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "stop"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/ecc/block-name-lst/stop/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst.
    BlockNameLst []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst
}

func (parity *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity) GetEntityData() *types.CommonEntityData {
    parity.EntityData.YFilter = parity.YFilter
    parity.EntityData.YangName = "parity"
    parity.EntityData.BundleName = "cisco_ios_xr"
    parity.EntityData.ParentYangName = "fault-type"
    parity.EntityData.SegmentPath = "parity"
    parity.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/" + parity.EntityData.SegmentPath
    parity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parity.EntityData.Children = types.NewOrderedMap()
    parity.EntityData.Children.Append("all", types.YChild{"All", &parity.All})
    parity.EntityData.Children.Append("block-name-lst", types.YChild{"BlockNameLst", nil})
    for i := range parity.BlockNameLst {
        parity.EntityData.Children.Append(types.GetSegmentPath(parity.BlockNameLst[i]), types.YChild{"BlockNameLst", parity.BlockNameLst[i]})
    }
    parity.EntityData.Leafs = types.NewOrderedMap()

    parity.EntityData.YListKeys = []string {}

    return &(parity.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold.
    Threshold []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location
}

func (all *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "parity"
    all.EntityData.SegmentPath = "all"
    all.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/" + all.EntityData.SegmentPath
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("threshold", types.YChild{"Threshold", nil})
    for i := range all.Threshold {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Threshold[i]), types.YChild{"Threshold", all.Threshold[i]})
    }
    all.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range all.Location {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Location[i]), types.YChild{"Location", all.Location[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location
}

func (threshold *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "all"
    threshold.EntityData.SegmentPath = "threshold" + types.AddKeyToken(threshold.NumSeconds, "num-seconds")
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/all/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range threshold.Location {
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.Location[i]), types.YChild{"Location", threshold.Location[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", threshold.NumSeconds})

    threshold.EntityData.YListKeys = []string {"NumSeconds"}

    return &(threshold.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "threshold"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/all/threshold/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "all"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/all/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    BlockName interface{}

    
    One Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One

    
    Continuous Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous

    
    Stop Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop
}

func (blockNameLst *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst) GetEntityData() *types.CommonEntityData {
    blockNameLst.EntityData.YFilter = blockNameLst.YFilter
    blockNameLst.EntityData.YangName = "block-name-lst"
    blockNameLst.EntityData.BundleName = "cisco_ios_xr"
    blockNameLst.EntityData.ParentYangName = "parity"
    blockNameLst.EntityData.SegmentPath = "block-name-lst" + types.AddKeyToken(blockNameLst.BlockName, "block-name")
    blockNameLst.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/" + blockNameLst.EntityData.SegmentPath
    blockNameLst.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNameLst.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNameLst.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNameLst.EntityData.Children = types.NewOrderedMap()
    blockNameLst.EntityData.Children.Append("one", types.YChild{"One", &blockNameLst.One})
    blockNameLst.EntityData.Children.Append("continuous", types.YChild{"Continuous", &blockNameLst.Continuous})
    blockNameLst.EntityData.Children.Append("stop", types.YChild{"Stop", &blockNameLst.Stop})
    blockNameLst.EntityData.Leafs = types.NewOrderedMap()
    blockNameLst.EntityData.Leafs.Append("block-name", types.YLeaf{"BlockName", blockNameLst.BlockName})

    blockNameLst.EntityData.YListKeys = []string {"BlockName"}

    return &(blockNameLst.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location
}

func (one *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One) GetEntityData() *types.CommonEntityData {
    one.EntityData.YFilter = one.YFilter
    one.EntityData.YangName = "one"
    one.EntityData.BundleName = "cisco_ios_xr"
    one.EntityData.ParentYangName = "block-name-lst"
    one.EntityData.SegmentPath = "one"
    one.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/" + one.EntityData.SegmentPath
    one.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    one.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    one.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    one.EntityData.Children = types.NewOrderedMap()
    one.EntityData.Children.Append("rate", types.YChild{"Rate", &one.Rate})
    one.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range one.Location {
        one.EntityData.Children.Append(types.GetSegmentPath(one.Location[i]), types.YChild{"Location", one.Location[i]})
    }
    one.EntityData.Leafs = types.NewOrderedMap()

    one.EntityData.YListKeys = []string {}

    return &(one.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "one"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/one/" + rate.EntityData.SegmentPath
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/one/rate/" + errorNumber.EntityData.SegmentPath
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/one/rate/error-number/" + duration.EntityData.SegmentPath
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/one/rate/error-number/duration/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "one"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/one/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location
}

func (continuous *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous) GetEntityData() *types.CommonEntityData {
    continuous.EntityData.YFilter = continuous.YFilter
    continuous.EntityData.YangName = "continuous"
    continuous.EntityData.BundleName = "cisco_ios_xr"
    continuous.EntityData.ParentYangName = "block-name-lst"
    continuous.EntityData.SegmentPath = "continuous"
    continuous.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/" + continuous.EntityData.SegmentPath
    continuous.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    continuous.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    continuous.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    continuous.EntityData.Children = types.NewOrderedMap()
    continuous.EntityData.Children.Append("rate", types.YChild{"Rate", &continuous.Rate})
    continuous.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range continuous.Location {
        continuous.EntityData.Children.Append(types.GetSegmentPath(continuous.Location[i]), types.YChild{"Location", continuous.Location[i]})
    }
    continuous.EntityData.Leafs = types.NewOrderedMap()

    continuous.EntityData.YListKeys = []string {}

    return &(continuous.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "continuous"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/continuous/" + rate.EntityData.SegmentPath
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/continuous/rate/" + errorNumber.EntityData.SegmentPath
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/continuous/rate/error-number/" + duration.EntityData.SegmentPath
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/continuous/rate/error-number/duration/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "continuous"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/continuous/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location
}

func (stop *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop) GetEntityData() *types.CommonEntityData {
    stop.EntityData.YFilter = stop.YFilter
    stop.EntityData.YangName = "stop"
    stop.EntityData.BundleName = "cisco_ios_xr"
    stop.EntityData.ParentYangName = "block-name-lst"
    stop.EntityData.SegmentPath = "stop"
    stop.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/" + stop.EntityData.SegmentPath
    stop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stop.EntityData.Children = types.NewOrderedMap()
    stop.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range stop.Location {
        stop.EntityData.Children.Append(types.GetSegmentPath(stop.Location[i]), types.YChild{"Location", stop.Location[i]})
    }
    stop.EntityData.Leafs = types.NewOrderedMap()

    stop.EntityData.YListKeys = []string {}

    return &(stop.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "stop"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/parity/block-name-lst/stop/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst.
    BlockNameLst []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst
}

func (other *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other) GetEntityData() *types.CommonEntityData {
    other.EntityData.YFilter = other.YFilter
    other.EntityData.YangName = "other"
    other.EntityData.BundleName = "cisco_ios_xr"
    other.EntityData.ParentYangName = "fault-type"
    other.EntityData.SegmentPath = "other"
    other.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/" + other.EntityData.SegmentPath
    other.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    other.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    other.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    other.EntityData.Children = types.NewOrderedMap()
    other.EntityData.Children.Append("all", types.YChild{"All", &other.All})
    other.EntityData.Children.Append("block-name-lst", types.YChild{"BlockNameLst", nil})
    for i := range other.BlockNameLst {
        other.EntityData.Children.Append(types.GetSegmentPath(other.BlockNameLst[i]), types.YChild{"BlockNameLst", other.BlockNameLst[i]})
    }
    other.EntityData.Leafs = types.NewOrderedMap()

    other.EntityData.YListKeys = []string {}

    return &(other.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold.
    Threshold []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location
}

func (all *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "other"
    all.EntityData.SegmentPath = "all"
    all.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/" + all.EntityData.SegmentPath
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("threshold", types.YChild{"Threshold", nil})
    for i := range all.Threshold {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Threshold[i]), types.YChild{"Threshold", all.Threshold[i]})
    }
    all.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range all.Location {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Location[i]), types.YChild{"Location", all.Location[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location
}

func (threshold *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "all"
    threshold.EntityData.SegmentPath = "threshold" + types.AddKeyToken(threshold.NumSeconds, "num-seconds")
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/all/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range threshold.Location {
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.Location[i]), types.YChild{"Location", threshold.Location[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", threshold.NumSeconds})

    threshold.EntityData.YListKeys = []string {"NumSeconds"}

    return &(threshold.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "threshold"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/all/threshold/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "all"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/all/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    BlockName interface{}

    
    One Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One

    
    Continuous Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous

    
    Stop Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop
}

func (blockNameLst *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst) GetEntityData() *types.CommonEntityData {
    blockNameLst.EntityData.YFilter = blockNameLst.YFilter
    blockNameLst.EntityData.YangName = "block-name-lst"
    blockNameLst.EntityData.BundleName = "cisco_ios_xr"
    blockNameLst.EntityData.ParentYangName = "other"
    blockNameLst.EntityData.SegmentPath = "block-name-lst" + types.AddKeyToken(blockNameLst.BlockName, "block-name")
    blockNameLst.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/" + blockNameLst.EntityData.SegmentPath
    blockNameLst.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNameLst.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNameLst.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNameLst.EntityData.Children = types.NewOrderedMap()
    blockNameLst.EntityData.Children.Append("one", types.YChild{"One", &blockNameLst.One})
    blockNameLst.EntityData.Children.Append("continuous", types.YChild{"Continuous", &blockNameLst.Continuous})
    blockNameLst.EntityData.Children.Append("stop", types.YChild{"Stop", &blockNameLst.Stop})
    blockNameLst.EntityData.Leafs = types.NewOrderedMap()
    blockNameLst.EntityData.Leafs.Append("block-name", types.YLeaf{"BlockName", blockNameLst.BlockName})

    blockNameLst.EntityData.YListKeys = []string {"BlockName"}

    return &(blockNameLst.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location
}

func (one *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One) GetEntityData() *types.CommonEntityData {
    one.EntityData.YFilter = one.YFilter
    one.EntityData.YangName = "one"
    one.EntityData.BundleName = "cisco_ios_xr"
    one.EntityData.ParentYangName = "block-name-lst"
    one.EntityData.SegmentPath = "one"
    one.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/" + one.EntityData.SegmentPath
    one.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    one.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    one.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    one.EntityData.Children = types.NewOrderedMap()
    one.EntityData.Children.Append("rate", types.YChild{"Rate", &one.Rate})
    one.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range one.Location {
        one.EntityData.Children.Append(types.GetSegmentPath(one.Location[i]), types.YChild{"Location", one.Location[i]})
    }
    one.EntityData.Leafs = types.NewOrderedMap()

    one.EntityData.YListKeys = []string {}

    return &(one.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "one"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/one/" + rate.EntityData.SegmentPath
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/one/rate/" + errorNumber.EntityData.SegmentPath
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/one/rate/error-number/" + duration.EntityData.SegmentPath
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/one/rate/error-number/duration/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "one"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/one/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location
}

func (continuous *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous) GetEntityData() *types.CommonEntityData {
    continuous.EntityData.YFilter = continuous.YFilter
    continuous.EntityData.YangName = "continuous"
    continuous.EntityData.BundleName = "cisco_ios_xr"
    continuous.EntityData.ParentYangName = "block-name-lst"
    continuous.EntityData.SegmentPath = "continuous"
    continuous.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/" + continuous.EntityData.SegmentPath
    continuous.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    continuous.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    continuous.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    continuous.EntityData.Children = types.NewOrderedMap()
    continuous.EntityData.Children.Append("rate", types.YChild{"Rate", &continuous.Rate})
    continuous.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range continuous.Location {
        continuous.EntityData.Children.Append(types.GetSegmentPath(continuous.Location[i]), types.YChild{"Location", continuous.Location[i]})
    }
    continuous.EntityData.Leafs = types.NewOrderedMap()

    continuous.EntityData.YListKeys = []string {}

    return &(continuous.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "continuous"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/continuous/" + rate.EntityData.SegmentPath
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/continuous/rate/" + errorNumber.EntityData.SegmentPath
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/continuous/rate/error-number/" + duration.EntityData.SegmentPath
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/continuous/rate/error-number/duration/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "continuous"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/continuous/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location
}

func (stop *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop) GetEntityData() *types.CommonEntityData {
    stop.EntityData.YFilter = stop.YFilter
    stop.EntityData.YangName = "stop"
    stop.EntityData.BundleName = "cisco_ios_xr"
    stop.EntityData.ParentYangName = "block-name-lst"
    stop.EntityData.SegmentPath = "stop"
    stop.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/" + stop.EntityData.SegmentPath
    stop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stop.EntityData.Children = types.NewOrderedMap()
    stop.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range stop.Location {
        stop.EntityData.Children.Append(types.GetSegmentPath(stop.Location[i]), types.YChild{"Location", stop.Location[i]})
    }
    stop.EntityData.Leafs = types.NewOrderedMap()

    stop.EntityData.YListKeys = []string {}

    return &(stop.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "stop"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:set/controller/asic/instance/fault-injection/module/fault-type/other/block-name-lst/stop/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Controller
type Controller struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric resource commands.
    Fabric Controller_Fabric

    
    SfeOper Controller_SfeOper

    
    FabricAction Controller_FabricAction

    
    CardMgr Controller_CardMgr
}

func (controller *Controller) GetEntityData() *types.CommonEntityData {
    controller.EntityData.YFilter = controller.YFilter
    controller.EntityData.YangName = "controller"
    controller.EntityData.BundleName = "cisco_ios_xr"
    controller.EntityData.ParentYangName = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1"
    controller.EntityData.SegmentPath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller"
    controller.EntityData.AbsolutePath = controller.EntityData.SegmentPath
    controller.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controller.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controller.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controller.EntityData.Children = types.NewOrderedMap()
    controller.EntityData.Children.Append("fabric", types.YChild{"Fabric", &controller.Fabric})
    controller.EntityData.Children.Append("sfe_oper", types.YChild{"SfeOper", &controller.SfeOper})
    controller.EntityData.Children.Append("fabric_action", types.YChild{"FabricAction", &controller.FabricAction})
    controller.EntityData.Children.Append("card_mgr", types.YChild{"CardMgr", &controller.CardMgr})
    controller.EntityData.Leafs = types.NewOrderedMap()

    controller.EntityData.YListKeys = []string {}

    return &(controller.EntityData)
}

// Controller_Fabric
// Fabric resource commands
type Controller_Fabric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric configuration.
    Fabric Controller_Fabric_Fabric

    
    Oper Controller_Fabric_Oper
}

func (fabric *Controller_Fabric) GetEntityData() *types.CommonEntityData {
    fabric.EntityData.YFilter = fabric.YFilter
    fabric.EntityData.YangName = "fabric"
    fabric.EntityData.BundleName = "cisco_ios_xr"
    fabric.EntityData.ParentYangName = "controller"
    fabric.EntityData.SegmentPath = "fabric"
    fabric.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/" + fabric.EntityData.SegmentPath
    fabric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabric.EntityData.Children = types.NewOrderedMap()
    fabric.EntityData.Children.Append("fabric", types.YChild{"Fabric", &fabric.Fabric})
    fabric.EntityData.Children.Append("oper", types.YChild{"Oper", &fabric.Oper})
    fabric.EntityData.Leafs = types.NewOrderedMap()

    fabric.EntityData.YListKeys = []string {}

    return &(fabric.EntityData)
}

// Controller_Fabric_Fabric
// Fabric configuration
type Controller_Fabric_Fabric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Fsdbagg Controller_Fabric_Fabric_Fsdbagg

    
    Fgid Controller_Fabric_Fabric_Fgid
}

func (fabric *Controller_Fabric_Fabric) GetEntityData() *types.CommonEntityData {
    fabric.EntityData.YFilter = fabric.YFilter
    fabric.EntityData.YangName = "fabric"
    fabric.EntityData.BundleName = "cisco_ios_xr"
    fabric.EntityData.ParentYangName = "fabric"
    fabric.EntityData.SegmentPath = "fabric"
    fabric.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/" + fabric.EntityData.SegmentPath
    fabric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabric.EntityData.Children = types.NewOrderedMap()
    fabric.EntityData.Children.Append("fsdbagg", types.YChild{"Fsdbagg", &fabric.Fsdbagg})
    fabric.EntityData.Children.Append("fgid", types.YChild{"Fgid", &fabric.Fgid})
    fabric.EntityData.Leafs = types.NewOrderedMap()

    fabric.EntityData.YListKeys = []string {}

    return &(fabric.EntityData)
}

// Controller_Fabric_Fabric_Fsdbagg
type Controller_Fabric_Fabric_Fsdbagg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set state of fabric plane. The type is slice of
    // Controller_Fabric_Fabric_Fsdbagg_Plane.
    Plane []*Controller_Fabric_Fabric_Fsdbagg_Plane
}

func (fsdbagg *Controller_Fabric_Fabric_Fsdbagg) GetEntityData() *types.CommonEntityData {
    fsdbagg.EntityData.YFilter = fsdbagg.YFilter
    fsdbagg.EntityData.YangName = "fsdbagg"
    fsdbagg.EntityData.BundleName = "cisco_ios_xr"
    fsdbagg.EntityData.ParentYangName = "fabric"
    fsdbagg.EntityData.SegmentPath = "fsdbagg"
    fsdbagg.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/fabric/" + fsdbagg.EntityData.SegmentPath
    fsdbagg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbagg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbagg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbagg.EntityData.Children = types.NewOrderedMap()
    fsdbagg.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range fsdbagg.Plane {
        fsdbagg.EntityData.Children.Append(types.GetSegmentPath(fsdbagg.Plane[i]), types.YChild{"Plane", fsdbagg.Plane[i]})
    }
    fsdbagg.EntityData.Leafs = types.NewOrderedMap()

    fsdbagg.EntityData.YListKeys = []string {}

    return &(fsdbagg.EntityData)
}

// Controller_Fabric_Fabric_Fsdbagg_Plane
// Set state of fabric plane
type Controller_Fabric_Fabric_Fsdbagg_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: 0.
    PlaneId interface{}

    // Shut down state. The type is interface{}.
    Shutdown interface{}
}

func (plane *Controller_Fabric_Fabric_Fsdbagg_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "fsdbagg"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.PlaneId, "plane_id")
    plane.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/fabric/fsdbagg/" + plane.EntityData.SegmentPath
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", plane.PlaneId})
    plane.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", plane.Shutdown})

    plane.EntityData.YListKeys = []string {"PlaneId"}

    return &(plane.EntityData)
}

// Controller_Fabric_Fabric_Fgid
type Controller_Fabric_Fabric_Fgid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Resource Controller_Fabric_Fabric_Fgid_Resource
}

func (fgid *Controller_Fabric_Fabric_Fgid) GetEntityData() *types.CommonEntityData {
    fgid.EntityData.YFilter = fgid.YFilter
    fgid.EntityData.YangName = "fgid"
    fgid.EntityData.BundleName = "cisco_ios_xr"
    fgid.EntityData.ParentYangName = "fabric"
    fgid.EntityData.SegmentPath = "fgid"
    fgid.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/fabric/" + fgid.EntityData.SegmentPath
    fgid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgid.EntityData.Children = types.NewOrderedMap()
    fgid.EntityData.Children.Append("resource", types.YChild{"Resource", &fgid.Resource})
    fgid.EntityData.Leafs = types.NewOrderedMap()

    fgid.EntityData.YListKeys = []string {}

    return &(fgid.EntityData)
}

// Controller_Fabric_Fabric_Fgid_Resource
type Controller_Fabric_Fabric_Fgid_Resource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Sdr Controller_Fabric_Fabric_Fgid_Resource_Sdr
}

func (resource *Controller_Fabric_Fabric_Fgid_Resource) GetEntityData() *types.CommonEntityData {
    resource.EntityData.YFilter = resource.YFilter
    resource.EntityData.YangName = "resource"
    resource.EntityData.BundleName = "cisco_ios_xr"
    resource.EntityData.ParentYangName = "fgid"
    resource.EntityData.SegmentPath = "resource"
    resource.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/fabric/fgid/" + resource.EntityData.SegmentPath
    resource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resource.EntityData.Children = types.NewOrderedMap()
    resource.EntityData.Children.Append("sdr", types.YChild{"Sdr", &resource.Sdr})
    resource.EntityData.Leafs = types.NewOrderedMap()

    resource.EntityData.YListKeys = []string {}

    return &(resource.EntityData)
}

// Controller_Fabric_Fabric_Fgid_Resource_Sdr
type Controller_Fabric_Fabric_Fgid_Resource_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Allocation Controller_Fabric_Fabric_Fgid_Resource_Sdr_Allocation
}

func (sdr *Controller_Fabric_Fabric_Fgid_Resource_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "resource"
    sdr.EntityData.SegmentPath = "sdr"
    sdr.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/fabric/fgid/resource/" + sdr.EntityData.SegmentPath
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = types.NewOrderedMap()
    sdr.EntityData.Children.Append("allocation", types.YChild{"Allocation", &sdr.Allocation})
    sdr.EntityData.Leafs = types.NewOrderedMap()

    sdr.EntityData.YListKeys = []string {}

    return &(sdr.EntityData)
}

// Controller_Fabric_Fabric_Fgid_Resource_Sdr_Allocation
type Controller_Fabric_Fabric_Fgid_Resource_Sdr_Allocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 20..50.
    Percent interface{}
}

func (allocation *Controller_Fabric_Fabric_Fgid_Resource_Sdr_Allocation) GetEntityData() *types.CommonEntityData {
    allocation.EntityData.YFilter = allocation.YFilter
    allocation.EntityData.YangName = "allocation"
    allocation.EntityData.BundleName = "cisco_ios_xr"
    allocation.EntityData.ParentYangName = "sdr"
    allocation.EntityData.SegmentPath = "allocation"
    allocation.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/fabric/fgid/resource/sdr/" + allocation.EntityData.SegmentPath
    allocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocation.EntityData.Children = types.NewOrderedMap()
    allocation.EntityData.Leafs = types.NewOrderedMap()
    allocation.EntityData.Leafs.Append("percent", types.YLeaf{"Percent", allocation.Percent})

    allocation.EntityData.YListKeys = []string {}

    return &(allocation.EntityData)
}

// Controller_Fabric_Oper
type Controller_Fabric_Oper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FGID management information.
    Fgid Controller_Fabric_Oper_Fgid

    
    FsdbaggActive Controller_Fabric_Oper_FsdbaggActive

    
    FsdbaggLink Controller_Fabric_Oper_FsdbaggLink

    
    FsdbaggSfeAsicType Controller_Fabric_Oper_FsdbaggSfeAsicType

    
    FsdbaggStandby Controller_Fabric_Oper_FsdbaggStandby

    
    FabHealth Controller_Fabric_Oper_FabHealth

    // FSDB Aggregator information.
    FsdbAggregator Controller_Fabric_Oper_FsdbAggregator

    // Fabric link option.
    Link Controller_Fabric_Oper_Link

    // Switch Fabric Element option.
    Sfe Controller_Fabric_Oper_Sfe

    // plane availability status option.
    FsdbPla Controller_Fabric_Oper_FsdbPla

    // FSDB Server information.
    FsdbSrvr Controller_Fabric_Oper_FsdbSrvr
}

func (oper *Controller_Fabric_Oper) GetEntityData() *types.CommonEntityData {
    oper.EntityData.YFilter = oper.YFilter
    oper.EntityData.YangName = "oper"
    oper.EntityData.BundleName = "cisco_ios_xr"
    oper.EntityData.ParentYangName = "fabric"
    oper.EntityData.SegmentPath = "oper"
    oper.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/" + oper.EntityData.SegmentPath
    oper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oper.EntityData.Children = types.NewOrderedMap()
    oper.EntityData.Children.Append("fgid", types.YChild{"Fgid", &oper.Fgid})
    oper.EntityData.Children.Append("fsdbagg_active", types.YChild{"FsdbaggActive", &oper.FsdbaggActive})
    oper.EntityData.Children.Append("fsdbagg_link", types.YChild{"FsdbaggLink", &oper.FsdbaggLink})
    oper.EntityData.Children.Append("fsdbagg_sfe_asic_type", types.YChild{"FsdbaggSfeAsicType", &oper.FsdbaggSfeAsicType})
    oper.EntityData.Children.Append("fsdbagg_standby", types.YChild{"FsdbaggStandby", &oper.FsdbaggStandby})
    oper.EntityData.Children.Append("fab_health", types.YChild{"FabHealth", &oper.FabHealth})
    oper.EntityData.Children.Append("fsdb-aggregator", types.YChild{"FsdbAggregator", &oper.FsdbAggregator})
    oper.EntityData.Children.Append("link", types.YChild{"Link", &oper.Link})
    oper.EntityData.Children.Append("sfe", types.YChild{"Sfe", &oper.Sfe})
    oper.EntityData.Children.Append("fsdb_pla", types.YChild{"FsdbPla", &oper.FsdbPla})
    oper.EntityData.Children.Append("fsdb_srvr", types.YChild{"FsdbSrvr", &oper.FsdbSrvr})
    oper.EntityData.Leafs = types.NewOrderedMap()

    oper.EntityData.YListKeys = []string {}

    return &(oper.EntityData)
}

// Controller_Fabric_Oper_Fgid
// FGID management information
type Controller_Fabric_Oper_Fgid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Information Controller_Fabric_Oper_Fgid_Information

    
    Resource Controller_Fabric_Oper_Fgid_Resource

    
    Statistics Controller_Fabric_Oper_Fgid_Statistics

    
    FgidMgr Controller_Fabric_Oper_Fgid_FgidMgr

    // The type is slice of Controller_Fabric_Oper_Fgid_ProgramError.
    ProgramError []*Controller_Fabric_Oper_Fgid_ProgramError
}

func (fgid *Controller_Fabric_Oper_Fgid) GetEntityData() *types.CommonEntityData {
    fgid.EntityData.YFilter = fgid.YFilter
    fgid.EntityData.YangName = "fgid"
    fgid.EntityData.BundleName = "cisco_ios_xr"
    fgid.EntityData.ParentYangName = "oper"
    fgid.EntityData.SegmentPath = "fgid"
    fgid.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + fgid.EntityData.SegmentPath
    fgid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgid.EntityData.Children = types.NewOrderedMap()
    fgid.EntityData.Children.Append("information", types.YChild{"Information", &fgid.Information})
    fgid.EntityData.Children.Append("resource", types.YChild{"Resource", &fgid.Resource})
    fgid.EntityData.Children.Append("statistics", types.YChild{"Statistics", &fgid.Statistics})
    fgid.EntityData.Children.Append("fgid_mgr", types.YChild{"FgidMgr", &fgid.FgidMgr})
    fgid.EntityData.Children.Append("program_error", types.YChild{"ProgramError", nil})
    for i := range fgid.ProgramError {
        fgid.EntityData.Children.Append(types.GetSegmentPath(fgid.ProgramError[i]), types.YChild{"ProgramError", fgid.ProgramError[i]})
    }
    fgid.EntityData.Leafs = types.NewOrderedMap()

    fgid.EntityData.YListKeys = []string {}

    return &(fgid.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information
type Controller_Fabric_Oper_Fgid_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Information_Id.
    Id []*Controller_Fabric_Oper_Fgid_Information_Id
}

func (information *Controller_Fabric_Oper_Fgid_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "fgid"
    information.EntityData.SegmentPath = "information"
    information.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/" + information.EntityData.SegmentPath
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Children.Append("id", types.YChild{"Id", nil})
    for i := range information.Id {
        information.EntityData.Children.Append(types.GetSegmentPath(information.Id[i]), types.YChild{"Id", information.Id[i]})
    }
    information.EntityData.Leafs = types.NewOrderedMap()

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id
type Controller_Fabric_Oper_Fgid_Information_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..128000.
    FgidId interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalAssoFabricqIds interface{}

    // The type is string.
    AssoClientInfo interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps.
    HexBitmaps []*Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps.
    BinaryBitmaps []*Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds.
    AssoFabricqIds []*Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds

    // The type is slice of Controller_Fabric_Oper_Fgid_Information_Id_Drivers.
    Drivers []*Controller_Fabric_Oper_Fgid_Information_Id_Drivers
}

func (id *Controller_Fabric_Oper_Fgid_Information_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "information"
    id.EntityData.SegmentPath = "id" + types.AddKeyToken(id.FgidId, "fgid_id")
    id.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/information/" + id.EntityData.SegmentPath
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = types.NewOrderedMap()
    id.EntityData.Children.Append("hex_bitmaps", types.YChild{"HexBitmaps", nil})
    for i := range id.HexBitmaps {
        id.EntityData.Children.Append(types.GetSegmentPath(id.HexBitmaps[i]), types.YChild{"HexBitmaps", id.HexBitmaps[i]})
    }
    id.EntityData.Children.Append("binary_bitmaps", types.YChild{"BinaryBitmaps", nil})
    for i := range id.BinaryBitmaps {
        id.EntityData.Children.Append(types.GetSegmentPath(id.BinaryBitmaps[i]), types.YChild{"BinaryBitmaps", id.BinaryBitmaps[i]})
    }
    id.EntityData.Children.Append("asso_fabricq_ids", types.YChild{"AssoFabricqIds", nil})
    for i := range id.AssoFabricqIds {
        id.EntityData.Children.Append(types.GetSegmentPath(id.AssoFabricqIds[i]), types.YChild{"AssoFabricqIds", id.AssoFabricqIds[i]})
    }
    id.EntityData.Children.Append("drivers", types.YChild{"Drivers", nil})
    for i := range id.Drivers {
        id.EntityData.Children.Append(types.GetSegmentPath(id.Drivers[i]), types.YChild{"Drivers", id.Drivers[i]})
    }
    id.EntityData.Leafs = types.NewOrderedMap()
    id.EntityData.Leafs.Append("fgid_id", types.YLeaf{"FgidId", id.FgidId})
    id.EntityData.Leafs.Append("total_asso_fabricq_ids", types.YLeaf{"TotalAssoFabricqIds", id.TotalAssoFabricqIds})
    id.EntityData.Leafs.Append("asso_client_info", types.YLeaf{"AssoClientInfo", id.AssoClientInfo})

    id.EntityData.YListKeys = []string {"FgidId"}

    return &(id.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps
type Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is string.
    Bitmap interface{}
}

func (hexBitmaps *Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps) GetEntityData() *types.CommonEntityData {
    hexBitmaps.EntityData.YFilter = hexBitmaps.YFilter
    hexBitmaps.EntityData.YangName = "hex_bitmaps"
    hexBitmaps.EntityData.BundleName = "cisco_ios_xr"
    hexBitmaps.EntityData.ParentYangName = "id"
    hexBitmaps.EntityData.SegmentPath = "hex_bitmaps" + types.AddKeyToken(hexBitmaps.RackNumber, "rack_number")
    hexBitmaps.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/information/id/" + hexBitmaps.EntityData.SegmentPath
    hexBitmaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hexBitmaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hexBitmaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hexBitmaps.EntityData.Children = types.NewOrderedMap()
    hexBitmaps.EntityData.Leafs = types.NewOrderedMap()
    hexBitmaps.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", hexBitmaps.RackNumber})
    hexBitmaps.EntityData.Leafs.Append("bitmap", types.YLeaf{"Bitmap", hexBitmaps.Bitmap})

    hexBitmaps.EntityData.YListKeys = []string {"RackNumber"}

    return &(hexBitmaps.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps
type Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is string.
    Bitmap interface{}
}

func (binaryBitmaps *Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps) GetEntityData() *types.CommonEntityData {
    binaryBitmaps.EntityData.YFilter = binaryBitmaps.YFilter
    binaryBitmaps.EntityData.YangName = "binary_bitmaps"
    binaryBitmaps.EntityData.BundleName = "cisco_ios_xr"
    binaryBitmaps.EntityData.ParentYangName = "id"
    binaryBitmaps.EntityData.SegmentPath = "binary_bitmaps" + types.AddKeyToken(binaryBitmaps.RackNumber, "rack_number")
    binaryBitmaps.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/information/id/" + binaryBitmaps.EntityData.SegmentPath
    binaryBitmaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    binaryBitmaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    binaryBitmaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    binaryBitmaps.EntityData.Children = types.NewOrderedMap()
    binaryBitmaps.EntityData.Leafs = types.NewOrderedMap()
    binaryBitmaps.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", binaryBitmaps.RackNumber})
    binaryBitmaps.EntityData.Leafs.Append("bitmap", types.YLeaf{"Bitmap", binaryBitmaps.Bitmap})

    binaryBitmaps.EntityData.YListKeys = []string {"RackNumber"}

    return &(binaryBitmaps.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds
type Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    FabricqId interface{}
}

func (assoFabricqIds *Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds) GetEntityData() *types.CommonEntityData {
    assoFabricqIds.EntityData.YFilter = assoFabricqIds.YFilter
    assoFabricqIds.EntityData.YangName = "asso_fabricq_ids"
    assoFabricqIds.EntityData.BundleName = "cisco_ios_xr"
    assoFabricqIds.EntityData.ParentYangName = "id"
    assoFabricqIds.EntityData.SegmentPath = "asso_fabricq_ids" + types.AddKeyToken(assoFabricqIds.FabricqId, "fabricq_id")
    assoFabricqIds.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/information/id/" + assoFabricqIds.EntityData.SegmentPath
    assoFabricqIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    assoFabricqIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    assoFabricqIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    assoFabricqIds.EntityData.Children = types.NewOrderedMap()
    assoFabricqIds.EntityData.Leafs = types.NewOrderedMap()
    assoFabricqIds.EntityData.Leafs.Append("fabricq_id", types.YLeaf{"FabricqId", assoFabricqIds.FabricqId})

    assoFabricqIds.EntityData.YListKeys = []string {"FabricqId"}

    return &(assoFabricqIds.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_Drivers
type Controller_Fabric_Oper_Fgid_Information_Id_Drivers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients.
    Clients []*Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients
}

func (drivers *Controller_Fabric_Oper_Fgid_Information_Id_Drivers) GetEntityData() *types.CommonEntityData {
    drivers.EntityData.YFilter = drivers.YFilter
    drivers.EntityData.YangName = "drivers"
    drivers.EntityData.BundleName = "cisco_ios_xr"
    drivers.EntityData.ParentYangName = "id"
    drivers.EntityData.SegmentPath = "drivers" + types.AddKeyToken(drivers.RackNumber, "rack_number")
    drivers.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/information/id/" + drivers.EntityData.SegmentPath
    drivers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    drivers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    drivers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    drivers.EntityData.Children = types.NewOrderedMap()
    drivers.EntityData.Children.Append("clients", types.YChild{"Clients", nil})
    for i := range drivers.Clients {
        drivers.EntityData.Children.Append(types.GetSegmentPath(drivers.Clients[i]), types.YChild{"Clients", drivers.Clients[i]})
    }
    drivers.EntityData.Leafs = types.NewOrderedMap()
    drivers.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", drivers.RackNumber})

    drivers.EntityData.YListKeys = []string {"RackNumber"}

    return &(drivers.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients
type Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    ClientIdx interface{}

    // The type is bool. The default value is false.
    ShowAsic0 interface{}

    // The type is string.
    Asic0Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic1 interface{}

    // The type is string.
    Asic1Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic2 interface{}

    // The type is string.
    Asic2Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic3 interface{}

    // The type is string.
    Asic3Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic4 interface{}

    // The type is string.
    Asic4Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic5 interface{}

    // The type is string.
    Asic5Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic6 interface{}

    // The type is string.
    Asic6Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic7 interface{}

    // The type is string.
    Asic7Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic8 interface{}

    // The type is string.
    Asic8Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic9 interface{}

    // The type is string.
    Asic9Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic10 interface{}

    // The type is string.
    Asic10Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic11 interface{}

    // The type is string.
    Asic11Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic12 interface{}

    // The type is string.
    Asic12Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic13 interface{}

    // The type is string.
    Asic13Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic14 interface{}

    // The type is string.
    Asic14Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic15 interface{}

    // The type is string.
    Asic15Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic16 interface{}

    // The type is string.
    Asic16Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic17 interface{}

    // The type is string.
    Asic17Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic18 interface{}

    // The type is string.
    Asic18Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic19 interface{}

    // The type is string.
    Asic19Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic20 interface{}

    // The type is string.
    Asic20Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic21 interface{}

    // The type is string.
    Asic21Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic22 interface{}

    // The type is string.
    Asic22Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic23 interface{}

    // The type is string.
    Asic23Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic24 interface{}

    // The type is string.
    Asic24Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic25 interface{}

    // The type is string.
    Asic25Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic26 interface{}

    // The type is string.
    Asic26Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic27 interface{}

    // The type is string.
    Asic27Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic28 interface{}

    // The type is string.
    Asic28Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic29 interface{}

    // The type is string.
    Asic29Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic30 interface{}

    // The type is string.
    Asic30Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic31 interface{}

    // The type is string.
    Asic31Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic32 interface{}

    // The type is string.
    Asic32Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic33 interface{}

    // The type is string.
    Asic33Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic34 interface{}

    // The type is string.
    Asic34Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic35 interface{}

    // The type is string.
    Asic35Bitmap interface{}
}

func (clients *Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients) GetEntityData() *types.CommonEntityData {
    clients.EntityData.YFilter = clients.YFilter
    clients.EntityData.YangName = "clients"
    clients.EntityData.BundleName = "cisco_ios_xr"
    clients.EntityData.ParentYangName = "drivers"
    clients.EntityData.SegmentPath = "clients" + types.AddKeyToken(clients.ClientIdx, "client_idx")
    clients.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/information/id/drivers/" + clients.EntityData.SegmentPath
    clients.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clients.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clients.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clients.EntityData.Children = types.NewOrderedMap()
    clients.EntityData.Leafs = types.NewOrderedMap()
    clients.EntityData.Leafs.Append("client_idx", types.YLeaf{"ClientIdx", clients.ClientIdx})
    clients.EntityData.Leafs.Append("show_asic_0", types.YLeaf{"ShowAsic0", clients.ShowAsic0})
    clients.EntityData.Leafs.Append("asic_0_bitmap", types.YLeaf{"Asic0Bitmap", clients.Asic0Bitmap})
    clients.EntityData.Leafs.Append("show_asic_1", types.YLeaf{"ShowAsic1", clients.ShowAsic1})
    clients.EntityData.Leafs.Append("asic_1_bitmap", types.YLeaf{"Asic1Bitmap", clients.Asic1Bitmap})
    clients.EntityData.Leafs.Append("show_asic_2", types.YLeaf{"ShowAsic2", clients.ShowAsic2})
    clients.EntityData.Leafs.Append("asic_2_bitmap", types.YLeaf{"Asic2Bitmap", clients.Asic2Bitmap})
    clients.EntityData.Leafs.Append("show_asic_3", types.YLeaf{"ShowAsic3", clients.ShowAsic3})
    clients.EntityData.Leafs.Append("asic_3_bitmap", types.YLeaf{"Asic3Bitmap", clients.Asic3Bitmap})
    clients.EntityData.Leafs.Append("show_asic_4", types.YLeaf{"ShowAsic4", clients.ShowAsic4})
    clients.EntityData.Leafs.Append("asic_4_bitmap", types.YLeaf{"Asic4Bitmap", clients.Asic4Bitmap})
    clients.EntityData.Leafs.Append("show_asic_5", types.YLeaf{"ShowAsic5", clients.ShowAsic5})
    clients.EntityData.Leafs.Append("asic_5_bitmap", types.YLeaf{"Asic5Bitmap", clients.Asic5Bitmap})
    clients.EntityData.Leafs.Append("show_asic_6", types.YLeaf{"ShowAsic6", clients.ShowAsic6})
    clients.EntityData.Leafs.Append("asic_6_bitmap", types.YLeaf{"Asic6Bitmap", clients.Asic6Bitmap})
    clients.EntityData.Leafs.Append("show_asic_7", types.YLeaf{"ShowAsic7", clients.ShowAsic7})
    clients.EntityData.Leafs.Append("asic_7_bitmap", types.YLeaf{"Asic7Bitmap", clients.Asic7Bitmap})
    clients.EntityData.Leafs.Append("show_asic_8", types.YLeaf{"ShowAsic8", clients.ShowAsic8})
    clients.EntityData.Leafs.Append("asic_8_bitmap", types.YLeaf{"Asic8Bitmap", clients.Asic8Bitmap})
    clients.EntityData.Leafs.Append("show_asic_9", types.YLeaf{"ShowAsic9", clients.ShowAsic9})
    clients.EntityData.Leafs.Append("asic_9_bitmap", types.YLeaf{"Asic9Bitmap", clients.Asic9Bitmap})
    clients.EntityData.Leafs.Append("show_asic_10", types.YLeaf{"ShowAsic10", clients.ShowAsic10})
    clients.EntityData.Leafs.Append("asic_10_bitmap", types.YLeaf{"Asic10Bitmap", clients.Asic10Bitmap})
    clients.EntityData.Leafs.Append("show_asic_11", types.YLeaf{"ShowAsic11", clients.ShowAsic11})
    clients.EntityData.Leafs.Append("asic_11_bitmap", types.YLeaf{"Asic11Bitmap", clients.Asic11Bitmap})
    clients.EntityData.Leafs.Append("show_asic_12", types.YLeaf{"ShowAsic12", clients.ShowAsic12})
    clients.EntityData.Leafs.Append("asic_12_bitmap", types.YLeaf{"Asic12Bitmap", clients.Asic12Bitmap})
    clients.EntityData.Leafs.Append("show_asic_13", types.YLeaf{"ShowAsic13", clients.ShowAsic13})
    clients.EntityData.Leafs.Append("asic_13_bitmap", types.YLeaf{"Asic13Bitmap", clients.Asic13Bitmap})
    clients.EntityData.Leafs.Append("show_asic_14", types.YLeaf{"ShowAsic14", clients.ShowAsic14})
    clients.EntityData.Leafs.Append("asic_14_bitmap", types.YLeaf{"Asic14Bitmap", clients.Asic14Bitmap})
    clients.EntityData.Leafs.Append("show_asic_15", types.YLeaf{"ShowAsic15", clients.ShowAsic15})
    clients.EntityData.Leafs.Append("asic_15_bitmap", types.YLeaf{"Asic15Bitmap", clients.Asic15Bitmap})
    clients.EntityData.Leafs.Append("show_asic_16", types.YLeaf{"ShowAsic16", clients.ShowAsic16})
    clients.EntityData.Leafs.Append("asic_16_bitmap", types.YLeaf{"Asic16Bitmap", clients.Asic16Bitmap})
    clients.EntityData.Leafs.Append("show_asic_17", types.YLeaf{"ShowAsic17", clients.ShowAsic17})
    clients.EntityData.Leafs.Append("asic_17_bitmap", types.YLeaf{"Asic17Bitmap", clients.Asic17Bitmap})
    clients.EntityData.Leafs.Append("show_asic_18", types.YLeaf{"ShowAsic18", clients.ShowAsic18})
    clients.EntityData.Leafs.Append("asic_18_bitmap", types.YLeaf{"Asic18Bitmap", clients.Asic18Bitmap})
    clients.EntityData.Leafs.Append("show_asic_19", types.YLeaf{"ShowAsic19", clients.ShowAsic19})
    clients.EntityData.Leafs.Append("asic_19_bitmap", types.YLeaf{"Asic19Bitmap", clients.Asic19Bitmap})
    clients.EntityData.Leafs.Append("show_asic_20", types.YLeaf{"ShowAsic20", clients.ShowAsic20})
    clients.EntityData.Leafs.Append("asic_20_bitmap", types.YLeaf{"Asic20Bitmap", clients.Asic20Bitmap})
    clients.EntityData.Leafs.Append("show_asic_21", types.YLeaf{"ShowAsic21", clients.ShowAsic21})
    clients.EntityData.Leafs.Append("asic_21_bitmap", types.YLeaf{"Asic21Bitmap", clients.Asic21Bitmap})
    clients.EntityData.Leafs.Append("show_asic_22", types.YLeaf{"ShowAsic22", clients.ShowAsic22})
    clients.EntityData.Leafs.Append("asic_22_bitmap", types.YLeaf{"Asic22Bitmap", clients.Asic22Bitmap})
    clients.EntityData.Leafs.Append("show_asic_23", types.YLeaf{"ShowAsic23", clients.ShowAsic23})
    clients.EntityData.Leafs.Append("asic_23_bitmap", types.YLeaf{"Asic23Bitmap", clients.Asic23Bitmap})
    clients.EntityData.Leafs.Append("show_asic_24", types.YLeaf{"ShowAsic24", clients.ShowAsic24})
    clients.EntityData.Leafs.Append("asic_24_bitmap", types.YLeaf{"Asic24Bitmap", clients.Asic24Bitmap})
    clients.EntityData.Leafs.Append("show_asic_25", types.YLeaf{"ShowAsic25", clients.ShowAsic25})
    clients.EntityData.Leafs.Append("asic_25_bitmap", types.YLeaf{"Asic25Bitmap", clients.Asic25Bitmap})
    clients.EntityData.Leafs.Append("show_asic_26", types.YLeaf{"ShowAsic26", clients.ShowAsic26})
    clients.EntityData.Leafs.Append("asic_26_bitmap", types.YLeaf{"Asic26Bitmap", clients.Asic26Bitmap})
    clients.EntityData.Leafs.Append("show_asic_27", types.YLeaf{"ShowAsic27", clients.ShowAsic27})
    clients.EntityData.Leafs.Append("asic_27_bitmap", types.YLeaf{"Asic27Bitmap", clients.Asic27Bitmap})
    clients.EntityData.Leafs.Append("show_asic_28", types.YLeaf{"ShowAsic28", clients.ShowAsic28})
    clients.EntityData.Leafs.Append("asic_28_bitmap", types.YLeaf{"Asic28Bitmap", clients.Asic28Bitmap})
    clients.EntityData.Leafs.Append("show_asic_29", types.YLeaf{"ShowAsic29", clients.ShowAsic29})
    clients.EntityData.Leafs.Append("asic_29_bitmap", types.YLeaf{"Asic29Bitmap", clients.Asic29Bitmap})
    clients.EntityData.Leafs.Append("show_asic_30", types.YLeaf{"ShowAsic30", clients.ShowAsic30})
    clients.EntityData.Leafs.Append("asic_30_bitmap", types.YLeaf{"Asic30Bitmap", clients.Asic30Bitmap})
    clients.EntityData.Leafs.Append("show_asic_31", types.YLeaf{"ShowAsic31", clients.ShowAsic31})
    clients.EntityData.Leafs.Append("asic_31_bitmap", types.YLeaf{"Asic31Bitmap", clients.Asic31Bitmap})
    clients.EntityData.Leafs.Append("show_asic_32", types.YLeaf{"ShowAsic32", clients.ShowAsic32})
    clients.EntityData.Leafs.Append("asic_32_bitmap", types.YLeaf{"Asic32Bitmap", clients.Asic32Bitmap})
    clients.EntityData.Leafs.Append("show_asic_33", types.YLeaf{"ShowAsic33", clients.ShowAsic33})
    clients.EntityData.Leafs.Append("asic_33_bitmap", types.YLeaf{"Asic33Bitmap", clients.Asic33Bitmap})
    clients.EntityData.Leafs.Append("show_asic_34", types.YLeaf{"ShowAsic34", clients.ShowAsic34})
    clients.EntityData.Leafs.Append("asic_34_bitmap", types.YLeaf{"Asic34Bitmap", clients.Asic34Bitmap})
    clients.EntityData.Leafs.Append("show_asic_35", types.YLeaf{"ShowAsic35", clients.ShowAsic35})
    clients.EntityData.Leafs.Append("asic_35_bitmap", types.YLeaf{"Asic35Bitmap", clients.Asic35Bitmap})

    clients.EntityData.YListKeys = []string {"ClientIdx"}

    return &(clients.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource
type Controller_Fabric_Oper_Fgid_Resource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Resource_Sdr.
    Sdr []*Controller_Fabric_Oper_Fgid_Resource_Sdr
}

func (resource *Controller_Fabric_Oper_Fgid_Resource) GetEntityData() *types.CommonEntityData {
    resource.EntityData.YFilter = resource.YFilter
    resource.EntityData.YangName = "resource"
    resource.EntityData.BundleName = "cisco_ios_xr"
    resource.EntityData.ParentYangName = "fgid"
    resource.EntityData.SegmentPath = "resource"
    resource.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/" + resource.EntityData.SegmentPath
    resource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resource.EntityData.Children = types.NewOrderedMap()
    resource.EntityData.Children.Append("sdr", types.YChild{"Sdr", nil})
    for i := range resource.Sdr {
        resource.EntityData.Children.Append(types.GetSegmentPath(resource.Sdr[i]), types.YChild{"Sdr", resource.Sdr[i]})
    }
    resource.EntityData.Leafs = types.NewOrderedMap()

    resource.EntityData.YListKeys = []string {}

    return &(resource.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr
type Controller_Fabric_Oper_Fgid_Resource_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    SdrName interface{}

    // The type is string. The default value is Secure Domain Router name..
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_Resource_Sdr_Application.
    Application []*Controller_Fabric_Oper_Fgid_Resource_Sdr_Application
}

func (sdr *Controller_Fabric_Oper_Fgid_Resource_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "resource"
    sdr.EntityData.SegmentPath = "sdr" + types.AddKeyToken(sdr.SdrName, "sdr_name")
    sdr.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/resource/" + sdr.EntityData.SegmentPath
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = types.NewOrderedMap()
    sdr.EntityData.Children.Append("application", types.YChild{"Application", nil})
    for i := range sdr.Application {
        sdr.EntityData.Children.Append(types.GetSegmentPath(sdr.Application[i]), types.YChild{"Application", sdr.Application[i]})
    }
    sdr.EntityData.Leafs = types.NewOrderedMap()
    sdr.EntityData.Leafs.Append("sdr_name", types.YLeaf{"SdrName", sdr.SdrName})
    sdr.EntityData.Leafs.Append("description", types.YLeaf{"Description", sdr.Description})

    sdr.EntityData.YListKeys = []string {"SdrName"}

    return &(sdr.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr_Application
type Controller_Fabric_Oper_Fgid_Resource_Sdr_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    AppName interface{}

    // The type is string. The default value is application..
    Description interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange.
    IdsRange []*Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange
}

func (application *Controller_Fabric_Oper_Fgid_Resource_Sdr_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "sdr"
    application.EntityData.SegmentPath = "application" + types.AddKeyToken(application.AppName, "app_name")
    application.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/resource/sdr/" + application.EntityData.SegmentPath
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Children.Append("ids_range", types.YChild{"IdsRange", nil})
    for i := range application.IdsRange {
        application.EntityData.Children.Append(types.GetSegmentPath(application.IdsRange[i]), types.YChild{"IdsRange", application.IdsRange[i]})
    }
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("app_name", types.YLeaf{"AppName", application.AppName})
    application.EntityData.Leafs.Append("description", types.YLeaf{"Description", application.Description})

    application.EntityData.YListKeys = []string {"AppName"}

    return &(application.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange
type Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..128000.
    Id interface{}

    // This attribute is a key. The type is interface{} with range: 0..128000.
    Elements interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds.
    FgidIds []*Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds
}

func (idsRange *Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange) GetEntityData() *types.CommonEntityData {
    idsRange.EntityData.YFilter = idsRange.YFilter
    idsRange.EntityData.YangName = "ids_range"
    idsRange.EntityData.BundleName = "cisco_ios_xr"
    idsRange.EntityData.ParentYangName = "application"
    idsRange.EntityData.SegmentPath = "ids_range" + types.AddKeyToken(idsRange.Id, "id") + types.AddKeyToken(idsRange.Elements, "elements")
    idsRange.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/resource/sdr/application/" + idsRange.EntityData.SegmentPath
    idsRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idsRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idsRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idsRange.EntityData.Children = types.NewOrderedMap()
    idsRange.EntityData.Children.Append("fgid_ids", types.YChild{"FgidIds", nil})
    for i := range idsRange.FgidIds {
        idsRange.EntityData.Children.Append(types.GetSegmentPath(idsRange.FgidIds[i]), types.YChild{"FgidIds", idsRange.FgidIds[i]})
    }
    idsRange.EntityData.Leafs = types.NewOrderedMap()
    idsRange.EntityData.Leafs.Append("id", types.YLeaf{"Id", idsRange.Id})
    idsRange.EntityData.Leafs.Append("elements", types.YLeaf{"Elements", idsRange.Elements})

    idsRange.EntityData.YListKeys = []string {"Id", "Elements"}

    return &(idsRange.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds
type Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    FgidId interface{}

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    LineIdx interface{}

    // The type is string.
    SdrNameH interface{}

    // The type is string.
    AppNameH interface{}
}

func (fgidIds *Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds) GetEntityData() *types.CommonEntityData {
    fgidIds.EntityData.YFilter = fgidIds.YFilter
    fgidIds.EntityData.YangName = "fgid_ids"
    fgidIds.EntityData.BundleName = "cisco_ios_xr"
    fgidIds.EntityData.ParentYangName = "ids_range"
    fgidIds.EntityData.SegmentPath = "fgid_ids" + types.AddKeyToken(fgidIds.FgidId, "fgid_id") + types.AddKeyToken(fgidIds.LineIdx, "line_idx")
    fgidIds.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/resource/sdr/application/ids_range/" + fgidIds.EntityData.SegmentPath
    fgidIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgidIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgidIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgidIds.EntityData.Children = types.NewOrderedMap()
    fgidIds.EntityData.Leafs = types.NewOrderedMap()
    fgidIds.EntityData.Leafs.Append("fgid_id", types.YLeaf{"FgidId", fgidIds.FgidId})
    fgidIds.EntityData.Leafs.Append("line_idx", types.YLeaf{"LineIdx", fgidIds.LineIdx})
    fgidIds.EntityData.Leafs.Append("sdr_name_h", types.YLeaf{"SdrNameH", fgidIds.SdrNameH})
    fgidIds.EntityData.Leafs.Append("app_name_h", types.YLeaf{"AppNameH", fgidIds.AppNameH})

    fgidIds.EntityData.YListKeys = []string {"FgidId", "LineIdx"}

    return &(fgidIds.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics
type Controller_Fabric_Oper_Fgid_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Controller_Fabric_Oper_Fgid_Statistics_All

    
    Sdr Controller_Fabric_Oper_Fgid_Statistics_Sdr

    
    Pool Controller_Fabric_Oper_Fgid_Statistics_Pool

    
    System Controller_Fabric_Oper_Fgid_Statistics_System
}

func (statistics *Controller_Fabric_Oper_Fgid_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fgid"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("all", types.YChild{"All", &statistics.All})
    statistics.EntityData.Children.Append("sdr", types.YChild{"Sdr", &statistics.Sdr})
    statistics.EntityData.Children.Append("pool", types.YChild{"Pool", &statistics.Pool})
    statistics.EntityData.Children.Append("system", types.YChild{"System", &statistics.System})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All
type Controller_Fabric_Oper_Fgid_Statistics_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_All_StatsList.
    StatsList []*Controller_Fabric_Oper_Fgid_Statistics_All_StatsList

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_All_SdrList.
    SdrList []*Controller_Fabric_Oper_Fgid_Statistics_All_SdrList

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_All_PoolList.
    PoolList []*Controller_Fabric_Oper_Fgid_Statistics_All_PoolList
}

func (all *Controller_Fabric_Oper_Fgid_Statistics_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "statistics"
    all.EntityData.SegmentPath = "all"
    all.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/" + all.EntityData.SegmentPath
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("stats_list", types.YChild{"StatsList", nil})
    for i := range all.StatsList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.StatsList[i]), types.YChild{"StatsList", all.StatsList[i]})
    }
    all.EntityData.Children.Append("sdr_list", types.YChild{"SdrList", nil})
    for i := range all.SdrList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.SdrList[i]), types.YChild{"SdrList", all.SdrList[i]})
    }
    all.EntityData.Children.Append("pool_list", types.YChild{"PoolList", nil})
    for i := range all.PoolList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.PoolList[i]), types.YChild{"PoolList", all.PoolList[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_StatsList
type Controller_Fabric_Oper_Fgid_Statistics_All_StatsList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    SystemStats interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemHwmFgids interface{}
}

func (statsList *Controller_Fabric_Oper_Fgid_Statistics_All_StatsList) GetEntityData() *types.CommonEntityData {
    statsList.EntityData.YFilter = statsList.YFilter
    statsList.EntityData.YangName = "stats_list"
    statsList.EntityData.BundleName = "cisco_ios_xr"
    statsList.EntityData.ParentYangName = "all"
    statsList.EntityData.SegmentPath = "stats_list" + types.AddKeyToken(statsList.SystemStats, "system_stats")
    statsList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/all/" + statsList.EntityData.SegmentPath
    statsList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statsList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statsList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statsList.EntityData.Children = types.NewOrderedMap()
    statsList.EntityData.Leafs = types.NewOrderedMap()
    statsList.EntityData.Leafs.Append("system_stats", types.YLeaf{"SystemStats", statsList.SystemStats})
    statsList.EntityData.Leafs.Append("system_total_fgids", types.YLeaf{"SystemTotalFgids", statsList.SystemTotalFgids})
    statsList.EntityData.Leafs.Append("system_inuse_fgids", types.YLeaf{"SystemInuseFgids", statsList.SystemInuseFgids})
    statsList.EntityData.Leafs.Append("system_hwm_fgids", types.YLeaf{"SystemHwmFgids", statsList.SystemHwmFgids})

    statsList.EntityData.YListKeys = []string {"SystemStats"}

    return &(statsList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_SdrList
type Controller_Fabric_Oper_Fgid_Statistics_All_SdrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    SdrName interface{}

    // The type is string. The default value is Secure Domain Router name..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrHwmFgids interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application.
    Application []*Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application
}

func (sdrList *Controller_Fabric_Oper_Fgid_Statistics_All_SdrList) GetEntityData() *types.CommonEntityData {
    sdrList.EntityData.YFilter = sdrList.YFilter
    sdrList.EntityData.YangName = "sdr_list"
    sdrList.EntityData.BundleName = "cisco_ios_xr"
    sdrList.EntityData.ParentYangName = "all"
    sdrList.EntityData.SegmentPath = "sdr_list" + types.AddKeyToken(sdrList.SdrName, "sdr_name")
    sdrList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/all/" + sdrList.EntityData.SegmentPath
    sdrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrList.EntityData.Children = types.NewOrderedMap()
    sdrList.EntityData.Children.Append("application", types.YChild{"Application", nil})
    for i := range sdrList.Application {
        sdrList.EntityData.Children.Append(types.GetSegmentPath(sdrList.Application[i]), types.YChild{"Application", sdrList.Application[i]})
    }
    sdrList.EntityData.Leafs = types.NewOrderedMap()
    sdrList.EntityData.Leafs.Append("sdr_name", types.YLeaf{"SdrName", sdrList.SdrName})
    sdrList.EntityData.Leafs.Append("description", types.YLeaf{"Description", sdrList.Description})
    sdrList.EntityData.Leafs.Append("sdr_total_fgids", types.YLeaf{"SdrTotalFgids", sdrList.SdrTotalFgids})
    sdrList.EntityData.Leafs.Append("sdr_inuse_fgids", types.YLeaf{"SdrInuseFgids", sdrList.SdrInuseFgids})
    sdrList.EntityData.Leafs.Append("sdr_hwm_fgids", types.YLeaf{"SdrHwmFgids", sdrList.SdrHwmFgids})

    sdrList.EntityData.YListKeys = []string {"SdrName"}

    return &(sdrList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application
type Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    AppName interface{}

    // The type is string. The default value is application..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    AppId interface{}

    // The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is interface{} with range: 0..4294967295.
    InuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (application *Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "sdr_list"
    application.EntityData.SegmentPath = "application" + types.AddKeyToken(application.AppName, "app_name")
    application.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/all/sdr_list/" + application.EntityData.SegmentPath
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("app_name", types.YLeaf{"AppName", application.AppName})
    application.EntityData.Leafs.Append("description", types.YLeaf{"Description", application.Description})
    application.EntityData.Leafs.Append("app_id", types.YLeaf{"AppId", application.AppId})
    application.EntityData.Leafs.Append("pool_id", types.YLeaf{"PoolId", application.PoolId})
    application.EntityData.Leafs.Append("inuse_fgids", types.YLeaf{"InuseFgids", application.InuseFgids})
    application.EntityData.Leafs.Append("hwm_fgids", types.YLeaf{"HwmFgids", application.HwmFgids})

    application.EntityData.YListKeys = []string {"AppName"}

    return &(application.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_PoolList
type Controller_Fabric_Oper_Fgid_Statistics_All_PoolList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is string.
    PoolName interface{}

    // The type is string.
    PoolType interface{}

    // The type is string.
    StartFgid interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrentFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (poolList *Controller_Fabric_Oper_Fgid_Statistics_All_PoolList) GetEntityData() *types.CommonEntityData {
    poolList.EntityData.YFilter = poolList.YFilter
    poolList.EntityData.YangName = "pool_list"
    poolList.EntityData.BundleName = "cisco_ios_xr"
    poolList.EntityData.ParentYangName = "all"
    poolList.EntityData.SegmentPath = "pool_list" + types.AddKeyToken(poolList.PoolId, "pool_id")
    poolList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/all/" + poolList.EntityData.SegmentPath
    poolList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    poolList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    poolList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    poolList.EntityData.Children = types.NewOrderedMap()
    poolList.EntityData.Leafs = types.NewOrderedMap()
    poolList.EntityData.Leafs.Append("pool_id", types.YLeaf{"PoolId", poolList.PoolId})
    poolList.EntityData.Leafs.Append("pool_name", types.YLeaf{"PoolName", poolList.PoolName})
    poolList.EntityData.Leafs.Append("pool_type", types.YLeaf{"PoolType", poolList.PoolType})
    poolList.EntityData.Leafs.Append("start_fgid", types.YLeaf{"StartFgid", poolList.StartFgid})
    poolList.EntityData.Leafs.Append("total_fgids", types.YLeaf{"TotalFgids", poolList.TotalFgids})
    poolList.EntityData.Leafs.Append("current_fgids", types.YLeaf{"CurrentFgids", poolList.CurrentFgids})
    poolList.EntityData.Leafs.Append("hwm_fgids", types.YLeaf{"HwmFgids", poolList.HwmFgids})

    poolList.EntityData.YListKeys = []string {"PoolId"}

    return &(poolList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Sdr
type Controller_Fabric_Oper_Fgid_Statistics_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList.
    SdrList []*Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList
}

func (sdr *Controller_Fabric_Oper_Fgid_Statistics_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "statistics"
    sdr.EntityData.SegmentPath = "sdr"
    sdr.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/" + sdr.EntityData.SegmentPath
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = types.NewOrderedMap()
    sdr.EntityData.Children.Append("sdr_list", types.YChild{"SdrList", nil})
    for i := range sdr.SdrList {
        sdr.EntityData.Children.Append(types.GetSegmentPath(sdr.SdrList[i]), types.YChild{"SdrList", sdr.SdrList[i]})
    }
    sdr.EntityData.Leafs = types.NewOrderedMap()

    sdr.EntityData.YListKeys = []string {}

    return &(sdr.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList
type Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    SdrName interface{}

    // The type is string. The default value is Secure Domain Router name..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrHwmFgids interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application.
    Application []*Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application
}

func (sdrList *Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList) GetEntityData() *types.CommonEntityData {
    sdrList.EntityData.YFilter = sdrList.YFilter
    sdrList.EntityData.YangName = "sdr_list"
    sdrList.EntityData.BundleName = "cisco_ios_xr"
    sdrList.EntityData.ParentYangName = "sdr"
    sdrList.EntityData.SegmentPath = "sdr_list" + types.AddKeyToken(sdrList.SdrName, "sdr_name")
    sdrList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/sdr/" + sdrList.EntityData.SegmentPath
    sdrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrList.EntityData.Children = types.NewOrderedMap()
    sdrList.EntityData.Children.Append("application", types.YChild{"Application", nil})
    for i := range sdrList.Application {
        sdrList.EntityData.Children.Append(types.GetSegmentPath(sdrList.Application[i]), types.YChild{"Application", sdrList.Application[i]})
    }
    sdrList.EntityData.Leafs = types.NewOrderedMap()
    sdrList.EntityData.Leafs.Append("sdr_name", types.YLeaf{"SdrName", sdrList.SdrName})
    sdrList.EntityData.Leafs.Append("description", types.YLeaf{"Description", sdrList.Description})
    sdrList.EntityData.Leafs.Append("sdr_total_fgids", types.YLeaf{"SdrTotalFgids", sdrList.SdrTotalFgids})
    sdrList.EntityData.Leafs.Append("sdr_inuse_fgids", types.YLeaf{"SdrInuseFgids", sdrList.SdrInuseFgids})
    sdrList.EntityData.Leafs.Append("sdr_hwm_fgids", types.YLeaf{"SdrHwmFgids", sdrList.SdrHwmFgids})

    sdrList.EntityData.YListKeys = []string {"SdrName"}

    return &(sdrList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application
type Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    AppName interface{}

    // The type is string. The default value is application..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    AppId interface{}

    // The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is interface{} with range: 0..4294967295.
    InuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (application *Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "sdr_list"
    application.EntityData.SegmentPath = "application" + types.AddKeyToken(application.AppName, "app_name")
    application.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/sdr/sdr_list/" + application.EntityData.SegmentPath
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("app_name", types.YLeaf{"AppName", application.AppName})
    application.EntityData.Leafs.Append("description", types.YLeaf{"Description", application.Description})
    application.EntityData.Leafs.Append("app_id", types.YLeaf{"AppId", application.AppId})
    application.EntityData.Leafs.Append("pool_id", types.YLeaf{"PoolId", application.PoolId})
    application.EntityData.Leafs.Append("inuse_fgids", types.YLeaf{"InuseFgids", application.InuseFgids})
    application.EntityData.Leafs.Append("hwm_fgids", types.YLeaf{"HwmFgids", application.HwmFgids})

    application.EntityData.YListKeys = []string {"AppName"}

    return &(application.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Pool
type Controller_Fabric_Oper_Fgid_Statistics_Pool struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList.
    PoolList []*Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList
}

func (pool *Controller_Fabric_Oper_Fgid_Statistics_Pool) GetEntityData() *types.CommonEntityData {
    pool.EntityData.YFilter = pool.YFilter
    pool.EntityData.YangName = "pool"
    pool.EntityData.BundleName = "cisco_ios_xr"
    pool.EntityData.ParentYangName = "statistics"
    pool.EntityData.SegmentPath = "pool"
    pool.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/" + pool.EntityData.SegmentPath
    pool.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pool.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pool.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pool.EntityData.Children = types.NewOrderedMap()
    pool.EntityData.Children.Append("pool_list", types.YChild{"PoolList", nil})
    for i := range pool.PoolList {
        pool.EntityData.Children.Append(types.GetSegmentPath(pool.PoolList[i]), types.YChild{"PoolList", pool.PoolList[i]})
    }
    pool.EntityData.Leafs = types.NewOrderedMap()

    pool.EntityData.YListKeys = []string {}

    return &(pool.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList
type Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is string.
    PoolName interface{}

    // The type is string.
    PoolType interface{}

    // The type is string.
    StartFgid interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrentFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (poolList *Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList) GetEntityData() *types.CommonEntityData {
    poolList.EntityData.YFilter = poolList.YFilter
    poolList.EntityData.YangName = "pool_list"
    poolList.EntityData.BundleName = "cisco_ios_xr"
    poolList.EntityData.ParentYangName = "pool"
    poolList.EntityData.SegmentPath = "pool_list" + types.AddKeyToken(poolList.PoolId, "pool_id")
    poolList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/pool/" + poolList.EntityData.SegmentPath
    poolList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    poolList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    poolList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    poolList.EntityData.Children = types.NewOrderedMap()
    poolList.EntityData.Leafs = types.NewOrderedMap()
    poolList.EntityData.Leafs.Append("pool_id", types.YLeaf{"PoolId", poolList.PoolId})
    poolList.EntityData.Leafs.Append("pool_name", types.YLeaf{"PoolName", poolList.PoolName})
    poolList.EntityData.Leafs.Append("pool_type", types.YLeaf{"PoolType", poolList.PoolType})
    poolList.EntityData.Leafs.Append("start_fgid", types.YLeaf{"StartFgid", poolList.StartFgid})
    poolList.EntityData.Leafs.Append("total_fgids", types.YLeaf{"TotalFgids", poolList.TotalFgids})
    poolList.EntityData.Leafs.Append("current_fgids", types.YLeaf{"CurrentFgids", poolList.CurrentFgids})
    poolList.EntityData.Leafs.Append("hwm_fgids", types.YLeaf{"HwmFgids", poolList.HwmFgids})

    poolList.EntityData.YListKeys = []string {"PoolId"}

    return &(poolList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_System
type Controller_Fabric_Oper_Fgid_Statistics_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Statistics_System_StatsList.
    StatsList []*Controller_Fabric_Oper_Fgid_Statistics_System_StatsList
}

func (system *Controller_Fabric_Oper_Fgid_Statistics_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "statistics"
    system.EntityData.SegmentPath = "system"
    system.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/" + system.EntityData.SegmentPath
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = types.NewOrderedMap()
    system.EntityData.Children.Append("stats_list", types.YChild{"StatsList", nil})
    for i := range system.StatsList {
        system.EntityData.Children.Append(types.GetSegmentPath(system.StatsList[i]), types.YChild{"StatsList", system.StatsList[i]})
    }
    system.EntityData.Leafs = types.NewOrderedMap()

    system.EntityData.YListKeys = []string {}

    return &(system.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_System_StatsList
type Controller_Fabric_Oper_Fgid_Statistics_System_StatsList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    SystemStats interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemHwmFgids interface{}
}

func (statsList *Controller_Fabric_Oper_Fgid_Statistics_System_StatsList) GetEntityData() *types.CommonEntityData {
    statsList.EntityData.YFilter = statsList.YFilter
    statsList.EntityData.YangName = "stats_list"
    statsList.EntityData.BundleName = "cisco_ios_xr"
    statsList.EntityData.ParentYangName = "system"
    statsList.EntityData.SegmentPath = "stats_list" + types.AddKeyToken(statsList.SystemStats, "system_stats")
    statsList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/statistics/system/" + statsList.EntityData.SegmentPath
    statsList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statsList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statsList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statsList.EntityData.Children = types.NewOrderedMap()
    statsList.EntityData.Leafs = types.NewOrderedMap()
    statsList.EntityData.Leafs.Append("system_stats", types.YLeaf{"SystemStats", statsList.SystemStats})
    statsList.EntityData.Leafs.Append("system_total_fgids", types.YLeaf{"SystemTotalFgids", statsList.SystemTotalFgids})
    statsList.EntityData.Leafs.Append("system_inuse_fgids", types.YLeaf{"SystemInuseFgids", statsList.SystemInuseFgids})
    statsList.EntityData.Leafs.Append("system_hwm_fgids", types.YLeaf{"SystemHwmFgids", statsList.SystemHwmFgids})

    statsList.EntityData.YListKeys = []string {"SystemStats"}

    return &(statsList.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr
type Controller_Fabric_Oper_Fgid_FgidMgr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Fabric_Oper_Fgid_FgidMgr_Trace.
    Trace []*Controller_Fabric_Oper_Fgid_FgidMgr_Trace
}

func (fgidMgr *Controller_Fabric_Oper_Fgid_FgidMgr) GetEntityData() *types.CommonEntityData {
    fgidMgr.EntityData.YFilter = fgidMgr.YFilter
    fgidMgr.EntityData.YangName = "fgid_mgr"
    fgidMgr.EntityData.BundleName = "cisco_ios_xr"
    fgidMgr.EntityData.ParentYangName = "fgid"
    fgidMgr.EntityData.SegmentPath = "fgid_mgr"
    fgidMgr.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/" + fgidMgr.EntityData.SegmentPath
    fgidMgr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgidMgr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgidMgr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgidMgr.EntityData.Children = types.NewOrderedMap()
    fgidMgr.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range fgidMgr.Trace {
        fgidMgr.EntityData.Children.Append(types.GetSegmentPath(fgidMgr.Trace[i]), types.YChild{"Trace", fgidMgr.Trace[i]})
    }
    fgidMgr.EntityData.Leafs = types.NewOrderedMap()

    fgidMgr.EntityData.YListKeys = []string {}

    return &(fgidMgr.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace
// show traceable processes
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location.
    Location []*Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location
}

func (trace *Controller_Fabric_Oper_Fgid_FgidMgr_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "fgid_mgr"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/fgid_mgr/" + trace.EntityData.SegmentPath
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions.
    AllOptions []*Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions
}

func (location *Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/fgid_mgr/trace/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/fgid_mgr/trace/location/" + allOptions.EntityData.SegmentPath
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        types.SetYListKey(allOptions.TraceBlocks[i], i)
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks" + types.AddNoKeyToken(traceBlocks)
    traceBlocks.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/fgid_mgr/trace/location/all-options/" + traceBlocks.EntityData.SegmentPath
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_Fabric_Oper_Fgid_ProgramError
type Controller_Fabric_Oper_Fgid_ProgramError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..128000.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..128000.
    End interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_ProgramError_Rack.
    Rack []*Controller_Fabric_Oper_Fgid_ProgramError_Rack
}

func (programError *Controller_Fabric_Oper_Fgid_ProgramError) GetEntityData() *types.CommonEntityData {
    programError.EntityData.YFilter = programError.YFilter
    programError.EntityData.YangName = "program_error"
    programError.EntityData.BundleName = "cisco_ios_xr"
    programError.EntityData.ParentYangName = "fgid"
    programError.EntityData.SegmentPath = "program_error" + types.AddKeyToken(programError.Start, "start") + types.AddKeyToken(programError.End, "end")
    programError.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/" + programError.EntityData.SegmentPath
    programError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    programError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    programError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    programError.EntityData.Children = types.NewOrderedMap()
    programError.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range programError.Rack {
        programError.EntityData.Children.Append(types.GetSegmentPath(programError.Rack[i]), types.YChild{"Rack", programError.Rack[i]})
    }
    programError.EntityData.Leafs = types.NewOrderedMap()
    programError.EntityData.Leafs.Append("start", types.YLeaf{"Start", programError.Start})
    programError.EntityData.Leafs.Append("end", types.YLeaf{"End", programError.End})

    programError.EntityData.YListKeys = []string {"Start", "End"}

    return &(programError.EntityData)
}

// Controller_Fabric_Oper_Fgid_ProgramError_Rack
type Controller_Fabric_Oper_Fgid_ProgramError_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is string.
    RackIdStr interface{}

    // The type is string.
    FgidsInError interface{}

    // The type is bool.
    FoundFgidsInError interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalErrorFgids interface{}

    // The type is bool.
    IncorrectFgidsRange interface{}

    // The type is bool.
    CmdNotSupported interface{}
}

func (rack *Controller_Fabric_Oper_Fgid_ProgramError_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "program_error"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackId, "rack_id")
    rack.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fgid/program_error/" + rack.EntityData.SegmentPath
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_id", types.YLeaf{"RackId", rack.RackId})
    rack.EntityData.Leafs.Append("rack_id_str", types.YLeaf{"RackIdStr", rack.RackIdStr})
    rack.EntityData.Leafs.Append("fgids_in_error", types.YLeaf{"FgidsInError", rack.FgidsInError})
    rack.EntityData.Leafs.Append("found_fgids_in_error", types.YLeaf{"FoundFgidsInError", rack.FoundFgidsInError})
    rack.EntityData.Leafs.Append("total_error_fgids", types.YLeaf{"TotalErrorFgids", rack.TotalErrorFgids})
    rack.EntityData.Leafs.Append("incorrect_fgids_range", types.YLeaf{"IncorrectFgidsRange", rack.IncorrectFgidsRange})
    rack.EntityData.Leafs.Append("cmd_not_supported", types.YLeaf{"CmdNotSupported", rack.CmdNotSupported})

    rack.EntityData.YListKeys = []string {"RackId"}

    return &(rack.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive
type Controller_Fabric_Oper_FsdbaggActive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggActive_Plane.
    Plane []*Controller_Fabric_Oper_FsdbaggActive_Plane

    
    Bundle Controller_Fabric_Oper_FsdbaggActive_Bundle

    
    Statistics Controller_Fabric_Oper_FsdbaggActive_Statistics
}

func (fsdbaggActive *Controller_Fabric_Oper_FsdbaggActive) GetEntityData() *types.CommonEntityData {
    fsdbaggActive.EntityData.YFilter = fsdbaggActive.YFilter
    fsdbaggActive.EntityData.YangName = "fsdbagg_active"
    fsdbaggActive.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggActive.EntityData.ParentYangName = "oper"
    fsdbaggActive.EntityData.SegmentPath = "fsdbagg_active"
    fsdbaggActive.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + fsdbaggActive.EntityData.SegmentPath
    fsdbaggActive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggActive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggActive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggActive.EntityData.Children = types.NewOrderedMap()
    fsdbaggActive.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range fsdbaggActive.Plane {
        fsdbaggActive.EntityData.Children.Append(types.GetSegmentPath(fsdbaggActive.Plane[i]), types.YChild{"Plane", fsdbaggActive.Plane[i]})
    }
    fsdbaggActive.EntityData.Children.Append("bundle", types.YChild{"Bundle", &fsdbaggActive.Bundle})
    fsdbaggActive.EntityData.Children.Append("statistics", types.YChild{"Statistics", &fsdbaggActive.Statistics})
    fsdbaggActive.EntityData.Leafs = types.NewOrderedMap()

    fsdbaggActive.EntityData.YListKeys = []string {}

    return &(fsdbaggActive.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Plane
type Controller_Fabric_Oper_FsdbaggActive_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: all|0.
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError.
    AsicInternalError []*Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggActive_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "fsdbagg_active"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.Planeid, "planeid")
    plane.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/" + plane.EntityData.SegmentPath
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Children.Append("asic_internal_error", types.YChild{"AsicInternalError", nil})
    for i := range plane.AsicInternalError {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.AsicInternalError[i]), types.YChild{"AsicInternalError", plane.AsicInternalError[i]})
    }
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("planeid", types.YLeaf{"Planeid", plane.Planeid})
    plane.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", plane.AdminState})
    plane.EntityData.Leafs.Append("ucast_oper_state", types.YLeaf{"UcastOperState", plane.UcastOperState})
    plane.EntityData.Leafs.Append("mcast_oper_state", types.YLeaf{"McastOperState", plane.McastOperState})
    plane.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", plane.PlaneMode})
    plane.EntityData.Leafs.Append("ucast_cnt_up", types.YLeaf{"UcastCntUp", plane.UcastCntUp})
    plane.EntityData.Leafs.Append("ucast_cnt_some_up", types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp})
    plane.EntityData.Leafs.Append("ucast_cnt_dn", types.YLeaf{"UcastCntDn", plane.UcastCntDn})
    plane.EntityData.Leafs.Append("mcast_cnt_up", types.YLeaf{"McastCntUp", plane.McastCntUp})
    plane.EntityData.Leafs.Append("mcast_cnt_some_up", types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp})
    plane.EntityData.Leafs.Append("mcast_cnt_dn", types.YLeaf{"McastCntDn", plane.McastCntDn})
    plane.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", plane.TotalBundles})
    plane.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", plane.DownBundles})
    plane.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", plane.RxDataCells})
    plane.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", plane.TxDataCells})
    plane.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", plane.RxCeCells})
    plane.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", plane.RxUceCells})
    plane.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", plane.RxPeCells})
    plane.EntityData.Leafs.Append("ucast_lost_cells", types.YLeaf{"UcastLostCells", plane.UcastLostCells})
    plane.EntityData.Leafs.Append("mcast_lost_cells", types.YLeaf{"McastLostCells", plane.McastLostCells})
    plane.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", plane.LastClearTs})
    plane.EntityData.Leafs.Append("last_clear_reason", types.YLeaf{"LastClearReason", plane.LastClearReason})
    plane.EntityData.Leafs.Append("last_clear_req_ts", types.YLeaf{"LastClearReqTs", plane.LastClearReqTs})
    plane.EntityData.Leafs.Append("last_clear_status", types.YLeaf{"LastClearStatus", plane.LastClearStatus})
    plane.EntityData.Leafs.Append("is_asic_internal_error", types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError})
    plane.EntityData.Leafs.Append("asic_internal_drops", types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops})
    plane.EntityData.Leafs.Append("asic_location_drops", types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops})
    plane.EntityData.Leafs.Append("ppu_state", types.YLeaf{"PpuState", plane.PpuState})

    plane.EntityData.YListKeys = []string {"Planeid"}

    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + types.AddKeyToken(asicInternalError.AsicNumber, "asic_number")
    asicInternalError.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/plane/" + asicInternalError.EntityData.SegmentPath
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs.Append("asic_number", types.YLeaf{"AsicNumber", asicInternalError.AsicNumber})
    asicInternalError.EntityData.Leafs.Append("asic_location", types.YLeaf{"AsicLocation", asicInternalError.AsicLocation})
    asicInternalError.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError})
    asicInternalError.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError})
    asicInternalError.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError})
    asicInternalError.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError})
    asicInternalError.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError})
    asicInternalError.EntityData.Leafs.Append("link_no_sign_accept_error", types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError})
    asicInternalError.EntityData.Leafs.Append("link_token_error", types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError})
    asicInternalError.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount})
    asicInternalError.EntityData.Leafs.Append("last_asic_internal_error_ts", types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs})

    asicInternalError.EntityData.YListKeys = []string {"AsicNumber"}

    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle
type Controller_Fabric_Oper_FsdbaggActive_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary

    
    All Controller_Fabric_Oper_FsdbaggActive_Bundle_All

    
    Port Controller_Fabric_Oper_FsdbaggActive_Bundle_Port

    // The type is slice of Controller_Fabric_Oper_FsdbaggActive_Bundle_Location.
    Location []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Location
}

func (bundle *Controller_Fabric_Oper_FsdbaggActive_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "fsdbagg_active"
    bundle.EntityData.SegmentPath = "bundle"
    bundle.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/" + bundle.EntityData.SegmentPath
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = types.NewOrderedMap()
    bundle.EntityData.Children.Append("summary", types.YChild{"Summary", &bundle.Summary})
    bundle.EntityData.Children.Append("all", types.YChild{"All", &bundle.All})
    bundle.EntityData.Children.Append("port", types.YChild{"Port", &bundle.Port})
    bundle.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range bundle.Location {
        bundle.EntityData.Children.Append(types.GetSegmentPath(bundle.Location[i]), types.YChild{"Location", bundle.Location[i]})
    }
    bundle.EntityData.Leafs = types.NewOrderedMap()

    bundle.EntityData.YListKeys = []string {}

    return &(bundle.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList.
    BundleSummaryList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList
}

func (summary *Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "bundle"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("bundle_summary_list", types.YChild{"BundleSummaryList", nil})
    for i := range summary.BundleSummaryList {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.BundleSummaryList[i]), types.YChild{"BundleSummaryList", summary.BundleSummaryList[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalBundles interface{}

    // The type is interface{} with range: 0..4294967295.
    DownBundles interface{}

    // The type is interface{} with range: 0..4294967295.
    BundlesNotConnected interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalBports interface{}

    // The type is interface{} with range: 0..4294967295.
    DownBports interface{}

    // The type is interface{} with range: 0..4294967295.
    BportsNotConnected interface{}
}

func (bundleSummaryList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList) GetEntityData() *types.CommonEntityData {
    bundleSummaryList.EntityData.YFilter = bundleSummaryList.YFilter
    bundleSummaryList.EntityData.YangName = "bundle_summary_list"
    bundleSummaryList.EntityData.BundleName = "cisco_ios_xr"
    bundleSummaryList.EntityData.ParentYangName = "summary"
    bundleSummaryList.EntityData.SegmentPath = "bundle_summary_list" + types.AddKeyToken(bundleSummaryList.Idx, "idx")
    bundleSummaryList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/summary/" + bundleSummaryList.EntityData.SegmentPath
    bundleSummaryList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleSummaryList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleSummaryList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleSummaryList.EntityData.Children = types.NewOrderedMap()
    bundleSummaryList.EntityData.Leafs = types.NewOrderedMap()
    bundleSummaryList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bundleSummaryList.Idx})
    bundleSummaryList.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", bundleSummaryList.TotalBundles})
    bundleSummaryList.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", bundleSummaryList.DownBundles})
    bundleSummaryList.EntityData.Leafs.Append("bundles_not_connected", types.YLeaf{"BundlesNotConnected", bundleSummaryList.BundlesNotConnected})
    bundleSummaryList.EntityData.Leafs.Append("total_bports", types.YLeaf{"TotalBports", bundleSummaryList.TotalBports})
    bundleSummaryList.EntityData.Leafs.Append("down_bports", types.YLeaf{"DownBports", bundleSummaryList.DownBports})
    bundleSummaryList.EntityData.Leafs.Append("bports_not_connected", types.YLeaf{"BportsNotConnected", bundleSummaryList.BportsNotConnected})

    bundleSummaryList.EntityData.YListKeys = []string {"Idx"}

    return &(bundleSummaryList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_All
type Controller_Fabric_Oper_FsdbaggActive_Bundle_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList.
    BundleAllList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList
}

func (all *Controller_Fabric_Oper_FsdbaggActive_Bundle_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "bundle"
    all.EntityData.SegmentPath = "all"
    all.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/" + all.EntityData.SegmentPath
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("bundle_all_list", types.YChild{"BundleAllList", nil})
    for i := range all.BundleAllList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.BundleAllList[i]), types.YChild{"BundleAllList", all.BundleAllList[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BundleId interface{}

    // The type is string.
    OperState interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneId interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalLinks interface{}

    // The type is interface{} with range: 0..4294967295.
    DownLinks interface{}

    // The type is string.
    Bport1 interface{}

    // The type is string.
    Bport2 interface{}
}

func (bundleAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList) GetEntityData() *types.CommonEntityData {
    bundleAllList.EntityData.YFilter = bundleAllList.YFilter
    bundleAllList.EntityData.YangName = "bundle_all_list"
    bundleAllList.EntityData.BundleName = "cisco_ios_xr"
    bundleAllList.EntityData.ParentYangName = "all"
    bundleAllList.EntityData.SegmentPath = "bundle_all_list" + types.AddKeyToken(bundleAllList.Idx, "idx")
    bundleAllList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/all/" + bundleAllList.EntityData.SegmentPath
    bundleAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleAllList.EntityData.Children = types.NewOrderedMap()
    bundleAllList.EntityData.Leafs = types.NewOrderedMap()
    bundleAllList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bundleAllList.Idx})
    bundleAllList.EntityData.Leafs.Append("bundle_id", types.YLeaf{"BundleId", bundleAllList.BundleId})
    bundleAllList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", bundleAllList.OperState})
    bundleAllList.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", bundleAllList.PlaneId})
    bundleAllList.EntityData.Leafs.Append("total_links", types.YLeaf{"TotalLinks", bundleAllList.TotalLinks})
    bundleAllList.EntityData.Leafs.Append("down_links", types.YLeaf{"DownLinks", bundleAllList.DownLinks})
    bundleAllList.EntityData.Leafs.Append("bport1", types.YLeaf{"Bport1", bundleAllList.Bport1})
    bundleAllList.EntityData.Leafs.Append("bport2", types.YLeaf{"Bport2", bundleAllList.Bport2})

    bundleAllList.EntityData.YListKeys = []string {"Idx"}

    return &(bundleAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location.
    Location []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location
}

func (port *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "bundle"
    port.EntityData.SegmentPath = "port"
    port.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/" + port.EntityData.SegmentPath
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Children.Append("all", types.YChild{"All", &port.All})
    port.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range port.Location {
        port.EntityData.Children.Append(types.GetSegmentPath(port.Location[i]), types.YChild{"Location", port.Location[i]})
    }
    port.EntityData.Leafs = types.NewOrderedMap()

    port.EntityData.YListKeys = []string {}

    return &(port.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList.
    BportAllList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList

    
    Statistics Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics
}

func (all *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "port"
    all.EntityData.SegmentPath = "all"
    all.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/" + all.EntityData.SegmentPath
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("bport_all_list", types.YChild{"BportAllList", nil})
    for i := range all.BportAllList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.BportAllList[i]), types.YChild{"BportAllList", all.BportAllList[i]})
    }
    all.EntityData.Children.Append("statistics", types.YChild{"Statistics", &all.Statistics})
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}
}

func (bportAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList) GetEntityData() *types.CommonEntityData {
    bportAllList.EntityData.YFilter = bportAllList.YFilter
    bportAllList.EntityData.YangName = "bport_all_list"
    bportAllList.EntityData.BundleName = "cisco_ios_xr"
    bportAllList.EntityData.ParentYangName = "all"
    bportAllList.EntityData.SegmentPath = "bport_all_list" + types.AddKeyToken(bportAllList.Idx, "idx")
    bportAllList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/all/" + bportAllList.EntityData.SegmentPath
    bportAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportAllList.EntityData.Children = types.NewOrderedMap()
    bportAllList.EntityData.Leafs = types.NewOrderedMap()
    bportAllList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportAllList.Idx})
    bportAllList.EntityData.Leafs.Append("bport_id", types.YLeaf{"BportId", bportAllList.BportId})
    bportAllList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", bportAllList.AdminState})
    bportAllList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", bportAllList.OperState})
    bportAllList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", bportAllList.DownFlags})

    bportAllList.EntityData.YListKeys = []string {"Idx"}

    return &(bportAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks.
    BportStatsAllRacks []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks
}

func (statistics *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "all"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/all/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("bport_stats_all_racks", types.YChild{"BportStatsAllRacks", nil})
    for i := range statistics.BportStatsAllRacks {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.BportStatsAllRacks[i]), types.YChild{"BportStatsAllRacks", statistics.BportStatsAllRacks[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalRacks interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack.
    BportStatsRack []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack
}

func (bportStatsAllRacks *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks) GetEntityData() *types.CommonEntityData {
    bportStatsAllRacks.EntityData.YFilter = bportStatsAllRacks.YFilter
    bportStatsAllRacks.EntityData.YangName = "bport_stats_all_racks"
    bportStatsAllRacks.EntityData.BundleName = "cisco_ios_xr"
    bportStatsAllRacks.EntityData.ParentYangName = "statistics"
    bportStatsAllRacks.EntityData.SegmentPath = "bport_stats_all_racks" + types.AddKeyToken(bportStatsAllRacks.Idx, "idx")
    bportStatsAllRacks.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/all/statistics/" + bportStatsAllRacks.EntityData.SegmentPath
    bportStatsAllRacks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsAllRacks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsAllRacks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsAllRacks.EntityData.Children = types.NewOrderedMap()
    bportStatsAllRacks.EntityData.Children.Append("bport_stats_rack", types.YChild{"BportStatsRack", nil})
    for i := range bportStatsAllRacks.BportStatsRack {
        bportStatsAllRacks.EntityData.Children.Append(types.GetSegmentPath(bportStatsAllRacks.BportStatsRack[i]), types.YChild{"BportStatsRack", bportStatsAllRacks.BportStatsRack[i]})
    }
    bportStatsAllRacks.EntityData.Leafs = types.NewOrderedMap()
    bportStatsAllRacks.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStatsAllRacks.Idx})
    bportStatsAllRacks.EntityData.Leafs.Append("total_racks", types.YLeaf{"TotalRacks", bportStatsAllRacks.TotalRacks})

    bportStatsAllRacks.EntityData.YListKeys = []string {"Idx"}

    return &(bportStatsAllRacks.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    RackNumStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats.
    BportStats []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
}

func (bportStatsRack *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack) GetEntityData() *types.CommonEntityData {
    bportStatsRack.EntityData.YFilter = bportStatsRack.YFilter
    bportStatsRack.EntityData.YangName = "bport_stats_rack"
    bportStatsRack.EntityData.BundleName = "cisco_ios_xr"
    bportStatsRack.EntityData.ParentYangName = "bport_stats_all_racks"
    bportStatsRack.EntityData.SegmentPath = "bport_stats_rack" + types.AddKeyToken(bportStatsRack.Idx, "idx")
    bportStatsRack.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/all/statistics/bport_stats_all_racks/" + bportStatsRack.EntityData.SegmentPath
    bportStatsRack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsRack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsRack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsRack.EntityData.Children = types.NewOrderedMap()
    bportStatsRack.EntityData.Children.Append("bport_stats", types.YChild{"BportStats", nil})
    for i := range bportStatsRack.BportStats {
        bportStatsRack.EntityData.Children.Append(types.GetSegmentPath(bportStatsRack.BportStats[i]), types.YChild{"BportStats", bportStatsRack.BportStats[i]})
    }
    bportStatsRack.EntityData.Leafs = types.NewOrderedMap()
    bportStatsRack.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStatsRack.Idx})
    bportStatsRack.EntityData.Leafs.Append("rack_num_str", types.YLeaf{"RackNumStr", bportStatsRack.RackNumStr})

    bportStatsRack.EntityData.YListKeys = []string {"Idx"}

    return &(bportStatsRack.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is string.
    LastClearTs interface{}
}

func (bportStats *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats) GetEntityData() *types.CommonEntityData {
    bportStats.EntityData.YFilter = bportStats.YFilter
    bportStats.EntityData.YangName = "bport_stats"
    bportStats.EntityData.BundleName = "cisco_ios_xr"
    bportStats.EntityData.ParentYangName = "bport_stats_rack"
    bportStats.EntityData.SegmentPath = "bport_stats" + types.AddKeyToken(bportStats.Idx, "idx")
    bportStats.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/all/statistics/bport_stats_all_racks/bport_stats_rack/" + bportStats.EntityData.SegmentPath
    bportStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStats.EntityData.Children = types.NewOrderedMap()
    bportStats.EntityData.Leafs = types.NewOrderedMap()
    bportStats.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStats.Idx})
    bportStats.EntityData.Leafs.Append("bport_id", types.YLeaf{"BportId", bportStats.BportId})
    bportStats.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", bportStats.RxDataCells})
    bportStats.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", bportStats.TxDataCells})
    bportStats.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", bportStats.RxCeCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", bportStats.RxCeCells})
    bportStats.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", bportStats.RxUceCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", bportStats.RxUceCells})
    bportStats.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", bportStats.RxPeCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", bportStats.RxPeCells})
    bportStats.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", bportStats.LastClearTs})

    bportStats.EntityData.YListKeys = []string {"Idx"}

    return &(bportStats.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/((0?[0-9])|(1[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/((0?[0-9])|([1-2][0-9])|(3[0-1]))).
    LocStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList.
    BportAllList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList

    
    Statistics Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics
}

func (location *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("bport_all_list", types.YChild{"BportAllList", nil})
    for i := range location.BportAllList {
        location.EntityData.Children.Append(types.GetSegmentPath(location.BportAllList[i]), types.YChild{"BportAllList", location.BportAllList[i]})
    }
    location.EntityData.Children.Append("statistics", types.YChild{"Statistics", &location.Statistics})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}
}

func (bportAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList) GetEntityData() *types.CommonEntityData {
    bportAllList.EntityData.YFilter = bportAllList.YFilter
    bportAllList.EntityData.YangName = "bport_all_list"
    bportAllList.EntityData.BundleName = "cisco_ios_xr"
    bportAllList.EntityData.ParentYangName = "location"
    bportAllList.EntityData.SegmentPath = "bport_all_list" + types.AddKeyToken(bportAllList.Idx, "idx")
    bportAllList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/location/" + bportAllList.EntityData.SegmentPath
    bportAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportAllList.EntityData.Children = types.NewOrderedMap()
    bportAllList.EntityData.Leafs = types.NewOrderedMap()
    bportAllList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportAllList.Idx})
    bportAllList.EntityData.Leafs.Append("bport_id", types.YLeaf{"BportId", bportAllList.BportId})
    bportAllList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", bportAllList.AdminState})
    bportAllList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", bportAllList.OperState})
    bportAllList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", bportAllList.DownFlags})

    bportAllList.EntityData.YListKeys = []string {"Idx"}

    return &(bportAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks.
    BportStatsAllRacks []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks
}

func (statistics *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "location"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/location/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("bport_stats_all_racks", types.YChild{"BportStatsAllRacks", nil})
    for i := range statistics.BportStatsAllRacks {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.BportStatsAllRacks[i]), types.YChild{"BportStatsAllRacks", statistics.BportStatsAllRacks[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalRacks interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack.
    BportStatsRack []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack
}

func (bportStatsAllRacks *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks) GetEntityData() *types.CommonEntityData {
    bportStatsAllRacks.EntityData.YFilter = bportStatsAllRacks.YFilter
    bportStatsAllRacks.EntityData.YangName = "bport_stats_all_racks"
    bportStatsAllRacks.EntityData.BundleName = "cisco_ios_xr"
    bportStatsAllRacks.EntityData.ParentYangName = "statistics"
    bportStatsAllRacks.EntityData.SegmentPath = "bport_stats_all_racks" + types.AddKeyToken(bportStatsAllRacks.Idx, "idx")
    bportStatsAllRacks.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/location/statistics/" + bportStatsAllRacks.EntityData.SegmentPath
    bportStatsAllRacks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsAllRacks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsAllRacks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsAllRacks.EntityData.Children = types.NewOrderedMap()
    bportStatsAllRacks.EntityData.Children.Append("bport_stats_rack", types.YChild{"BportStatsRack", nil})
    for i := range bportStatsAllRacks.BportStatsRack {
        bportStatsAllRacks.EntityData.Children.Append(types.GetSegmentPath(bportStatsAllRacks.BportStatsRack[i]), types.YChild{"BportStatsRack", bportStatsAllRacks.BportStatsRack[i]})
    }
    bportStatsAllRacks.EntityData.Leafs = types.NewOrderedMap()
    bportStatsAllRacks.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStatsAllRacks.Idx})
    bportStatsAllRacks.EntityData.Leafs.Append("total_racks", types.YLeaf{"TotalRacks", bportStatsAllRacks.TotalRacks})

    bportStatsAllRacks.EntityData.YListKeys = []string {"Idx"}

    return &(bportStatsAllRacks.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    RackNumStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats.
    BportStats []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
}

func (bportStatsRack *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack) GetEntityData() *types.CommonEntityData {
    bportStatsRack.EntityData.YFilter = bportStatsRack.YFilter
    bportStatsRack.EntityData.YangName = "bport_stats_rack"
    bportStatsRack.EntityData.BundleName = "cisco_ios_xr"
    bportStatsRack.EntityData.ParentYangName = "bport_stats_all_racks"
    bportStatsRack.EntityData.SegmentPath = "bport_stats_rack" + types.AddKeyToken(bportStatsRack.Idx, "idx")
    bportStatsRack.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/location/statistics/bport_stats_all_racks/" + bportStatsRack.EntityData.SegmentPath
    bportStatsRack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsRack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsRack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsRack.EntityData.Children = types.NewOrderedMap()
    bportStatsRack.EntityData.Children.Append("bport_stats", types.YChild{"BportStats", nil})
    for i := range bportStatsRack.BportStats {
        bportStatsRack.EntityData.Children.Append(types.GetSegmentPath(bportStatsRack.BportStats[i]), types.YChild{"BportStats", bportStatsRack.BportStats[i]})
    }
    bportStatsRack.EntityData.Leafs = types.NewOrderedMap()
    bportStatsRack.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStatsRack.Idx})
    bportStatsRack.EntityData.Leafs.Append("rack_num_str", types.YLeaf{"RackNumStr", bportStatsRack.RackNumStr})

    bportStatsRack.EntityData.YListKeys = []string {"Idx"}

    return &(bportStatsRack.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is string.
    LastClearTs interface{}
}

func (bportStats *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats) GetEntityData() *types.CommonEntityData {
    bportStats.EntityData.YFilter = bportStats.YFilter
    bportStats.EntityData.YangName = "bport_stats"
    bportStats.EntityData.BundleName = "cisco_ios_xr"
    bportStats.EntityData.ParentYangName = "bport_stats_rack"
    bportStats.EntityData.SegmentPath = "bport_stats" + types.AddKeyToken(bportStats.Idx, "idx")
    bportStats.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/port/location/statistics/bport_stats_all_racks/bport_stats_rack/" + bportStats.EntityData.SegmentPath
    bportStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStats.EntityData.Children = types.NewOrderedMap()
    bportStats.EntityData.Leafs = types.NewOrderedMap()
    bportStats.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStats.Idx})
    bportStats.EntityData.Leafs.Append("bport_id", types.YLeaf{"BportId", bportStats.BportId})
    bportStats.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", bportStats.RxDataCells})
    bportStats.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", bportStats.TxDataCells})
    bportStats.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", bportStats.RxCeCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", bportStats.RxCeCells})
    bportStats.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", bportStats.RxUceCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", bportStats.RxUceCells})
    bportStats.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", bportStats.RxPeCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", bportStats.RxPeCells})
    bportStats.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", bportStats.LastClearTs})

    bportStats.EntityData.YListKeys = []string {"Idx"}

    return &(bportStats.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Location
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/((0?[0-9])|(1[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/((0?[0-9])|([1-2][0-9])|(3[0-1]))).
    LocStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList.
    BundleAllList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList
}

func (location *Controller_Fabric_Oper_FsdbaggActive_Bundle_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "bundle"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("bundle_all_list", types.YChild{"BundleAllList", nil})
    for i := range location.BundleAllList {
        location.EntityData.Children.Append(types.GetSegmentPath(location.BundleAllList[i]), types.YChild{"BundleAllList", location.BundleAllList[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BundleId interface{}

    // The type is string.
    OperState interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneId interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalLinks interface{}

    // The type is interface{} with range: 0..4294967295.
    DownLinks interface{}

    // The type is string.
    Bport1 interface{}

    // The type is string.
    Bport2 interface{}
}

func (bundleAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList) GetEntityData() *types.CommonEntityData {
    bundleAllList.EntityData.YFilter = bundleAllList.YFilter
    bundleAllList.EntityData.YangName = "bundle_all_list"
    bundleAllList.EntityData.BundleName = "cisco_ios_xr"
    bundleAllList.EntityData.ParentYangName = "location"
    bundleAllList.EntityData.SegmentPath = "bundle_all_list" + types.AddKeyToken(bundleAllList.Idx, "idx")
    bundleAllList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/bundle/location/" + bundleAllList.EntityData.SegmentPath
    bundleAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleAllList.EntityData.Children = types.NewOrderedMap()
    bundleAllList.EntityData.Leafs = types.NewOrderedMap()
    bundleAllList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bundleAllList.Idx})
    bundleAllList.EntityData.Leafs.Append("bundle_id", types.YLeaf{"BundleId", bundleAllList.BundleId})
    bundleAllList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", bundleAllList.OperState})
    bundleAllList.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", bundleAllList.PlaneId})
    bundleAllList.EntityData.Leafs.Append("total_links", types.YLeaf{"TotalLinks", bundleAllList.TotalLinks})
    bundleAllList.EntityData.Leafs.Append("down_links", types.YLeaf{"DownLinks", bundleAllList.DownLinks})
    bundleAllList.EntityData.Leafs.Append("bport1", types.YLeaf{"Bport1", bundleAllList.Bport1})
    bundleAllList.EntityData.Leafs.Append("bport2", types.YLeaf{"Bport2", bundleAllList.Bport2})

    bundleAllList.EntityData.YListKeys = []string {"Idx"}

    return &(bundleAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Statistics
type Controller_Fabric_Oper_FsdbaggActive_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane.
    Plane []*Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane
}

func (statistics *Controller_Fabric_Oper_FsdbaggActive_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fsdbagg_active"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range statistics.Plane {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Plane[i]), types.YChild{"Plane", statistics.Plane[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane
type Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: all|0.
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError.
    AsicInternalError []*Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "statistics"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.Planeid, "planeid")
    plane.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/statistics/" + plane.EntityData.SegmentPath
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Children.Append("asic_internal_error", types.YChild{"AsicInternalError", nil})
    for i := range plane.AsicInternalError {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.AsicInternalError[i]), types.YChild{"AsicInternalError", plane.AsicInternalError[i]})
    }
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("planeid", types.YLeaf{"Planeid", plane.Planeid})
    plane.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", plane.AdminState})
    plane.EntityData.Leafs.Append("ucast_oper_state", types.YLeaf{"UcastOperState", plane.UcastOperState})
    plane.EntityData.Leafs.Append("mcast_oper_state", types.YLeaf{"McastOperState", plane.McastOperState})
    plane.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", plane.PlaneMode})
    plane.EntityData.Leafs.Append("ucast_cnt_up", types.YLeaf{"UcastCntUp", plane.UcastCntUp})
    plane.EntityData.Leafs.Append("ucast_cnt_some_up", types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp})
    plane.EntityData.Leafs.Append("ucast_cnt_dn", types.YLeaf{"UcastCntDn", plane.UcastCntDn})
    plane.EntityData.Leafs.Append("mcast_cnt_up", types.YLeaf{"McastCntUp", plane.McastCntUp})
    plane.EntityData.Leafs.Append("mcast_cnt_some_up", types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp})
    plane.EntityData.Leafs.Append("mcast_cnt_dn", types.YLeaf{"McastCntDn", plane.McastCntDn})
    plane.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", plane.TotalBundles})
    plane.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", plane.DownBundles})
    plane.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", plane.RxDataCells})
    plane.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", plane.TxDataCells})
    plane.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", plane.RxCeCells})
    plane.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", plane.RxUceCells})
    plane.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", plane.RxPeCells})
    plane.EntityData.Leafs.Append("ucast_lost_cells", types.YLeaf{"UcastLostCells", plane.UcastLostCells})
    plane.EntityData.Leafs.Append("mcast_lost_cells", types.YLeaf{"McastLostCells", plane.McastLostCells})
    plane.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", plane.LastClearTs})
    plane.EntityData.Leafs.Append("last_clear_reason", types.YLeaf{"LastClearReason", plane.LastClearReason})
    plane.EntityData.Leafs.Append("last_clear_req_ts", types.YLeaf{"LastClearReqTs", plane.LastClearReqTs})
    plane.EntityData.Leafs.Append("last_clear_status", types.YLeaf{"LastClearStatus", plane.LastClearStatus})
    plane.EntityData.Leafs.Append("is_asic_internal_error", types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError})
    plane.EntityData.Leafs.Append("asic_internal_drops", types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops})
    plane.EntityData.Leafs.Append("asic_location_drops", types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops})
    plane.EntityData.Leafs.Append("ppu_state", types.YLeaf{"PpuState", plane.PpuState})

    plane.EntityData.YListKeys = []string {"Planeid"}

    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + types.AddKeyToken(asicInternalError.AsicNumber, "asic_number")
    asicInternalError.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_active/statistics/plane/" + asicInternalError.EntityData.SegmentPath
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs.Append("asic_number", types.YLeaf{"AsicNumber", asicInternalError.AsicNumber})
    asicInternalError.EntityData.Leafs.Append("asic_location", types.YLeaf{"AsicLocation", asicInternalError.AsicLocation})
    asicInternalError.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError})
    asicInternalError.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError})
    asicInternalError.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError})
    asicInternalError.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError})
    asicInternalError.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError})
    asicInternalError.EntityData.Leafs.Append("link_no_sign_accept_error", types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError})
    asicInternalError.EntityData.Leafs.Append("link_token_error", types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError})
    asicInternalError.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount})
    asicInternalError.EntityData.Leafs.Append("last_asic_internal_error_ts", types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs})

    asicInternalError.EntityData.YListKeys = []string {"AsicNumber"}

    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FsdbaggLink
type Controller_Fabric_Oper_FsdbaggLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggLink_Port.
    Port []*Controller_Fabric_Oper_FsdbaggLink_Port
}

func (fsdbaggLink *Controller_Fabric_Oper_FsdbaggLink) GetEntityData() *types.CommonEntityData {
    fsdbaggLink.EntityData.YFilter = fsdbaggLink.YFilter
    fsdbaggLink.EntityData.YangName = "fsdbagg_link"
    fsdbaggLink.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggLink.EntityData.ParentYangName = "oper"
    fsdbaggLink.EntityData.SegmentPath = "fsdbagg_link"
    fsdbaggLink.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + fsdbaggLink.EntityData.SegmentPath
    fsdbaggLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggLink.EntityData.Children = types.NewOrderedMap()
    fsdbaggLink.EntityData.Children.Append("port", types.YChild{"Port", nil})
    for i := range fsdbaggLink.Port {
        fsdbaggLink.EntityData.Children.Append(types.GetSegmentPath(fsdbaggLink.Port[i]), types.YChild{"Port", fsdbaggLink.Port[i]})
    }
    fsdbaggLink.EntityData.Leafs = types.NewOrderedMap()

    fsdbaggLink.EntityData.YListKeys = []string {}

    return &(fsdbaggLink.EntityData)
}

// Controller_Fabric_Oper_FsdbaggLink_Port
type Controller_Fabric_Oper_FsdbaggLink_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: fia|s1|s2|s3.
    Portname interface{}

    // The type is string. The default value is port..
    Description interface{}
}

func (port *Controller_Fabric_Oper_FsdbaggLink_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "fsdbagg_link"
    port.EntityData.SegmentPath = "port" + types.AddKeyToken(port.Portname, "portname")
    port.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_link/" + port.EntityData.SegmentPath
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Leafs = types.NewOrderedMap()
    port.EntityData.Leafs.Append("portname", types.YLeaf{"Portname", port.Portname})
    port.EntityData.Leafs.Append("description", types.YLeaf{"Description", port.Description})

    port.EntityData.YListKeys = []string {"Portname"}

    return &(port.EntityData)
}

// Controller_Fabric_Oper_FsdbaggSfeAsicType
type Controller_Fabric_Oper_FsdbaggSfeAsicType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes.
    AsicTypes []*Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes
}

func (fsdbaggSfeAsicType *Controller_Fabric_Oper_FsdbaggSfeAsicType) GetEntityData() *types.CommonEntityData {
    fsdbaggSfeAsicType.EntityData.YFilter = fsdbaggSfeAsicType.YFilter
    fsdbaggSfeAsicType.EntityData.YangName = "fsdbagg_sfe_asic_type"
    fsdbaggSfeAsicType.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggSfeAsicType.EntityData.ParentYangName = "oper"
    fsdbaggSfeAsicType.EntityData.SegmentPath = "fsdbagg_sfe_asic_type"
    fsdbaggSfeAsicType.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + fsdbaggSfeAsicType.EntityData.SegmentPath
    fsdbaggSfeAsicType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggSfeAsicType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggSfeAsicType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggSfeAsicType.EntityData.Children = types.NewOrderedMap()
    fsdbaggSfeAsicType.EntityData.Children.Append("asic_types", types.YChild{"AsicTypes", nil})
    for i := range fsdbaggSfeAsicType.AsicTypes {
        fsdbaggSfeAsicType.EntityData.Children.Append(types.GetSegmentPath(fsdbaggSfeAsicType.AsicTypes[i]), types.YChild{"AsicTypes", fsdbaggSfeAsicType.AsicTypes[i]})
    }
    fsdbaggSfeAsicType.EntityData.Leafs = types.NewOrderedMap()

    fsdbaggSfeAsicType.EntityData.YListKeys = []string {}

    return &(fsdbaggSfeAsicType.EntityData)
}

// Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes
type Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Asicname interface{}

    // The type is string. The default value is asic..
    Description interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block.
    Block []*Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block
}

func (asicTypes *Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes) GetEntityData() *types.CommonEntityData {
    asicTypes.EntityData.YFilter = asicTypes.YFilter
    asicTypes.EntityData.YangName = "asic_types"
    asicTypes.EntityData.BundleName = "cisco_ios_xr"
    asicTypes.EntityData.ParentYangName = "fsdbagg_sfe_asic_type"
    asicTypes.EntityData.SegmentPath = "asic_types" + types.AddKeyToken(asicTypes.Asicname, "asicname")
    asicTypes.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_sfe_asic_type/" + asicTypes.EntityData.SegmentPath
    asicTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicTypes.EntityData.Children = types.NewOrderedMap()
    asicTypes.EntityData.Children.Append("block", types.YChild{"Block", nil})
    for i := range asicTypes.Block {
        asicTypes.EntityData.Children.Append(types.GetSegmentPath(asicTypes.Block[i]), types.YChild{"Block", asicTypes.Block[i]})
    }
    asicTypes.EntityData.Leafs = types.NewOrderedMap()
    asicTypes.EntityData.Leafs.Append("asicname", types.YLeaf{"Asicname", asicTypes.Asicname})
    asicTypes.EntityData.Leafs.Append("description", types.YLeaf{"Description", asicTypes.Description})

    asicTypes.EntityData.YListKeys = []string {"Asicname"}

    return &(asicTypes.EntityData)
}

// Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block
type Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Blockname interface{}

    // The type is string. The default value is asic block..
    Description interface{}
}

func (block *Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block) GetEntityData() *types.CommonEntityData {
    block.EntityData.YFilter = block.YFilter
    block.EntityData.YangName = "block"
    block.EntityData.BundleName = "cisco_ios_xr"
    block.EntityData.ParentYangName = "asic_types"
    block.EntityData.SegmentPath = "block" + types.AddKeyToken(block.Blockname, "blockname")
    block.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_sfe_asic_type/asic_types/" + block.EntityData.SegmentPath
    block.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    block.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    block.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    block.EntityData.Children = types.NewOrderedMap()
    block.EntityData.Leafs = types.NewOrderedMap()
    block.EntityData.Leafs.Append("blockname", types.YLeaf{"Blockname", block.Blockname})
    block.EntityData.Leafs.Append("description", types.YLeaf{"Description", block.Description})

    block.EntityData.YListKeys = []string {"Blockname"}

    return &(block.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby
type Controller_Fabric_Oper_FsdbaggStandby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggStandby_Plane.
    Plane []*Controller_Fabric_Oper_FsdbaggStandby_Plane

    
    Statistics Controller_Fabric_Oper_FsdbaggStandby_Statistics
}

func (fsdbaggStandby *Controller_Fabric_Oper_FsdbaggStandby) GetEntityData() *types.CommonEntityData {
    fsdbaggStandby.EntityData.YFilter = fsdbaggStandby.YFilter
    fsdbaggStandby.EntityData.YangName = "fsdbagg_standby"
    fsdbaggStandby.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggStandby.EntityData.ParentYangName = "oper"
    fsdbaggStandby.EntityData.SegmentPath = "fsdbagg_standby"
    fsdbaggStandby.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + fsdbaggStandby.EntityData.SegmentPath
    fsdbaggStandby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggStandby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggStandby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggStandby.EntityData.Children = types.NewOrderedMap()
    fsdbaggStandby.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range fsdbaggStandby.Plane {
        fsdbaggStandby.EntityData.Children.Append(types.GetSegmentPath(fsdbaggStandby.Plane[i]), types.YChild{"Plane", fsdbaggStandby.Plane[i]})
    }
    fsdbaggStandby.EntityData.Children.Append("statistics", types.YChild{"Statistics", &fsdbaggStandby.Statistics})
    fsdbaggStandby.EntityData.Leafs = types.NewOrderedMap()

    fsdbaggStandby.EntityData.YListKeys = []string {}

    return &(fsdbaggStandby.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Plane
type Controller_Fabric_Oper_FsdbaggStandby_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: all|0.
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError.
    AsicInternalError []*Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggStandby_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "fsdbagg_standby"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.Planeid, "planeid")
    plane.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_standby/" + plane.EntityData.SegmentPath
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Children.Append("asic_internal_error", types.YChild{"AsicInternalError", nil})
    for i := range plane.AsicInternalError {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.AsicInternalError[i]), types.YChild{"AsicInternalError", plane.AsicInternalError[i]})
    }
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("planeid", types.YLeaf{"Planeid", plane.Planeid})
    plane.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", plane.AdminState})
    plane.EntityData.Leafs.Append("ucast_oper_state", types.YLeaf{"UcastOperState", plane.UcastOperState})
    plane.EntityData.Leafs.Append("mcast_oper_state", types.YLeaf{"McastOperState", plane.McastOperState})
    plane.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", plane.PlaneMode})
    plane.EntityData.Leafs.Append("ucast_cnt_up", types.YLeaf{"UcastCntUp", plane.UcastCntUp})
    plane.EntityData.Leafs.Append("ucast_cnt_some_up", types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp})
    plane.EntityData.Leafs.Append("ucast_cnt_dn", types.YLeaf{"UcastCntDn", plane.UcastCntDn})
    plane.EntityData.Leafs.Append("mcast_cnt_up", types.YLeaf{"McastCntUp", plane.McastCntUp})
    plane.EntityData.Leafs.Append("mcast_cnt_some_up", types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp})
    plane.EntityData.Leafs.Append("mcast_cnt_dn", types.YLeaf{"McastCntDn", plane.McastCntDn})
    plane.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", plane.TotalBundles})
    plane.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", plane.DownBundles})
    plane.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", plane.RxDataCells})
    plane.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", plane.TxDataCells})
    plane.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", plane.RxCeCells})
    plane.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", plane.RxUceCells})
    plane.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", plane.RxPeCells})
    plane.EntityData.Leafs.Append("ucast_lost_cells", types.YLeaf{"UcastLostCells", plane.UcastLostCells})
    plane.EntityData.Leafs.Append("mcast_lost_cells", types.YLeaf{"McastLostCells", plane.McastLostCells})
    plane.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", plane.LastClearTs})
    plane.EntityData.Leafs.Append("last_clear_reason", types.YLeaf{"LastClearReason", plane.LastClearReason})
    plane.EntityData.Leafs.Append("last_clear_req_ts", types.YLeaf{"LastClearReqTs", plane.LastClearReqTs})
    plane.EntityData.Leafs.Append("last_clear_status", types.YLeaf{"LastClearStatus", plane.LastClearStatus})
    plane.EntityData.Leafs.Append("is_asic_internal_error", types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError})
    plane.EntityData.Leafs.Append("asic_internal_drops", types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops})
    plane.EntityData.Leafs.Append("asic_location_drops", types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops})
    plane.EntityData.Leafs.Append("ppu_state", types.YLeaf{"PpuState", plane.PpuState})

    plane.EntityData.YListKeys = []string {"Planeid"}

    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + types.AddKeyToken(asicInternalError.AsicNumber, "asic_number")
    asicInternalError.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_standby/plane/" + asicInternalError.EntityData.SegmentPath
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs.Append("asic_number", types.YLeaf{"AsicNumber", asicInternalError.AsicNumber})
    asicInternalError.EntityData.Leafs.Append("asic_location", types.YLeaf{"AsicLocation", asicInternalError.AsicLocation})
    asicInternalError.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError})
    asicInternalError.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError})
    asicInternalError.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError})
    asicInternalError.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError})
    asicInternalError.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError})
    asicInternalError.EntityData.Leafs.Append("link_no_sign_accept_error", types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError})
    asicInternalError.EntityData.Leafs.Append("link_token_error", types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError})
    asicInternalError.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount})
    asicInternalError.EntityData.Leafs.Append("last_asic_internal_error_ts", types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs})

    asicInternalError.EntityData.YListKeys = []string {"AsicNumber"}

    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Statistics
type Controller_Fabric_Oper_FsdbaggStandby_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane.
    Plane []*Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane
}

func (statistics *Controller_Fabric_Oper_FsdbaggStandby_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fsdbagg_standby"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_standby/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range statistics.Plane {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Plane[i]), types.YChild{"Plane", statistics.Plane[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane
type Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: all|0.
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError.
    AsicInternalError []*Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "statistics"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.Planeid, "planeid")
    plane.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_standby/statistics/" + plane.EntityData.SegmentPath
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Children.Append("asic_internal_error", types.YChild{"AsicInternalError", nil})
    for i := range plane.AsicInternalError {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.AsicInternalError[i]), types.YChild{"AsicInternalError", plane.AsicInternalError[i]})
    }
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("planeid", types.YLeaf{"Planeid", plane.Planeid})
    plane.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", plane.AdminState})
    plane.EntityData.Leafs.Append("ucast_oper_state", types.YLeaf{"UcastOperState", plane.UcastOperState})
    plane.EntityData.Leafs.Append("mcast_oper_state", types.YLeaf{"McastOperState", plane.McastOperState})
    plane.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", plane.PlaneMode})
    plane.EntityData.Leafs.Append("ucast_cnt_up", types.YLeaf{"UcastCntUp", plane.UcastCntUp})
    plane.EntityData.Leafs.Append("ucast_cnt_some_up", types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp})
    plane.EntityData.Leafs.Append("ucast_cnt_dn", types.YLeaf{"UcastCntDn", plane.UcastCntDn})
    plane.EntityData.Leafs.Append("mcast_cnt_up", types.YLeaf{"McastCntUp", plane.McastCntUp})
    plane.EntityData.Leafs.Append("mcast_cnt_some_up", types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp})
    plane.EntityData.Leafs.Append("mcast_cnt_dn", types.YLeaf{"McastCntDn", plane.McastCntDn})
    plane.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", plane.TotalBundles})
    plane.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", plane.DownBundles})
    plane.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", plane.RxDataCells})
    plane.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", plane.TxDataCells})
    plane.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", plane.RxCeCells})
    plane.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", plane.RxUceCells})
    plane.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", plane.RxPeCells})
    plane.EntityData.Leafs.Append("ucast_lost_cells", types.YLeaf{"UcastLostCells", plane.UcastLostCells})
    plane.EntityData.Leafs.Append("mcast_lost_cells", types.YLeaf{"McastLostCells", plane.McastLostCells})
    plane.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", plane.LastClearTs})
    plane.EntityData.Leafs.Append("last_clear_reason", types.YLeaf{"LastClearReason", plane.LastClearReason})
    plane.EntityData.Leafs.Append("last_clear_req_ts", types.YLeaf{"LastClearReqTs", plane.LastClearReqTs})
    plane.EntityData.Leafs.Append("last_clear_status", types.YLeaf{"LastClearStatus", plane.LastClearStatus})
    plane.EntityData.Leafs.Append("is_asic_internal_error", types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError})
    plane.EntityData.Leafs.Append("asic_internal_drops", types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops})
    plane.EntityData.Leafs.Append("asic_location_drops", types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops})
    plane.EntityData.Leafs.Append("ppu_state", types.YLeaf{"PpuState", plane.PpuState})

    plane.EntityData.YListKeys = []string {"Planeid"}

    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + types.AddKeyToken(asicInternalError.AsicNumber, "asic_number")
    asicInternalError.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdbagg_standby/statistics/plane/" + asicInternalError.EntityData.SegmentPath
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs.Append("asic_number", types.YLeaf{"AsicNumber", asicInternalError.AsicNumber})
    asicInternalError.EntityData.Leafs.Append("asic_location", types.YLeaf{"AsicLocation", asicInternalError.AsicLocation})
    asicInternalError.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError})
    asicInternalError.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError})
    asicInternalError.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError})
    asicInternalError.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError})
    asicInternalError.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError})
    asicInternalError.EntityData.Leafs.Append("link_no_sign_accept_error", types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError})
    asicInternalError.EntityData.Leafs.Append("link_token_error", types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError})
    asicInternalError.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount})
    asicInternalError.EntityData.Leafs.Append("last_asic_internal_error_ts", types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs})

    asicInternalError.EntityData.YListKeys = []string {"AsicNumber"}

    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FabHealth
type Controller_Fabric_Oper_FabHealth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FabHealth_SysInfoList.
    SysInfoList []*Controller_Fabric_Oper_FabHealth_SysInfoList
}

func (fabHealth *Controller_Fabric_Oper_FabHealth) GetEntityData() *types.CommonEntityData {
    fabHealth.EntityData.YFilter = fabHealth.YFilter
    fabHealth.EntityData.YangName = "fab_health"
    fabHealth.EntityData.BundleName = "cisco_ios_xr"
    fabHealth.EntityData.ParentYangName = "oper"
    fabHealth.EntityData.SegmentPath = "fab_health"
    fabHealth.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + fabHealth.EntityData.SegmentPath
    fabHealth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabHealth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabHealth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabHealth.EntityData.Children = types.NewOrderedMap()
    fabHealth.EntityData.Children.Append("sys_info_list", types.YChild{"SysInfoList", nil})
    for i := range fabHealth.SysInfoList {
        fabHealth.EntityData.Children.Append(types.GetSegmentPath(fabHealth.SysInfoList[i]), types.YChild{"SysInfoList", fabHealth.SysInfoList[i]})
    }
    fabHealth.EntityData.Leafs = types.NewOrderedMap()

    fabHealth.EntityData.YListKeys = []string {}

    return &(fabHealth.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    IndexKey interface{}

    // The type is bool.
    AggrStatus interface{}

    // The type is string.
    AvailableRackIds interface{}

    // The type is string.
    RackIdSeparator interface{}

    // The type is string.
    AvailableFmLoc interface{}

    // The type is string.
    FmLocSeparator interface{}

    // The type is interface{} with range: 0..4294967295.
    RackTotal interface{}

    // The type is interface{} with range: 0..4294967295.
    RackLcc interface{}

    // The type is interface{} with range: 0..4294967295.
    RackFcc interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneUp interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneMcastDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneAdminDn interface{}

    // The type is bool. The default value is false.
    ShowSysPlaneDetail interface{}

    // The type is interface{} with range: 0..4294967295.
    SfeAsicsTotal interface{}

    // The type is interface{} with range: 0..4294967295.
    SfeAsicsUp interface{}

    // The type is interface{} with range: 0..4294967295.
    SfeAsicsDn interface{}

    // The type is interface{} with range: 0..4294967295.
    FiaAsicsTotal interface{}

    // The type is interface{} with range: 0..4294967295.
    FiaAsicsUp interface{}

    // The type is interface{} with range: 0..4294967295.
    FiaAsicsDn interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList.
    SysPlaneInfoList []*Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList.
    RackInfoList []*Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus.
    FsdbStatus []*Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus.
    SfeStatus []*Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus
}

func (sysInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList) GetEntityData() *types.CommonEntityData {
    sysInfoList.EntityData.YFilter = sysInfoList.YFilter
    sysInfoList.EntityData.YangName = "sys_info_list"
    sysInfoList.EntityData.BundleName = "cisco_ios_xr"
    sysInfoList.EntityData.ParentYangName = "fab_health"
    sysInfoList.EntityData.SegmentPath = "sys_info_list" + types.AddKeyToken(sysInfoList.IndexKey, "index_key")
    sysInfoList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fab_health/" + sysInfoList.EntityData.SegmentPath
    sysInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sysInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sysInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sysInfoList.EntityData.Children = types.NewOrderedMap()
    sysInfoList.EntityData.Children.Append("sys_plane_info_list", types.YChild{"SysPlaneInfoList", nil})
    for i := range sysInfoList.SysPlaneInfoList {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.SysPlaneInfoList[i]), types.YChild{"SysPlaneInfoList", sysInfoList.SysPlaneInfoList[i]})
    }
    sysInfoList.EntityData.Children.Append("rack_info_list", types.YChild{"RackInfoList", nil})
    for i := range sysInfoList.RackInfoList {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.RackInfoList[i]), types.YChild{"RackInfoList", sysInfoList.RackInfoList[i]})
    }
    sysInfoList.EntityData.Children.Append("fsdb_status", types.YChild{"FsdbStatus", nil})
    for i := range sysInfoList.FsdbStatus {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.FsdbStatus[i]), types.YChild{"FsdbStatus", sysInfoList.FsdbStatus[i]})
    }
    sysInfoList.EntityData.Children.Append("sfe_status", types.YChild{"SfeStatus", nil})
    for i := range sysInfoList.SfeStatus {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.SfeStatus[i]), types.YChild{"SfeStatus", sysInfoList.SfeStatus[i]})
    }
    sysInfoList.EntityData.Leafs = types.NewOrderedMap()
    sysInfoList.EntityData.Leafs.Append("index_key", types.YLeaf{"IndexKey", sysInfoList.IndexKey})
    sysInfoList.EntityData.Leafs.Append("aggr_status", types.YLeaf{"AggrStatus", sysInfoList.AggrStatus})
    sysInfoList.EntityData.Leafs.Append("available_rack_ids", types.YLeaf{"AvailableRackIds", sysInfoList.AvailableRackIds})
    sysInfoList.EntityData.Leafs.Append("rack_id_separator", types.YLeaf{"RackIdSeparator", sysInfoList.RackIdSeparator})
    sysInfoList.EntityData.Leafs.Append("available_fm_loc", types.YLeaf{"AvailableFmLoc", sysInfoList.AvailableFmLoc})
    sysInfoList.EntityData.Leafs.Append("fm_loc_separator", types.YLeaf{"FmLocSeparator", sysInfoList.FmLocSeparator})
    sysInfoList.EntityData.Leafs.Append("rack_total", types.YLeaf{"RackTotal", sysInfoList.RackTotal})
    sysInfoList.EntityData.Leafs.Append("rack_lcc", types.YLeaf{"RackLcc", sysInfoList.RackLcc})
    sysInfoList.EntityData.Leafs.Append("rack_fcc", types.YLeaf{"RackFcc", sysInfoList.RackFcc})
    sysInfoList.EntityData.Leafs.Append("plane_up", types.YLeaf{"PlaneUp", sysInfoList.PlaneUp})
    sysInfoList.EntityData.Leafs.Append("plane_dn", types.YLeaf{"PlaneDn", sysInfoList.PlaneDn})
    sysInfoList.EntityData.Leafs.Append("plane_mcast_dn", types.YLeaf{"PlaneMcastDn", sysInfoList.PlaneMcastDn})
    sysInfoList.EntityData.Leafs.Append("plane_admin_dn", types.YLeaf{"PlaneAdminDn", sysInfoList.PlaneAdminDn})
    sysInfoList.EntityData.Leafs.Append("show_sys_plane_detail", types.YLeaf{"ShowSysPlaneDetail", sysInfoList.ShowSysPlaneDetail})
    sysInfoList.EntityData.Leafs.Append("sfe_asics_total", types.YLeaf{"SfeAsicsTotal", sysInfoList.SfeAsicsTotal})
    sysInfoList.EntityData.Leafs.Append("sfe_asics_up", types.YLeaf{"SfeAsicsUp", sysInfoList.SfeAsicsUp})
    sysInfoList.EntityData.Leafs.Append("sfe_asics_dn", types.YLeaf{"SfeAsicsDn", sysInfoList.SfeAsicsDn})
    sysInfoList.EntityData.Leafs.Append("fia_asics_total", types.YLeaf{"FiaAsicsTotal", sysInfoList.FiaAsicsTotal})
    sysInfoList.EntityData.Leafs.Append("fia_asics_up", types.YLeaf{"FiaAsicsUp", sysInfoList.FiaAsicsUp})
    sysInfoList.EntityData.Leafs.Append("fia_asics_dn", types.YLeaf{"FiaAsicsDn", sysInfoList.FiaAsicsDn})

    sysInfoList.EntityData.YListKeys = []string {"IndexKey"}

    return &(sysInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    PlaneId interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    PlaneState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    RacksWPlaneFault interface{}

    // The type is bool.
    IsDataDrop interface{}
}

func (sysPlaneInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList) GetEntityData() *types.CommonEntityData {
    sysPlaneInfoList.EntityData.YFilter = sysPlaneInfoList.YFilter
    sysPlaneInfoList.EntityData.YangName = "sys_plane_info_list"
    sysPlaneInfoList.EntityData.BundleName = "cisco_ios_xr"
    sysPlaneInfoList.EntityData.ParentYangName = "sys_info_list"
    sysPlaneInfoList.EntityData.SegmentPath = "sys_plane_info_list" + types.AddKeyToken(sysPlaneInfoList.PlaneId, "plane_id")
    sysPlaneInfoList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fab_health/sys_info_list/" + sysPlaneInfoList.EntityData.SegmentPath
    sysPlaneInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sysPlaneInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sysPlaneInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sysPlaneInfoList.EntityData.Children = types.NewOrderedMap()
    sysPlaneInfoList.EntityData.Leafs = types.NewOrderedMap()
    sysPlaneInfoList.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", sysPlaneInfoList.PlaneId})
    sysPlaneInfoList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", sysPlaneInfoList.AdminState})
    sysPlaneInfoList.EntityData.Leafs.Append("plane_state", types.YLeaf{"PlaneState", sysPlaneInfoList.PlaneState})
    sysPlaneInfoList.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", sysPlaneInfoList.PlaneMode})
    sysPlaneInfoList.EntityData.Leafs.Append("racks_w_plane_fault", types.YLeaf{"RacksWPlaneFault", sysPlaneInfoList.RacksWPlaneFault})
    sysPlaneInfoList.EntityData.Leafs.Append("is_data_drop", types.YLeaf{"IsDataDrop", sysPlaneInfoList.IsDataDrop})

    sysPlaneInfoList.EntityData.YListKeys = []string {"PlaneId"}

    return &(sysPlaneInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is string.
    RackName interface{}

    // The type is string.
    RackType interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    SfeAsicsTotal interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    SfeAsicsUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    SfeAsicsDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    FiaAsicsTotal interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    FiaAsicsUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    FiaAsicsDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneUp interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneMcastDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneAdminDn interface{}

    // The type is bool. The default value is false.
    ShowRackPlaneDetail interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AmbaValid interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList.
    RackPlaneInfoList []*Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList
}

func (rackInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList) GetEntityData() *types.CommonEntityData {
    rackInfoList.EntityData.YFilter = rackInfoList.YFilter
    rackInfoList.EntityData.YangName = "rack_info_list"
    rackInfoList.EntityData.BundleName = "cisco_ios_xr"
    rackInfoList.EntityData.ParentYangName = "sys_info_list"
    rackInfoList.EntityData.SegmentPath = "rack_info_list" + types.AddKeyToken(rackInfoList.RackId, "rack_id")
    rackInfoList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fab_health/sys_info_list/" + rackInfoList.EntityData.SegmentPath
    rackInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rackInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rackInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rackInfoList.EntityData.Children = types.NewOrderedMap()
    rackInfoList.EntityData.Children.Append("rack_plane_info_list", types.YChild{"RackPlaneInfoList", nil})
    for i := range rackInfoList.RackPlaneInfoList {
        rackInfoList.EntityData.Children.Append(types.GetSegmentPath(rackInfoList.RackPlaneInfoList[i]), types.YChild{"RackPlaneInfoList", rackInfoList.RackPlaneInfoList[i]})
    }
    rackInfoList.EntityData.Leafs = types.NewOrderedMap()
    rackInfoList.EntityData.Leafs.Append("rack_id", types.YLeaf{"RackId", rackInfoList.RackId})
    rackInfoList.EntityData.Leafs.Append("rack_name", types.YLeaf{"RackName", rackInfoList.RackName})
    rackInfoList.EntityData.Leafs.Append("rack_type", types.YLeaf{"RackType", rackInfoList.RackType})
    rackInfoList.EntityData.Leafs.Append("sfe_asics_total", types.YLeaf{"SfeAsicsTotal", rackInfoList.SfeAsicsTotal})
    rackInfoList.EntityData.Leafs.Append("sfe_asics_up", types.YLeaf{"SfeAsicsUp", rackInfoList.SfeAsicsUp})
    rackInfoList.EntityData.Leafs.Append("sfe_asics_dn", types.YLeaf{"SfeAsicsDn", rackInfoList.SfeAsicsDn})
    rackInfoList.EntityData.Leafs.Append("fia_asics_total", types.YLeaf{"FiaAsicsTotal", rackInfoList.FiaAsicsTotal})
    rackInfoList.EntityData.Leafs.Append("fia_asics_up", types.YLeaf{"FiaAsicsUp", rackInfoList.FiaAsicsUp})
    rackInfoList.EntityData.Leafs.Append("fia_asics_dn", types.YLeaf{"FiaAsicsDn", rackInfoList.FiaAsicsDn})
    rackInfoList.EntityData.Leafs.Append("plane_up", types.YLeaf{"PlaneUp", rackInfoList.PlaneUp})
    rackInfoList.EntityData.Leafs.Append("plane_dn", types.YLeaf{"PlaneDn", rackInfoList.PlaneDn})
    rackInfoList.EntityData.Leafs.Append("plane_mcast_dn", types.YLeaf{"PlaneMcastDn", rackInfoList.PlaneMcastDn})
    rackInfoList.EntityData.Leafs.Append("plane_admin_dn", types.YLeaf{"PlaneAdminDn", rackInfoList.PlaneAdminDn})
    rackInfoList.EntityData.Leafs.Append("show_rack_plane_detail", types.YLeaf{"ShowRackPlaneDetail", rackInfoList.ShowRackPlaneDetail})
    rackInfoList.EntityData.Leafs.Append("amba_valid", types.YLeaf{"AmbaValid", rackInfoList.AmbaValid})

    rackInfoList.EntityData.YListKeys = []string {"RackId"}

    return &(rackInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    PlaneId interface{}

    // The type is string.
    PlaneState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AsicsTotal interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AsicsUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AsicsDn interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba.
    ReachableAmba []*Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba
}

func (rackPlaneInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList) GetEntityData() *types.CommonEntityData {
    rackPlaneInfoList.EntityData.YFilter = rackPlaneInfoList.YFilter
    rackPlaneInfoList.EntityData.YangName = "rack_plane_info_list"
    rackPlaneInfoList.EntityData.BundleName = "cisco_ios_xr"
    rackPlaneInfoList.EntityData.ParentYangName = "rack_info_list"
    rackPlaneInfoList.EntityData.SegmentPath = "rack_plane_info_list" + types.AddKeyToken(rackPlaneInfoList.PlaneId, "plane_id")
    rackPlaneInfoList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fab_health/sys_info_list/rack_info_list/" + rackPlaneInfoList.EntityData.SegmentPath
    rackPlaneInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rackPlaneInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rackPlaneInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rackPlaneInfoList.EntityData.Children = types.NewOrderedMap()
    rackPlaneInfoList.EntityData.Children.Append("reachable_amba", types.YChild{"ReachableAmba", nil})
    for i := range rackPlaneInfoList.ReachableAmba {
        rackPlaneInfoList.EntityData.Children.Append(types.GetSegmentPath(rackPlaneInfoList.ReachableAmba[i]), types.YChild{"ReachableAmba", rackPlaneInfoList.ReachableAmba[i]})
    }
    rackPlaneInfoList.EntityData.Leafs = types.NewOrderedMap()
    rackPlaneInfoList.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", rackPlaneInfoList.PlaneId})
    rackPlaneInfoList.EntityData.Leafs.Append("plane_state", types.YLeaf{"PlaneState", rackPlaneInfoList.PlaneState})
    rackPlaneInfoList.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", rackPlaneInfoList.PlaneMode})
    rackPlaneInfoList.EntityData.Leafs.Append("asics_total", types.YLeaf{"AsicsTotal", rackPlaneInfoList.AsicsTotal})
    rackPlaneInfoList.EntityData.Leafs.Append("asics_up", types.YLeaf{"AsicsUp", rackPlaneInfoList.AsicsUp})
    rackPlaneInfoList.EntityData.Leafs.Append("asics_dn", types.YLeaf{"AsicsDn", rackPlaneInfoList.AsicsDn})

    rackPlaneInfoList.EntityData.YListKeys = []string {"PlaneId"}

    return &(rackPlaneInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba
type Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    NumReachable interface{}
}

func (reachableAmba *Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba) GetEntityData() *types.CommonEntityData {
    reachableAmba.EntityData.YFilter = reachableAmba.YFilter
    reachableAmba.EntityData.YangName = "reachable_amba"
    reachableAmba.EntityData.BundleName = "cisco_ios_xr"
    reachableAmba.EntityData.ParentYangName = "rack_plane_info_list"
    reachableAmba.EntityData.SegmentPath = "reachable_amba" + types.AddKeyToken(reachableAmba.Idx, "idx")
    reachableAmba.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fab_health/sys_info_list/rack_info_list/rack_plane_info_list/" + reachableAmba.EntityData.SegmentPath
    reachableAmba.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachableAmba.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachableAmba.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachableAmba.EntityData.Children = types.NewOrderedMap()
    reachableAmba.EntityData.Leafs = types.NewOrderedMap()
    reachableAmba.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", reachableAmba.Idx})
    reachableAmba.EntityData.Leafs.Append("num_reachable", types.YLeaf{"NumReachable", reachableAmba.NumReachable})

    reachableAmba.EntityData.YListKeys = []string {"Idx"}

    return &(reachableAmba.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus
type Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is bool.
    Status interface{}
}

func (fsdbStatus *Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus) GetEntityData() *types.CommonEntityData {
    fsdbStatus.EntityData.YFilter = fsdbStatus.YFilter
    fsdbStatus.EntityData.YangName = "fsdb_status"
    fsdbStatus.EntityData.BundleName = "cisco_ios_xr"
    fsdbStatus.EntityData.ParentYangName = "sys_info_list"
    fsdbStatus.EntityData.SegmentPath = "fsdb_status" + types.AddKeyToken(fsdbStatus.RackId, "rack_id")
    fsdbStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fab_health/sys_info_list/" + fsdbStatus.EntityData.SegmentPath
    fsdbStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbStatus.EntityData.Children = types.NewOrderedMap()
    fsdbStatus.EntityData.Leafs = types.NewOrderedMap()
    fsdbStatus.EntityData.Leafs.Append("rack_id", types.YLeaf{"RackId", fsdbStatus.RackId})
    fsdbStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", fsdbStatus.Status})

    fsdbStatus.EntityData.YListKeys = []string {"RackId"}

    return &(fsdbStatus.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus
type Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    LocStr interface{}

    // The type is bool.
    Status interface{}
}

func (sfeStatus *Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus) GetEntityData() *types.CommonEntityData {
    sfeStatus.EntityData.YFilter = sfeStatus.YFilter
    sfeStatus.EntityData.YangName = "sfe_status"
    sfeStatus.EntityData.BundleName = "cisco_ios_xr"
    sfeStatus.EntityData.ParentYangName = "sys_info_list"
    sfeStatus.EntityData.SegmentPath = "sfe_status" + types.AddKeyToken(sfeStatus.LocStr, "loc_str")
    sfeStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fab_health/sys_info_list/" + sfeStatus.EntityData.SegmentPath
    sfeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeStatus.EntityData.Children = types.NewOrderedMap()
    sfeStatus.EntityData.Leafs = types.NewOrderedMap()
    sfeStatus.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", sfeStatus.LocStr})
    sfeStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", sfeStatus.Status})

    sfeStatus.EntityData.YListKeys = []string {"LocStr"}

    return &(sfeStatus.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator
// FSDB Aggregator information
type Controller_Fabric_Oper_FsdbAggregator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Fsdbagg Controller_Fabric_Oper_FsdbAggregator_Fsdbagg
}

func (fsdbAggregator *Controller_Fabric_Oper_FsdbAggregator) GetEntityData() *types.CommonEntityData {
    fsdbAggregator.EntityData.YFilter = fsdbAggregator.YFilter
    fsdbAggregator.EntityData.YangName = "fsdb-aggregator"
    fsdbAggregator.EntityData.BundleName = "cisco_ios_xr"
    fsdbAggregator.EntityData.ParentYangName = "oper"
    fsdbAggregator.EntityData.SegmentPath = "fsdb-aggregator"
    fsdbAggregator.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + fsdbAggregator.EntityData.SegmentPath
    fsdbAggregator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbAggregator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbAggregator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbAggregator.EntityData.Children = types.NewOrderedMap()
    fsdbAggregator.EntityData.Children.Append("fsdbagg", types.YChild{"Fsdbagg", &fsdbAggregator.Fsdbagg})
    fsdbAggregator.EntityData.Leafs = types.NewOrderedMap()

    fsdbAggregator.EntityData.YListKeys = []string {}

    return &(fsdbAggregator.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace.
    Trace []*Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace
}

func (fsdbagg *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg) GetEntityData() *types.CommonEntityData {
    fsdbagg.EntityData.YFilter = fsdbagg.YFilter
    fsdbagg.EntityData.YangName = "fsdbagg"
    fsdbagg.EntityData.BundleName = "cisco_ios_xr"
    fsdbagg.EntityData.ParentYangName = "fsdb-aggregator"
    fsdbagg.EntityData.SegmentPath = "fsdbagg"
    fsdbagg.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb-aggregator/" + fsdbagg.EntityData.SegmentPath
    fsdbagg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbagg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbagg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbagg.EntityData.Children = types.NewOrderedMap()
    fsdbagg.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range fsdbagg.Trace {
        fsdbagg.EntityData.Children.Append(types.GetSegmentPath(fsdbagg.Trace[i]), types.YChild{"Trace", fsdbagg.Trace[i]})
    }
    fsdbagg.EntityData.Leafs = types.NewOrderedMap()

    fsdbagg.EntityData.YListKeys = []string {}

    return &(fsdbagg.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace
// show traceable processes
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location.
    Location []*Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location
}

func (trace *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "fsdbagg"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb-aggregator/fsdbagg/" + trace.EntityData.SegmentPath
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions.
    AllOptions []*Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions
}

func (location *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb-aggregator/fsdbagg/trace/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb-aggregator/fsdbagg/trace/location/" + allOptions.EntityData.SegmentPath
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        types.SetYListKey(allOptions.TraceBlocks[i], i)
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks" + types.AddNoKeyToken(traceBlocks)
    traceBlocks.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb-aggregator/fsdbagg/trace/location/all-options/" + traceBlocks.EntityData.SegmentPath
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_Fabric_Oper_Link
// Fabric link option
type Controller_Fabric_Oper_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Link_Rack.
    Rack []*Controller_Fabric_Oper_Link_Rack

    // The type is slice of Controller_Fabric_Oper_Link_NodeLocation.
    NodeLocation []*Controller_Fabric_Oper_Link_NodeLocation
}

func (link *Controller_Fabric_Oper_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "oper"
    link.EntityData.SegmentPath = "link"
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range link.Rack {
        link.EntityData.Children.Append(types.GetSegmentPath(link.Rack[i]), types.YChild{"Rack", link.Rack[i]})
    }
    link.EntityData.Children.Append("node_location", types.YChild{"NodeLocation", nil})
    for i := range link.NodeLocation {
        link.EntityData.Children.Append(types.GetSegmentPath(link.NodeLocation[i]), types.YChild{"NodeLocation", link.NodeLocation[i]})
    }
    link.EntityData.Leafs = types.NewOrderedMap()

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Controller_Fabric_Oper_Link_Rack
type Controller_Fabric_Oper_Link_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port.
    Port []*Controller_Fabric_Oper_Link_Rack_Port
}

func (rack *Controller_Fabric_Oper_Link_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "link"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackNumber, "rack_number")
    rack.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/" + rack.EntityData.SegmentPath
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("port", types.YChild{"Port", nil})
    for i := range rack.Port {
        rack.EntityData.Children.Append(types.GetSegmentPath(rack.Port[i]), types.YChild{"Port", rack.Port[i]})
    }
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", rack.RackNumber})

    rack.EntityData.YListKeys = []string {"RackNumber"}

    return &(rack.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port
type Controller_Fabric_Oper_Link_Rack_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: fia|s1|s2|s3.
    Portname interface{}

    // The type is string. The default value is port..
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port_Location.
    Location []*Controller_Fabric_Oper_Link_Rack_Port_Location

    // Rx link option.
    Rx Controller_Fabric_Oper_Link_Rack_Port_Rx

    // Tx link option.
    Tx Controller_Fabric_Oper_Link_Rack_Port_Tx
}

func (port *Controller_Fabric_Oper_Link_Rack_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "rack"
    port.EntityData.SegmentPath = "port" + types.AddKeyToken(port.Portname, "portname")
    port.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/" + port.EntityData.SegmentPath
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range port.Location {
        port.EntityData.Children.Append(types.GetSegmentPath(port.Location[i]), types.YChild{"Location", port.Location[i]})
    }
    port.EntityData.Children.Append("rx", types.YChild{"Rx", &port.Rx})
    port.EntityData.Children.Append("tx", types.YChild{"Tx", &port.Tx})
    port.EntityData.Leafs = types.NewOrderedMap()
    port.EntityData.Leafs.Append("portname", types.YLeaf{"Portname", port.Portname})
    port.EntityData.Leafs.Append("description", types.YLeaf{"Description", port.Description})

    port.EntityData.YListKeys = []string {"Portname"}

    return &(port.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location
type Controller_Fabric_Oper_Link_Rack_Port_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0)/([R|r][P|p](0))/(0?[0-1])/(0?[0-9]|[1-9][0-9]|1[0-3][0-9]|14[0-3]))|((0)/(0)/(0?[0-7])/(0?[0-9]|[1-3][0-9]|4[0-7])).
    LocStr interface{}

    // Rx link option.
    Rx Controller_Fabric_Oper_Link_Rack_Port_Location_Rx

    // Tx link option.
    Tx Controller_Fabric_Oper_Link_Rack_Port_Location_Tx
}

func (location *Controller_Fabric_Oper_Link_Rack_Port_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("rx", types.YChild{"Rx", &location.Rx})
    location.EntityData.Children.Append("tx", types.YChild{"Tx", &location.Tx})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx
// Rx link option
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics
}

func (rx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "location"
    rx.EntityData.SegmentPath = "rx"
    rx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/" + rx.EntityData.SegmentPath
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = types.NewOrderedMap()
    rx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range rx.DataIdx {
        rx.EntityData.Children.Append(types.GetSegmentPath(rx.DataIdx[i]), types.YChild{"DataIdx", rx.DataIdx[i]})
    }
    rx.EntityData.Children.Append("brief", types.YChild{"Brief", &rx.Brief})
    rx.EntityData.Children.Append("detail", types.YChild{"Detail", &rx.Detail})
    rx.EntityData.Children.Append("state", types.YChild{"State", &rx.State})
    rx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &rx.Statistics})
    rx.EntityData.Leafs = types.NewOrderedMap()

    rx.EntityData.YListKeys = []string {}

    return &(rx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "rx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "rx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "rx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/" + up.EntityData.SegmentPath
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/up/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/up/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/up/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/up/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/up/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/up/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/up/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/up/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/" + down.EntityData.SegmentPath
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/down/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/down/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/down/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/down/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/down/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/down/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/down/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/down/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/" + mismatch.EntityData.SegmentPath
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/mismatch/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/mismatch/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/mismatch/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/mismatch/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/mismatch/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/mismatch/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/mismatch/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/state/mismatch/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "rx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/statistics/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/statistics/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/statistics/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/statistics/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/rx/statistics/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx
// Tx link option
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics
}

func (tx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "location"
    tx.EntityData.SegmentPath = "tx"
    tx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/" + tx.EntityData.SegmentPath
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = types.NewOrderedMap()
    tx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range tx.DataIdx {
        tx.EntityData.Children.Append(types.GetSegmentPath(tx.DataIdx[i]), types.YChild{"DataIdx", tx.DataIdx[i]})
    }
    tx.EntityData.Children.Append("brief", types.YChild{"Brief", &tx.Brief})
    tx.EntityData.Children.Append("detail", types.YChild{"Detail", &tx.Detail})
    tx.EntityData.Children.Append("state", types.YChild{"State", &tx.State})
    tx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &tx.Statistics})
    tx.EntityData.Leafs = types.NewOrderedMap()

    tx.EntityData.YListKeys = []string {}

    return &(tx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "tx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "tx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/" + up.EntityData.SegmentPath
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/up/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/up/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/up/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/up/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/up/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/up/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/up/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/up/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/" + down.EntityData.SegmentPath
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/down/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/down/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/down/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/down/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/down/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/down/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/down/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/down/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/" + mismatch.EntityData.SegmentPath
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/mismatch/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/mismatch/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/mismatch/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/mismatch/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/mismatch/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/mismatch/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/mismatch/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/state/mismatch/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "tx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/statistics/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/statistics/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/statistics/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/statistics/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/location/tx/statistics/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx
// Rx link option
type Controller_Fabric_Oper_Link_Rack_Port_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Rx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics
}

func (rx *Controller_Fabric_Oper_Link_Rack_Port_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "port"
    rx.EntityData.SegmentPath = "rx"
    rx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/" + rx.EntityData.SegmentPath
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = types.NewOrderedMap()
    rx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range rx.DataIdx {
        rx.EntityData.Children.Append(types.GetSegmentPath(rx.DataIdx[i]), types.YChild{"DataIdx", rx.DataIdx[i]})
    }
    rx.EntityData.Children.Append("brief", types.YChild{"Brief", &rx.Brief})
    rx.EntityData.Children.Append("detail", types.YChild{"Detail", &rx.Detail})
    rx.EntityData.Children.Append("state", types.YChild{"State", &rx.State})
    rx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &rx.Statistics})
    rx.EntityData.Leafs = types.NewOrderedMap()

    rx.EntityData.YListKeys = []string {}

    return &(rx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "rx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "rx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Rx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "rx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/" + up.EntityData.SegmentPath
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/up/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/up/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/up/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/up/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/up/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/up/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/up/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/up/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/" + down.EntityData.SegmentPath
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/down/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/down/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/down/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/down/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/down/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/down/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/down/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/down/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/" + mismatch.EntityData.SegmentPath
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/mismatch/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/mismatch/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/mismatch/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/mismatch/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/mismatch/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/mismatch/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/mismatch/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/state/mismatch/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "rx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/statistics/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/statistics/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/statistics/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/statistics/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/rx/statistics/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx
// Tx link option
type Controller_Fabric_Oper_Link_Rack_Port_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Tx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics
}

func (tx *Controller_Fabric_Oper_Link_Rack_Port_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "port"
    tx.EntityData.SegmentPath = "tx"
    tx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/" + tx.EntityData.SegmentPath
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = types.NewOrderedMap()
    tx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range tx.DataIdx {
        tx.EntityData.Children.Append(types.GetSegmentPath(tx.DataIdx[i]), types.YChild{"DataIdx", tx.DataIdx[i]})
    }
    tx.EntityData.Children.Append("brief", types.YChild{"Brief", &tx.Brief})
    tx.EntityData.Children.Append("detail", types.YChild{"Detail", &tx.Detail})
    tx.EntityData.Children.Append("state", types.YChild{"State", &tx.State})
    tx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &tx.Statistics})
    tx.EntityData.Leafs = types.NewOrderedMap()

    tx.EntityData.YListKeys = []string {}

    return &(tx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "tx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "tx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Tx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/" + up.EntityData.SegmentPath
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/up/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/up/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/up/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/up/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/up/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/up/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/up/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/up/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/" + down.EntityData.SegmentPath
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/down/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/down/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/down/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/down/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/down/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/down/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/down/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/down/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/" + mismatch.EntityData.SegmentPath
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/mismatch/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/mismatch/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/mismatch/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/mismatch/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/mismatch/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/mismatch/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/mismatch/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/state/mismatch/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "tx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/statistics/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/statistics/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/statistics/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/statistics/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/rack/port/tx/statistics/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation
type Controller_Fabric_Oper_Link_NodeLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    NodeStr interface{}

    // The type is slice of Controller_Fabric_Oper_Link_NodeLocation_Port.
    Port []*Controller_Fabric_Oper_Link_NodeLocation_Port
}

func (nodeLocation *Controller_Fabric_Oper_Link_NodeLocation) GetEntityData() *types.CommonEntityData {
    nodeLocation.EntityData.YFilter = nodeLocation.YFilter
    nodeLocation.EntityData.YangName = "node_location"
    nodeLocation.EntityData.BundleName = "cisco_ios_xr"
    nodeLocation.EntityData.ParentYangName = "link"
    nodeLocation.EntityData.SegmentPath = "node_location" + types.AddKeyToken(nodeLocation.NodeStr, "node_str")
    nodeLocation.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/" + nodeLocation.EntityData.SegmentPath
    nodeLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeLocation.EntityData.Children = types.NewOrderedMap()
    nodeLocation.EntityData.Children.Append("port", types.YChild{"Port", nil})
    for i := range nodeLocation.Port {
        nodeLocation.EntityData.Children.Append(types.GetSegmentPath(nodeLocation.Port[i]), types.YChild{"Port", nodeLocation.Port[i]})
    }
    nodeLocation.EntityData.Leafs = types.NewOrderedMap()
    nodeLocation.EntityData.Leafs.Append("node_str", types.YLeaf{"NodeStr", nodeLocation.NodeStr})

    nodeLocation.EntityData.YListKeys = []string {"NodeStr"}

    return &(nodeLocation.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port
type Controller_Fabric_Oper_Link_NodeLocation_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: fia|s1|s2|s3.
    Portname interface{}

    // The type is string. The default value is port..
    Description interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location.
    Location []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location

    // Rx link option.
    Rx Controller_Fabric_Oper_Link_NodeLocation_Port_Rx

    // Tx link option.
    Tx Controller_Fabric_Oper_Link_NodeLocation_Port_Tx
}

func (port *Controller_Fabric_Oper_Link_NodeLocation_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "node_location"
    port.EntityData.SegmentPath = "port" + types.AddKeyToken(port.Portname, "portname")
    port.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/" + port.EntityData.SegmentPath
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range port.Location {
        port.EntityData.Children.Append(types.GetSegmentPath(port.Location[i]), types.YChild{"Location", port.Location[i]})
    }
    port.EntityData.Children.Append("rx", types.YChild{"Rx", &port.Rx})
    port.EntityData.Children.Append("tx", types.YChild{"Tx", &port.Tx})
    port.EntityData.Leafs = types.NewOrderedMap()
    port.EntityData.Leafs.Append("portname", types.YLeaf{"Portname", port.Portname})
    port.EntityData.Leafs.Append("description", types.YLeaf{"Description", port.Description})

    port.EntityData.YListKeys = []string {"Portname"}

    return &(port.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0)/([R|r][P|p](0))/(0?[0-1])/(0?[0-9]|[1-9][0-9]|1[0-3][0-9]|14[0-3]))|((0)/(0)/(0?[0-7])/(0?[0-9]|[1-3][0-9]|4[0-7])).
    LocStr interface{}

    // Rx link option.
    Rx Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx

    // Tx link option.
    Tx Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx
}

func (location *Controller_Fabric_Oper_Link_NodeLocation_Port_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("rx", types.YChild{"Rx", &location.Rx})
    location.EntityData.Children.Append("tx", types.YChild{"Tx", &location.Tx})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx
// Rx link option
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail

    
    State Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State

    
    Statistics Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics
}

func (rx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "location"
    rx.EntityData.SegmentPath = "rx"
    rx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/" + rx.EntityData.SegmentPath
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = types.NewOrderedMap()
    rx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range rx.DataIdx {
        rx.EntityData.Children.Append(types.GetSegmentPath(rx.DataIdx[i]), types.YChild{"DataIdx", rx.DataIdx[i]})
    }
    rx.EntityData.Children.Append("brief", types.YChild{"Brief", &rx.Brief})
    rx.EntityData.Children.Append("detail", types.YChild{"Detail", &rx.Detail})
    rx.EntityData.Children.Append("state", types.YChild{"State", &rx.State})
    rx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &rx.Statistics})
    rx.EntityData.Leafs = types.NewOrderedMap()

    rx.EntityData.YListKeys = []string {}

    return &(rx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "rx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "rx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up

    
    Down Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down

    
    Mismatch Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "rx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/" + up.EntityData.SegmentPath
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/up/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/up/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/up/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/up/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/up/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/up/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/up/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/up/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/" + down.EntityData.SegmentPath
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/down/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/down/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/down/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/down/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/down/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/down/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/down/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/down/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/" + mismatch.EntityData.SegmentPath
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/mismatch/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/mismatch/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/mismatch/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/mismatch/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/mismatch/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/mismatch/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/mismatch/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/state/mismatch/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "rx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/statistics/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/statistics/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/statistics/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/statistics/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Rx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/rx/statistics/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx
// Tx link option
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail

    
    State Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State

    
    Statistics Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics
}

func (tx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "location"
    tx.EntityData.SegmentPath = "tx"
    tx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/" + tx.EntityData.SegmentPath
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = types.NewOrderedMap()
    tx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range tx.DataIdx {
        tx.EntityData.Children.Append(types.GetSegmentPath(tx.DataIdx[i]), types.YChild{"DataIdx", tx.DataIdx[i]})
    }
    tx.EntityData.Children.Append("brief", types.YChild{"Brief", &tx.Brief})
    tx.EntityData.Children.Append("detail", types.YChild{"Detail", &tx.Detail})
    tx.EntityData.Children.Append("state", types.YChild{"State", &tx.State})
    tx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &tx.Statistics})
    tx.EntityData.Leafs = types.NewOrderedMap()

    tx.EntityData.YListKeys = []string {}

    return &(tx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "tx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "tx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up

    
    Down Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down

    
    Mismatch Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/" + up.EntityData.SegmentPath
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/up/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/up/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/up/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/up/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/up/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/up/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/up/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/up/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/" + down.EntityData.SegmentPath
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/down/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/down/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/down/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/down/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/down/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/down/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/down/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/down/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/" + mismatch.EntityData.SegmentPath
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/mismatch/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/mismatch/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/mismatch/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/mismatch/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/mismatch/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/mismatch/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/mismatch/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/state/mismatch/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "tx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/statistics/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/statistics/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/statistics/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/statistics/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Location_Tx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/location/tx/statistics/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx
// Rx link option
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail

    
    State Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State

    
    Statistics Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics
}

func (rx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "port"
    rx.EntityData.SegmentPath = "rx"
    rx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/" + rx.EntityData.SegmentPath
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = types.NewOrderedMap()
    rx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range rx.DataIdx {
        rx.EntityData.Children.Append(types.GetSegmentPath(rx.DataIdx[i]), types.YChild{"DataIdx", rx.DataIdx[i]})
    }
    rx.EntityData.Children.Append("brief", types.YChild{"Brief", &rx.Brief})
    rx.EntityData.Children.Append("detail", types.YChild{"Detail", &rx.Detail})
    rx.EntityData.Children.Append("state", types.YChild{"State", &rx.State})
    rx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &rx.Statistics})
    rx.EntityData.Leafs = types.NewOrderedMap()

    rx.EntityData.YListKeys = []string {}

    return &(rx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "rx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "rx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up

    
    Down Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down

    
    Mismatch Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "rx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/" + up.EntityData.SegmentPath
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/up/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/up/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/up/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/up/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/up/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/up/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/up/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/up/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/" + down.EntityData.SegmentPath
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/down/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/down/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/down/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/down/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/down/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/down/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/down/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/down/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/" + mismatch.EntityData.SegmentPath
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/mismatch/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/mismatch/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/mismatch/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/mismatch/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/mismatch/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/mismatch/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/mismatch/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/state/mismatch/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "rx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/statistics/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/statistics/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/statistics/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/statistics/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Rx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/rx/statistics/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx
// Tx link option
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail

    
    State Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State

    
    Statistics Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics
}

func (tx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "port"
    tx.EntityData.SegmentPath = "tx"
    tx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/" + tx.EntityData.SegmentPath
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = types.NewOrderedMap()
    tx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range tx.DataIdx {
        tx.EntityData.Children.Append(types.GetSegmentPath(tx.DataIdx[i]), types.YChild{"DataIdx", tx.DataIdx[i]})
    }
    tx.EntityData.Children.Append("brief", types.YChild{"Brief", &tx.Brief})
    tx.EntityData.Children.Append("detail", types.YChild{"Detail", &tx.Detail})
    tx.EntityData.Children.Append("state", types.YChild{"State", &tx.State})
    tx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &tx.Statistics})
    tx.EntityData.Leafs = types.NewOrderedMap()

    tx.EntityData.YListKeys = []string {}

    return &(tx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "tx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "tx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up

    
    Down Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down

    
    Mismatch Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/" + up.EntityData.SegmentPath
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/up/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/up/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/up/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/up/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/up/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/up/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/up/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/up/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/" + down.EntityData.SegmentPath
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/down/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/down/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/down/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/down/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/down/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/down/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/down/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/down/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/" + mismatch.EntityData.SegmentPath
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/mismatch/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/mismatch/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/mismatch/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/mismatch/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/mismatch/brief/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/mismatch/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/mismatch/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/state/mismatch/detail/data_idx/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "tx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/statistics/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Brief
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/statistics/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/statistics/brief/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Detail
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/statistics/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_NodeLocation_Port_Tx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/link/node_location/port/tx/statistics/detail/" + dataIdx.EntityData.SegmentPath
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Sfe
// Switch Fabric Element option
type Controller_Fabric_Oper_Sfe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack.
    Rack []*Controller_Fabric_Oper_Sfe_Rack
}

func (sfe *Controller_Fabric_Oper_Sfe) GetEntityData() *types.CommonEntityData {
    sfe.EntityData.YFilter = sfe.YFilter
    sfe.EntityData.YangName = "sfe"
    sfe.EntityData.BundleName = "cisco_ios_xr"
    sfe.EntityData.ParentYangName = "oper"
    sfe.EntityData.SegmentPath = "sfe"
    sfe.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + sfe.EntityData.SegmentPath
    sfe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfe.EntityData.Children = types.NewOrderedMap()
    sfe.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range sfe.Rack {
        sfe.EntityData.Children.Append(types.GetSegmentPath(sfe.Rack[i]), types.YChild{"Rack", sfe.Rack[i]})
    }
    sfe.EntityData.Leafs = types.NewOrderedMap()

    sfe.EntityData.YListKeys = []string {}

    return &(sfe.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack
type Controller_Fabric_Oper_Sfe_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack_AsicStages.
    AsicStages []*Controller_Fabric_Oper_Sfe_Rack_AsicStages
}

func (rack *Controller_Fabric_Oper_Sfe_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "sfe"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackNumber, "rack_number")
    rack.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/" + rack.EntityData.SegmentPath
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("asic_stages", types.YChild{"AsicStages", nil})
    for i := range rack.AsicStages {
        rack.EntityData.Children.Append(types.GetSegmentPath(rack.AsicStages[i]), types.YChild{"AsicStages", rack.AsicStages[i]})
    }
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", rack.RackNumber})

    rack.EntityData.YListKeys = []string {"RackNumber"}

    return &(rack.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages
type Controller_Fabric_Oper_Sfe_Rack_AsicStages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // fia|s123|s13|s2|b2b.
    AsicStageName interface{}

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location.
    Location []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList

    
    Brief Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief

    
    Detail Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail
}

func (asicStages *Controller_Fabric_Oper_Sfe_Rack_AsicStages) GetEntityData() *types.CommonEntityData {
    asicStages.EntityData.YFilter = asicStages.YFilter
    asicStages.EntityData.YangName = "asic_stages"
    asicStages.EntityData.BundleName = "cisco_ios_xr"
    asicStages.EntityData.ParentYangName = "rack"
    asicStages.EntityData.SegmentPath = "asic_stages" + types.AddKeyToken(asicStages.AsicStageName, "asic_stage_name")
    asicStages.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/" + asicStages.EntityData.SegmentPath
    asicStages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicStages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicStages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicStages.EntityData.Children = types.NewOrderedMap()
    asicStages.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range asicStages.Location {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.Location[i]), types.YChild{"Location", asicStages.Location[i]})
    }
    asicStages.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range asicStages.AsicList {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.AsicList[i]), types.YChild{"AsicList", asicStages.AsicList[i]})
    }
    asicStages.EntityData.Children.Append("brief", types.YChild{"Brief", &asicStages.Brief})
    asicStages.EntityData.Children.Append("detail", types.YChild{"Detail", &asicStages.Detail})
    asicStages.EntityData.Leafs = types.NewOrderedMap()
    asicStages.EntityData.Leafs.Append("asic_stage_name", types.YLeaf{"AsicStageName", asicStages.AsicStageName})

    asicStages.EntityData.YListKeys = []string {"AsicStageName"}

    return &(asicStages.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0)/([R|r][P|p](0))/(0?[0-1]))|((0)/(0)/(0?[0-7])).
    LocStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList

    
    Brief Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief

    
    Detail Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail
}

func (location *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "asic_stages"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range location.AsicList {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AsicList[i]), types.YChild{"AsicList", location.AsicList[i]})
    }
    location.EntityData.Children.Append("brief", types.YChild{"Brief", &location.Brief})
    location.EntityData.Children.Append("detail", types.YChild{"Detail", &location.Detail})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "location"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/location/" + asicList.EntityData.SegmentPath
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/location/asic_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList
}

func (brief *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "location"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/location/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range brief.AsicList {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.AsicList[i]), types.YChild{"AsicList", brief.AsicList[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "brief"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/location/brief/" + asicList.EntityData.SegmentPath
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/location/brief/asic_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList
}

func (detail *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "location"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/location/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range detail.AsicList {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.AsicList[i]), types.YChild{"AsicList", detail.AsicList[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "detail"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/location/detail/" + asicList.EntityData.SegmentPath
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/location/detail/asic_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "asic_stages"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/" + asicList.EntityData.SegmentPath
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/asic_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList
}

func (brief *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "asic_stages"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range brief.AsicList {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.AsicList[i]), types.YChild{"AsicList", brief.AsicList[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "brief"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/brief/" + asicList.EntityData.SegmentPath
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/brief/asic_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList
}

func (detail *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "asic_stages"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range detail.AsicList {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.AsicList[i]), types.YChild{"AsicList", detail.AsicList[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "detail"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/detail/" + asicList.EntityData.SegmentPath
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/sfe/rack/asic_stages/detail/asic_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_FsdbPla
// plane availability status option
type Controller_Fabric_Oper_FsdbPla struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rack. The type is slice of Controller_Fabric_Oper_FsdbPla_Rack.
    Rack []*Controller_Fabric_Oper_FsdbPla_Rack
}

func (fsdbPla *Controller_Fabric_Oper_FsdbPla) GetEntityData() *types.CommonEntityData {
    fsdbPla.EntityData.YFilter = fsdbPla.YFilter
    fsdbPla.EntityData.YangName = "fsdb_pla"
    fsdbPla.EntityData.BundleName = "cisco_ios_xr"
    fsdbPla.EntityData.ParentYangName = "oper"
    fsdbPla.EntityData.SegmentPath = "fsdb_pla"
    fsdbPla.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + fsdbPla.EntityData.SegmentPath
    fsdbPla.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbPla.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbPla.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbPla.EntityData.Children = types.NewOrderedMap()
    fsdbPla.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range fsdbPla.Rack {
        fsdbPla.EntityData.Children.Append(types.GetSegmentPath(fsdbPla.Rack[i]), types.YChild{"Rack", fsdbPla.Rack[i]})
    }
    fsdbPla.EntityData.Leafs = types.NewOrderedMap()

    fsdbPla.EntityData.YListKeys = []string {}

    return &(fsdbPla.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack
// Rack
type Controller_Fabric_Oper_FsdbPla_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of Controller_Fabric_Oper_FsdbPla_Rack_AsicStages.
    AsicStages []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages
}

func (rack *Controller_Fabric_Oper_FsdbPla_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "fsdb_pla"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackNumber, "rack_number")
    rack.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_pla/" + rack.EntityData.SegmentPath
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("asic_stages", types.YChild{"AsicStages", nil})
    for i := range rack.AsicStages {
        rack.EntityData.Children.Append(types.GetSegmentPath(rack.AsicStages[i]), types.YChild{"AsicStages", rack.AsicStages[i]})
    }
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", rack.RackNumber})

    rack.EntityData.YListKeys = []string {"RackNumber"}

    return &(rack.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: s1|s2|s3|s123.
    AsicStageIdx interface{}

    // The type is string with pattern: s1|s2|s3|s123.
    AsicStageName interface{}

    // The type is string.
    RackNumber interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PlaneNumber interface{}

    // The type is slice of Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids.
    Fabids []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids.
    DownFabids []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination.
    Destination []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination
}

func (asicStages *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages) GetEntityData() *types.CommonEntityData {
    asicStages.EntityData.YFilter = asicStages.YFilter
    asicStages.EntityData.YangName = "asic_stages"
    asicStages.EntityData.BundleName = "cisco_ios_xr"
    asicStages.EntityData.ParentYangName = "rack"
    asicStages.EntityData.SegmentPath = "asic_stages" + types.AddKeyToken(asicStages.AsicStageIdx, "asic_stage_idx")
    asicStages.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_pla/rack/" + asicStages.EntityData.SegmentPath
    asicStages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicStages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicStages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicStages.EntityData.Children = types.NewOrderedMap()
    asicStages.EntityData.Children.Append("fabids", types.YChild{"Fabids", nil})
    for i := range asicStages.Fabids {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.Fabids[i]), types.YChild{"Fabids", asicStages.Fabids[i]})
    }
    asicStages.EntityData.Children.Append("down_fabids", types.YChild{"DownFabids", nil})
    for i := range asicStages.DownFabids {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.DownFabids[i]), types.YChild{"DownFabids", asicStages.DownFabids[i]})
    }
    asicStages.EntityData.Children.Append("destination", types.YChild{"Destination", nil})
    for i := range asicStages.Destination {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.Destination[i]), types.YChild{"Destination", asicStages.Destination[i]})
    }
    asicStages.EntityData.Leafs = types.NewOrderedMap()
    asicStages.EntityData.Leafs.Append("asic_stage_idx", types.YLeaf{"AsicStageIdx", asicStages.AsicStageIdx})
    asicStages.EntityData.Leafs.Append("asic_stage_name", types.YLeaf{"AsicStageName", asicStages.AsicStageName})
    asicStages.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", asicStages.RackNumber})
    asicStages.EntityData.Leafs.Append("plane_number", types.YLeaf{"PlaneNumber", asicStages.PlaneNumber})

    asicStages.EntityData.YListKeys = []string {"AsicStageIdx"}

    return &(asicStages.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    FabidAddress interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PlaneNum interface{}

    // The type is string.
    Plane0Mask interface{}

    // The type is string.
    Plane1Mask interface{}

    // The type is string.
    Plane2Mask interface{}

    // The type is string.
    Plane3Mask interface{}

    // The type is string.
    Plane4Mask interface{}

    // The type is string.
    Plane5Mask interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MinLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MaxLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalLinks interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MinUpLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MaxUpLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalUpLinks interface{}
}

func (fabids *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids) GetEntityData() *types.CommonEntityData {
    fabids.EntityData.YFilter = fabids.YFilter
    fabids.EntityData.YangName = "fabids"
    fabids.EntityData.BundleName = "cisco_ios_xr"
    fabids.EntityData.ParentYangName = "asic_stages"
    fabids.EntityData.SegmentPath = "fabids" + types.AddKeyToken(fabids.Idx, "idx")
    fabids.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_pla/rack/asic_stages/" + fabids.EntityData.SegmentPath
    fabids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabids.EntityData.Children = types.NewOrderedMap()
    fabids.EntityData.Leafs = types.NewOrderedMap()
    fabids.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", fabids.Idx})
    fabids.EntityData.Leafs.Append("fabid_address", types.YLeaf{"FabidAddress", fabids.FabidAddress})
    fabids.EntityData.Leafs.Append("plane_num", types.YLeaf{"PlaneNum", fabids.PlaneNum})
    fabids.EntityData.Leafs.Append("plane_0_mask", types.YLeaf{"Plane0Mask", fabids.Plane0Mask})
    fabids.EntityData.Leafs.Append("plane_1_mask", types.YLeaf{"Plane1Mask", fabids.Plane1Mask})
    fabids.EntityData.Leafs.Append("plane_2_mask", types.YLeaf{"Plane2Mask", fabids.Plane2Mask})
    fabids.EntityData.Leafs.Append("plane_3_mask", types.YLeaf{"Plane3Mask", fabids.Plane3Mask})
    fabids.EntityData.Leafs.Append("plane_4_mask", types.YLeaf{"Plane4Mask", fabids.Plane4Mask})
    fabids.EntityData.Leafs.Append("plane_5_mask", types.YLeaf{"Plane5Mask", fabids.Plane5Mask})
    fabids.EntityData.Leafs.Append("min_links_per_asic", types.YLeaf{"MinLinksPerAsic", fabids.MinLinksPerAsic})
    fabids.EntityData.Leafs.Append("max_links_per_asic", types.YLeaf{"MaxLinksPerAsic", fabids.MaxLinksPerAsic})
    fabids.EntityData.Leafs.Append("total_links", types.YLeaf{"TotalLinks", fabids.TotalLinks})
    fabids.EntityData.Leafs.Append("min_up_links_per_asic", types.YLeaf{"MinUpLinksPerAsic", fabids.MinUpLinksPerAsic})
    fabids.EntityData.Leafs.Append("max_up_links_per_asic", types.YLeaf{"MaxUpLinksPerAsic", fabids.MaxUpLinksPerAsic})
    fabids.EntityData.Leafs.Append("total_up_links", types.YLeaf{"TotalUpLinks", fabids.TotalUpLinks})

    fabids.EntityData.YListKeys = []string {"Idx"}

    return &(fabids.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    FabidAddress interface{}

    // The type is string.
    FabidStatus interface{}
}

func (downFabids *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids) GetEntityData() *types.CommonEntityData {
    downFabids.EntityData.YFilter = downFabids.YFilter
    downFabids.EntityData.YangName = "down_fabids"
    downFabids.EntityData.BundleName = "cisco_ios_xr"
    downFabids.EntityData.ParentYangName = "asic_stages"
    downFabids.EntityData.SegmentPath = "down_fabids" + types.AddKeyToken(downFabids.Idx, "idx")
    downFabids.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_pla/rack/asic_stages/" + downFabids.EntityData.SegmentPath
    downFabids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downFabids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downFabids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downFabids.EntityData.Children = types.NewOrderedMap()
    downFabids.EntityData.Leafs = types.NewOrderedMap()
    downFabids.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", downFabids.Idx})
    downFabids.EntityData.Leafs.Append("fabid_address", types.YLeaf{"FabidAddress", downFabids.FabidAddress})
    downFabids.EntityData.Leafs.Append("fabid_status", types.YLeaf{"FabidStatus", downFabids.FabidStatus})

    downFabids.EntityData.YListKeys = []string {"Idx"}

    return &(downFabids.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // (0?[0-9]|1[0-5])/(0?[0-7])/(0?[0-5])|([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|10[0-1][0-9]|102[0-3]).
    AmbaId interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes.
    Planes []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes
}

func (destination *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "asic_stages"
    destination.EntityData.SegmentPath = "destination" + types.AddKeyToken(destination.AmbaId, "amba_id")
    destination.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_pla/rack/asic_stages/" + destination.EntityData.SegmentPath
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = types.NewOrderedMap()
    destination.EntityData.Children.Append("planes", types.YChild{"Planes", nil})
    for i := range destination.Planes {
        destination.EntityData.Children.Append(types.GetSegmentPath(destination.Planes[i]), types.YChild{"Planes", destination.Planes[i]})
    }
    destination.EntityData.Leafs = types.NewOrderedMap()
    destination.EntityData.Leafs.Append("amba_id", types.YLeaf{"AmbaId", destination.AmbaId})

    destination.EntityData.YListKeys = []string {"AmbaId"}

    return &(destination.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    PlaneIdx interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PlaneNum interface{}

    // The type is string.
    FabidName interface{}

    // The type is bool.
    ShowFabid interface{}

    // The type is string.
    AsicStage interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards.
    Cards []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards
}

func (planes *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes) GetEntityData() *types.CommonEntityData {
    planes.EntityData.YFilter = planes.YFilter
    planes.EntityData.YangName = "planes"
    planes.EntityData.BundleName = "cisco_ios_xr"
    planes.EntityData.ParentYangName = "destination"
    planes.EntityData.SegmentPath = "planes" + types.AddKeyToken(planes.PlaneIdx, "plane_idx")
    planes.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_pla/rack/asic_stages/destination/" + planes.EntityData.SegmentPath
    planes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    planes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    planes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    planes.EntityData.Children = types.NewOrderedMap()
    planes.EntityData.Children.Append("cards", types.YChild{"Cards", nil})
    for i := range planes.Cards {
        planes.EntityData.Children.Append(types.GetSegmentPath(planes.Cards[i]), types.YChild{"Cards", planes.Cards[i]})
    }
    planes.EntityData.Leafs = types.NewOrderedMap()
    planes.EntityData.Leafs.Append("plane_idx", types.YLeaf{"PlaneIdx", planes.PlaneIdx})
    planes.EntityData.Leafs.Append("plane_num", types.YLeaf{"PlaneNum", planes.PlaneNum})
    planes.EntityData.Leafs.Append("fabid_name", types.YLeaf{"FabidName", planes.FabidName})
    planes.EntityData.Leafs.Append("show_fabid", types.YLeaf{"ShowFabid", planes.ShowFabid})
    planes.EntityData.Leafs.Append("asic_stage", types.YLeaf{"AsicStage", planes.AsicStage})

    planes.EntityData.YListKeys = []string {"PlaneIdx"}

    return &(planes.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    CardIdx interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics.
    Asics []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics
}

func (cards *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards) GetEntityData() *types.CommonEntityData {
    cards.EntityData.YFilter = cards.YFilter
    cards.EntityData.YangName = "cards"
    cards.EntityData.BundleName = "cisco_ios_xr"
    cards.EntityData.ParentYangName = "planes"
    cards.EntityData.SegmentPath = "cards" + types.AddKeyToken(cards.CardIdx, "card_idx")
    cards.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_pla/rack/asic_stages/destination/planes/" + cards.EntityData.SegmentPath
    cards.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cards.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cards.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cards.EntityData.Children = types.NewOrderedMap()
    cards.EntityData.Children.Append("asics", types.YChild{"Asics", nil})
    for i := range cards.Asics {
        cards.EntityData.Children.Append(types.GetSegmentPath(cards.Asics[i]), types.YChild{"Asics", cards.Asics[i]})
    }
    cards.EntityData.Leafs = types.NewOrderedMap()
    cards.EntityData.Leafs.Append("card_idx", types.YLeaf{"CardIdx", cards.CardIdx})

    cards.EntityData.YListKeys = []string {"CardIdx"}

    return &(cards.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    AsicIdx interface{}

    // The type is string.
    AsicRSA interface{}

    // The type is string.
    ReachabilityMask interface{}

    // The type is string.
    LinkupMask interface{}

    // The type is string.
    AllReachMask interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalLinks interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalUpLinks interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalAllReachLinks interface{}

    // The type is string with pattern: s1|s2|s3|s123.
    AsicStageName interface{}
}

func (asics *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics) GetEntityData() *types.CommonEntityData {
    asics.EntityData.YFilter = asics.YFilter
    asics.EntityData.YangName = "asics"
    asics.EntityData.BundleName = "cisco_ios_xr"
    asics.EntityData.ParentYangName = "cards"
    asics.EntityData.SegmentPath = "asics" + types.AddKeyToken(asics.AsicIdx, "asic_idx")
    asics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_pla/rack/asic_stages/destination/planes/cards/" + asics.EntityData.SegmentPath
    asics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asics.EntityData.Children = types.NewOrderedMap()
    asics.EntityData.Leafs = types.NewOrderedMap()
    asics.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asics.AsicIdx})
    asics.EntityData.Leafs.Append("asic_RSA", types.YLeaf{"AsicRSA", asics.AsicRSA})
    asics.EntityData.Leafs.Append("reachability_mask", types.YLeaf{"ReachabilityMask", asics.ReachabilityMask})
    asics.EntityData.Leafs.Append("linkup_mask", types.YLeaf{"LinkupMask", asics.LinkupMask})
    asics.EntityData.Leafs.Append("all_reach_mask", types.YLeaf{"AllReachMask", asics.AllReachMask})
    asics.EntityData.Leafs.Append("total_links", types.YLeaf{"TotalLinks", asics.TotalLinks})
    asics.EntityData.Leafs.Append("total_up_links", types.YLeaf{"TotalUpLinks", asics.TotalUpLinks})
    asics.EntityData.Leafs.Append("total_all_reach_links", types.YLeaf{"TotalAllReachLinks", asics.TotalAllReachLinks})
    asics.EntityData.Leafs.Append("asic_stage_name", types.YLeaf{"AsicStageName", asics.AsicStageName})

    asics.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asics.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr
// FSDB Server information
type Controller_Fabric_Oper_FsdbSrvr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    FsdbServer Controller_Fabric_Oper_FsdbSrvr_FsdbServer
}

func (fsdbSrvr *Controller_Fabric_Oper_FsdbSrvr) GetEntityData() *types.CommonEntityData {
    fsdbSrvr.EntityData.YFilter = fsdbSrvr.YFilter
    fsdbSrvr.EntityData.YangName = "fsdb_srvr"
    fsdbSrvr.EntityData.BundleName = "cisco_ios_xr"
    fsdbSrvr.EntityData.ParentYangName = "oper"
    fsdbSrvr.EntityData.SegmentPath = "fsdb_srvr"
    fsdbSrvr.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/" + fsdbSrvr.EntityData.SegmentPath
    fsdbSrvr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbSrvr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbSrvr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbSrvr.EntityData.Children = types.NewOrderedMap()
    fsdbSrvr.EntityData.Children.Append("fsdb_server", types.YChild{"FsdbServer", &fsdbSrvr.FsdbServer})
    fsdbSrvr.EntityData.Leafs = types.NewOrderedMap()

    fsdbSrvr.EntityData.YListKeys = []string {}

    return &(fsdbSrvr.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace.
    Trace []*Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace
}

func (fsdbServer *Controller_Fabric_Oper_FsdbSrvr_FsdbServer) GetEntityData() *types.CommonEntityData {
    fsdbServer.EntityData.YFilter = fsdbServer.YFilter
    fsdbServer.EntityData.YangName = "fsdb_server"
    fsdbServer.EntityData.BundleName = "cisco_ios_xr"
    fsdbServer.EntityData.ParentYangName = "fsdb_srvr"
    fsdbServer.EntityData.SegmentPath = "fsdb_server"
    fsdbServer.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_srvr/" + fsdbServer.EntityData.SegmentPath
    fsdbServer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbServer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbServer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbServer.EntityData.Children = types.NewOrderedMap()
    fsdbServer.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range fsdbServer.Trace {
        fsdbServer.EntityData.Children.Append(types.GetSegmentPath(fsdbServer.Trace[i]), types.YChild{"Trace", fsdbServer.Trace[i]})
    }
    fsdbServer.EntityData.Leafs = types.NewOrderedMap()

    fsdbServer.EntityData.YListKeys = []string {}

    return &(fsdbServer.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace
// show traceable processes
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location.
    Location []*Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location
}

func (trace *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "fsdb_server"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_srvr/fsdb_server/" + trace.EntityData.SegmentPath
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions.
    AllOptions []*Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions
}

func (location *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_srvr/fsdb_server/trace/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_srvr/fsdb_server/trace/location/" + allOptions.EntityData.SegmentPath
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        types.SetYListKey(allOptions.TraceBlocks[i], i)
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks" + types.AddNoKeyToken(traceBlocks)
    traceBlocks.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric/oper/fsdb_srvr/fsdb_server/trace/location/all-options/" + traceBlocks.EntityData.SegmentPath
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_SfeOper
type Controller_SfeOper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric SFE driver commands.
    Sfe Controller_SfeOper_Sfe

    
    SfeTrace Controller_SfeOper_SfeTrace
}

func (sfeOper *Controller_SfeOper) GetEntityData() *types.CommonEntityData {
    sfeOper.EntityData.YFilter = sfeOper.YFilter
    sfeOper.EntityData.YangName = "sfe_oper"
    sfeOper.EntityData.BundleName = "cisco_ios_xr"
    sfeOper.EntityData.ParentYangName = "controller"
    sfeOper.EntityData.SegmentPath = "sfe_oper"
    sfeOper.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/" + sfeOper.EntityData.SegmentPath
    sfeOper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeOper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeOper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeOper.EntityData.Children = types.NewOrderedMap()
    sfeOper.EntityData.Children.Append("sfe", types.YChild{"Sfe", &sfeOper.Sfe})
    sfeOper.EntityData.Children.Append("sfe_trace", types.YChild{"SfeTrace", &sfeOper.SfeTrace})
    sfeOper.EntityData.Leafs = types.NewOrderedMap()

    sfeOper.EntityData.YListKeys = []string {}

    return &(sfeOper.EntityData)
}

// Controller_SfeOper_Sfe
// Fabric SFE driver commands
type Controller_SfeOper_Sfe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Driver Controller_SfeOper_Sfe_Driver

    
    Statistics Controller_SfeOper_Sfe_Statistics

    
    LinkInfo Controller_SfeOper_Sfe_LinkInfo

    
    Diagshell Controller_SfeOper_Sfe_Diagshell

    
    Register Controller_SfeOper_Sfe_Register

    
    DumpFile Controller_SfeOper_Sfe_DumpFile

    
    Parse Controller_SfeOper_Sfe_Parse
}

func (sfe *Controller_SfeOper_Sfe) GetEntityData() *types.CommonEntityData {
    sfe.EntityData.YFilter = sfe.YFilter
    sfe.EntityData.YangName = "sfe"
    sfe.EntityData.BundleName = "cisco_ios_xr"
    sfe.EntityData.ParentYangName = "sfe_oper"
    sfe.EntityData.SegmentPath = "sfe"
    sfe.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/" + sfe.EntityData.SegmentPath
    sfe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfe.EntityData.Children = types.NewOrderedMap()
    sfe.EntityData.Children.Append("driver", types.YChild{"Driver", &sfe.Driver})
    sfe.EntityData.Children.Append("statistics", types.YChild{"Statistics", &sfe.Statistics})
    sfe.EntityData.Children.Append("link-info", types.YChild{"LinkInfo", &sfe.LinkInfo})
    sfe.EntityData.Children.Append("diagshell", types.YChild{"Diagshell", &sfe.Diagshell})
    sfe.EntityData.Children.Append("register", types.YChild{"Register", &sfe.Register})
    sfe.EntityData.Children.Append("dump-file", types.YChild{"DumpFile", &sfe.DumpFile})
    sfe.EntityData.Children.Append("parse", types.YChild{"Parse", &sfe.Parse})
    sfe.EntityData.Leafs = types.NewOrderedMap()

    sfe.EntityData.YListKeys = []string {}

    return &(sfe.EntityData)
}

// Controller_SfeOper_Sfe_Driver
type Controller_SfeOper_Sfe_Driver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Driver_Location.
    Location []*Controller_SfeOper_Sfe_Driver_Location
}

func (driver *Controller_SfeOper_Sfe_Driver) GetEntityData() *types.CommonEntityData {
    driver.EntityData.YFilter = driver.YFilter
    driver.EntityData.YangName = "driver"
    driver.EntityData.BundleName = "cisco_ios_xr"
    driver.EntityData.ParentYangName = "sfe"
    driver.EntityData.SegmentPath = "driver"
    driver.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/" + driver.EntityData.SegmentPath
    driver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    driver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    driver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    driver.EntityData.Children = types.NewOrderedMap()
    driver.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range driver.Location {
        driver.EntityData.Children.Append(types.GetSegmentPath(driver.Location[i]), types.YChild{"Location", driver.Location[i]})
    }
    driver.EntityData.Leafs = types.NewOrderedMap()

    driver.EntityData.YListKeys = []string {}

    return &(driver.EntityData)
}

// Controller_SfeOper_Sfe_Driver_Location
type Controller_SfeOper_Sfe_Driver_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0)).
    LocStr interface{}

    // The type is string. The default value is location (R/S)..
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Driver_Location_DrvrInfo.
    DrvrInfo []*Controller_SfeOper_Sfe_Driver_Location_DrvrInfo
}

func (location *Controller_SfeOper_Sfe_Driver_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "driver"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/driver/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("drvr_info", types.YChild{"DrvrInfo", nil})
    for i := range location.DrvrInfo {
        location.EntityData.Children.Append(types.GetSegmentPath(location.DrvrInfo[i]), types.YChild{"DrvrInfo", location.DrvrInfo[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Driver_Location_DrvrInfo
type Controller_SfeOper_Sfe_Driver_Location_DrvrInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    DrvVersion interface{}

    // The type is interface{} with range: 0..4294967295.
    CoeffMajorRev interface{}

    // The type is interface{} with range: 0..4294967295.
    CoeffMinorRev interface{}

    // The type is string.
    FuncRole interface{}

    // The type is string.
    IssuRole interface{}

    // The type is string.
    RackName interface{}

    // The type is string.
    RackType interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    IpAddress interface{}

    // The type is interface{} with range: 0..4294967295.
    CardAvailMask interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicAvailMask interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    ExpAsicAvailMask interface{}

    // The type is interface{} with range: 0..4294967295.
    UcmcRatio interface{}

    // The type is bool.
    PmConnActive interface{}

    // The type is bool.
    PlatformLocalConnActive interface{}

    // The type is bool.
    FsdbConnActive interface{}

    // The type is bool.
    FgidConnActive interface{}

    // The type is bool.
    CmConnActive interface{}

    // The type is bool.
    CccConnActive interface{}

    // The type is bool.
    IssuMgrConnActive interface{}

    // The type is bool.
    PeerSfeConnActive interface{}

    // The type is bool.
    CxpConnActive interface{}

    // The type is bool.
    PmRegActive interface{}

    // The type is bool.
    PlatformLocalRegActive interface{}

    // The type is bool.
    FsdbRegActive interface{}

    // The type is bool.
    FgidRegActive interface{}

    // The type is bool.
    CmRegActive interface{}

    // The type is bool.
    IssuMgrRegActive interface{}

    // The type is bool.
    PeerSfeRegActive interface{}

    // The type is bool.
    CxpRegActive interface{}

    // The type is interface{} with range: 0..255.
    NumPmConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumPlatformLocalConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumFsdbConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumFgidConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumFstatsConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumCmConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumCccConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumIssuMgrConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumPeerSfeConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumCxpConnReqs interface{}

    // The type is bool.
    IsGasppRegistered interface{}

    // The type is bool.
    IsCihRegistered interface{}

    // The type is string.
    StartupTime interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Driver_Location_DrvrInfo_AsicList.
    AsicList []*Controller_SfeOper_Sfe_Driver_Location_DrvrInfo_AsicList
}

func (drvrInfo *Controller_SfeOper_Sfe_Driver_Location_DrvrInfo) GetEntityData() *types.CommonEntityData {
    drvrInfo.EntityData.YFilter = drvrInfo.YFilter
    drvrInfo.EntityData.YangName = "drvr_info"
    drvrInfo.EntityData.BundleName = "cisco_ios_xr"
    drvrInfo.EntityData.ParentYangName = "location"
    drvrInfo.EntityData.SegmentPath = "drvr_info" + types.AddKeyToken(drvrInfo.Idx, "idx")
    drvrInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/driver/location/" + drvrInfo.EntityData.SegmentPath
    drvrInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    drvrInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    drvrInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    drvrInfo.EntityData.Children = types.NewOrderedMap()
    drvrInfo.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range drvrInfo.AsicList {
        drvrInfo.EntityData.Children.Append(types.GetSegmentPath(drvrInfo.AsicList[i]), types.YChild{"AsicList", drvrInfo.AsicList[i]})
    }
    drvrInfo.EntityData.Leafs = types.NewOrderedMap()
    drvrInfo.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", drvrInfo.Idx})
    drvrInfo.EntityData.Leafs.Append("drv_version", types.YLeaf{"DrvVersion", drvrInfo.DrvVersion})
    drvrInfo.EntityData.Leafs.Append("coeff_major_rev", types.YLeaf{"CoeffMajorRev", drvrInfo.CoeffMajorRev})
    drvrInfo.EntityData.Leafs.Append("coeff_minor_rev", types.YLeaf{"CoeffMinorRev", drvrInfo.CoeffMinorRev})
    drvrInfo.EntityData.Leafs.Append("func_role", types.YLeaf{"FuncRole", drvrInfo.FuncRole})
    drvrInfo.EntityData.Leafs.Append("issu_role", types.YLeaf{"IssuRole", drvrInfo.IssuRole})
    drvrInfo.EntityData.Leafs.Append("rack_name", types.YLeaf{"RackName", drvrInfo.RackName})
    drvrInfo.EntityData.Leafs.Append("rack_type", types.YLeaf{"RackType", drvrInfo.RackType})
    drvrInfo.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", drvrInfo.RackNum})
    drvrInfo.EntityData.Leafs.Append("ip_address", types.YLeaf{"IpAddress", drvrInfo.IpAddress})
    drvrInfo.EntityData.Leafs.Append("card_avail_mask", types.YLeaf{"CardAvailMask", drvrInfo.CardAvailMask})
    drvrInfo.EntityData.Leafs.Append("asic_avail_mask", types.YLeaf{"AsicAvailMask", drvrInfo.AsicAvailMask})
    drvrInfo.EntityData.Leafs.Append("exp_asic_avail_mask", types.YLeaf{"ExpAsicAvailMask", drvrInfo.ExpAsicAvailMask})
    drvrInfo.EntityData.Leafs.Append("ucmc_ratio", types.YLeaf{"UcmcRatio", drvrInfo.UcmcRatio})
    drvrInfo.EntityData.Leafs.Append("pm_conn_active", types.YLeaf{"PmConnActive", drvrInfo.PmConnActive})
    drvrInfo.EntityData.Leafs.Append("platform_local_conn_active", types.YLeaf{"PlatformLocalConnActive", drvrInfo.PlatformLocalConnActive})
    drvrInfo.EntityData.Leafs.Append("fsdb_conn_active", types.YLeaf{"FsdbConnActive", drvrInfo.FsdbConnActive})
    drvrInfo.EntityData.Leafs.Append("fgid_conn_active", types.YLeaf{"FgidConnActive", drvrInfo.FgidConnActive})
    drvrInfo.EntityData.Leafs.Append("cm_conn_active", types.YLeaf{"CmConnActive", drvrInfo.CmConnActive})
    drvrInfo.EntityData.Leafs.Append("ccc_conn_active", types.YLeaf{"CccConnActive", drvrInfo.CccConnActive})
    drvrInfo.EntityData.Leafs.Append("issu_mgr_conn_active", types.YLeaf{"IssuMgrConnActive", drvrInfo.IssuMgrConnActive})
    drvrInfo.EntityData.Leafs.Append("peer_sfe_conn_active", types.YLeaf{"PeerSfeConnActive", drvrInfo.PeerSfeConnActive})
    drvrInfo.EntityData.Leafs.Append("cxp_conn_active", types.YLeaf{"CxpConnActive", drvrInfo.CxpConnActive})
    drvrInfo.EntityData.Leafs.Append("pm_reg_active", types.YLeaf{"PmRegActive", drvrInfo.PmRegActive})
    drvrInfo.EntityData.Leafs.Append("platform_local_reg_active", types.YLeaf{"PlatformLocalRegActive", drvrInfo.PlatformLocalRegActive})
    drvrInfo.EntityData.Leafs.Append("fsdb_reg_active", types.YLeaf{"FsdbRegActive", drvrInfo.FsdbRegActive})
    drvrInfo.EntityData.Leafs.Append("fgid_reg_active", types.YLeaf{"FgidRegActive", drvrInfo.FgidRegActive})
    drvrInfo.EntityData.Leafs.Append("cm_reg_active", types.YLeaf{"CmRegActive", drvrInfo.CmRegActive})
    drvrInfo.EntityData.Leafs.Append("issu_mgr_reg_active", types.YLeaf{"IssuMgrRegActive", drvrInfo.IssuMgrRegActive})
    drvrInfo.EntityData.Leafs.Append("peer_sfe_reg_active", types.YLeaf{"PeerSfeRegActive", drvrInfo.PeerSfeRegActive})
    drvrInfo.EntityData.Leafs.Append("cxp_reg_active", types.YLeaf{"CxpRegActive", drvrInfo.CxpRegActive})
    drvrInfo.EntityData.Leafs.Append("num_pm_conn_reqs", types.YLeaf{"NumPmConnReqs", drvrInfo.NumPmConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_platform_local_conn_reqs", types.YLeaf{"NumPlatformLocalConnReqs", drvrInfo.NumPlatformLocalConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_fsdb_conn_reqs", types.YLeaf{"NumFsdbConnReqs", drvrInfo.NumFsdbConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_fgid_conn_reqs", types.YLeaf{"NumFgidConnReqs", drvrInfo.NumFgidConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_fstats_conn_reqs", types.YLeaf{"NumFstatsConnReqs", drvrInfo.NumFstatsConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_cm_conn_reqs", types.YLeaf{"NumCmConnReqs", drvrInfo.NumCmConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_ccc_conn_reqs", types.YLeaf{"NumCccConnReqs", drvrInfo.NumCccConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_issu_mgr_conn_reqs", types.YLeaf{"NumIssuMgrConnReqs", drvrInfo.NumIssuMgrConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_peer_sfe_conn_reqs", types.YLeaf{"NumPeerSfeConnReqs", drvrInfo.NumPeerSfeConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_cxp_conn_reqs", types.YLeaf{"NumCxpConnReqs", drvrInfo.NumCxpConnReqs})
    drvrInfo.EntityData.Leafs.Append("is_gaspp_registered", types.YLeaf{"IsGasppRegistered", drvrInfo.IsGasppRegistered})
    drvrInfo.EntityData.Leafs.Append("is_cih_registered", types.YLeaf{"IsCihRegistered", drvrInfo.IsCihRegistered})
    drvrInfo.EntityData.Leafs.Append("startup_time", types.YLeaf{"StartupTime", drvrInfo.StartupTime})

    drvrInfo.EntityData.YListKeys = []string {"Idx"}

    return &(drvrInfo.EntityData)
}

// Controller_SfeOper_Sfe_Driver_Location_DrvrInfo_AsicList
type Controller_SfeOper_Sfe_Driver_Location_DrvrInfo_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    AsicIdx interface{}

    // The type is string.
    AsicInstance interface{}

    // The type is string.
    CardPresent interface{}

    // The type is string.
    CardPowered interface{}

    // The type is interface{} with range: 0..4294967295.
    HotplugEvent interface{}

    // The type is string.
    AsicType interface{}

    // The type is string.
    AsicCardname interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    FabPlane interface{}

    // The type is string.
    FabGroup interface{}

    // The type is string.
    FgidDownload interface{}

    // The type is string.
    AsicState interface{}

    // The type is string.
    AsicDisconnectSignal interface{}

    // The type is string.
    LastInitCause interface{}

    // The type is interface{} with range: 0..4294967295.
    NumPonResets interface{}

    // The type is interface{} with range: 0..4294967295.
    NumHardResets interface{}
}

func (asicList *Controller_SfeOper_Sfe_Driver_Location_DrvrInfo_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "drvr_info"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/driver/location/drvr_info/" + asicList.EntityData.SegmentPath
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_instance", types.YLeaf{"AsicInstance", asicList.AsicInstance})
    asicList.EntityData.Leafs.Append("card_present", types.YLeaf{"CardPresent", asicList.CardPresent})
    asicList.EntityData.Leafs.Append("card_powered", types.YLeaf{"CardPowered", asicList.CardPowered})
    asicList.EntityData.Leafs.Append("hotplug_event", types.YLeaf{"HotplugEvent", asicList.HotplugEvent})
    asicList.EntityData.Leafs.Append("asic_type", types.YLeaf{"AsicType", asicList.AsicType})
    asicList.EntityData.Leafs.Append("asic_cardname", types.YLeaf{"AsicCardname", asicList.AsicCardname})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", asicList.FabPlane})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})
    asicList.EntityData.Leafs.Append("fgid_download", types.YLeaf{"FgidDownload", asicList.FgidDownload})
    asicList.EntityData.Leafs.Append("asic_state", types.YLeaf{"AsicState", asicList.AsicState})
    asicList.EntityData.Leafs.Append("asic_disconnect_signal", types.YLeaf{"AsicDisconnectSignal", asicList.AsicDisconnectSignal})
    asicList.EntityData.Leafs.Append("last_init_cause", types.YLeaf{"LastInitCause", asicList.LastInitCause})
    asicList.EntityData.Leafs.Append("num_pon_resets", types.YLeaf{"NumPonResets", asicList.NumPonResets})
    asicList.EntityData.Leafs.Append("num_hard_resets", types.YLeaf{"NumHardResets", asicList.NumHardResets})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_SfeOper_Sfe_Statistics
type Controller_SfeOper_Sfe_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Statistics_Location.
    Location []*Controller_SfeOper_Sfe_Statistics_Location
}

func (statistics *Controller_SfeOper_Sfe_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "sfe"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range statistics.Location {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Location[i]), types.YChild{"Location", statistics.Location[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location
type Controller_SfeOper_Sfe_Statistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0)).
    LocStr interface{}

    // The type is string. The default value is location (R/S)..
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Statistics_Location_AsicTypes.
    AsicTypes []*Controller_SfeOper_Sfe_Statistics_Location_AsicTypes
}

func (location *Controller_SfeOper_Sfe_Statistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/statistics/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("asic_types", types.YChild{"AsicTypes", nil})
    for i := range location.AsicTypes {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AsicTypes[i]), types.YChild{"AsicTypes", location.AsicTypes[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_AsicTypes
type Controller_SfeOper_Sfe_Statistics_Location_AsicTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Asicname interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block.
    Block []*Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block
}

func (asicTypes *Controller_SfeOper_Sfe_Statistics_Location_AsicTypes) GetEntityData() *types.CommonEntityData {
    asicTypes.EntityData.YFilter = asicTypes.YFilter
    asicTypes.EntityData.YangName = "asic_types"
    asicTypes.EntityData.BundleName = "cisco_ios_xr"
    asicTypes.EntityData.ParentYangName = "location"
    asicTypes.EntityData.SegmentPath = "asic_types" + types.AddKeyToken(asicTypes.Asicname, "asicname")
    asicTypes.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/statistics/location/" + asicTypes.EntityData.SegmentPath
    asicTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicTypes.EntityData.Children = types.NewOrderedMap()
    asicTypes.EntityData.Children.Append("block", types.YChild{"Block", nil})
    for i := range asicTypes.Block {
        asicTypes.EntityData.Children.Append(types.GetSegmentPath(asicTypes.Block[i]), types.YChild{"Block", asicTypes.Block[i]})
    }
    asicTypes.EntityData.Leafs = types.NewOrderedMap()
    asicTypes.EntityData.Leafs.Append("asicname", types.YLeaf{"Asicname", asicTypes.Asicname})

    asicTypes.EntityData.YListKeys = []string {"Asicname"}

    return &(asicTypes.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block
type Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Blockname interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance.
    Instance []*Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance
}

func (block *Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block) GetEntityData() *types.CommonEntityData {
    block.EntityData.YFilter = block.YFilter
    block.EntityData.YangName = "block"
    block.EntityData.BundleName = "cisco_ios_xr"
    block.EntityData.ParentYangName = "asic_types"
    block.EntityData.SegmentPath = "block" + types.AddKeyToken(block.Blockname, "blockname")
    block.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/statistics/location/asic_types/" + block.EntityData.SegmentPath
    block.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    block.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    block.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    block.EntityData.Children = types.NewOrderedMap()
    block.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range block.Instance {
        block.EntityData.Children.Append(types.GetSegmentPath(block.Instance[i]), types.YChild{"Instance", block.Instance[i]})
    }
    block.EntityData.Leafs = types.NewOrderedMap()
    block.EntityData.Leafs.Append("blockname", types.YLeaf{"Blockname", block.Blockname})

    block.EntityData.YListKeys = []string {"Blockname"}

    return &(block.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance
type Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    StatsOutput interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "block"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/statistics/location/asic_types/block/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("stats_output", types.YLeaf{"StatsOutput", instance.StatsOutput})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo
type Controller_SfeOper_Sfe_LinkInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location.
    Location []*Controller_SfeOper_Sfe_LinkInfo_Location
}

func (linkInfo *Controller_SfeOper_Sfe_LinkInfo) GetEntityData() *types.CommonEntityData {
    linkInfo.EntityData.YFilter = linkInfo.YFilter
    linkInfo.EntityData.YangName = "link-info"
    linkInfo.EntityData.BundleName = "cisco_ios_xr"
    linkInfo.EntityData.ParentYangName = "sfe"
    linkInfo.EntityData.SegmentPath = "link-info"
    linkInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/" + linkInfo.EntityData.SegmentPath
    linkInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkInfo.EntityData.Children = types.NewOrderedMap()
    linkInfo.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range linkInfo.Location {
        linkInfo.EntityData.Children.Append(types.GetSegmentPath(linkInfo.Location[i]), types.YChild{"Location", linkInfo.Location[i]})
    }
    linkInfo.EntityData.Leafs = types.NewOrderedMap()

    linkInfo.EntityData.YListKeys = []string {}

    return &(linkInfo.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location
type Controller_SfeOper_Sfe_LinkInfo_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0)).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location_Rx.
    Rx []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location_Tx.
    Tx []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx
}

func (location *Controller_SfeOper_Sfe_LinkInfo_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "link-info"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("rx", types.YChild{"Rx", nil})
    for i := range location.Rx {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Rx[i]), types.YChild{"Rx", location.Rx[i]})
    }
    location.EntityData.Children.Append("tx", types.YChild{"Tx", nil})
    for i := range location.Tx {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Tx[i]), types.YChild{"Tx", location.Tx[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..143.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..143.
    End interface{}

    
    Detail Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail

    
    Topo Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo

    
    Flap Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap

    
    Stats Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats
}

func (rx *Controller_SfeOper_Sfe_LinkInfo_Location_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "location"
    rx.EntityData.SegmentPath = "rx" + types.AddKeyToken(rx.Start, "start") + types.AddKeyToken(rx.End, "end")
    rx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/" + rx.EntityData.SegmentPath
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = types.NewOrderedMap()
    rx.EntityData.Children.Append("detail", types.YChild{"Detail", &rx.Detail})
    rx.EntityData.Children.Append("topo", types.YChild{"Topo", &rx.Topo})
    rx.EntityData.Children.Append("flap", types.YChild{"Flap", &rx.Flap})
    rx.EntityData.Children.Append("stats", types.YChild{"Stats", &rx.Stats})
    rx.EntityData.Leafs = types.NewOrderedMap()
    rx.EntityData.Leafs.Append("start", types.YLeaf{"Start", rx.Start})
    rx.EntityData.Leafs.Append("end", types.YLeaf{"End", rx.End})

    rx.EntityData.YListKeys = []string {"Start", "End"}

    return &(rx.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Topo Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo

    
    Flap Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap
}

func (detail *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("topo", types.YChild{"Topo", &detail.Topo})
    detail.EntityData.Children.Append("flap", types.YChild{"Flap", &detail.Flap})
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance
}

func (topo *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo) GetEntityData() *types.CommonEntityData {
    topo.EntityData.YFilter = topo.YFilter
    topo.EntityData.YangName = "topo"
    topo.EntityData.BundleName = "cisco_ios_xr"
    topo.EntityData.ParentYangName = "detail"
    topo.EntityData.SegmentPath = "topo"
    topo.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/detail/" + topo.EntityData.SegmentPath
    topo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topo.EntityData.Children = types.NewOrderedMap()
    topo.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range topo.Instance {
        topo.EntityData.Children.Append(types.GetSegmentPath(topo.Instance[i]), types.YChild{"Instance", topo.Instance[i]})
    }
    topo.EntityData.Leafs = types.NewOrderedMap()

    topo.EntityData.YListKeys = []string {}

    return &(topo.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "topo"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/detail/topo/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/detail/topo/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/detail/topo/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance
}

func (flap *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap) GetEntityData() *types.CommonEntityData {
    flap.EntityData.YFilter = flap.YFilter
    flap.EntityData.YangName = "flap"
    flap.EntityData.BundleName = "cisco_ios_xr"
    flap.EntityData.ParentYangName = "detail"
    flap.EntityData.SegmentPath = "flap"
    flap.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/detail/" + flap.EntityData.SegmentPath
    flap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flap.EntityData.Children = types.NewOrderedMap()
    flap.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range flap.Instance {
        flap.EntityData.Children.Append(types.GetSegmentPath(flap.Instance[i]), types.YChild{"Instance", flap.Instance[i]})
    }
    flap.EntityData.Leafs = types.NewOrderedMap()

    flap.EntityData.YListKeys = []string {}

    return &(flap.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "flap"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/detail/flap/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/detail/flap/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/detail/flap/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance
}

func (topo *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo) GetEntityData() *types.CommonEntityData {
    topo.EntityData.YFilter = topo.YFilter
    topo.EntityData.YangName = "topo"
    topo.EntityData.BundleName = "cisco_ios_xr"
    topo.EntityData.ParentYangName = "rx"
    topo.EntityData.SegmentPath = "topo"
    topo.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/" + topo.EntityData.SegmentPath
    topo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topo.EntityData.Children = types.NewOrderedMap()
    topo.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range topo.Instance {
        topo.EntityData.Children.Append(types.GetSegmentPath(topo.Instance[i]), types.YChild{"Instance", topo.Instance[i]})
    }
    topo.EntityData.Leafs = types.NewOrderedMap()

    topo.EntityData.YListKeys = []string {}

    return &(topo.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "topo"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/topo/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/topo/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/topo/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance
}

func (flap *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap) GetEntityData() *types.CommonEntityData {
    flap.EntityData.YFilter = flap.YFilter
    flap.EntityData.YangName = "flap"
    flap.EntityData.BundleName = "cisco_ios_xr"
    flap.EntityData.ParentYangName = "rx"
    flap.EntityData.SegmentPath = "flap"
    flap.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/" + flap.EntityData.SegmentPath
    flap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flap.EntityData.Children = types.NewOrderedMap()
    flap.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range flap.Instance {
        flap.EntityData.Children.Append(types.GetSegmentPath(flap.Instance[i]), types.YChild{"Instance", flap.Instance[i]})
    }
    flap.EntityData.Leafs = types.NewOrderedMap()

    flap.EntityData.YListKeys = []string {}

    return &(flap.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "flap"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/flap/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/flap/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/flap/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Data Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data

    
    Ctrl Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl

    
    All Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All
}

func (stats *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "rx"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/" + stats.EntityData.SegmentPath
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("data", types.YChild{"Data", &stats.Data})
    stats.EntityData.Children.Append("ctrl", types.YChild{"Ctrl", &stats.Ctrl})
    stats.EntityData.Children.Append("all", types.YChild{"All", &stats.All})
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance
}

func (data *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "stats"
    data.EntityData.SegmentPath = "data"
    data.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/" + data.EntityData.SegmentPath
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range data.Instance {
        data.EntityData.Children.Append(types.GetSegmentPath(data.Instance[i]), types.YChild{"Instance", data.Instance[i]})
    }
    data.EntityData.Leafs = types.NewOrderedMap()

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "data"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/data/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/data/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/data/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance
}

func (ctrl *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl) GetEntityData() *types.CommonEntityData {
    ctrl.EntityData.YFilter = ctrl.YFilter
    ctrl.EntityData.YangName = "ctrl"
    ctrl.EntityData.BundleName = "cisco_ios_xr"
    ctrl.EntityData.ParentYangName = "stats"
    ctrl.EntityData.SegmentPath = "ctrl"
    ctrl.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/" + ctrl.EntityData.SegmentPath
    ctrl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ctrl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ctrl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ctrl.EntityData.Children = types.NewOrderedMap()
    ctrl.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range ctrl.Instance {
        ctrl.EntityData.Children.Append(types.GetSegmentPath(ctrl.Instance[i]), types.YChild{"Instance", ctrl.Instance[i]})
    }
    ctrl.EntityData.Leafs = types.NewOrderedMap()

    ctrl.EntityData.YListKeys = []string {}

    return &(ctrl.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "ctrl"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/ctrl/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/ctrl/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/ctrl/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance
}

func (all *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "stats"
    all.EntityData.SegmentPath = "all"
    all.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/" + all.EntityData.SegmentPath
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range all.Instance {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Instance[i]), types.YChild{"Instance", all.Instance[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "all"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/all/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/all/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/rx/stats/all/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..143.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..143.
    End interface{}

    
    Detail Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance

    
    Stats Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats
}

func (tx *Controller_SfeOper_Sfe_LinkInfo_Location_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "location"
    tx.EntityData.SegmentPath = "tx" + types.AddKeyToken(tx.Start, "start") + types.AddKeyToken(tx.End, "end")
    tx.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/" + tx.EntityData.SegmentPath
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = types.NewOrderedMap()
    tx.EntityData.Children.Append("detail", types.YChild{"Detail", &tx.Detail})
    tx.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range tx.Instance {
        tx.EntityData.Children.Append(types.GetSegmentPath(tx.Instance[i]), types.YChild{"Instance", tx.Instance[i]})
    }
    tx.EntityData.Children.Append("stats", types.YChild{"Stats", &tx.Stats})
    tx.EntityData.Leafs = types.NewOrderedMap()
    tx.EntityData.Leafs.Append("start", types.YLeaf{"Start", tx.Start})
    tx.EntityData.Leafs.Append("end", types.YLeaf{"End", tx.End})

    tx.EntityData.YListKeys = []string {"Start", "End"}

    return &(tx.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance
}

func (detail *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range detail.Instance {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Instance[i]), types.YChild{"Instance", detail.Instance[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "detail"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/detail/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/detail/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/detail/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "tx"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Data Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data

    
    Ctrl Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl

    
    All Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All
}

func (stats *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "tx"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/" + stats.EntityData.SegmentPath
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("data", types.YChild{"Data", &stats.Data})
    stats.EntityData.Children.Append("ctrl", types.YChild{"Ctrl", &stats.Ctrl})
    stats.EntityData.Children.Append("all", types.YChild{"All", &stats.All})
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance
}

func (data *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "stats"
    data.EntityData.SegmentPath = "data"
    data.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/" + data.EntityData.SegmentPath
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range data.Instance {
        data.EntityData.Children.Append(types.GetSegmentPath(data.Instance[i]), types.YChild{"Instance", data.Instance[i]})
    }
    data.EntityData.Leafs = types.NewOrderedMap()

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "data"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/data/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/data/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/data/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance
}

func (ctrl *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl) GetEntityData() *types.CommonEntityData {
    ctrl.EntityData.YFilter = ctrl.YFilter
    ctrl.EntityData.YangName = "ctrl"
    ctrl.EntityData.BundleName = "cisco_ios_xr"
    ctrl.EntityData.ParentYangName = "stats"
    ctrl.EntityData.SegmentPath = "ctrl"
    ctrl.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/" + ctrl.EntityData.SegmentPath
    ctrl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ctrl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ctrl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ctrl.EntityData.Children = types.NewOrderedMap()
    ctrl.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range ctrl.Instance {
        ctrl.EntityData.Children.Append(types.GetSegmentPath(ctrl.Instance[i]), types.YChild{"Instance", ctrl.Instance[i]})
    }
    ctrl.EntityData.Leafs = types.NewOrderedMap()

    ctrl.EntityData.YListKeys = []string {}

    return &(ctrl.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "ctrl"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/ctrl/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/ctrl/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/ctrl/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance
}

func (all *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "stats"
    all.EntityData.SegmentPath = "all"
    all.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/" + all.EntityData.SegmentPath
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range all.Instance {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Instance[i]), types.YChild{"Instance", all.Instance[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "all"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/all/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is string.
    FsmState interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/all/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/link-info/location/tx/stats/all/instance/link_idx_list/" + history.EntityData.SegmentPath
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell
type Controller_SfeOper_Sfe_Diagshell struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Diagshell_Location.
    Location []*Controller_SfeOper_Sfe_Diagshell_Location
}

func (diagshell *Controller_SfeOper_Sfe_Diagshell) GetEntityData() *types.CommonEntityData {
    diagshell.EntityData.YFilter = diagshell.YFilter
    diagshell.EntityData.YangName = "diagshell"
    diagshell.EntityData.BundleName = "cisco_ios_xr"
    diagshell.EntityData.ParentYangName = "sfe"
    diagshell.EntityData.SegmentPath = "diagshell"
    diagshell.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/" + diagshell.EntityData.SegmentPath
    diagshell.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    diagshell.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    diagshell.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    diagshell.EntityData.Children = types.NewOrderedMap()
    diagshell.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range diagshell.Location {
        diagshell.EntityData.Children.Append(types.GetSegmentPath(diagshell.Location[i]), types.YChild{"Location", diagshell.Location[i]})
    }
    diagshell.EntityData.Leafs = types.NewOrderedMap()

    diagshell.EntityData.YListKeys = []string {}

    return &(diagshell.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location
type Controller_SfeOper_Sfe_Diagshell_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0)).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Diagshell_Location_Instance.
    Instance []*Controller_SfeOper_Sfe_Diagshell_Location_Instance
}

func (location *Controller_SfeOper_Sfe_Diagshell_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "diagshell"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/diagshell/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range location.Instance {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Instance[i]), types.YChild{"Instance", location.Instance[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location_Instance
type Controller_SfeOper_Sfe_Diagshell_Location_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..5.
    InstanceNum interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd.
    DiagCmd []*Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd
}

func (instance *Controller_SfeOper_Sfe_Diagshell_Location_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "location"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceNum, "instance_num")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/diagshell/location/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("diag_cmd", types.YChild{"DiagCmd", nil})
    for i := range instance.DiagCmd {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.DiagCmd[i]), types.YChild{"DiagCmd", instance.DiagCmd[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance_num", types.YLeaf{"InstanceNum", instance.InstanceNum})

    instance.EntityData.YListKeys = []string {"InstanceNum"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd
type Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    CmdStr interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes.
    Bytes []*Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes
}

func (diagCmd *Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd) GetEntityData() *types.CommonEntityData {
    diagCmd.EntityData.YFilter = diagCmd.YFilter
    diagCmd.EntityData.YangName = "diag_cmd"
    diagCmd.EntityData.BundleName = "cisco_ios_xr"
    diagCmd.EntityData.ParentYangName = "instance"
    diagCmd.EntityData.SegmentPath = "diag_cmd" + types.AddKeyToken(diagCmd.CmdStr, "cmd_str")
    diagCmd.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/diagshell/location/instance/" + diagCmd.EntityData.SegmentPath
    diagCmd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    diagCmd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    diagCmd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    diagCmd.EntityData.Children = types.NewOrderedMap()
    diagCmd.EntityData.Children.Append("bytes", types.YChild{"Bytes", nil})
    for i := range diagCmd.Bytes {
        diagCmd.EntityData.Children.Append(types.GetSegmentPath(diagCmd.Bytes[i]), types.YChild{"Bytes", diagCmd.Bytes[i]})
    }
    diagCmd.EntityData.Leafs = types.NewOrderedMap()
    diagCmd.EntityData.Leafs.Append("cmd_str", types.YLeaf{"CmdStr", diagCmd.CmdStr})

    diagCmd.EntityData.YListKeys = []string {"CmdStr"}

    return &(diagCmd.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes
type Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    ByteIdx interface{}

    // The type is string.
    Data interface{}
}

func (bytes *Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes) GetEntityData() *types.CommonEntityData {
    bytes.EntityData.YFilter = bytes.YFilter
    bytes.EntityData.YangName = "bytes"
    bytes.EntityData.BundleName = "cisco_ios_xr"
    bytes.EntityData.ParentYangName = "diag_cmd"
    bytes.EntityData.SegmentPath = "bytes" + types.AddKeyToken(bytes.ByteIdx, "byte_idx")
    bytes.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/diagshell/location/instance/diag_cmd/" + bytes.EntityData.SegmentPath
    bytes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bytes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bytes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bytes.EntityData.Children = types.NewOrderedMap()
    bytes.EntityData.Leafs = types.NewOrderedMap()
    bytes.EntityData.Leafs.Append("byte_idx", types.YLeaf{"ByteIdx", bytes.ByteIdx})
    bytes.EntityData.Leafs.Append("data", types.YLeaf{"Data", bytes.Data})

    bytes.EntityData.YListKeys = []string {"ByteIdx"}

    return &(bytes.EntityData)
}

// Controller_SfeOper_Sfe_Register
type Controller_SfeOper_Sfe_Register struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Register_Location.
    Location []*Controller_SfeOper_Sfe_Register_Location
}

func (register *Controller_SfeOper_Sfe_Register) GetEntityData() *types.CommonEntityData {
    register.EntityData.YFilter = register.YFilter
    register.EntityData.YangName = "register"
    register.EntityData.BundleName = "cisco_ios_xr"
    register.EntityData.ParentYangName = "sfe"
    register.EntityData.SegmentPath = "register"
    register.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/" + register.EntityData.SegmentPath
    register.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    register.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    register.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    register.EntityData.Children = types.NewOrderedMap()
    register.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range register.Location {
        register.EntityData.Children.Append(types.GetSegmentPath(register.Location[i]), types.YChild{"Location", register.Location[i]})
    }
    register.EntityData.Leafs = types.NewOrderedMap()

    register.EntityData.YListKeys = []string {}

    return &(register.EntityData)
}

// Controller_SfeOper_Sfe_Register_Location
type Controller_SfeOper_Sfe_Register_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0)).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Register_Location_Instance.
    Instance []*Controller_SfeOper_Sfe_Register_Location_Instance
}

func (location *Controller_SfeOper_Sfe_Register_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/register/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range location.Instance {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Instance[i]), types.YChild{"Instance", location.Instance[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Register_Location_Instance
type Controller_SfeOper_Sfe_Register_Location_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..5.
    InstanceNum interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Register_Location_Instance_Bytes.
    Bytes []*Controller_SfeOper_Sfe_Register_Location_Instance_Bytes
}

func (instance *Controller_SfeOper_Sfe_Register_Location_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "location"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceNum, "instance_num")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/register/location/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("bytes", types.YChild{"Bytes", nil})
    for i := range instance.Bytes {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.Bytes[i]), types.YChild{"Bytes", instance.Bytes[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance_num", types.YLeaf{"InstanceNum", instance.InstanceNum})

    instance.EntityData.YListKeys = []string {"InstanceNum"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Register_Location_Instance_Bytes
type Controller_SfeOper_Sfe_Register_Location_Instance_Bytes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    ByteIdx interface{}

    // The type is string.
    Data interface{}
}

func (bytes *Controller_SfeOper_Sfe_Register_Location_Instance_Bytes) GetEntityData() *types.CommonEntityData {
    bytes.EntityData.YFilter = bytes.YFilter
    bytes.EntityData.YangName = "bytes"
    bytes.EntityData.BundleName = "cisco_ios_xr"
    bytes.EntityData.ParentYangName = "instance"
    bytes.EntityData.SegmentPath = "bytes" + types.AddKeyToken(bytes.ByteIdx, "byte_idx")
    bytes.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/register/location/instance/" + bytes.EntityData.SegmentPath
    bytes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bytes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bytes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bytes.EntityData.Children = types.NewOrderedMap()
    bytes.EntityData.Leafs = types.NewOrderedMap()
    bytes.EntityData.Leafs.Append("byte_idx", types.YLeaf{"ByteIdx", bytes.ByteIdx})
    bytes.EntityData.Leafs.Append("data", types.YLeaf{"Data", bytes.Data})

    bytes.EntityData.YListKeys = []string {"ByteIdx"}

    return &(bytes.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile
type Controller_SfeOper_Sfe_DumpFile struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_DumpFile_Location.
    Location []*Controller_SfeOper_Sfe_DumpFile_Location
}

func (dumpFile *Controller_SfeOper_Sfe_DumpFile) GetEntityData() *types.CommonEntityData {
    dumpFile.EntityData.YFilter = dumpFile.YFilter
    dumpFile.EntityData.YangName = "dump-file"
    dumpFile.EntityData.BundleName = "cisco_ios_xr"
    dumpFile.EntityData.ParentYangName = "sfe"
    dumpFile.EntityData.SegmentPath = "dump-file"
    dumpFile.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/" + dumpFile.EntityData.SegmentPath
    dumpFile.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dumpFile.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dumpFile.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dumpFile.EntityData.Children = types.NewOrderedMap()
    dumpFile.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range dumpFile.Location {
        dumpFile.EntityData.Children.Append(types.GetSegmentPath(dumpFile.Location[i]), types.YChild{"Location", dumpFile.Location[i]})
    }
    dumpFile.EntityData.Leafs = types.NewOrderedMap()

    dumpFile.EntityData.YListKeys = []string {}

    return &(dumpFile.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile_Location
type Controller_SfeOper_Sfe_DumpFile_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0)).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_DumpFile_Location_File.
    File []*Controller_SfeOper_Sfe_DumpFile_Location_File
}

func (location *Controller_SfeOper_Sfe_DumpFile_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "dump-file"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/dump-file/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("file", types.YChild{"File", nil})
    for i := range location.File {
        location.EntityData.Children.Append(types.GetSegmentPath(location.File[i]), types.YChild{"File", location.File[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile_Location_File
type Controller_SfeOper_Sfe_DumpFile_Location_File struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    FileName interface{}

    // The type is slice of Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes.
    Bytes []*Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes
}

func (file *Controller_SfeOper_Sfe_DumpFile_Location_File) GetEntityData() *types.CommonEntityData {
    file.EntityData.YFilter = file.YFilter
    file.EntityData.YangName = "file"
    file.EntityData.BundleName = "cisco_ios_xr"
    file.EntityData.ParentYangName = "location"
    file.EntityData.SegmentPath = "file" + types.AddKeyToken(file.FileName, "file_name")
    file.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/dump-file/location/" + file.EntityData.SegmentPath
    file.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    file.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    file.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    file.EntityData.Children = types.NewOrderedMap()
    file.EntityData.Children.Append("bytes", types.YChild{"Bytes", nil})
    for i := range file.Bytes {
        file.EntityData.Children.Append(types.GetSegmentPath(file.Bytes[i]), types.YChild{"Bytes", file.Bytes[i]})
    }
    file.EntityData.Leafs = types.NewOrderedMap()
    file.EntityData.Leafs.Append("file_name", types.YLeaf{"FileName", file.FileName})

    file.EntityData.YListKeys = []string {"FileName"}

    return &(file.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes
type Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    ByteIdx interface{}

    // The type is string.
    Data interface{}
}

func (bytes *Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes) GetEntityData() *types.CommonEntityData {
    bytes.EntityData.YFilter = bytes.YFilter
    bytes.EntityData.YangName = "bytes"
    bytes.EntityData.BundleName = "cisco_ios_xr"
    bytes.EntityData.ParentYangName = "file"
    bytes.EntityData.SegmentPath = "bytes" + types.AddKeyToken(bytes.ByteIdx, "byte_idx")
    bytes.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/dump-file/location/file/" + bytes.EntityData.SegmentPath
    bytes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bytes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bytes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bytes.EntityData.Children = types.NewOrderedMap()
    bytes.EntityData.Leafs = types.NewOrderedMap()
    bytes.EntityData.Leafs.Append("byte_idx", types.YLeaf{"ByteIdx", bytes.ByteIdx})
    bytes.EntityData.Leafs.Append("data", types.YLeaf{"Data", bytes.Data})

    bytes.EntityData.YListKeys = []string {"ByteIdx"}

    return &(bytes.EntityData)
}

// Controller_SfeOper_Sfe_Parse
type Controller_SfeOper_Sfe_Parse struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Parse_Location.
    Location []*Controller_SfeOper_Sfe_Parse_Location
}

func (parse *Controller_SfeOper_Sfe_Parse) GetEntityData() *types.CommonEntityData {
    parse.EntityData.YFilter = parse.YFilter
    parse.EntityData.YangName = "parse"
    parse.EntityData.BundleName = "cisco_ios_xr"
    parse.EntityData.ParentYangName = "sfe"
    parse.EntityData.SegmentPath = "parse"
    parse.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/" + parse.EntityData.SegmentPath
    parse.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parse.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parse.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parse.EntityData.Children = types.NewOrderedMap()
    parse.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range parse.Location {
        parse.EntityData.Children.Append(types.GetSegmentPath(parse.Location[i]), types.YChild{"Location", parse.Location[i]})
    }
    parse.EntityData.Leafs = types.NewOrderedMap()

    parse.EntityData.YListKeys = []string {}

    return &(parse.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location
type Controller_SfeOper_Sfe_Parse_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0)).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Parse_Location_Link.
    Link []*Controller_SfeOper_Sfe_Parse_Location_Link
}

func (location *Controller_SfeOper_Sfe_Parse_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "parse"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/parse/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range location.Link {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Link[i]), types.YChild{"Link", location.Link[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location_Link
type Controller_SfeOper_Sfe_Parse_Location_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..143.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..143.
    End interface{}

    // The type is slice of Controller_SfeOper_Sfe_Parse_Location_Link_Instance.
    Instance []*Controller_SfeOper_Sfe_Parse_Location_Link_Instance
}

func (link *Controller_SfeOper_Sfe_Parse_Location_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "location"
    link.EntityData.SegmentPath = "link" + types.AddKeyToken(link.Start, "start") + types.AddKeyToken(link.End, "end")
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/parse/location/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range link.Instance {
        link.EntityData.Children.Append(types.GetSegmentPath(link.Instance[i]), types.YChild{"Instance", link.Instance[i]})
    }
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("start", types.YLeaf{"Start", link.Start})
    link.EntityData.Leafs.Append("end", types.YLeaf{"End", link.End})

    link.EntityData.YListKeys = []string {"Start", "End"}

    return &(link.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location_Link_Instance
type Controller_SfeOper_Sfe_Parse_Location_Link_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_Parse_Location_Link_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "link"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/parse/location/link/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList
type Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    RackIdStr interface{}

    // The type is string.
    SlotIdStr interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstId interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNumId interface{}

    // The type is interface{} with range: 0..4294967295.
    LogSlot interface{}

    // The type is interface{} with range: 0..4294967295.
    PhySlot interface{}

    // The type is interface{} with range: 0..4294967295.
    FapId interface{}

    // The type is interface{} with range: 0..4294967295.
    Unit interface{}

    // The type is interface{} with range: 0..4294967295.
    SfiId interface{}

    // The type is string.
    IpAddr interface{}

    // The type is string.
    DriverRun interface{}
}

func (linkIdxList *Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe/parse/location/link/instance/" + linkIdxList.EntityData.SegmentPath
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("rack_id_str", types.YLeaf{"RackIdStr", linkIdxList.RackIdStr})
    linkIdxList.EntityData.Leafs.Append("slot_id_str", types.YLeaf{"SlotIdStr", linkIdxList.SlotIdStr})
    linkIdxList.EntityData.Leafs.Append("asic_inst_id", types.YLeaf{"AsicInstId", linkIdxList.AsicInstId})
    linkIdxList.EntityData.Leafs.Append("link_num_id", types.YLeaf{"LinkNumId", linkIdxList.LinkNumId})
    linkIdxList.EntityData.Leafs.Append("log_slot", types.YLeaf{"LogSlot", linkIdxList.LogSlot})
    linkIdxList.EntityData.Leafs.Append("phy_slot", types.YLeaf{"PhySlot", linkIdxList.PhySlot})
    linkIdxList.EntityData.Leafs.Append("fap_id", types.YLeaf{"FapId", linkIdxList.FapId})
    linkIdxList.EntityData.Leafs.Append("unit", types.YLeaf{"Unit", linkIdxList.Unit})
    linkIdxList.EntityData.Leafs.Append("sfi_id", types.YLeaf{"SfiId", linkIdxList.SfiId})
    linkIdxList.EntityData.Leafs.Append("ip_addr", types.YLeaf{"IpAddr", linkIdxList.IpAddr})
    linkIdxList.EntityData.Leafs.Append("driver_run", types.YLeaf{"DriverRun", linkIdxList.DriverRun})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_SfeTrace
type Controller_SfeOper_SfeTrace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SfeDriver Controller_SfeOper_SfeTrace_SfeDriver
}

func (sfeTrace *Controller_SfeOper_SfeTrace) GetEntityData() *types.CommonEntityData {
    sfeTrace.EntityData.YFilter = sfeTrace.YFilter
    sfeTrace.EntityData.YangName = "sfe_trace"
    sfeTrace.EntityData.BundleName = "cisco_ios_xr"
    sfeTrace.EntityData.ParentYangName = "sfe_oper"
    sfeTrace.EntityData.SegmentPath = "sfe_trace"
    sfeTrace.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/" + sfeTrace.EntityData.SegmentPath
    sfeTrace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeTrace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeTrace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeTrace.EntityData.Children = types.NewOrderedMap()
    sfeTrace.EntityData.Children.Append("sfe_driver", types.YChild{"SfeDriver", &sfeTrace.SfeDriver})
    sfeTrace.EntityData.Leafs = types.NewOrderedMap()

    sfeTrace.EntityData.YListKeys = []string {}

    return &(sfeTrace.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver
type Controller_SfeOper_SfeTrace_SfeDriver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_SfeOper_SfeTrace_SfeDriver_Trace.
    Trace []*Controller_SfeOper_SfeTrace_SfeDriver_Trace
}

func (sfeDriver *Controller_SfeOper_SfeTrace_SfeDriver) GetEntityData() *types.CommonEntityData {
    sfeDriver.EntityData.YFilter = sfeDriver.YFilter
    sfeDriver.EntityData.YangName = "sfe_driver"
    sfeDriver.EntityData.BundleName = "cisco_ios_xr"
    sfeDriver.EntityData.ParentYangName = "sfe_trace"
    sfeDriver.EntityData.SegmentPath = "sfe_driver"
    sfeDriver.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe_trace/" + sfeDriver.EntityData.SegmentPath
    sfeDriver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeDriver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeDriver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeDriver.EntityData.Children = types.NewOrderedMap()
    sfeDriver.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range sfeDriver.Trace {
        sfeDriver.EntityData.Children.Append(types.GetSegmentPath(sfeDriver.Trace[i]), types.YChild{"Trace", sfeDriver.Trace[i]})
    }
    sfeDriver.EntityData.Leafs = types.NewOrderedMap()

    sfeDriver.EntityData.YListKeys = []string {}

    return &(sfeDriver.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace
// show traceable processes
type Controller_SfeOper_SfeTrace_SfeDriver_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location.
    Location []*Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location
}

func (trace *Controller_SfeOper_SfeTrace_SfeDriver_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "sfe_driver"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe_trace/sfe_driver/" + trace.EntityData.SegmentPath
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location
type Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions.
    AllOptions []*Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions
}

func (location *Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe_trace/sfe_driver/trace/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions
type Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe_trace/sfe_driver/trace/location/" + allOptions.EntityData.SegmentPath
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        types.SetYListKey(allOptions.TraceBlocks[i], i)
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks
type Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks" + types.AddNoKeyToken(traceBlocks)
    traceBlocks.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/sfe_oper/sfe_trace/sfe_driver/trace/location/all-options/" + traceBlocks.EntityData.SegmentPath
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_FabricAction
type Controller_FabricAction struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric resource commands.
    Fabric Controller_FabricAction_Fabric
}

func (fabricAction *Controller_FabricAction) GetEntityData() *types.CommonEntityData {
    fabricAction.EntityData.YFilter = fabricAction.YFilter
    fabricAction.EntityData.YangName = "fabric_action"
    fabricAction.EntityData.BundleName = "cisco_ios_xr"
    fabricAction.EntityData.ParentYangName = "controller"
    fabricAction.EntityData.SegmentPath = "fabric_action"
    fabricAction.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/" + fabricAction.EntityData.SegmentPath
    fabricAction.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabricAction.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabricAction.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabricAction.EntityData.Children = types.NewOrderedMap()
    fabricAction.EntityData.Children.Append("fabric", types.YChild{"Fabric", &fabricAction.Fabric})
    fabricAction.EntityData.Leafs = types.NewOrderedMap()

    fabricAction.EntityData.YListKeys = []string {}

    return &(fabricAction.EntityData)
}

// Controller_FabricAction_Fabric
// Fabric resource commands
type Controller_FabricAction_Fabric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Plane by plane upgrade.
    Ppu Controller_FabricAction_Fabric_Ppu
}

func (fabric *Controller_FabricAction_Fabric) GetEntityData() *types.CommonEntityData {
    fabric.EntityData.YFilter = fabric.YFilter
    fabric.EntityData.YangName = "fabric"
    fabric.EntityData.BundleName = "cisco_ios_xr"
    fabric.EntityData.ParentYangName = "fabric_action"
    fabric.EntityData.SegmentPath = "fabric"
    fabric.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric_action/" + fabric.EntityData.SegmentPath
    fabric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabric.EntityData.Children = types.NewOrderedMap()
    fabric.EntityData.Children.Append("ppu", types.YChild{"Ppu", &fabric.Ppu})
    fabric.EntityData.Leafs = types.NewOrderedMap()

    fabric.EntityData.YListKeys = []string {}

    return &(fabric.EntityData)
}

// Controller_FabricAction_Fabric_Ppu
// Plane by plane upgrade.
type Controller_FabricAction_Fabric_Ppu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (ppu *Controller_FabricAction_Fabric_Ppu) GetEntityData() *types.CommonEntityData {
    ppu.EntityData.YFilter = ppu.YFilter
    ppu.EntityData.YangName = "ppu"
    ppu.EntityData.BundleName = "cisco_ios_xr"
    ppu.EntityData.ParentYangName = "fabric"
    ppu.EntityData.SegmentPath = "ppu"
    ppu.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/fabric_action/fabric/" + ppu.EntityData.SegmentPath
    ppu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ppu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ppu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ppu.EntityData.Children = types.NewOrderedMap()
    ppu.EntityData.Leafs = types.NewOrderedMap()

    ppu.EntityData.YListKeys = []string {}

    return &(ppu.EntityData)
}

// Controller_CardMgr
type Controller_CardMgr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of Controller_CardMgr_Trace.
    Trace []*Controller_CardMgr_Trace

    
    Inventory Controller_CardMgr_Inventory

    
    EventHistory Controller_CardMgr_EventHistory

    
    NotifHistory Controller_CardMgr_NotifHistory

    
    OirHistory Controller_CardMgr_OirHistory

    
    Iofpga Controller_CardMgr_Iofpga

    
    Bootloader Controller_CardMgr_Bootloader
}

func (cardMgr *Controller_CardMgr) GetEntityData() *types.CommonEntityData {
    cardMgr.EntityData.YFilter = cardMgr.YFilter
    cardMgr.EntityData.YangName = "card_mgr"
    cardMgr.EntityData.BundleName = "cisco_ios_xr"
    cardMgr.EntityData.ParentYangName = "controller"
    cardMgr.EntityData.SegmentPath = "card_mgr"
    cardMgr.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/" + cardMgr.EntityData.SegmentPath
    cardMgr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardMgr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardMgr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardMgr.EntityData.Children = types.NewOrderedMap()
    cardMgr.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range cardMgr.Trace {
        cardMgr.EntityData.Children.Append(types.GetSegmentPath(cardMgr.Trace[i]), types.YChild{"Trace", cardMgr.Trace[i]})
    }
    cardMgr.EntityData.Children.Append("inventory", types.YChild{"Inventory", &cardMgr.Inventory})
    cardMgr.EntityData.Children.Append("event-history", types.YChild{"EventHistory", &cardMgr.EventHistory})
    cardMgr.EntityData.Children.Append("notif-history", types.YChild{"NotifHistory", &cardMgr.NotifHistory})
    cardMgr.EntityData.Children.Append("oir-history", types.YChild{"OirHistory", &cardMgr.OirHistory})
    cardMgr.EntityData.Children.Append("iofpga", types.YChild{"Iofpga", &cardMgr.Iofpga})
    cardMgr.EntityData.Children.Append("bootloader", types.YChild{"Bootloader", &cardMgr.Bootloader})
    cardMgr.EntityData.Leafs = types.NewOrderedMap()

    cardMgr.EntityData.YListKeys = []string {}

    return &(cardMgr.EntityData)
}

// Controller_CardMgr_Trace
// show traceable processes
type Controller_CardMgr_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_CardMgr_Trace_Location.
    Location []*Controller_CardMgr_Trace_Location
}

func (trace *Controller_CardMgr_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "card_mgr"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/" + trace.EntityData.SegmentPath
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_CardMgr_Trace_Location
type Controller_CardMgr_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of Controller_CardMgr_Trace_Location_AllOptions.
    AllOptions []*Controller_CardMgr_Trace_Location_AllOptions
}

func (location *Controller_CardMgr_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/trace/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_CardMgr_Trace_Location_AllOptions
type Controller_CardMgr_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_CardMgr_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_CardMgr_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_CardMgr_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/trace/location/" + allOptions.EntityData.SegmentPath
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        types.SetYListKey(allOptions.TraceBlocks[i], i)
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_CardMgr_Trace_Location_AllOptions_TraceBlocks
type Controller_CardMgr_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_CardMgr_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks" + types.AddNoKeyToken(traceBlocks)
    traceBlocks.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/trace/location/all-options/" + traceBlocks.EntityData.SegmentPath
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_CardMgr_Inventory
type Controller_CardMgr_Inventory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_CardMgr_Inventory_Summary

    
    Detail Controller_CardMgr_Inventory_Detail
}

func (inventory *Controller_CardMgr_Inventory) GetEntityData() *types.CommonEntityData {
    inventory.EntityData.YFilter = inventory.YFilter
    inventory.EntityData.YangName = "inventory"
    inventory.EntityData.BundleName = "cisco_ios_xr"
    inventory.EntityData.ParentYangName = "card_mgr"
    inventory.EntityData.SegmentPath = "inventory"
    inventory.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/" + inventory.EntityData.SegmentPath
    inventory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inventory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inventory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inventory.EntityData.Children = types.NewOrderedMap()
    inventory.EntityData.Children.Append("summary", types.YChild{"Summary", &inventory.Summary})
    inventory.EntityData.Children.Append("detail", types.YChild{"Detail", &inventory.Detail})
    inventory.EntityData.Leafs = types.NewOrderedMap()

    inventory.EntityData.YListKeys = []string {}

    return &(inventory.EntityData)
}

// Controller_CardMgr_Inventory_Summary
type Controller_CardMgr_Inventory_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CardMgr_Inventory_Summary_CardMgrInvSummary.
    CardMgrInvSummary []*Controller_CardMgr_Inventory_Summary_CardMgrInvSummary
}

func (summary *Controller_CardMgr_Inventory_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "inventory"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/inventory/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("card_mgr_inv_summary", types.YChild{"CardMgrInvSummary", nil})
    for i := range summary.CardMgrInvSummary {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.CardMgrInvSummary[i]), types.YChild{"CardMgrInvSummary", summary.CardMgrInvSummary[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_CardMgr_Inventory_Summary_CardMgrInvSummary
type Controller_CardMgr_Inventory_Summary_CardMgrInvSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string. This attribute is mandatory.
    Location interface{}

    // The type is string.
    CardMgrInvPIDString interface{}

    // The type is interface{} with range: 0..4294967295.
    CardMgrInvSlotNumber interface{}

    // The type is string.
    CardMgrInvSerialNumber interface{}

    // The type is string.
    CardMgrInvHwVersion interface{}

    // The type is string.
    CardMgrInvCardState interface{}
}

func (cardMgrInvSummary *Controller_CardMgr_Inventory_Summary_CardMgrInvSummary) GetEntityData() *types.CommonEntityData {
    cardMgrInvSummary.EntityData.YFilter = cardMgrInvSummary.YFilter
    cardMgrInvSummary.EntityData.YangName = "card_mgr_inv_summary"
    cardMgrInvSummary.EntityData.BundleName = "cisco_ios_xr"
    cardMgrInvSummary.EntityData.ParentYangName = "summary"
    cardMgrInvSummary.EntityData.SegmentPath = "card_mgr_inv_summary" + types.AddKeyToken(cardMgrInvSummary.Location, "location")
    cardMgrInvSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/inventory/summary/" + cardMgrInvSummary.EntityData.SegmentPath
    cardMgrInvSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardMgrInvSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardMgrInvSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardMgrInvSummary.EntityData.Children = types.NewOrderedMap()
    cardMgrInvSummary.EntityData.Leafs = types.NewOrderedMap()
    cardMgrInvSummary.EntityData.Leafs.Append("location", types.YLeaf{"Location", cardMgrInvSummary.Location})
    cardMgrInvSummary.EntityData.Leafs.Append("card_mgr_inv_PID_string", types.YLeaf{"CardMgrInvPIDString", cardMgrInvSummary.CardMgrInvPIDString})
    cardMgrInvSummary.EntityData.Leafs.Append("card_mgr_inv_slot_number", types.YLeaf{"CardMgrInvSlotNumber", cardMgrInvSummary.CardMgrInvSlotNumber})
    cardMgrInvSummary.EntityData.Leafs.Append("card_mgr_inv_serial_number", types.YLeaf{"CardMgrInvSerialNumber", cardMgrInvSummary.CardMgrInvSerialNumber})
    cardMgrInvSummary.EntityData.Leafs.Append("card_mgr_inv_hw_version", types.YLeaf{"CardMgrInvHwVersion", cardMgrInvSummary.CardMgrInvHwVersion})
    cardMgrInvSummary.EntityData.Leafs.Append("card_mgr_inv_card_state", types.YLeaf{"CardMgrInvCardState", cardMgrInvSummary.CardMgrInvCardState})

    cardMgrInvSummary.EntityData.YListKeys = []string {"Location"}

    return &(cardMgrInvSummary.EntityData)
}

// Controller_CardMgr_Inventory_Detail
type Controller_CardMgr_Inventory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CardMgr_Inventory_Detail_CardMgrInvDetail.
    CardMgrInvDetail []*Controller_CardMgr_Inventory_Detail_CardMgrInvDetail
}

func (detail *Controller_CardMgr_Inventory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "inventory"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/inventory/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("card_mgr_inv_detail", types.YChild{"CardMgrInvDetail", nil})
    for i := range detail.CardMgrInvDetail {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.CardMgrInvDetail[i]), types.YChild{"CardMgrInvDetail", detail.CardMgrInvDetail[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_CardMgr_Inventory_Detail_CardMgrInvDetail
type Controller_CardMgr_Inventory_Detail_CardMgrInvDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardMgrInvDetailList Controller_CardMgr_Inventory_Detail_CardMgrInvDetail_CardMgrInvDetailList
}

func (cardMgrInvDetail *Controller_CardMgr_Inventory_Detail_CardMgrInvDetail) GetEntityData() *types.CommonEntityData {
    cardMgrInvDetail.EntityData.YFilter = cardMgrInvDetail.YFilter
    cardMgrInvDetail.EntityData.YangName = "card_mgr_inv_detail"
    cardMgrInvDetail.EntityData.BundleName = "cisco_ios_xr"
    cardMgrInvDetail.EntityData.ParentYangName = "detail"
    cardMgrInvDetail.EntityData.SegmentPath = "card_mgr_inv_detail" + types.AddKeyToken(cardMgrInvDetail.Location, "location")
    cardMgrInvDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/inventory/detail/" + cardMgrInvDetail.EntityData.SegmentPath
    cardMgrInvDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardMgrInvDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardMgrInvDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardMgrInvDetail.EntityData.Children = types.NewOrderedMap()
    cardMgrInvDetail.EntityData.Children.Append("card_mgr_inv_detail_list", types.YChild{"CardMgrInvDetailList", &cardMgrInvDetail.CardMgrInvDetailList})
    cardMgrInvDetail.EntityData.Leafs = types.NewOrderedMap()
    cardMgrInvDetail.EntityData.Leafs.Append("location", types.YLeaf{"Location", cardMgrInvDetail.Location})

    cardMgrInvDetail.EntityData.YListKeys = []string {"Location"}

    return &(cardMgrInvDetail.EntityData)
}

// Controller_CardMgr_Inventory_Detail_CardMgrInvDetail_CardMgrInvDetailList
type Controller_CardMgr_Inventory_Detail_CardMgrInvDetail_CardMgrInvDetailList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardMgrInvDetailValues []interface{}
}

func (cardMgrInvDetailList *Controller_CardMgr_Inventory_Detail_CardMgrInvDetail_CardMgrInvDetailList) GetEntityData() *types.CommonEntityData {
    cardMgrInvDetailList.EntityData.YFilter = cardMgrInvDetailList.YFilter
    cardMgrInvDetailList.EntityData.YangName = "card_mgr_inv_detail_list"
    cardMgrInvDetailList.EntityData.BundleName = "cisco_ios_xr"
    cardMgrInvDetailList.EntityData.ParentYangName = "card_mgr_inv_detail"
    cardMgrInvDetailList.EntityData.SegmentPath = "card_mgr_inv_detail_list"
    cardMgrInvDetailList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/inventory/detail/card_mgr_inv_detail/" + cardMgrInvDetailList.EntityData.SegmentPath
    cardMgrInvDetailList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardMgrInvDetailList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardMgrInvDetailList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardMgrInvDetailList.EntityData.Children = types.NewOrderedMap()
    cardMgrInvDetailList.EntityData.Leafs = types.NewOrderedMap()
    cardMgrInvDetailList.EntityData.Leafs.Append("card_mgr_inv_detail_values", types.YLeaf{"CardMgrInvDetailValues", cardMgrInvDetailList.CardMgrInvDetailValues})

    cardMgrInvDetailList.EntityData.YListKeys = []string {}

    return &(cardMgrInvDetailList.EntityData)
}

// Controller_CardMgr_EventHistory
type Controller_CardMgr_EventHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CardMgr_EventHistory_Brief

    
    Detail Controller_CardMgr_EventHistory_Detail
}

func (eventHistory *Controller_CardMgr_EventHistory) GetEntityData() *types.CommonEntityData {
    eventHistory.EntityData.YFilter = eventHistory.YFilter
    eventHistory.EntityData.YangName = "event-history"
    eventHistory.EntityData.BundleName = "cisco_ios_xr"
    eventHistory.EntityData.ParentYangName = "card_mgr"
    eventHistory.EntityData.SegmentPath = "event-history"
    eventHistory.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/" + eventHistory.EntityData.SegmentPath
    eventHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventHistory.EntityData.Children = types.NewOrderedMap()
    eventHistory.EntityData.Children.Append("brief", types.YChild{"Brief", &eventHistory.Brief})
    eventHistory.EntityData.Children.Append("detail", types.YChild{"Detail", &eventHistory.Detail})
    eventHistory.EntityData.Leafs = types.NewOrderedMap()

    eventHistory.EntityData.YListKeys = []string {}

    return &(eventHistory.EntityData)
}

// Controller_CardMgr_EventHistory_Brief
type Controller_CardMgr_EventHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CardMgr_EventHistory_Brief_Location.
    Location []*Controller_CardMgr_EventHistory_Brief_Location
}

func (brief *Controller_CardMgr_EventHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "event-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/event-history/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range brief.Location {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.Location[i]), types.YChild{"Location", brief.Location[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_CardMgr_EventHistory_Brief_Location
type Controller_CardMgr_EventHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistBrief Controller_CardMgr_EventHistory_Brief_Location_CardEventHistBrief
}

func (location *Controller_CardMgr_EventHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/event-history/brief/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_event_hist_brief", types.YChild{"CardEventHistBrief", &location.CardEventHistBrief})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CardMgr_EventHistory_Brief_Location_CardEventHistBrief
type Controller_CardMgr_EventHistory_Brief_Location_CardEventHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistBriefValues []interface{}
}

func (cardEventHistBrief *Controller_CardMgr_EventHistory_Brief_Location_CardEventHistBrief) GetEntityData() *types.CommonEntityData {
    cardEventHistBrief.EntityData.YFilter = cardEventHistBrief.YFilter
    cardEventHistBrief.EntityData.YangName = "card_event_hist_brief"
    cardEventHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistBrief.EntityData.ParentYangName = "location"
    cardEventHistBrief.EntityData.SegmentPath = "card_event_hist_brief"
    cardEventHistBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/event-history/brief/location/" + cardEventHistBrief.EntityData.SegmentPath
    cardEventHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistBrief.EntityData.Children = types.NewOrderedMap()
    cardEventHistBrief.EntityData.Leafs = types.NewOrderedMap()
    cardEventHistBrief.EntityData.Leafs.Append("card_event_hist_brief_values", types.YLeaf{"CardEventHistBriefValues", cardEventHistBrief.CardEventHistBriefValues})

    cardEventHistBrief.EntityData.YListKeys = []string {}

    return &(cardEventHistBrief.EntityData)
}

// Controller_CardMgr_EventHistory_Detail
type Controller_CardMgr_EventHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CardMgr_EventHistory_Detail_Location.
    Location []*Controller_CardMgr_EventHistory_Detail_Location
}

func (detail *Controller_CardMgr_EventHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "event-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/event-history/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_CardMgr_EventHistory_Detail_Location
type Controller_CardMgr_EventHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistDetail Controller_CardMgr_EventHistory_Detail_Location_CardEventHistDetail
}

func (location *Controller_CardMgr_EventHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/event-history/detail/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_event_hist_detail", types.YChild{"CardEventHistDetail", &location.CardEventHistDetail})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CardMgr_EventHistory_Detail_Location_CardEventHistDetail
type Controller_CardMgr_EventHistory_Detail_Location_CardEventHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistDetailValues []interface{}
}

func (cardEventHistDetail *Controller_CardMgr_EventHistory_Detail_Location_CardEventHistDetail) GetEntityData() *types.CommonEntityData {
    cardEventHistDetail.EntityData.YFilter = cardEventHistDetail.YFilter
    cardEventHistDetail.EntityData.YangName = "card_event_hist_detail"
    cardEventHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistDetail.EntityData.ParentYangName = "location"
    cardEventHistDetail.EntityData.SegmentPath = "card_event_hist_detail"
    cardEventHistDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/event-history/detail/location/" + cardEventHistDetail.EntityData.SegmentPath
    cardEventHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistDetail.EntityData.Children = types.NewOrderedMap()
    cardEventHistDetail.EntityData.Leafs = types.NewOrderedMap()
    cardEventHistDetail.EntityData.Leafs.Append("card_event_hist_detail_values", types.YLeaf{"CardEventHistDetailValues", cardEventHistDetail.CardEventHistDetailValues})

    cardEventHistDetail.EntityData.YListKeys = []string {}

    return &(cardEventHistDetail.EntityData)
}

// Controller_CardMgr_NotifHistory
type Controller_CardMgr_NotifHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CardMgr_NotifHistory_Brief

    
    Detail Controller_CardMgr_NotifHistory_Detail
}

func (notifHistory *Controller_CardMgr_NotifHistory) GetEntityData() *types.CommonEntityData {
    notifHistory.EntityData.YFilter = notifHistory.YFilter
    notifHistory.EntityData.YangName = "notif-history"
    notifHistory.EntityData.BundleName = "cisco_ios_xr"
    notifHistory.EntityData.ParentYangName = "card_mgr"
    notifHistory.EntityData.SegmentPath = "notif-history"
    notifHistory.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/" + notifHistory.EntityData.SegmentPath
    notifHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notifHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notifHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notifHistory.EntityData.Children = types.NewOrderedMap()
    notifHistory.EntityData.Children.Append("brief", types.YChild{"Brief", &notifHistory.Brief})
    notifHistory.EntityData.Children.Append("detail", types.YChild{"Detail", &notifHistory.Detail})
    notifHistory.EntityData.Leafs = types.NewOrderedMap()

    notifHistory.EntityData.YListKeys = []string {}

    return &(notifHistory.EntityData)
}

// Controller_CardMgr_NotifHistory_Brief
type Controller_CardMgr_NotifHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CardMgr_NotifHistory_Brief_Location.
    Location []*Controller_CardMgr_NotifHistory_Brief_Location
}

func (brief *Controller_CardMgr_NotifHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "notif-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/notif-history/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range brief.Location {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.Location[i]), types.YChild{"Location", brief.Location[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_CardMgr_NotifHistory_Brief_Location
type Controller_CardMgr_NotifHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistBrief Controller_CardMgr_NotifHistory_Brief_Location_CardNotifHistBrief
}

func (location *Controller_CardMgr_NotifHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/notif-history/brief/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_notif_hist_brief", types.YChild{"CardNotifHistBrief", &location.CardNotifHistBrief})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CardMgr_NotifHistory_Brief_Location_CardNotifHistBrief
type Controller_CardMgr_NotifHistory_Brief_Location_CardNotifHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistBriefValues []interface{}
}

func (cardNotifHistBrief *Controller_CardMgr_NotifHistory_Brief_Location_CardNotifHistBrief) GetEntityData() *types.CommonEntityData {
    cardNotifHistBrief.EntityData.YFilter = cardNotifHistBrief.YFilter
    cardNotifHistBrief.EntityData.YangName = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistBrief.EntityData.ParentYangName = "location"
    cardNotifHistBrief.EntityData.SegmentPath = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/notif-history/brief/location/" + cardNotifHistBrief.EntityData.SegmentPath
    cardNotifHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistBrief.EntityData.Children = types.NewOrderedMap()
    cardNotifHistBrief.EntityData.Leafs = types.NewOrderedMap()
    cardNotifHistBrief.EntityData.Leafs.Append("card_notif_hist_brief_values", types.YLeaf{"CardNotifHistBriefValues", cardNotifHistBrief.CardNotifHistBriefValues})

    cardNotifHistBrief.EntityData.YListKeys = []string {}

    return &(cardNotifHistBrief.EntityData)
}

// Controller_CardMgr_NotifHistory_Detail
type Controller_CardMgr_NotifHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CardMgr_NotifHistory_Detail_Location.
    Location []*Controller_CardMgr_NotifHistory_Detail_Location
}

func (detail *Controller_CardMgr_NotifHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "notif-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/notif-history/" + detail.EntityData.SegmentPath
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_CardMgr_NotifHistory_Detail_Location
type Controller_CardMgr_NotifHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistDetail Controller_CardMgr_NotifHistory_Detail_Location_CardNotifHistDetail
}

func (location *Controller_CardMgr_NotifHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/notif-history/detail/" + location.EntityData.SegmentPath
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_notif_hist_detail", types.YChild{"CardNotifHistDetail", &location.CardNotifHistDetail})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CardMgr_NotifHistory_Detail_Location_CardNotifHistDetail
type Controller_CardMgr_NotifHistory_Detail_Location_CardNotifHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistDetailValues []interface{}
}

func (cardNotifHistDetail *Controller_CardMgr_NotifHistory_Detail_Location_CardNotifHistDetail) GetEntityData() *types.CommonEntityData {
    cardNotifHistDetail.EntityData.YFilter = cardNotifHistDetail.YFilter
    cardNotifHistDetail.EntityData.YangName = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistDetail.EntityData.ParentYangName = "location"
    cardNotifHistDetail.EntityData.SegmentPath = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/notif-history/detail/location/" + cardNotifHistDetail.EntityData.SegmentPath
    cardNotifHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistDetail.EntityData.Children = types.NewOrderedMap()
    cardNotifHistDetail.EntityData.Leafs = types.NewOrderedMap()
    cardNotifHistDetail.EntityData.Leafs.Append("card_notif_hist_detail_values", types.YLeaf{"CardNotifHistDetailValues", cardNotifHistDetail.CardNotifHistDetailValues})

    cardNotifHistDetail.EntityData.YListKeys = []string {}

    return &(cardNotifHistDetail.EntityData)
}

// Controller_CardMgr_OirHistory
type Controller_CardMgr_OirHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CardMgr_OirHistory_Rack.
    Rack []*Controller_CardMgr_OirHistory_Rack
}

func (oirHistory *Controller_CardMgr_OirHistory) GetEntityData() *types.CommonEntityData {
    oirHistory.EntityData.YFilter = oirHistory.YFilter
    oirHistory.EntityData.YangName = "oir-history"
    oirHistory.EntityData.BundleName = "cisco_ios_xr"
    oirHistory.EntityData.ParentYangName = "card_mgr"
    oirHistory.EntityData.SegmentPath = "oir-history"
    oirHistory.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/" + oirHistory.EntityData.SegmentPath
    oirHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oirHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oirHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oirHistory.EntityData.Children = types.NewOrderedMap()
    oirHistory.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range oirHistory.Rack {
        oirHistory.EntityData.Children.Append(types.GetSegmentPath(oirHistory.Rack[i]), types.YChild{"Rack", oirHistory.Rack[i]})
    }
    oirHistory.EntityData.Leafs = types.NewOrderedMap()

    oirHistory.EntityData.YListKeys = []string {}

    return &(oirHistory.EntityData)
}

// Controller_CardMgr_OirHistory_Rack
type Controller_CardMgr_OirHistory_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    Rack interface{}

    
    CardOirHist Controller_CardMgr_OirHistory_Rack_CardOirHist
}

func (rack *Controller_CardMgr_OirHistory_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "oir-history"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.Rack, "rack")
    rack.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/oir-history/" + rack.EntityData.SegmentPath
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("card_oir_hist", types.YChild{"CardOirHist", &rack.CardOirHist})
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", rack.Rack})

    rack.EntityData.YListKeys = []string {"Rack"}

    return &(rack.EntityData)
}

// Controller_CardMgr_OirHistory_Rack_CardOirHist
type Controller_CardMgr_OirHistory_Rack_CardOirHist struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardOirEvents []interface{}
}

func (cardOirHist *Controller_CardMgr_OirHistory_Rack_CardOirHist) GetEntityData() *types.CommonEntityData {
    cardOirHist.EntityData.YFilter = cardOirHist.YFilter
    cardOirHist.EntityData.YangName = "card_oir_hist"
    cardOirHist.EntityData.BundleName = "cisco_ios_xr"
    cardOirHist.EntityData.ParentYangName = "rack"
    cardOirHist.EntityData.SegmentPath = "card_oir_hist"
    cardOirHist.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/oir-history/rack/" + cardOirHist.EntityData.SegmentPath
    cardOirHist.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardOirHist.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardOirHist.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardOirHist.EntityData.Children = types.NewOrderedMap()
    cardOirHist.EntityData.Leafs = types.NewOrderedMap()
    cardOirHist.EntityData.Leafs.Append("card_oir_events", types.YLeaf{"CardOirEvents", cardOirHist.CardOirEvents})

    cardOirHist.EntityData.YListKeys = []string {}

    return &(cardOirHist.EntityData)
}

// Controller_CardMgr_Iofpga
type Controller_CardMgr_Iofpga struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Register Controller_CardMgr_Iofpga_Register

    
    Flash Controller_CardMgr_Iofpga_Flash
}

func (iofpga *Controller_CardMgr_Iofpga) GetEntityData() *types.CommonEntityData {
    iofpga.EntityData.YFilter = iofpga.YFilter
    iofpga.EntityData.YangName = "iofpga"
    iofpga.EntityData.BundleName = "cisco_ios_xr"
    iofpga.EntityData.ParentYangName = "card_mgr"
    iofpga.EntityData.SegmentPath = "iofpga"
    iofpga.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/" + iofpga.EntityData.SegmentPath
    iofpga.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpga.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpga.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpga.EntityData.Children = types.NewOrderedMap()
    iofpga.EntityData.Children.Append("register", types.YChild{"Register", &iofpga.Register})
    iofpga.EntityData.Children.Append("flash", types.YChild{"Flash", &iofpga.Flash})
    iofpga.EntityData.Leafs = types.NewOrderedMap()

    iofpga.EntityData.YListKeys = []string {}

    return &(iofpga.EntityData)
}

// Controller_CardMgr_Iofpga_Register
type Controller_CardMgr_Iofpga_Register struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Cpu Controller_CardMgr_Iofpga_Register_Cpu

    
    Mb Controller_CardMgr_Iofpga_Register_Mb

    
    Dc Controller_CardMgr_Iofpga_Register_Dc
}

func (register *Controller_CardMgr_Iofpga_Register) GetEntityData() *types.CommonEntityData {
    register.EntityData.YFilter = register.YFilter
    register.EntityData.YangName = "register"
    register.EntityData.BundleName = "cisco_ios_xr"
    register.EntityData.ParentYangName = "iofpga"
    register.EntityData.SegmentPath = "register"
    register.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/" + register.EntityData.SegmentPath
    register.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    register.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    register.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    register.EntityData.Children = types.NewOrderedMap()
    register.EntityData.Children.Append("cpu", types.YChild{"Cpu", &register.Cpu})
    register.EntityData.Children.Append("mb", types.YChild{"Mb", &register.Mb})
    register.EntityData.Children.Append("dc", types.YChild{"Dc", &register.Dc})
    register.EntityData.Leafs = types.NewOrderedMap()

    register.EntityData.YListKeys = []string {}

    return &(register.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu
type Controller_CardMgr_Iofpga_Register_Cpu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation.
    RegisterLocation []*Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation
}

func (cpu *Controller_CardMgr_Iofpga_Register_Cpu) GetEntityData() *types.CommonEntityData {
    cpu.EntityData.YFilter = cpu.YFilter
    cpu.EntityData.YangName = "cpu"
    cpu.EntityData.BundleName = "cisco_ios_xr"
    cpu.EntityData.ParentYangName = "register"
    cpu.EntityData.SegmentPath = "cpu"
    cpu.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/" + cpu.EntityData.SegmentPath
    cpu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cpu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cpu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cpu.EntityData.Children = types.NewOrderedMap()
    cpu.EntityData.Children.Append("register_location", types.YChild{"RegisterLocation", nil})
    for i := range cpu.RegisterLocation {
        cpu.EntityData.Children.Append(types.GetSegmentPath(cpu.RegisterLocation[i]), types.YChild{"RegisterLocation", cpu.RegisterLocation[i]})
    }
    cpu.EntityData.Leafs = types.NewOrderedMap()

    cpu.EntityData.YListKeys = []string {}

    return &(cpu.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation
type Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    RegisterLocation interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber.
    IofpgaBlockNumber []*Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset.
    IofpgaOffset []*Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress.
    IofpgaAddress []*Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress
}

func (registerLocation *Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation) GetEntityData() *types.CommonEntityData {
    registerLocation.EntityData.YFilter = registerLocation.YFilter
    registerLocation.EntityData.YangName = "register_location"
    registerLocation.EntityData.BundleName = "cisco_ios_xr"
    registerLocation.EntityData.ParentYangName = "cpu"
    registerLocation.EntityData.SegmentPath = "register_location" + types.AddKeyToken(registerLocation.RegisterLocation, "register_location")
    registerLocation.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/cpu/" + registerLocation.EntityData.SegmentPath
    registerLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerLocation.EntityData.Children = types.NewOrderedMap()
    registerLocation.EntityData.Children.Append("iofpga_block_number", types.YChild{"IofpgaBlockNumber", nil})
    for i := range registerLocation.IofpgaBlockNumber {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.IofpgaBlockNumber[i]), types.YChild{"IofpgaBlockNumber", registerLocation.IofpgaBlockNumber[i]})
    }
    registerLocation.EntityData.Children.Append("iofpga_offset", types.YChild{"IofpgaOffset", nil})
    for i := range registerLocation.IofpgaOffset {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.IofpgaOffset[i]), types.YChild{"IofpgaOffset", registerLocation.IofpgaOffset[i]})
    }
    registerLocation.EntityData.Children.Append("iofpga_address", types.YChild{"IofpgaAddress", nil})
    for i := range registerLocation.IofpgaAddress {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.IofpgaAddress[i]), types.YChild{"IofpgaAddress", registerLocation.IofpgaAddress[i]})
    }
    registerLocation.EntityData.Leafs = types.NewOrderedMap()
    registerLocation.EntityData.Leafs.Append("register_location", types.YLeaf{"RegisterLocation", registerLocation.RegisterLocation})

    registerLocation.EntityData.YListKeys = []string {"RegisterLocation"}

    return &(registerLocation.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber
type Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    IofpgaBlockNum interface{}

    // The type is string.
    BlockLocation interface{}

    // The type is string.
    IofpgaBlockNm interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber.
    IofpgaRegisterNumber []*Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber
}

func (iofpgaBlockNumber *Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber) GetEntityData() *types.CommonEntityData {
    iofpgaBlockNumber.EntityData.YFilter = iofpgaBlockNumber.YFilter
    iofpgaBlockNumber.EntityData.YangName = "iofpga_block_number"
    iofpgaBlockNumber.EntityData.BundleName = "cisco_ios_xr"
    iofpgaBlockNumber.EntityData.ParentYangName = "register_location"
    iofpgaBlockNumber.EntityData.SegmentPath = "iofpga_block_number" + types.AddKeyToken(iofpgaBlockNumber.IofpgaBlockNum, "iofpga_block_num")
    iofpgaBlockNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/cpu/register_location/" + iofpgaBlockNumber.EntityData.SegmentPath
    iofpgaBlockNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaBlockNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaBlockNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaBlockNumber.EntityData.Children = types.NewOrderedMap()
    iofpgaBlockNumber.EntityData.Children.Append("iofpga_register_number", types.YChild{"IofpgaRegisterNumber", nil})
    for i := range iofpgaBlockNumber.IofpgaRegisterNumber {
        iofpgaBlockNumber.EntityData.Children.Append(types.GetSegmentPath(iofpgaBlockNumber.IofpgaRegisterNumber[i]), types.YChild{"IofpgaRegisterNumber", iofpgaBlockNumber.IofpgaRegisterNumber[i]})
    }
    iofpgaBlockNumber.EntityData.Leafs = types.NewOrderedMap()
    iofpgaBlockNumber.EntityData.Leafs.Append("iofpga_block_num", types.YLeaf{"IofpgaBlockNum", iofpgaBlockNumber.IofpgaBlockNum})
    iofpgaBlockNumber.EntityData.Leafs.Append("block_location", types.YLeaf{"BlockLocation", iofpgaBlockNumber.BlockLocation})
    iofpgaBlockNumber.EntityData.Leafs.Append("iofpga_block_nm", types.YLeaf{"IofpgaBlockNm", iofpgaBlockNumber.IofpgaBlockNm})

    iofpgaBlockNumber.EntityData.YListKeys = []string {"IofpgaBlockNum"}

    return &(iofpgaBlockNumber.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber
type Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // The type is string.
    IofpgaRegisterName interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData.
    IofpgaData []*Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData
}

func (iofpgaRegisterNumber *Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber) GetEntityData() *types.CommonEntityData {
    iofpgaRegisterNumber.EntityData.YFilter = iofpgaRegisterNumber.YFilter
    iofpgaRegisterNumber.EntityData.YangName = "iofpga_register_number"
    iofpgaRegisterNumber.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegisterNumber.EntityData.ParentYangName = "iofpga_block_number"
    iofpgaRegisterNumber.EntityData.SegmentPath = "iofpga_register_number" + types.AddKeyToken(iofpgaRegisterNumber.Index, "index")
    iofpgaRegisterNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/cpu/register_location/iofpga_block_number/" + iofpgaRegisterNumber.EntityData.SegmentPath
    iofpgaRegisterNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegisterNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegisterNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegisterNumber.EntityData.Children = types.NewOrderedMap()
    iofpgaRegisterNumber.EntityData.Children.Append("iofpga_data", types.YChild{"IofpgaData", nil})
    for i := range iofpgaRegisterNumber.IofpgaData {
        types.SetYListKey(iofpgaRegisterNumber.IofpgaData[i], i)
        iofpgaRegisterNumber.EntityData.Children.Append(types.GetSegmentPath(iofpgaRegisterNumber.IofpgaData[i]), types.YChild{"IofpgaData", iofpgaRegisterNumber.IofpgaData[i]})
    }
    iofpgaRegisterNumber.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegisterNumber.EntityData.Leafs.Append("index", types.YLeaf{"Index", iofpgaRegisterNumber.Index})
    iofpgaRegisterNumber.EntityData.Leafs.Append("iofpga_register_name", types.YLeaf{"IofpgaRegisterName", iofpgaRegisterNumber.IofpgaRegisterName})

    iofpgaRegisterNumber.EntityData.YListKeys = []string {"Index"}

    return &(iofpgaRegisterNumber.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData
type Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string.
    Name interface{}

    // The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // The type is interface{} with range: 0..4294967295.
    Value interface{}
}

func (iofpgaData *Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData) GetEntityData() *types.CommonEntityData {
    iofpgaData.EntityData.YFilter = iofpgaData.YFilter
    iofpgaData.EntityData.YangName = "iofpga_data"
    iofpgaData.EntityData.BundleName = "cisco_ios_xr"
    iofpgaData.EntityData.ParentYangName = "iofpga_register_number"
    iofpgaData.EntityData.SegmentPath = "iofpga_data" + types.AddNoKeyToken(iofpgaData)
    iofpgaData.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/cpu/register_location/iofpga_block_number/iofpga_register_number/" + iofpgaData.EntityData.SegmentPath
    iofpgaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaData.EntityData.Children = types.NewOrderedMap()
    iofpgaData.EntityData.Leafs = types.NewOrderedMap()
    iofpgaData.EntityData.Leafs.Append("name", types.YLeaf{"Name", iofpgaData.Name})
    iofpgaData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", iofpgaData.Offset})
    iofpgaData.EntityData.Leafs.Append("value", types.YLeaf{"Value", iofpgaData.Value})

    iofpgaData.EntityData.YListKeys = []string {}

    return &(iofpgaData.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset
type Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    HexOffset interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData.
    IofpgaRegOffsetData []*Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData
}

func (iofpgaOffset *Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset) GetEntityData() *types.CommonEntityData {
    iofpgaOffset.EntityData.YFilter = iofpgaOffset.YFilter
    iofpgaOffset.EntityData.YangName = "iofpga_offset"
    iofpgaOffset.EntityData.BundleName = "cisco_ios_xr"
    iofpgaOffset.EntityData.ParentYangName = "register_location"
    iofpgaOffset.EntityData.SegmentPath = "iofpga_offset" + types.AddKeyToken(iofpgaOffset.HexOffset, "hex_offset")
    iofpgaOffset.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/cpu/register_location/" + iofpgaOffset.EntityData.SegmentPath
    iofpgaOffset.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaOffset.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaOffset.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaOffset.EntityData.Children = types.NewOrderedMap()
    iofpgaOffset.EntityData.Children.Append("iofpga_reg_offset_data", types.YChild{"IofpgaRegOffsetData", nil})
    for i := range iofpgaOffset.IofpgaRegOffsetData {
        types.SetYListKey(iofpgaOffset.IofpgaRegOffsetData[i], i)
        iofpgaOffset.EntityData.Children.Append(types.GetSegmentPath(iofpgaOffset.IofpgaRegOffsetData[i]), types.YChild{"IofpgaRegOffsetData", iofpgaOffset.IofpgaRegOffsetData[i]})
    }
    iofpgaOffset.EntityData.Leafs = types.NewOrderedMap()
    iofpgaOffset.EntityData.Leafs.Append("hex_offset", types.YLeaf{"HexOffset", iofpgaOffset.HexOffset})

    iofpgaOffset.EntityData.YListKeys = []string {"HexOffset"}

    return &(iofpgaOffset.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData
type Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    IofpgaRegOffAddr interface{}

    // The type is string.
    RegOffValue interface{}
}

func (iofpgaRegOffsetData *Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData) GetEntityData() *types.CommonEntityData {
    iofpgaRegOffsetData.EntityData.YFilter = iofpgaRegOffsetData.YFilter
    iofpgaRegOffsetData.EntityData.YangName = "iofpga_reg_offset_data"
    iofpgaRegOffsetData.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegOffsetData.EntityData.ParentYangName = "iofpga_offset"
    iofpgaRegOffsetData.EntityData.SegmentPath = "iofpga_reg_offset_data" + types.AddNoKeyToken(iofpgaRegOffsetData)
    iofpgaRegOffsetData.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/cpu/register_location/iofpga_offset/" + iofpgaRegOffsetData.EntityData.SegmentPath
    iofpgaRegOffsetData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegOffsetData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegOffsetData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegOffsetData.EntityData.Children = types.NewOrderedMap()
    iofpgaRegOffsetData.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegOffsetData.EntityData.Leafs.Append("iofpga_reg_off_addr", types.YLeaf{"IofpgaRegOffAddr", iofpgaRegOffsetData.IofpgaRegOffAddr})
    iofpgaRegOffsetData.EntityData.Leafs.Append("reg_off_value", types.YLeaf{"RegOffValue", iofpgaRegOffsetData.RegOffValue})

    iofpgaRegOffsetData.EntityData.YListKeys = []string {}

    return &(iofpgaRegOffsetData.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress
type Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    StartHexAddr interface{}

    // This attribute is a key. The type is string.
    EndHexAddr interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList.
    IofpgaRegRangeAddrList []*Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList
}

func (iofpgaAddress *Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress) GetEntityData() *types.CommonEntityData {
    iofpgaAddress.EntityData.YFilter = iofpgaAddress.YFilter
    iofpgaAddress.EntityData.YangName = "iofpga_address"
    iofpgaAddress.EntityData.BundleName = "cisco_ios_xr"
    iofpgaAddress.EntityData.ParentYangName = "register_location"
    iofpgaAddress.EntityData.SegmentPath = "iofpga_address" + types.AddKeyToken(iofpgaAddress.StartHexAddr, "start_hex_addr") + types.AddKeyToken(iofpgaAddress.EndHexAddr, "end_hex_addr")
    iofpgaAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/cpu/register_location/" + iofpgaAddress.EntityData.SegmentPath
    iofpgaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaAddress.EntityData.Children = types.NewOrderedMap()
    iofpgaAddress.EntityData.Children.Append("iofpga_reg_range_addr_list", types.YChild{"IofpgaRegRangeAddrList", nil})
    for i := range iofpgaAddress.IofpgaRegRangeAddrList {
        iofpgaAddress.EntityData.Children.Append(types.GetSegmentPath(iofpgaAddress.IofpgaRegRangeAddrList[i]), types.YChild{"IofpgaRegRangeAddrList", iofpgaAddress.IofpgaRegRangeAddrList[i]})
    }
    iofpgaAddress.EntityData.Leafs = types.NewOrderedMap()
    iofpgaAddress.EntityData.Leafs.Append("start_hex_addr", types.YLeaf{"StartHexAddr", iofpgaAddress.StartHexAddr})
    iofpgaAddress.EntityData.Leafs.Append("end_hex_addr", types.YLeaf{"EndHexAddr", iofpgaAddress.EndHexAddr})

    iofpgaAddress.EntityData.YListKeys = []string {"StartHexAddr", "EndHexAddr"}

    return &(iofpgaAddress.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList
type Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    IofpgaRegRangeAddr interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData.
    IofpgaRegData []*Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData
}

func (iofpgaRegRangeAddrList *Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList) GetEntityData() *types.CommonEntityData {
    iofpgaRegRangeAddrList.EntityData.YFilter = iofpgaRegRangeAddrList.YFilter
    iofpgaRegRangeAddrList.EntityData.YangName = "iofpga_reg_range_addr_list"
    iofpgaRegRangeAddrList.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegRangeAddrList.EntityData.ParentYangName = "iofpga_address"
    iofpgaRegRangeAddrList.EntityData.SegmentPath = "iofpga_reg_range_addr_list" + types.AddKeyToken(iofpgaRegRangeAddrList.IofpgaRegRangeAddr, "iofpga_reg_range_addr")
    iofpgaRegRangeAddrList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/cpu/register_location/iofpga_address/" + iofpgaRegRangeAddrList.EntityData.SegmentPath
    iofpgaRegRangeAddrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegRangeAddrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegRangeAddrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegRangeAddrList.EntityData.Children = types.NewOrderedMap()
    iofpgaRegRangeAddrList.EntityData.Children.Append("iofpga_reg_data", types.YChild{"IofpgaRegData", nil})
    for i := range iofpgaRegRangeAddrList.IofpgaRegData {
        types.SetYListKey(iofpgaRegRangeAddrList.IofpgaRegData[i], i)
        iofpgaRegRangeAddrList.EntityData.Children.Append(types.GetSegmentPath(iofpgaRegRangeAddrList.IofpgaRegData[i]), types.YChild{"IofpgaRegData", iofpgaRegRangeAddrList.IofpgaRegData[i]})
    }
    iofpgaRegRangeAddrList.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegRangeAddrList.EntityData.Leafs.Append("iofpga_reg_range_addr", types.YLeaf{"IofpgaRegRangeAddr", iofpgaRegRangeAddrList.IofpgaRegRangeAddr})

    iofpgaRegRangeAddrList.EntityData.YListKeys = []string {"IofpgaRegRangeAddr"}

    return &(iofpgaRegRangeAddrList.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData
type Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    IofpgaRegAddr interface{}

    // The type is string.
    RegValue interface{}
}

func (iofpgaRegData *Controller_CardMgr_Iofpga_Register_Cpu_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData) GetEntityData() *types.CommonEntityData {
    iofpgaRegData.EntityData.YFilter = iofpgaRegData.YFilter
    iofpgaRegData.EntityData.YangName = "iofpga_reg_data"
    iofpgaRegData.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegData.EntityData.ParentYangName = "iofpga_reg_range_addr_list"
    iofpgaRegData.EntityData.SegmentPath = "iofpga_reg_data" + types.AddNoKeyToken(iofpgaRegData)
    iofpgaRegData.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/cpu/register_location/iofpga_address/iofpga_reg_range_addr_list/" + iofpgaRegData.EntityData.SegmentPath
    iofpgaRegData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegData.EntityData.Children = types.NewOrderedMap()
    iofpgaRegData.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegData.EntityData.Leafs.Append("iofpga_reg_addr", types.YLeaf{"IofpgaRegAddr", iofpgaRegData.IofpgaRegAddr})
    iofpgaRegData.EntityData.Leafs.Append("reg_value", types.YLeaf{"RegValue", iofpgaRegData.RegValue})

    iofpgaRegData.EntityData.YListKeys = []string {}

    return &(iofpgaRegData.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb
type Controller_CardMgr_Iofpga_Register_Mb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation.
    RegisterLocation []*Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation
}

func (mb *Controller_CardMgr_Iofpga_Register_Mb) GetEntityData() *types.CommonEntityData {
    mb.EntityData.YFilter = mb.YFilter
    mb.EntityData.YangName = "mb"
    mb.EntityData.BundleName = "cisco_ios_xr"
    mb.EntityData.ParentYangName = "register"
    mb.EntityData.SegmentPath = "mb"
    mb.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/" + mb.EntityData.SegmentPath
    mb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mb.EntityData.Children = types.NewOrderedMap()
    mb.EntityData.Children.Append("register_location", types.YChild{"RegisterLocation", nil})
    for i := range mb.RegisterLocation {
        mb.EntityData.Children.Append(types.GetSegmentPath(mb.RegisterLocation[i]), types.YChild{"RegisterLocation", mb.RegisterLocation[i]})
    }
    mb.EntityData.Leafs = types.NewOrderedMap()

    mb.EntityData.YListKeys = []string {}

    return &(mb.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation
type Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    RegisterLocation interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber.
    IofpgaBlockNumber []*Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset.
    IofpgaOffset []*Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress.
    IofpgaAddress []*Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress
}

func (registerLocation *Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation) GetEntityData() *types.CommonEntityData {
    registerLocation.EntityData.YFilter = registerLocation.YFilter
    registerLocation.EntityData.YangName = "register_location"
    registerLocation.EntityData.BundleName = "cisco_ios_xr"
    registerLocation.EntityData.ParentYangName = "mb"
    registerLocation.EntityData.SegmentPath = "register_location" + types.AddKeyToken(registerLocation.RegisterLocation, "register_location")
    registerLocation.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/mb/" + registerLocation.EntityData.SegmentPath
    registerLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerLocation.EntityData.Children = types.NewOrderedMap()
    registerLocation.EntityData.Children.Append("iofpga_block_number", types.YChild{"IofpgaBlockNumber", nil})
    for i := range registerLocation.IofpgaBlockNumber {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.IofpgaBlockNumber[i]), types.YChild{"IofpgaBlockNumber", registerLocation.IofpgaBlockNumber[i]})
    }
    registerLocation.EntityData.Children.Append("iofpga_offset", types.YChild{"IofpgaOffset", nil})
    for i := range registerLocation.IofpgaOffset {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.IofpgaOffset[i]), types.YChild{"IofpgaOffset", registerLocation.IofpgaOffset[i]})
    }
    registerLocation.EntityData.Children.Append("iofpga_address", types.YChild{"IofpgaAddress", nil})
    for i := range registerLocation.IofpgaAddress {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.IofpgaAddress[i]), types.YChild{"IofpgaAddress", registerLocation.IofpgaAddress[i]})
    }
    registerLocation.EntityData.Leafs = types.NewOrderedMap()
    registerLocation.EntityData.Leafs.Append("register_location", types.YLeaf{"RegisterLocation", registerLocation.RegisterLocation})

    registerLocation.EntityData.YListKeys = []string {"RegisterLocation"}

    return &(registerLocation.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber
type Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    IofpgaBlockNum interface{}

    // The type is string.
    BlockLocation interface{}

    // The type is string.
    IofpgaBlockNm interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber.
    IofpgaRegisterNumber []*Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber
}

func (iofpgaBlockNumber *Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber) GetEntityData() *types.CommonEntityData {
    iofpgaBlockNumber.EntityData.YFilter = iofpgaBlockNumber.YFilter
    iofpgaBlockNumber.EntityData.YangName = "iofpga_block_number"
    iofpgaBlockNumber.EntityData.BundleName = "cisco_ios_xr"
    iofpgaBlockNumber.EntityData.ParentYangName = "register_location"
    iofpgaBlockNumber.EntityData.SegmentPath = "iofpga_block_number" + types.AddKeyToken(iofpgaBlockNumber.IofpgaBlockNum, "iofpga_block_num")
    iofpgaBlockNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/mb/register_location/" + iofpgaBlockNumber.EntityData.SegmentPath
    iofpgaBlockNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaBlockNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaBlockNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaBlockNumber.EntityData.Children = types.NewOrderedMap()
    iofpgaBlockNumber.EntityData.Children.Append("iofpga_register_number", types.YChild{"IofpgaRegisterNumber", nil})
    for i := range iofpgaBlockNumber.IofpgaRegisterNumber {
        iofpgaBlockNumber.EntityData.Children.Append(types.GetSegmentPath(iofpgaBlockNumber.IofpgaRegisterNumber[i]), types.YChild{"IofpgaRegisterNumber", iofpgaBlockNumber.IofpgaRegisterNumber[i]})
    }
    iofpgaBlockNumber.EntityData.Leafs = types.NewOrderedMap()
    iofpgaBlockNumber.EntityData.Leafs.Append("iofpga_block_num", types.YLeaf{"IofpgaBlockNum", iofpgaBlockNumber.IofpgaBlockNum})
    iofpgaBlockNumber.EntityData.Leafs.Append("block_location", types.YLeaf{"BlockLocation", iofpgaBlockNumber.BlockLocation})
    iofpgaBlockNumber.EntityData.Leafs.Append("iofpga_block_nm", types.YLeaf{"IofpgaBlockNm", iofpgaBlockNumber.IofpgaBlockNm})

    iofpgaBlockNumber.EntityData.YListKeys = []string {"IofpgaBlockNum"}

    return &(iofpgaBlockNumber.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber
type Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // The type is string.
    IofpgaRegisterName interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData.
    IofpgaData []*Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData
}

func (iofpgaRegisterNumber *Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber) GetEntityData() *types.CommonEntityData {
    iofpgaRegisterNumber.EntityData.YFilter = iofpgaRegisterNumber.YFilter
    iofpgaRegisterNumber.EntityData.YangName = "iofpga_register_number"
    iofpgaRegisterNumber.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegisterNumber.EntityData.ParentYangName = "iofpga_block_number"
    iofpgaRegisterNumber.EntityData.SegmentPath = "iofpga_register_number" + types.AddKeyToken(iofpgaRegisterNumber.Index, "index")
    iofpgaRegisterNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/mb/register_location/iofpga_block_number/" + iofpgaRegisterNumber.EntityData.SegmentPath
    iofpgaRegisterNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegisterNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegisterNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegisterNumber.EntityData.Children = types.NewOrderedMap()
    iofpgaRegisterNumber.EntityData.Children.Append("iofpga_data", types.YChild{"IofpgaData", nil})
    for i := range iofpgaRegisterNumber.IofpgaData {
        types.SetYListKey(iofpgaRegisterNumber.IofpgaData[i], i)
        iofpgaRegisterNumber.EntityData.Children.Append(types.GetSegmentPath(iofpgaRegisterNumber.IofpgaData[i]), types.YChild{"IofpgaData", iofpgaRegisterNumber.IofpgaData[i]})
    }
    iofpgaRegisterNumber.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegisterNumber.EntityData.Leafs.Append("index", types.YLeaf{"Index", iofpgaRegisterNumber.Index})
    iofpgaRegisterNumber.EntityData.Leafs.Append("iofpga_register_name", types.YLeaf{"IofpgaRegisterName", iofpgaRegisterNumber.IofpgaRegisterName})

    iofpgaRegisterNumber.EntityData.YListKeys = []string {"Index"}

    return &(iofpgaRegisterNumber.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData
type Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string.
    Name interface{}

    // The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // The type is interface{} with range: 0..4294967295.
    Value interface{}
}

func (iofpgaData *Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData) GetEntityData() *types.CommonEntityData {
    iofpgaData.EntityData.YFilter = iofpgaData.YFilter
    iofpgaData.EntityData.YangName = "iofpga_data"
    iofpgaData.EntityData.BundleName = "cisco_ios_xr"
    iofpgaData.EntityData.ParentYangName = "iofpga_register_number"
    iofpgaData.EntityData.SegmentPath = "iofpga_data" + types.AddNoKeyToken(iofpgaData)
    iofpgaData.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/mb/register_location/iofpga_block_number/iofpga_register_number/" + iofpgaData.EntityData.SegmentPath
    iofpgaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaData.EntityData.Children = types.NewOrderedMap()
    iofpgaData.EntityData.Leafs = types.NewOrderedMap()
    iofpgaData.EntityData.Leafs.Append("name", types.YLeaf{"Name", iofpgaData.Name})
    iofpgaData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", iofpgaData.Offset})
    iofpgaData.EntityData.Leafs.Append("value", types.YLeaf{"Value", iofpgaData.Value})

    iofpgaData.EntityData.YListKeys = []string {}

    return &(iofpgaData.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset
type Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    HexOffset interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData.
    IofpgaRegOffsetData []*Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData
}

func (iofpgaOffset *Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset) GetEntityData() *types.CommonEntityData {
    iofpgaOffset.EntityData.YFilter = iofpgaOffset.YFilter
    iofpgaOffset.EntityData.YangName = "iofpga_offset"
    iofpgaOffset.EntityData.BundleName = "cisco_ios_xr"
    iofpgaOffset.EntityData.ParentYangName = "register_location"
    iofpgaOffset.EntityData.SegmentPath = "iofpga_offset" + types.AddKeyToken(iofpgaOffset.HexOffset, "hex_offset")
    iofpgaOffset.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/mb/register_location/" + iofpgaOffset.EntityData.SegmentPath
    iofpgaOffset.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaOffset.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaOffset.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaOffset.EntityData.Children = types.NewOrderedMap()
    iofpgaOffset.EntityData.Children.Append("iofpga_reg_offset_data", types.YChild{"IofpgaRegOffsetData", nil})
    for i := range iofpgaOffset.IofpgaRegOffsetData {
        types.SetYListKey(iofpgaOffset.IofpgaRegOffsetData[i], i)
        iofpgaOffset.EntityData.Children.Append(types.GetSegmentPath(iofpgaOffset.IofpgaRegOffsetData[i]), types.YChild{"IofpgaRegOffsetData", iofpgaOffset.IofpgaRegOffsetData[i]})
    }
    iofpgaOffset.EntityData.Leafs = types.NewOrderedMap()
    iofpgaOffset.EntityData.Leafs.Append("hex_offset", types.YLeaf{"HexOffset", iofpgaOffset.HexOffset})

    iofpgaOffset.EntityData.YListKeys = []string {"HexOffset"}

    return &(iofpgaOffset.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData
type Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    IofpgaRegOffAddr interface{}

    // The type is string.
    RegOffValue interface{}
}

func (iofpgaRegOffsetData *Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData) GetEntityData() *types.CommonEntityData {
    iofpgaRegOffsetData.EntityData.YFilter = iofpgaRegOffsetData.YFilter
    iofpgaRegOffsetData.EntityData.YangName = "iofpga_reg_offset_data"
    iofpgaRegOffsetData.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegOffsetData.EntityData.ParentYangName = "iofpga_offset"
    iofpgaRegOffsetData.EntityData.SegmentPath = "iofpga_reg_offset_data" + types.AddNoKeyToken(iofpgaRegOffsetData)
    iofpgaRegOffsetData.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/mb/register_location/iofpga_offset/" + iofpgaRegOffsetData.EntityData.SegmentPath
    iofpgaRegOffsetData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegOffsetData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegOffsetData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegOffsetData.EntityData.Children = types.NewOrderedMap()
    iofpgaRegOffsetData.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegOffsetData.EntityData.Leafs.Append("iofpga_reg_off_addr", types.YLeaf{"IofpgaRegOffAddr", iofpgaRegOffsetData.IofpgaRegOffAddr})
    iofpgaRegOffsetData.EntityData.Leafs.Append("reg_off_value", types.YLeaf{"RegOffValue", iofpgaRegOffsetData.RegOffValue})

    iofpgaRegOffsetData.EntityData.YListKeys = []string {}

    return &(iofpgaRegOffsetData.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress
type Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    StartHexAddr interface{}

    // This attribute is a key. The type is string.
    EndHexAddr interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList.
    IofpgaRegRangeAddrList []*Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList
}

func (iofpgaAddress *Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress) GetEntityData() *types.CommonEntityData {
    iofpgaAddress.EntityData.YFilter = iofpgaAddress.YFilter
    iofpgaAddress.EntityData.YangName = "iofpga_address"
    iofpgaAddress.EntityData.BundleName = "cisco_ios_xr"
    iofpgaAddress.EntityData.ParentYangName = "register_location"
    iofpgaAddress.EntityData.SegmentPath = "iofpga_address" + types.AddKeyToken(iofpgaAddress.StartHexAddr, "start_hex_addr") + types.AddKeyToken(iofpgaAddress.EndHexAddr, "end_hex_addr")
    iofpgaAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/mb/register_location/" + iofpgaAddress.EntityData.SegmentPath
    iofpgaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaAddress.EntityData.Children = types.NewOrderedMap()
    iofpgaAddress.EntityData.Children.Append("iofpga_reg_range_addr_list", types.YChild{"IofpgaRegRangeAddrList", nil})
    for i := range iofpgaAddress.IofpgaRegRangeAddrList {
        iofpgaAddress.EntityData.Children.Append(types.GetSegmentPath(iofpgaAddress.IofpgaRegRangeAddrList[i]), types.YChild{"IofpgaRegRangeAddrList", iofpgaAddress.IofpgaRegRangeAddrList[i]})
    }
    iofpgaAddress.EntityData.Leafs = types.NewOrderedMap()
    iofpgaAddress.EntityData.Leafs.Append("start_hex_addr", types.YLeaf{"StartHexAddr", iofpgaAddress.StartHexAddr})
    iofpgaAddress.EntityData.Leafs.Append("end_hex_addr", types.YLeaf{"EndHexAddr", iofpgaAddress.EndHexAddr})

    iofpgaAddress.EntityData.YListKeys = []string {"StartHexAddr", "EndHexAddr"}

    return &(iofpgaAddress.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList
type Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    IofpgaRegRangeAddr interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData.
    IofpgaRegData []*Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData
}

func (iofpgaRegRangeAddrList *Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList) GetEntityData() *types.CommonEntityData {
    iofpgaRegRangeAddrList.EntityData.YFilter = iofpgaRegRangeAddrList.YFilter
    iofpgaRegRangeAddrList.EntityData.YangName = "iofpga_reg_range_addr_list"
    iofpgaRegRangeAddrList.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegRangeAddrList.EntityData.ParentYangName = "iofpga_address"
    iofpgaRegRangeAddrList.EntityData.SegmentPath = "iofpga_reg_range_addr_list" + types.AddKeyToken(iofpgaRegRangeAddrList.IofpgaRegRangeAddr, "iofpga_reg_range_addr")
    iofpgaRegRangeAddrList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/mb/register_location/iofpga_address/" + iofpgaRegRangeAddrList.EntityData.SegmentPath
    iofpgaRegRangeAddrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegRangeAddrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegRangeAddrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegRangeAddrList.EntityData.Children = types.NewOrderedMap()
    iofpgaRegRangeAddrList.EntityData.Children.Append("iofpga_reg_data", types.YChild{"IofpgaRegData", nil})
    for i := range iofpgaRegRangeAddrList.IofpgaRegData {
        types.SetYListKey(iofpgaRegRangeAddrList.IofpgaRegData[i], i)
        iofpgaRegRangeAddrList.EntityData.Children.Append(types.GetSegmentPath(iofpgaRegRangeAddrList.IofpgaRegData[i]), types.YChild{"IofpgaRegData", iofpgaRegRangeAddrList.IofpgaRegData[i]})
    }
    iofpgaRegRangeAddrList.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegRangeAddrList.EntityData.Leafs.Append("iofpga_reg_range_addr", types.YLeaf{"IofpgaRegRangeAddr", iofpgaRegRangeAddrList.IofpgaRegRangeAddr})

    iofpgaRegRangeAddrList.EntityData.YListKeys = []string {"IofpgaRegRangeAddr"}

    return &(iofpgaRegRangeAddrList.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData
type Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    IofpgaRegAddr interface{}

    // The type is string.
    RegValue interface{}
}

func (iofpgaRegData *Controller_CardMgr_Iofpga_Register_Mb_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData) GetEntityData() *types.CommonEntityData {
    iofpgaRegData.EntityData.YFilter = iofpgaRegData.YFilter
    iofpgaRegData.EntityData.YangName = "iofpga_reg_data"
    iofpgaRegData.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegData.EntityData.ParentYangName = "iofpga_reg_range_addr_list"
    iofpgaRegData.EntityData.SegmentPath = "iofpga_reg_data" + types.AddNoKeyToken(iofpgaRegData)
    iofpgaRegData.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/mb/register_location/iofpga_address/iofpga_reg_range_addr_list/" + iofpgaRegData.EntityData.SegmentPath
    iofpgaRegData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegData.EntityData.Children = types.NewOrderedMap()
    iofpgaRegData.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegData.EntityData.Leafs.Append("iofpga_reg_addr", types.YLeaf{"IofpgaRegAddr", iofpgaRegData.IofpgaRegAddr})
    iofpgaRegData.EntityData.Leafs.Append("reg_value", types.YLeaf{"RegValue", iofpgaRegData.RegValue})

    iofpgaRegData.EntityData.YListKeys = []string {}

    return &(iofpgaRegData.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc
type Controller_CardMgr_Iofpga_Register_Dc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation.
    RegisterLocation []*Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation
}

func (dc *Controller_CardMgr_Iofpga_Register_Dc) GetEntityData() *types.CommonEntityData {
    dc.EntityData.YFilter = dc.YFilter
    dc.EntityData.YangName = "dc"
    dc.EntityData.BundleName = "cisco_ios_xr"
    dc.EntityData.ParentYangName = "register"
    dc.EntityData.SegmentPath = "dc"
    dc.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/" + dc.EntityData.SegmentPath
    dc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dc.EntityData.Children = types.NewOrderedMap()
    dc.EntityData.Children.Append("register_location", types.YChild{"RegisterLocation", nil})
    for i := range dc.RegisterLocation {
        dc.EntityData.Children.Append(types.GetSegmentPath(dc.RegisterLocation[i]), types.YChild{"RegisterLocation", dc.RegisterLocation[i]})
    }
    dc.EntityData.Leafs = types.NewOrderedMap()

    dc.EntityData.YListKeys = []string {}

    return &(dc.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation
type Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    RegisterLocation interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber.
    IofpgaBlockNumber []*Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset.
    IofpgaOffset []*Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress.
    IofpgaAddress []*Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress
}

func (registerLocation *Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation) GetEntityData() *types.CommonEntityData {
    registerLocation.EntityData.YFilter = registerLocation.YFilter
    registerLocation.EntityData.YangName = "register_location"
    registerLocation.EntityData.BundleName = "cisco_ios_xr"
    registerLocation.EntityData.ParentYangName = "dc"
    registerLocation.EntityData.SegmentPath = "register_location" + types.AddKeyToken(registerLocation.RegisterLocation, "register_location")
    registerLocation.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/dc/" + registerLocation.EntityData.SegmentPath
    registerLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerLocation.EntityData.Children = types.NewOrderedMap()
    registerLocation.EntityData.Children.Append("iofpga_block_number", types.YChild{"IofpgaBlockNumber", nil})
    for i := range registerLocation.IofpgaBlockNumber {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.IofpgaBlockNumber[i]), types.YChild{"IofpgaBlockNumber", registerLocation.IofpgaBlockNumber[i]})
    }
    registerLocation.EntityData.Children.Append("iofpga_offset", types.YChild{"IofpgaOffset", nil})
    for i := range registerLocation.IofpgaOffset {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.IofpgaOffset[i]), types.YChild{"IofpgaOffset", registerLocation.IofpgaOffset[i]})
    }
    registerLocation.EntityData.Children.Append("iofpga_address", types.YChild{"IofpgaAddress", nil})
    for i := range registerLocation.IofpgaAddress {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.IofpgaAddress[i]), types.YChild{"IofpgaAddress", registerLocation.IofpgaAddress[i]})
    }
    registerLocation.EntityData.Leafs = types.NewOrderedMap()
    registerLocation.EntityData.Leafs.Append("register_location", types.YLeaf{"RegisterLocation", registerLocation.RegisterLocation})

    registerLocation.EntityData.YListKeys = []string {"RegisterLocation"}

    return &(registerLocation.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber
type Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    IofpgaBlockNum interface{}

    // The type is string.
    BlockLocation interface{}

    // The type is string.
    IofpgaBlockNm interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber.
    IofpgaRegisterNumber []*Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber
}

func (iofpgaBlockNumber *Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber) GetEntityData() *types.CommonEntityData {
    iofpgaBlockNumber.EntityData.YFilter = iofpgaBlockNumber.YFilter
    iofpgaBlockNumber.EntityData.YangName = "iofpga_block_number"
    iofpgaBlockNumber.EntityData.BundleName = "cisco_ios_xr"
    iofpgaBlockNumber.EntityData.ParentYangName = "register_location"
    iofpgaBlockNumber.EntityData.SegmentPath = "iofpga_block_number" + types.AddKeyToken(iofpgaBlockNumber.IofpgaBlockNum, "iofpga_block_num")
    iofpgaBlockNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/dc/register_location/" + iofpgaBlockNumber.EntityData.SegmentPath
    iofpgaBlockNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaBlockNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaBlockNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaBlockNumber.EntityData.Children = types.NewOrderedMap()
    iofpgaBlockNumber.EntityData.Children.Append("iofpga_register_number", types.YChild{"IofpgaRegisterNumber", nil})
    for i := range iofpgaBlockNumber.IofpgaRegisterNumber {
        iofpgaBlockNumber.EntityData.Children.Append(types.GetSegmentPath(iofpgaBlockNumber.IofpgaRegisterNumber[i]), types.YChild{"IofpgaRegisterNumber", iofpgaBlockNumber.IofpgaRegisterNumber[i]})
    }
    iofpgaBlockNumber.EntityData.Leafs = types.NewOrderedMap()
    iofpgaBlockNumber.EntityData.Leafs.Append("iofpga_block_num", types.YLeaf{"IofpgaBlockNum", iofpgaBlockNumber.IofpgaBlockNum})
    iofpgaBlockNumber.EntityData.Leafs.Append("block_location", types.YLeaf{"BlockLocation", iofpgaBlockNumber.BlockLocation})
    iofpgaBlockNumber.EntityData.Leafs.Append("iofpga_block_nm", types.YLeaf{"IofpgaBlockNm", iofpgaBlockNumber.IofpgaBlockNm})

    iofpgaBlockNumber.EntityData.YListKeys = []string {"IofpgaBlockNum"}

    return &(iofpgaBlockNumber.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber
type Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // The type is string.
    IofpgaRegisterName interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData.
    IofpgaData []*Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData
}

func (iofpgaRegisterNumber *Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber) GetEntityData() *types.CommonEntityData {
    iofpgaRegisterNumber.EntityData.YFilter = iofpgaRegisterNumber.YFilter
    iofpgaRegisterNumber.EntityData.YangName = "iofpga_register_number"
    iofpgaRegisterNumber.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegisterNumber.EntityData.ParentYangName = "iofpga_block_number"
    iofpgaRegisterNumber.EntityData.SegmentPath = "iofpga_register_number" + types.AddKeyToken(iofpgaRegisterNumber.Index, "index")
    iofpgaRegisterNumber.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/dc/register_location/iofpga_block_number/" + iofpgaRegisterNumber.EntityData.SegmentPath
    iofpgaRegisterNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegisterNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegisterNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegisterNumber.EntityData.Children = types.NewOrderedMap()
    iofpgaRegisterNumber.EntityData.Children.Append("iofpga_data", types.YChild{"IofpgaData", nil})
    for i := range iofpgaRegisterNumber.IofpgaData {
        types.SetYListKey(iofpgaRegisterNumber.IofpgaData[i], i)
        iofpgaRegisterNumber.EntityData.Children.Append(types.GetSegmentPath(iofpgaRegisterNumber.IofpgaData[i]), types.YChild{"IofpgaData", iofpgaRegisterNumber.IofpgaData[i]})
    }
    iofpgaRegisterNumber.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegisterNumber.EntityData.Leafs.Append("index", types.YLeaf{"Index", iofpgaRegisterNumber.Index})
    iofpgaRegisterNumber.EntityData.Leafs.Append("iofpga_register_name", types.YLeaf{"IofpgaRegisterName", iofpgaRegisterNumber.IofpgaRegisterName})

    iofpgaRegisterNumber.EntityData.YListKeys = []string {"Index"}

    return &(iofpgaRegisterNumber.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData
type Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string.
    Name interface{}

    // The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // The type is interface{} with range: 0..4294967295.
    Value interface{}
}

func (iofpgaData *Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaBlockNumber_IofpgaRegisterNumber_IofpgaData) GetEntityData() *types.CommonEntityData {
    iofpgaData.EntityData.YFilter = iofpgaData.YFilter
    iofpgaData.EntityData.YangName = "iofpga_data"
    iofpgaData.EntityData.BundleName = "cisco_ios_xr"
    iofpgaData.EntityData.ParentYangName = "iofpga_register_number"
    iofpgaData.EntityData.SegmentPath = "iofpga_data" + types.AddNoKeyToken(iofpgaData)
    iofpgaData.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/dc/register_location/iofpga_block_number/iofpga_register_number/" + iofpgaData.EntityData.SegmentPath
    iofpgaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaData.EntityData.Children = types.NewOrderedMap()
    iofpgaData.EntityData.Leafs = types.NewOrderedMap()
    iofpgaData.EntityData.Leafs.Append("name", types.YLeaf{"Name", iofpgaData.Name})
    iofpgaData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", iofpgaData.Offset})
    iofpgaData.EntityData.Leafs.Append("value", types.YLeaf{"Value", iofpgaData.Value})

    iofpgaData.EntityData.YListKeys = []string {}

    return &(iofpgaData.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset
type Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    HexOffset interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData.
    IofpgaRegOffsetData []*Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData
}

func (iofpgaOffset *Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset) GetEntityData() *types.CommonEntityData {
    iofpgaOffset.EntityData.YFilter = iofpgaOffset.YFilter
    iofpgaOffset.EntityData.YangName = "iofpga_offset"
    iofpgaOffset.EntityData.BundleName = "cisco_ios_xr"
    iofpgaOffset.EntityData.ParentYangName = "register_location"
    iofpgaOffset.EntityData.SegmentPath = "iofpga_offset" + types.AddKeyToken(iofpgaOffset.HexOffset, "hex_offset")
    iofpgaOffset.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/dc/register_location/" + iofpgaOffset.EntityData.SegmentPath
    iofpgaOffset.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaOffset.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaOffset.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaOffset.EntityData.Children = types.NewOrderedMap()
    iofpgaOffset.EntityData.Children.Append("iofpga_reg_offset_data", types.YChild{"IofpgaRegOffsetData", nil})
    for i := range iofpgaOffset.IofpgaRegOffsetData {
        types.SetYListKey(iofpgaOffset.IofpgaRegOffsetData[i], i)
        iofpgaOffset.EntityData.Children.Append(types.GetSegmentPath(iofpgaOffset.IofpgaRegOffsetData[i]), types.YChild{"IofpgaRegOffsetData", iofpgaOffset.IofpgaRegOffsetData[i]})
    }
    iofpgaOffset.EntityData.Leafs = types.NewOrderedMap()
    iofpgaOffset.EntityData.Leafs.Append("hex_offset", types.YLeaf{"HexOffset", iofpgaOffset.HexOffset})

    iofpgaOffset.EntityData.YListKeys = []string {"HexOffset"}

    return &(iofpgaOffset.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData
type Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    IofpgaRegOffAddr interface{}

    // The type is string.
    RegOffValue interface{}
}

func (iofpgaRegOffsetData *Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaOffset_IofpgaRegOffsetData) GetEntityData() *types.CommonEntityData {
    iofpgaRegOffsetData.EntityData.YFilter = iofpgaRegOffsetData.YFilter
    iofpgaRegOffsetData.EntityData.YangName = "iofpga_reg_offset_data"
    iofpgaRegOffsetData.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegOffsetData.EntityData.ParentYangName = "iofpga_offset"
    iofpgaRegOffsetData.EntityData.SegmentPath = "iofpga_reg_offset_data" + types.AddNoKeyToken(iofpgaRegOffsetData)
    iofpgaRegOffsetData.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/dc/register_location/iofpga_offset/" + iofpgaRegOffsetData.EntityData.SegmentPath
    iofpgaRegOffsetData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegOffsetData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegOffsetData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegOffsetData.EntityData.Children = types.NewOrderedMap()
    iofpgaRegOffsetData.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegOffsetData.EntityData.Leafs.Append("iofpga_reg_off_addr", types.YLeaf{"IofpgaRegOffAddr", iofpgaRegOffsetData.IofpgaRegOffAddr})
    iofpgaRegOffsetData.EntityData.Leafs.Append("reg_off_value", types.YLeaf{"RegOffValue", iofpgaRegOffsetData.RegOffValue})

    iofpgaRegOffsetData.EntityData.YListKeys = []string {}

    return &(iofpgaRegOffsetData.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress
type Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string.
    StartHexAddr interface{}

    // This attribute is a key. The type is string.
    EndHexAddr interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList.
    IofpgaRegRangeAddrList []*Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList
}

func (iofpgaAddress *Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress) GetEntityData() *types.CommonEntityData {
    iofpgaAddress.EntityData.YFilter = iofpgaAddress.YFilter
    iofpgaAddress.EntityData.YangName = "iofpga_address"
    iofpgaAddress.EntityData.BundleName = "cisco_ios_xr"
    iofpgaAddress.EntityData.ParentYangName = "register_location"
    iofpgaAddress.EntityData.SegmentPath = "iofpga_address" + types.AddKeyToken(iofpgaAddress.StartHexAddr, "start_hex_addr") + types.AddKeyToken(iofpgaAddress.EndHexAddr, "end_hex_addr")
    iofpgaAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/dc/register_location/" + iofpgaAddress.EntityData.SegmentPath
    iofpgaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaAddress.EntityData.Children = types.NewOrderedMap()
    iofpgaAddress.EntityData.Children.Append("iofpga_reg_range_addr_list", types.YChild{"IofpgaRegRangeAddrList", nil})
    for i := range iofpgaAddress.IofpgaRegRangeAddrList {
        iofpgaAddress.EntityData.Children.Append(types.GetSegmentPath(iofpgaAddress.IofpgaRegRangeAddrList[i]), types.YChild{"IofpgaRegRangeAddrList", iofpgaAddress.IofpgaRegRangeAddrList[i]})
    }
    iofpgaAddress.EntityData.Leafs = types.NewOrderedMap()
    iofpgaAddress.EntityData.Leafs.Append("start_hex_addr", types.YLeaf{"StartHexAddr", iofpgaAddress.StartHexAddr})
    iofpgaAddress.EntityData.Leafs.Append("end_hex_addr", types.YLeaf{"EndHexAddr", iofpgaAddress.EndHexAddr})

    iofpgaAddress.EntityData.YListKeys = []string {"StartHexAddr", "EndHexAddr"}

    return &(iofpgaAddress.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList
type Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    IofpgaRegRangeAddr interface{}

    // The type is slice of
    // Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData.
    IofpgaRegData []*Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData
}

func (iofpgaRegRangeAddrList *Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList) GetEntityData() *types.CommonEntityData {
    iofpgaRegRangeAddrList.EntityData.YFilter = iofpgaRegRangeAddrList.YFilter
    iofpgaRegRangeAddrList.EntityData.YangName = "iofpga_reg_range_addr_list"
    iofpgaRegRangeAddrList.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegRangeAddrList.EntityData.ParentYangName = "iofpga_address"
    iofpgaRegRangeAddrList.EntityData.SegmentPath = "iofpga_reg_range_addr_list" + types.AddKeyToken(iofpgaRegRangeAddrList.IofpgaRegRangeAddr, "iofpga_reg_range_addr")
    iofpgaRegRangeAddrList.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/dc/register_location/iofpga_address/" + iofpgaRegRangeAddrList.EntityData.SegmentPath
    iofpgaRegRangeAddrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegRangeAddrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegRangeAddrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegRangeAddrList.EntityData.Children = types.NewOrderedMap()
    iofpgaRegRangeAddrList.EntityData.Children.Append("iofpga_reg_data", types.YChild{"IofpgaRegData", nil})
    for i := range iofpgaRegRangeAddrList.IofpgaRegData {
        types.SetYListKey(iofpgaRegRangeAddrList.IofpgaRegData[i], i)
        iofpgaRegRangeAddrList.EntityData.Children.Append(types.GetSegmentPath(iofpgaRegRangeAddrList.IofpgaRegData[i]), types.YChild{"IofpgaRegData", iofpgaRegRangeAddrList.IofpgaRegData[i]})
    }
    iofpgaRegRangeAddrList.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegRangeAddrList.EntityData.Leafs.Append("iofpga_reg_range_addr", types.YLeaf{"IofpgaRegRangeAddr", iofpgaRegRangeAddrList.IofpgaRegRangeAddr})

    iofpgaRegRangeAddrList.EntityData.YListKeys = []string {"IofpgaRegRangeAddr"}

    return &(iofpgaRegRangeAddrList.EntityData)
}

// Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData
type Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    IofpgaRegAddr interface{}

    // The type is string.
    RegValue interface{}
}

func (iofpgaRegData *Controller_CardMgr_Iofpga_Register_Dc_RegisterLocation_IofpgaAddress_IofpgaRegRangeAddrList_IofpgaRegData) GetEntityData() *types.CommonEntityData {
    iofpgaRegData.EntityData.YFilter = iofpgaRegData.YFilter
    iofpgaRegData.EntityData.YangName = "iofpga_reg_data"
    iofpgaRegData.EntityData.BundleName = "cisco_ios_xr"
    iofpgaRegData.EntityData.ParentYangName = "iofpga_reg_range_addr_list"
    iofpgaRegData.EntityData.SegmentPath = "iofpga_reg_data" + types.AddNoKeyToken(iofpgaRegData)
    iofpgaRegData.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/register/dc/register_location/iofpga_address/iofpga_reg_range_addr_list/" + iofpgaRegData.EntityData.SegmentPath
    iofpgaRegData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaRegData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaRegData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaRegData.EntityData.Children = types.NewOrderedMap()
    iofpgaRegData.EntityData.Leafs = types.NewOrderedMap()
    iofpgaRegData.EntityData.Leafs.Append("iofpga_reg_addr", types.YLeaf{"IofpgaRegAddr", iofpgaRegData.IofpgaRegAddr})
    iofpgaRegData.EntityData.Leafs.Append("reg_value", types.YLeaf{"RegValue", iofpgaRegData.RegValue})

    iofpgaRegData.EntityData.YListKeys = []string {}

    return &(iofpgaRegData.EntityData)
}

// Controller_CardMgr_Iofpga_Flash
type Controller_CardMgr_Iofpga_Flash struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Info Controller_CardMgr_Iofpga_Flash_Info

    
    Status Controller_CardMgr_Iofpga_Flash_Status
}

func (flash *Controller_CardMgr_Iofpga_Flash) GetEntityData() *types.CommonEntityData {
    flash.EntityData.YFilter = flash.YFilter
    flash.EntityData.YangName = "flash"
    flash.EntityData.BundleName = "cisco_ios_xr"
    flash.EntityData.ParentYangName = "iofpga"
    flash.EntityData.SegmentPath = "flash"
    flash.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/" + flash.EntityData.SegmentPath
    flash.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flash.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flash.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flash.EntityData.Children = types.NewOrderedMap()
    flash.EntityData.Children.Append("info", types.YChild{"Info", &flash.Info})
    flash.EntityData.Children.Append("status", types.YChild{"Status", &flash.Status})
    flash.EntityData.Leafs = types.NewOrderedMap()

    flash.EntityData.YListKeys = []string {}

    return &(flash.EntityData)
}

// Controller_CardMgr_Iofpga_Flash_Info
type Controller_CardMgr_Iofpga_Flash_Info struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CardMgr_Iofpga_Flash_Info_FlashLocation.
    FlashLocation []*Controller_CardMgr_Iofpga_Flash_Info_FlashLocation
}

func (info *Controller_CardMgr_Iofpga_Flash_Info) GetEntityData() *types.CommonEntityData {
    info.EntityData.YFilter = info.YFilter
    info.EntityData.YangName = "info"
    info.EntityData.BundleName = "cisco_ios_xr"
    info.EntityData.ParentYangName = "flash"
    info.EntityData.SegmentPath = "info"
    info.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/flash/" + info.EntityData.SegmentPath
    info.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    info.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    info.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    info.EntityData.Children = types.NewOrderedMap()
    info.EntityData.Children.Append("flash_location", types.YChild{"FlashLocation", nil})
    for i := range info.FlashLocation {
        info.EntityData.Children.Append(types.GetSegmentPath(info.FlashLocation[i]), types.YChild{"FlashLocation", info.FlashLocation[i]})
    }
    info.EntityData.Leafs = types.NewOrderedMap()

    info.EntityData.YListKeys = []string {}

    return &(info.EntityData)
}

// Controller_CardMgr_Iofpga_Flash_Info_FlashLocation
type Controller_CardMgr_Iofpga_Flash_Info_FlashLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FlashLocation interface{}

    
    IofpgaFlashInfo Controller_CardMgr_Iofpga_Flash_Info_FlashLocation_IofpgaFlashInfo
}

func (flashLocation *Controller_CardMgr_Iofpga_Flash_Info_FlashLocation) GetEntityData() *types.CommonEntityData {
    flashLocation.EntityData.YFilter = flashLocation.YFilter
    flashLocation.EntityData.YangName = "flash_location"
    flashLocation.EntityData.BundleName = "cisco_ios_xr"
    flashLocation.EntityData.ParentYangName = "info"
    flashLocation.EntityData.SegmentPath = "flash_location" + types.AddKeyToken(flashLocation.FlashLocation, "flash_location")
    flashLocation.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/flash/info/" + flashLocation.EntityData.SegmentPath
    flashLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flashLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flashLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flashLocation.EntityData.Children = types.NewOrderedMap()
    flashLocation.EntityData.Children.Append("iofpga_flash_info", types.YChild{"IofpgaFlashInfo", &flashLocation.IofpgaFlashInfo})
    flashLocation.EntityData.Leafs = types.NewOrderedMap()
    flashLocation.EntityData.Leafs.Append("flash_location", types.YLeaf{"FlashLocation", flashLocation.FlashLocation})

    flashLocation.EntityData.YListKeys = []string {"FlashLocation"}

    return &(flashLocation.EntityData)
}

// Controller_CardMgr_Iofpga_Flash_Info_FlashLocation_IofpgaFlashInfo
type Controller_CardMgr_Iofpga_Flash_Info_FlashLocation_IofpgaFlashInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    IofpgaFlashInfoValues []interface{}
}

func (iofpgaFlashInfo *Controller_CardMgr_Iofpga_Flash_Info_FlashLocation_IofpgaFlashInfo) GetEntityData() *types.CommonEntityData {
    iofpgaFlashInfo.EntityData.YFilter = iofpgaFlashInfo.YFilter
    iofpgaFlashInfo.EntityData.YangName = "iofpga_flash_info"
    iofpgaFlashInfo.EntityData.BundleName = "cisco_ios_xr"
    iofpgaFlashInfo.EntityData.ParentYangName = "flash_location"
    iofpgaFlashInfo.EntityData.SegmentPath = "iofpga_flash_info"
    iofpgaFlashInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/flash/info/flash_location/" + iofpgaFlashInfo.EntityData.SegmentPath
    iofpgaFlashInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaFlashInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaFlashInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaFlashInfo.EntityData.Children = types.NewOrderedMap()
    iofpgaFlashInfo.EntityData.Leafs = types.NewOrderedMap()
    iofpgaFlashInfo.EntityData.Leafs.Append("iofpga_flash_info_values", types.YLeaf{"IofpgaFlashInfoValues", iofpgaFlashInfo.IofpgaFlashInfoValues})

    iofpgaFlashInfo.EntityData.YListKeys = []string {}

    return &(iofpgaFlashInfo.EntityData)
}

// Controller_CardMgr_Iofpga_Flash_Status
type Controller_CardMgr_Iofpga_Flash_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CardMgr_Iofpga_Flash_Status_FlashLocation.
    FlashLocation []*Controller_CardMgr_Iofpga_Flash_Status_FlashLocation
}

func (status *Controller_CardMgr_Iofpga_Flash_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "flash"
    status.EntityData.SegmentPath = "status"
    status.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/flash/" + status.EntityData.SegmentPath
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = types.NewOrderedMap()
    status.EntityData.Children.Append("flash_location", types.YChild{"FlashLocation", nil})
    for i := range status.FlashLocation {
        status.EntityData.Children.Append(types.GetSegmentPath(status.FlashLocation[i]), types.YChild{"FlashLocation", status.FlashLocation[i]})
    }
    status.EntityData.Leafs = types.NewOrderedMap()

    status.EntityData.YListKeys = []string {}

    return &(status.EntityData)
}

// Controller_CardMgr_Iofpga_Flash_Status_FlashLocation
type Controller_CardMgr_Iofpga_Flash_Status_FlashLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FlashLocation interface{}

    
    IofpgaFlashStatus Controller_CardMgr_Iofpga_Flash_Status_FlashLocation_IofpgaFlashStatus
}

func (flashLocation *Controller_CardMgr_Iofpga_Flash_Status_FlashLocation) GetEntityData() *types.CommonEntityData {
    flashLocation.EntityData.YFilter = flashLocation.YFilter
    flashLocation.EntityData.YangName = "flash_location"
    flashLocation.EntityData.BundleName = "cisco_ios_xr"
    flashLocation.EntityData.ParentYangName = "status"
    flashLocation.EntityData.SegmentPath = "flash_location" + types.AddKeyToken(flashLocation.FlashLocation, "flash_location")
    flashLocation.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/flash/status/" + flashLocation.EntityData.SegmentPath
    flashLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flashLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flashLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flashLocation.EntityData.Children = types.NewOrderedMap()
    flashLocation.EntityData.Children.Append("iofpga_flash_status", types.YChild{"IofpgaFlashStatus", &flashLocation.IofpgaFlashStatus})
    flashLocation.EntityData.Leafs = types.NewOrderedMap()
    flashLocation.EntityData.Leafs.Append("flash_location", types.YLeaf{"FlashLocation", flashLocation.FlashLocation})

    flashLocation.EntityData.YListKeys = []string {"FlashLocation"}

    return &(flashLocation.EntityData)
}

// Controller_CardMgr_Iofpga_Flash_Status_FlashLocation_IofpgaFlashStatus
type Controller_CardMgr_Iofpga_Flash_Status_FlashLocation_IofpgaFlashStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    IofpgaFlashStatusValues []interface{}
}

func (iofpgaFlashStatus *Controller_CardMgr_Iofpga_Flash_Status_FlashLocation_IofpgaFlashStatus) GetEntityData() *types.CommonEntityData {
    iofpgaFlashStatus.EntityData.YFilter = iofpgaFlashStatus.YFilter
    iofpgaFlashStatus.EntityData.YangName = "iofpga_flash_status"
    iofpgaFlashStatus.EntityData.BundleName = "cisco_ios_xr"
    iofpgaFlashStatus.EntityData.ParentYangName = "flash_location"
    iofpgaFlashStatus.EntityData.SegmentPath = "iofpga_flash_status"
    iofpgaFlashStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/iofpga/flash/status/flash_location/" + iofpgaFlashStatus.EntityData.SegmentPath
    iofpgaFlashStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iofpgaFlashStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iofpgaFlashStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iofpgaFlashStatus.EntityData.Children = types.NewOrderedMap()
    iofpgaFlashStatus.EntityData.Leafs = types.NewOrderedMap()
    iofpgaFlashStatus.EntityData.Leafs.Append("iofpga_flash_status_values", types.YLeaf{"IofpgaFlashStatusValues", iofpgaFlashStatus.IofpgaFlashStatusValues})

    iofpgaFlashStatus.EntityData.YListKeys = []string {}

    return &(iofpgaFlashStatus.EntityData)
}

// Controller_CardMgr_Bootloader
type Controller_CardMgr_Bootloader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Flash Controller_CardMgr_Bootloader_Flash
}

func (bootloader *Controller_CardMgr_Bootloader) GetEntityData() *types.CommonEntityData {
    bootloader.EntityData.YFilter = bootloader.YFilter
    bootloader.EntityData.YangName = "bootloader"
    bootloader.EntityData.BundleName = "cisco_ios_xr"
    bootloader.EntityData.ParentYangName = "card_mgr"
    bootloader.EntityData.SegmentPath = "bootloader"
    bootloader.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/" + bootloader.EntityData.SegmentPath
    bootloader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bootloader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bootloader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bootloader.EntityData.Children = types.NewOrderedMap()
    bootloader.EntityData.Children.Append("flash", types.YChild{"Flash", &bootloader.Flash})
    bootloader.EntityData.Leafs = types.NewOrderedMap()

    bootloader.EntityData.YListKeys = []string {}

    return &(bootloader.EntityData)
}

// Controller_CardMgr_Bootloader_Flash
type Controller_CardMgr_Bootloader_Flash struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Info Controller_CardMgr_Bootloader_Flash_Info

    
    Status Controller_CardMgr_Bootloader_Flash_Status
}

func (flash *Controller_CardMgr_Bootloader_Flash) GetEntityData() *types.CommonEntityData {
    flash.EntityData.YFilter = flash.YFilter
    flash.EntityData.YangName = "flash"
    flash.EntityData.BundleName = "cisco_ios_xr"
    flash.EntityData.ParentYangName = "bootloader"
    flash.EntityData.SegmentPath = "flash"
    flash.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/bootloader/" + flash.EntityData.SegmentPath
    flash.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flash.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flash.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flash.EntityData.Children = types.NewOrderedMap()
    flash.EntityData.Children.Append("info", types.YChild{"Info", &flash.Info})
    flash.EntityData.Children.Append("status", types.YChild{"Status", &flash.Status})
    flash.EntityData.Leafs = types.NewOrderedMap()

    flash.EntityData.YListKeys = []string {}

    return &(flash.EntityData)
}

// Controller_CardMgr_Bootloader_Flash_Info
type Controller_CardMgr_Bootloader_Flash_Info struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CardMgr_Bootloader_Flash_Info_FlashLocation.
    FlashLocation []*Controller_CardMgr_Bootloader_Flash_Info_FlashLocation
}

func (info *Controller_CardMgr_Bootloader_Flash_Info) GetEntityData() *types.CommonEntityData {
    info.EntityData.YFilter = info.YFilter
    info.EntityData.YangName = "info"
    info.EntityData.BundleName = "cisco_ios_xr"
    info.EntityData.ParentYangName = "flash"
    info.EntityData.SegmentPath = "info"
    info.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/bootloader/flash/" + info.EntityData.SegmentPath
    info.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    info.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    info.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    info.EntityData.Children = types.NewOrderedMap()
    info.EntityData.Children.Append("flash_location", types.YChild{"FlashLocation", nil})
    for i := range info.FlashLocation {
        info.EntityData.Children.Append(types.GetSegmentPath(info.FlashLocation[i]), types.YChild{"FlashLocation", info.FlashLocation[i]})
    }
    info.EntityData.Leafs = types.NewOrderedMap()

    info.EntityData.YListKeys = []string {}

    return &(info.EntityData)
}

// Controller_CardMgr_Bootloader_Flash_Info_FlashLocation
type Controller_CardMgr_Bootloader_Flash_Info_FlashLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FlashLocation interface{}

    
    BootldrFlashInfo Controller_CardMgr_Bootloader_Flash_Info_FlashLocation_BootldrFlashInfo
}

func (flashLocation *Controller_CardMgr_Bootloader_Flash_Info_FlashLocation) GetEntityData() *types.CommonEntityData {
    flashLocation.EntityData.YFilter = flashLocation.YFilter
    flashLocation.EntityData.YangName = "flash_location"
    flashLocation.EntityData.BundleName = "cisco_ios_xr"
    flashLocation.EntityData.ParentYangName = "info"
    flashLocation.EntityData.SegmentPath = "flash_location" + types.AddKeyToken(flashLocation.FlashLocation, "flash_location")
    flashLocation.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/bootloader/flash/info/" + flashLocation.EntityData.SegmentPath
    flashLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flashLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flashLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flashLocation.EntityData.Children = types.NewOrderedMap()
    flashLocation.EntityData.Children.Append("bootldr_flash_info", types.YChild{"BootldrFlashInfo", &flashLocation.BootldrFlashInfo})
    flashLocation.EntityData.Leafs = types.NewOrderedMap()
    flashLocation.EntityData.Leafs.Append("flash_location", types.YLeaf{"FlashLocation", flashLocation.FlashLocation})

    flashLocation.EntityData.YListKeys = []string {"FlashLocation"}

    return &(flashLocation.EntityData)
}

// Controller_CardMgr_Bootloader_Flash_Info_FlashLocation_BootldrFlashInfo
type Controller_CardMgr_Bootloader_Flash_Info_FlashLocation_BootldrFlashInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    BootldrFlashInfoValues []interface{}
}

func (bootldrFlashInfo *Controller_CardMgr_Bootloader_Flash_Info_FlashLocation_BootldrFlashInfo) GetEntityData() *types.CommonEntityData {
    bootldrFlashInfo.EntityData.YFilter = bootldrFlashInfo.YFilter
    bootldrFlashInfo.EntityData.YangName = "bootldr_flash_info"
    bootldrFlashInfo.EntityData.BundleName = "cisco_ios_xr"
    bootldrFlashInfo.EntityData.ParentYangName = "flash_location"
    bootldrFlashInfo.EntityData.SegmentPath = "bootldr_flash_info"
    bootldrFlashInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/bootloader/flash/info/flash_location/" + bootldrFlashInfo.EntityData.SegmentPath
    bootldrFlashInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bootldrFlashInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bootldrFlashInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bootldrFlashInfo.EntityData.Children = types.NewOrderedMap()
    bootldrFlashInfo.EntityData.Leafs = types.NewOrderedMap()
    bootldrFlashInfo.EntityData.Leafs.Append("bootldr_flash_info_values", types.YLeaf{"BootldrFlashInfoValues", bootldrFlashInfo.BootldrFlashInfoValues})

    bootldrFlashInfo.EntityData.YListKeys = []string {}

    return &(bootldrFlashInfo.EntityData)
}

// Controller_CardMgr_Bootloader_Flash_Status
type Controller_CardMgr_Bootloader_Flash_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CardMgr_Bootloader_Flash_Status_FlashLocation.
    FlashLocation []*Controller_CardMgr_Bootloader_Flash_Status_FlashLocation
}

func (status *Controller_CardMgr_Bootloader_Flash_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "flash"
    status.EntityData.SegmentPath = "status"
    status.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/bootloader/flash/" + status.EntityData.SegmentPath
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = types.NewOrderedMap()
    status.EntityData.Children.Append("flash_location", types.YChild{"FlashLocation", nil})
    for i := range status.FlashLocation {
        status.EntityData.Children.Append(types.GetSegmentPath(status.FlashLocation[i]), types.YChild{"FlashLocation", status.FlashLocation[i]})
    }
    status.EntityData.Leafs = types.NewOrderedMap()

    status.EntityData.YListKeys = []string {}

    return &(status.EntityData)
}

// Controller_CardMgr_Bootloader_Flash_Status_FlashLocation
type Controller_CardMgr_Bootloader_Flash_Status_FlashLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-7])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[0-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FlashLocation interface{}

    
    BootldrFlashStatus Controller_CardMgr_Bootloader_Flash_Status_FlashLocation_BootldrFlashStatus
}

func (flashLocation *Controller_CardMgr_Bootloader_Flash_Status_FlashLocation) GetEntityData() *types.CommonEntityData {
    flashLocation.EntityData.YFilter = flashLocation.YFilter
    flashLocation.EntityData.YangName = "flash_location"
    flashLocation.EntityData.BundleName = "cisco_ios_xr"
    flashLocation.EntityData.ParentYangName = "status"
    flashLocation.EntityData.SegmentPath = "flash_location" + types.AddKeyToken(flashLocation.FlashLocation, "flash_location")
    flashLocation.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/bootloader/flash/status/" + flashLocation.EntityData.SegmentPath
    flashLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flashLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flashLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flashLocation.EntityData.Children = types.NewOrderedMap()
    flashLocation.EntityData.Children.Append("bootldr_flash_status", types.YChild{"BootldrFlashStatus", &flashLocation.BootldrFlashStatus})
    flashLocation.EntityData.Leafs = types.NewOrderedMap()
    flashLocation.EntityData.Leafs.Append("flash_location", types.YLeaf{"FlashLocation", flashLocation.FlashLocation})

    flashLocation.EntityData.YListKeys = []string {"FlashLocation"}

    return &(flashLocation.EntityData)
}

// Controller_CardMgr_Bootloader_Flash_Status_FlashLocation_BootldrFlashStatus
type Controller_CardMgr_Bootloader_Flash_Status_FlashLocation_BootldrFlashStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    BootldrFlashStatusValues []interface{}
}

func (bootldrFlashStatus *Controller_CardMgr_Bootloader_Flash_Status_FlashLocation_BootldrFlashStatus) GetEntityData() *types.CommonEntityData {
    bootldrFlashStatus.EntityData.YFilter = bootldrFlashStatus.YFilter
    bootldrFlashStatus.EntityData.YangName = "bootldr_flash_status"
    bootldrFlashStatus.EntityData.BundleName = "cisco_ios_xr"
    bootldrFlashStatus.EntityData.ParentYangName = "flash_location"
    bootldrFlashStatus.EntityData.SegmentPath = "bootldr_flash_status"
    bootldrFlashStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-sysadmin-controllers-ncs55A1:controller/card_mgr/bootloader/flash/status/flash_location/" + bootldrFlashStatus.EntityData.SegmentPath
    bootldrFlashStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bootldrFlashStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bootldrFlashStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bootldrFlashStatus.EntityData.Children = types.NewOrderedMap()
    bootldrFlashStatus.EntityData.Leafs = types.NewOrderedMap()
    bootldrFlashStatus.EntityData.Leafs.Append("bootldr_flash_status_values", types.YLeaf{"BootldrFlashStatusValues", bootldrFlashStatus.BootldrFlashStatusValues})

    bootldrFlashStatus.EntityData.YListKeys = []string {}

    return &(bootldrFlashStatus.EntityData)
}

