// This module contains a collection of YANG definitions
// for Cisco IOS-XR ifmgr package configuration.
// 
// This module contains definitions
// for the following management objects:
//   global-interface-configuration: Global scoped configuration
//     for interfaces
//   interface-configurations: interface configurations
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ifmgr_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ifmgr_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg global-interface-configuration}", reflect.TypeOf(GlobalInterfaceConfiguration{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ifmgr-cfg:global-interface-configuration", reflect.TypeOf(GlobalInterfaceConfiguration{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg interface-configurations}", reflect.TypeOf(InterfaceConfigurations{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ifmgr-cfg:interface-configurations", reflect.TypeOf(InterfaceConfigurations{}))
}

// InterfaceModeEnum represents Interface mode enum
type InterfaceModeEnum string

const (
    // Default Interface Mode
    InterfaceModeEnum_default_ InterfaceModeEnum = "default"

    // Point-to-Point Interface Mode
    InterfaceModeEnum_point_to_point InterfaceModeEnum = "point-to-point"

    // Multipoint Interface Mode
    InterfaceModeEnum_multipoint InterfaceModeEnum = "multipoint"

    // L2 Transport Interface Mode
    InterfaceModeEnum_l2_transport InterfaceModeEnum = "l2-transport"
)

// SecondaryAdminStateEnum represents Secondary admin state enum
type SecondaryAdminStateEnum string

const (
    // Normal Mode
    SecondaryAdminStateEnum_normal SecondaryAdminStateEnum = "normal"

    // Maintenance Mode
    SecondaryAdminStateEnum_maintenance SecondaryAdminStateEnum = "maintenance"
)

// LinkStatusEnum represents Link status enum
type LinkStatusEnum string

const (
    // Display link status messages for physical links
    LinkStatusEnum_default_ LinkStatusEnum = "default"

    // Disable link status messages
    LinkStatusEnum_disable LinkStatusEnum = "disable"

    // Display link status messages for all interfaces
    LinkStatusEnum_software_interfaces LinkStatusEnum = "software-interfaces"
)

// GlobalInterfaceConfiguration
// Global scoped configuration for interfaces
type GlobalInterfaceConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable link-status messages. The type is LinkStatusEnum. The
    // default value is default.
    LinkStatus interface{}
}

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetEntityData() *types.CommonEntityData {
    globalInterfaceConfiguration.EntityData.YFilter = globalInterfaceConfiguration.YFilter
    globalInterfaceConfiguration.EntityData.YangName = "global-interface-configuration"
    globalInterfaceConfiguration.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceConfiguration.EntityData.ParentYangName = "Cisco-IOS-XR-ifmgr-cfg"
    globalInterfaceConfiguration.EntityData.SegmentPath = "Cisco-IOS-XR-ifmgr-cfg:global-interface-configuration"
    globalInterfaceConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceConfiguration.EntityData.Children = make(map[string]types.YChild)
    globalInterfaceConfiguration.EntityData.Leafs = make(map[string]types.YLeaf)
    globalInterfaceConfiguration.EntityData.Leafs["link-status"] = types.YLeaf{"LinkStatus", globalInterfaceConfiguration.LinkStatus}
    return &(globalInterfaceConfiguration.EntityData)
}

// InterfaceConfigurations
// interface configurations
type InterfaceConfigurations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The configuration for an interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration.
    InterfaceConfiguration []InterfaceConfigurations_InterfaceConfiguration
}

func (interfaceConfigurations *InterfaceConfigurations) GetEntityData() *types.CommonEntityData {
    interfaceConfigurations.EntityData.YFilter = interfaceConfigurations.YFilter
    interfaceConfigurations.EntityData.YangName = "interface-configurations"
    interfaceConfigurations.EntityData.BundleName = "cisco_ios_xr"
    interfaceConfigurations.EntityData.ParentYangName = "Cisco-IOS-XR-ifmgr-cfg"
    interfaceConfigurations.EntityData.SegmentPath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
    interfaceConfigurations.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceConfigurations.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceConfigurations.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceConfigurations.EntityData.Children = make(map[string]types.YChild)
    interfaceConfigurations.EntityData.Children["interface-configuration"] = types.YChild{"InterfaceConfiguration", nil}
    for i := range interfaceConfigurations.InterfaceConfiguration {
        interfaceConfigurations.EntityData.Children[types.GetSegmentPath(&interfaceConfigurations.InterfaceConfiguration[i])] = types.YChild{"InterfaceConfiguration", &interfaceConfigurations.InterfaceConfiguration[i]}
    }
    interfaceConfigurations.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceConfigurations.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration
// The configuration for an interface
type InterfaceConfigurations_InterfaceConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Whether the interface is active or preconfigured.
    // The type is string with pattern: b'(act)|(pre)'.
    Active interface{}

    // This attribute is a key. The name of the interface. The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // The existence of this configuration indicates the interface is shut down.
    // The type is interface{}.
    Shutdown interface{}

    // The mode in which an interface is running. The existence of this object
    // causes the creation of the software virtual/subinterface. The type is
    // interface{}.
    InterfaceVirtual interface{}

    // The secondary admin state of the interface. The type is
    // SecondaryAdminStateEnum.
    SecondaryAdminState interface{}

    // The mode in which an interface is running. The existence of this object
    // causes the creation of the software subinterface. The type is
    // InterfaceModeEnum. The default value is default.
    InterfaceModeNonPhysical interface{}

    // The bandwidth of the interface in kbps. The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Enable interface and line-protocol state change alarms. The type is
    // interface{}.
    LinkStatus interface{}

    // The description of this interface. The type is string.
    Description interface{}

    // Configure Laser-Squelch. The type is interface{}.
    LaserSquelch interface{}

    // Configure Performance Monitoring . The type is interface{}.
    PerfMonDisable interface{}

    // configure maintenance embargo flag on the given interface. The type is
    // bool.
    MaintenanceEmbargo interface{}

    // Assign the interface to a VRF. The type is string with length: 1..32.
    Vrf interface{}

    // Track Name. The type is string with length: 1..32.
    TrackName interface{}

    // Enable Fast Shutdown for this interface. The type is interface{}.
    FastShutdown interface{}

    // Set the Mac address on an interface. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    MacAddr interface{}

    // Whether this interface's state changes are dampened or not.
    Dampening InterfaceConfigurations_InterfaceConfiguration_Dampening

    // The MTU configuration for the interface.
    Mtus InterfaceConfigurations_InterfaceConfiguration_Mtus

    // The encapsulation on the interface.
    Encapsulation InterfaceConfigurations_InterfaceConfiguration_Encapsulation

    // AAA configuration.
    AaaTable InterfaceConfigurations_InterfaceConfiguration_AaaTable

    // EthernetControl.
    EthernetControl InterfaceConfigurations_InterfaceConfiguration_EthernetControl

    // Precision Time Protocol interface configuration.
    Ptp InterfaceConfigurations_InterfaceConfiguration_Ptp

    // PW-Ether attributes.
    PseudowireEther InterfaceConfigurations_InterfaceConfiguration_PseudowireEther

    // PW-IW attributes.
    PseudowireIw InterfaceConfigurations_InterfaceConfiguration_PseudowireIw

    // BVI attributes.
    Bvi InterfaceConfigurations_InterfaceConfiguration_Bvi

    // Interface Layer 2 Transport service configuration data.
    L2Transport InterfaceConfigurations_InterfaceConfiguration_L2Transport

    // ATM Configuration.
    Atm InterfaceConfigurations_InterfaceConfiguration_Atm

    // BFD over bundle members configuration.
    Bfd InterfaceConfigurations_InterfaceConfiguration_Bfd

    // Generic per-bundle configuration.
    Bundle InterfaceConfigurations_InterfaceConfiguration_Bundle

    // Link Aggregation Control Protocol per-interface configuration (for bundle
    // or member).
    Lacp InterfaceConfigurations_InterfaceConfiguration_Lacp

    // Generic per-member configuration.
    BundleMember InterfaceConfigurations_InterfaceConfiguration_BundleMember

    // Multi-chassis LACP configuration.
    Mlacp InterfaceConfigurations_InterfaceConfiguration_Mlacp

    // Interface specific CDP configuration.
    Cdp InterfaceConfigurations_InterfaceConfiguration_Cdp

    // Optics controller configuration.
    Optics InterfaceConfigurations_InterfaceConfiguration_Optics

    // OTU port controller configuration.
    Otu InterfaceConfigurations_InterfaceConfiguration_Otu

    // MACSec service for an interface.
    Macsec InterfaceConfigurations_InterfaceConfiguration_Macsec

    // Interface Specific Dot1x Configuration.
    Dot1XInterface InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface

    // Configure Extended loopback (diagnostics).
    Loopbacks InterfaceConfigurations_InterfaceConfiguration_Loopbacks

    // Ether specific interface configuration.
    Ethernet InterfaceConfigurations_InterfaceConfiguration_Ethernet

    // DWDM port controller configuration.
    Dwdm InterfaceConfigurations_InterfaceConfiguration_Dwdm

    // IEEE 802.1Q VLAN subinterface configuration.
    VlanSubConfiguration InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration

    // Ethernet service configuration.
    EthernetService InterfaceConfigurations_InterfaceConfiguration_EthernetService

    // Ethernet Infra BNG specific configuration.
    EthernetBng InterfaceConfigurations_InterfaceConfiguration_EthernetBng

    // MAC Accounting Configuration.
    MacAccounting InterfaceConfigurations_InterfaceConfiguration_MacAccounting

    // Ethernet Features Configuration.
    EthernetFeatures InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures

    // Set the carrier transition delay on an interface in msecs.
    CarrierDelay InterfaceConfigurations_InterfaceConfiguration_CarrierDelay

    // IEEE 802.1Q VLAN trunk interface configuration.
    VlanTrunkConfiguration InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration

    // nV Satellite Access Link Configuration.
    NvSatelliteAccess InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess

    // nV Satellite Fabric Link Configuration.
    NvSatelliteFabricLink InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink

    // Complex Network connection to one or more Satellites.
    NvSatelliteFabricNetwork InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork

    // Disable LLDP TX or RX.
    Lldp InterfaceConfigurations_InterfaceConfiguration_Lldp

    // Monitor Session container for this source interface.
    SpanMonitorSessions InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions

    // Frequency Synchronization interface configuration.
    FrequencySynchronization InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization

    // Interface control subscriber policy configuration.
    ServicePolicies InterfaceConfigurations_InterfaceConfiguration_ServicePolicies

    // Per-address-family and topology configuration.
    Afs InterfaceConfigurations_InterfaceConfiguration_Afs

    // Per-interface statistics configuration.
    Statistics InterfaceConfigurations_InterfaceConfiguration_Statistics

    // IPv6 Packet Filtering configuration for the interface.
    Ipv6PacketFilter InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter

    // ES Packet Filtering configuration for the interface.
    EsPacketFilter InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter

    // IPv4 Packet Filtering configuration for the interface.
    Ipv4PacketFilter InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter

    // Direct-Attached Gateway Redundancy configuration.
    Dagrs InterfaceConfigurations_InterfaceConfiguration_Dagrs

    // Configure Address Resolution Protocol.
    Ipv4Arp InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp

    // Interface IPv4 Network configuration data.
    Ipv4Network InterfaceConfigurations_InterfaceConfiguration_Ipv4Network

    // Interface IPv4 Network configuration data also used for forwarding.
    Ipv4NetworkForwarding InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding

    // Interface IPv6 Network configuration data.
    Ipv6Network InterfaceConfigurations_InterfaceConfiguration_Ipv6Network

    // IPv6 interface neighbor or neighbor discovery configuration.
    Ipv6Neighbor InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor

    // MPLS configuration under an interface.
    Mpls InterfaceConfigurations_InterfaceConfiguration_Mpls

    // MPLS tunnel attributes.
    TunnelTeAttributes InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes

    // MPLS-TP tunnel attributes.
    TransportProfileTunnel InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel

    // MPLS P2MP tunnel attributes.
    MteTunnelAttributes InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes

    // Configure through port-mode.
    Portmode InterfaceConfigurations_InterfaceConfiguration_Portmode

    // Interface PBR configuration.
    Pbr InterfaceConfigurations_InterfaceConfiguration_Pbr

    // Configure pm parameters.
    PerformanceManagement InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement

    // Interface PPP configuration data.
    CiscoIosXrPppMaCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp

    // Interface PPP configuration data.
    CiscoIosXrPppMaFsmCfgPpp_ InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp

    // Interface PPP configuration data.
    CiscoIosXrPppMaIpcpCfgPpp_ InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp

    // Interface PPP configuration data.
    CiscoIosXrPppMaIpcpiwCfgPpp_ InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp

    // Interface PPP configuration data.
    CiscoIosXrPppMaLcpCfgPpp_ InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp

    // SSRP Config.
    SsrpSession InterfaceConfigurations_InterfaceConfiguration_SsrpSession

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_Qos

    // Subscribers on interface.
    Subscriber InterfaceConfigurations_InterfaceConfiguration_Subscriber

    // Interface PPPoE configuration data.
    Pppoe InterfaceConfigurations_InterfaceConfiguration_Pppoe

    // Interface netflow configuration.
    NetFlow InterfaceConfigurations_InterfaceConfiguration_NetFlow

    // IP over GRE encapsulation.
    TunnelIp InterfaceConfigurations_InterfaceConfiguration_TunnelIp

    // NVE operational data.
    Nve InterfaceConfigurations_InterfaceConfiguration_Nve

    // WANPHY port controller configuration.
    Wanphy InterfaceConfigurations_InterfaceConfiguration_Wanphy
}

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetEntityData() *types.CommonEntityData {
    interfaceConfiguration.EntityData.YFilter = interfaceConfiguration.YFilter
    interfaceConfiguration.EntityData.YangName = "interface-configuration"
    interfaceConfiguration.EntityData.BundleName = "cisco_ios_xr"
    interfaceConfiguration.EntityData.ParentYangName = "interface-configurations"
    interfaceConfiguration.EntityData.SegmentPath = "interface-configuration" + "[active='" + fmt.Sprintf("%v", interfaceConfiguration.Active) + "']" + "[interface-name='" + fmt.Sprintf("%v", interfaceConfiguration.InterfaceName) + "']"
    interfaceConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceConfiguration.EntityData.Children = make(map[string]types.YChild)
    interfaceConfiguration.EntityData.Children["dampening"] = types.YChild{"Dampening", &interfaceConfiguration.Dampening}
    interfaceConfiguration.EntityData.Children["mtus"] = types.YChild{"Mtus", &interfaceConfiguration.Mtus}
    interfaceConfiguration.EntityData.Children["encapsulation"] = types.YChild{"Encapsulation", &interfaceConfiguration.Encapsulation}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table"] = types.YChild{"AaaTable", &interfaceConfiguration.AaaTable}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control"] = types.YChild{"EthernetControl", &interfaceConfiguration.EthernetControl}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ptp-cfg:ptp"] = types.YChild{"Ptp", &interfaceConfiguration.Ptp}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether"] = types.YChild{"PseudowireEther", &interfaceConfiguration.PseudowireEther}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw"] = types.YChild{"PseudowireIw", &interfaceConfiguration.PseudowireIw}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2vpn-cfg:bvi"] = types.YChild{"Bvi", &interfaceConfiguration.Bvi}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2vpn-cfg:l2-transport"] = types.YChild{"L2Transport", &interfaceConfiguration.L2Transport}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-atm-vcm-cfg:atm"] = types.YChild{"Atm", &interfaceConfiguration.Atm}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-bundlemgr-cfg:bfd"] = types.YChild{"Bfd", &interfaceConfiguration.Bfd}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-bundlemgr-cfg:bundle"] = types.YChild{"Bundle", &interfaceConfiguration.Bundle}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-bundlemgr-cfg:lacp"] = types.YChild{"Lacp", &interfaceConfiguration.Lacp}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-bundlemgr-cfg:bundle-member"] = types.YChild{"BundleMember", &interfaceConfiguration.BundleMember}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-bundlemgr-cfg:mlacp"] = types.YChild{"Mlacp", &interfaceConfiguration.Mlacp}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-cdp-cfg:cdp"] = types.YChild{"Cdp", &interfaceConfiguration.Cdp}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-controller-optics-cfg:optics"] = types.YChild{"Optics", &interfaceConfiguration.Optics}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-controller-otu-cfg:otu"] = types.YChild{"Otu", &interfaceConfiguration.Otu}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec"] = types.YChild{"Macsec", &interfaceConfiguration.Macsec}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface"] = types.YChild{"Dot1XInterface", &interfaceConfiguration.Dot1XInterface}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks"] = types.YChild{"Loopbacks", &interfaceConfiguration.Loopbacks}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-drivers-media-eth-cfg:ethernet"] = types.YChild{"Ethernet", &interfaceConfiguration.Ethernet}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-dwdm-ui-cfg:dwdm"] = types.YChild{"Dwdm", &interfaceConfiguration.Dwdm}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration"] = types.YChild{"VlanSubConfiguration", &interfaceConfiguration.VlanSubConfiguration}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service"] = types.YChild{"EthernetService", &interfaceConfiguration.EthernetService}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng"] = types.YChild{"EthernetBng", &interfaceConfiguration.EthernetBng}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting"] = types.YChild{"MacAccounting", &interfaceConfiguration.MacAccounting}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features"] = types.YChild{"EthernetFeatures", &interfaceConfiguration.EthernetFeatures}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay"] = types.YChild{"CarrierDelay", &interfaceConfiguration.CarrierDelay}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration"] = types.YChild{"VlanTrunkConfiguration", &interfaceConfiguration.VlanTrunkConfiguration}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access"] = types.YChild{"NvSatelliteAccess", &interfaceConfiguration.NvSatelliteAccess}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link"] = types.YChild{"NvSatelliteFabricLink", &interfaceConfiguration.NvSatelliteFabricLink}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network"] = types.YChild{"NvSatelliteFabricNetwork", &interfaceConfiguration.NvSatelliteFabricNetwork}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ethernet-lldp-cfg:lldp"] = types.YChild{"Lldp", &interfaceConfiguration.Lldp}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"] = types.YChild{"SpanMonitorSessions", &interfaceConfiguration.SpanMonitorSessions}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-freqsync-cfg:frequency-synchronization"] = types.YChild{"FrequencySynchronization", &interfaceConfiguration.FrequencySynchronization}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-iedge4710-cfg:service-policies"] = types.YChild{"ServicePolicies", &interfaceConfiguration.ServicePolicies}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-infra-rsi-cfg:afs"] = types.YChild{"Afs", &interfaceConfiguration.Afs}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-infra-statsd-cfg:statistics"] = types.YChild{"Statistics", &interfaceConfiguration.Statistics}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter"] = types.YChild{"Ipv6PacketFilter", &interfaceConfiguration.Ipv6PacketFilter}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter"] = types.YChild{"EsPacketFilter", &interfaceConfiguration.EsPacketFilter}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter"] = types.YChild{"Ipv4PacketFilter", &interfaceConfiguration.Ipv4PacketFilter}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ipv4-arp-cfg:dagrs"] = types.YChild{"Dagrs", &interfaceConfiguration.Dagrs}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp"] = types.YChild{"Ipv4Arp", &interfaceConfiguration.Ipv4Arp}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ipv4-io-cfg:ipv4-network"] = types.YChild{"Ipv4Network", &interfaceConfiguration.Ipv4Network}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding"] = types.YChild{"Ipv4NetworkForwarding", &interfaceConfiguration.Ipv4NetworkForwarding}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network"] = types.YChild{"Ipv6Network", &interfaceConfiguration.Ipv6Network}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor"] = types.YChild{"Ipv6Neighbor", &interfaceConfiguration.Ipv6Neighbor}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-mpls-io-cfg:mpls"] = types.YChild{"Mpls", &interfaceConfiguration.Mpls}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes"] = types.YChild{"TunnelTeAttributes", &interfaceConfiguration.TunnelTeAttributes}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel"] = types.YChild{"TransportProfileTunnel", &interfaceConfiguration.TransportProfileTunnel}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes"] = types.YChild{"MteTunnelAttributes", &interfaceConfiguration.MteTunnelAttributes}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ncs5500-coherent-portmode-cfg:portmode"] = types.YChild{"Portmode", &interfaceConfiguration.Portmode}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-pbr-cfg:pbr"] = types.YChild{"Pbr", &interfaceConfiguration.Pbr}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-pmengine-cfg:performance-management"] = types.YChild{"PerformanceManagement", &interfaceConfiguration.PerformanceManagement}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ppp-ma-cfg:ppp"] = types.YChild{"CiscoIosXrPppMaCfgPpp", &interfaceConfiguration.CiscoIosXrPppMaCfgPpp}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp"] = types.YChild{"CiscoIosXrPppMaFsmCfgPpp_", &interfaceConfiguration.CiscoIosXrPppMaFsmCfgPpp_}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp"] = types.YChild{"CiscoIosXrPppMaIpcpCfgPpp_", &interfaceConfiguration.CiscoIosXrPppMaIpcpCfgPpp_}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp"] = types.YChild{"CiscoIosXrPppMaIpcpiwCfgPpp_", &interfaceConfiguration.CiscoIosXrPppMaIpcpiwCfgPpp_}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp"] = types.YChild{"CiscoIosXrPppMaLcpCfgPpp_", &interfaceConfiguration.CiscoIosXrPppMaLcpCfgPpp_}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session"] = types.YChild{"SsrpSession", &interfaceConfiguration.SsrpSession}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-qos-ma-cfg:qos"] = types.YChild{"Qos", &interfaceConfiguration.Qos}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber"] = types.YChild{"Subscriber", &interfaceConfiguration.Subscriber}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe"] = types.YChild{"Pppoe", &interfaceConfiguration.Pppoe}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-traffmon-netflow-cfg:net-flow"] = types.YChild{"NetFlow", &interfaceConfiguration.NetFlow}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip"] = types.YChild{"TunnelIp", &interfaceConfiguration.TunnelIp}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-tunnel-nve-cfg:nve"] = types.YChild{"Nve", &interfaceConfiguration.Nve}
    interfaceConfiguration.EntityData.Children["Cisco-IOS-XR-wanphy-ui-cfg:wanphy"] = types.YChild{"Wanphy", &interfaceConfiguration.Wanphy}
    interfaceConfiguration.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceConfiguration.EntityData.Leafs["active"] = types.YLeaf{"Active", interfaceConfiguration.Active}
    interfaceConfiguration.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", interfaceConfiguration.InterfaceName}
    interfaceConfiguration.EntityData.Leafs["shutdown"] = types.YLeaf{"Shutdown", interfaceConfiguration.Shutdown}
    interfaceConfiguration.EntityData.Leafs["interface-virtual"] = types.YLeaf{"InterfaceVirtual", interfaceConfiguration.InterfaceVirtual}
    interfaceConfiguration.EntityData.Leafs["secondary-admin-state"] = types.YLeaf{"SecondaryAdminState", interfaceConfiguration.SecondaryAdminState}
    interfaceConfiguration.EntityData.Leafs["interface-mode-non-physical"] = types.YLeaf{"InterfaceModeNonPhysical", interfaceConfiguration.InterfaceModeNonPhysical}
    interfaceConfiguration.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", interfaceConfiguration.Bandwidth}
    interfaceConfiguration.EntityData.Leafs["link-status"] = types.YLeaf{"LinkStatus", interfaceConfiguration.LinkStatus}
    interfaceConfiguration.EntityData.Leafs["description"] = types.YLeaf{"Description", interfaceConfiguration.Description}
    interfaceConfiguration.EntityData.Leafs["laser-squelch"] = types.YLeaf{"LaserSquelch", interfaceConfiguration.LaserSquelch}
    interfaceConfiguration.EntityData.Leafs["perf-mon-disable"] = types.YLeaf{"PerfMonDisable", interfaceConfiguration.PerfMonDisable}
    interfaceConfiguration.EntityData.Leafs["maintenance-embargo"] = types.YLeaf{"MaintenanceEmbargo", interfaceConfiguration.MaintenanceEmbargo}
    interfaceConfiguration.EntityData.Leafs["vrf"] = types.YLeaf{"Vrf", interfaceConfiguration.Vrf}
    interfaceConfiguration.EntityData.Leafs["track-name"] = types.YLeaf{"TrackName", interfaceConfiguration.TrackName}
    interfaceConfiguration.EntityData.Leafs["fast-shutdown"] = types.YLeaf{"FastShutdown", interfaceConfiguration.FastShutdown}
    interfaceConfiguration.EntityData.Leafs["mac-addr"] = types.YLeaf{"MacAddr", interfaceConfiguration.MacAddr}
    return &(interfaceConfiguration.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dampening
// Whether this interface's state changes are
// dampened or not
type InterfaceConfigurations_InterfaceConfiguration_Dampening struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dampening Arguments. The type is Args.
    Args interface{}

    // Decay half life (in minutes). The type is interface{} with range: 1..45.
    // Units are minute.
    HalfLife interface{}

    // Reuse threshold. The type is interface{} with range: 1..20000.
    ReuseThreshold interface{}

    // Suppress threshold. The type is interface{} with range: 1..20000.
    SuppressThreshold interface{}

    // Max suppress time (in minutes). The type is interface{} with range: 1..255.
    // Units are minute.
    SuppressTime interface{}

    // Restart penalty. The type is interface{} with range: 0..20000.
    RestartPenalty interface{}
}

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetEntityData() *types.CommonEntityData {
    dampening.EntityData.YFilter = dampening.YFilter
    dampening.EntityData.YangName = "dampening"
    dampening.EntityData.BundleName = "cisco_ios_xr"
    dampening.EntityData.ParentYangName = "interface-configuration"
    dampening.EntityData.SegmentPath = "dampening"
    dampening.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dampening.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dampening.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dampening.EntityData.Children = make(map[string]types.YChild)
    dampening.EntityData.Leafs = make(map[string]types.YLeaf)
    dampening.EntityData.Leafs["args"] = types.YLeaf{"Args", dampening.Args}
    dampening.EntityData.Leafs["half-life"] = types.YLeaf{"HalfLife", dampening.HalfLife}
    dampening.EntityData.Leafs["reuse-threshold"] = types.YLeaf{"ReuseThreshold", dampening.ReuseThreshold}
    dampening.EntityData.Leafs["suppress-threshold"] = types.YLeaf{"SuppressThreshold", dampening.SuppressThreshold}
    dampening.EntityData.Leafs["suppress-time"] = types.YLeaf{"SuppressTime", dampening.SuppressTime}
    dampening.EntityData.Leafs["restart-penalty"] = types.YLeaf{"RestartPenalty", dampening.RestartPenalty}
    return &(dampening.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dampening_Args represents Dampening Arguments
type InterfaceConfigurations_InterfaceConfiguration_Dampening_Args string

const (
    // Default values
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_default_values InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "default-values"

    // Half Life Specified
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_half_life InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "specify-half-life"

    // All Arguments except Restart Penalty
    // Specified
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_all InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "specify-all"

    // All Arguments Specified
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_rp InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "specify-rp"
)

// InterfaceConfigurations_InterfaceConfiguration_Mtus
// The MTU configuration for the interface
type InterfaceConfigurations_InterfaceConfiguration_Mtus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The MTU for the interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu.
    Mtu []InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu
}

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetEntityData() *types.CommonEntityData {
    mtus.EntityData.YFilter = mtus.YFilter
    mtus.EntityData.YangName = "mtus"
    mtus.EntityData.BundleName = "cisco_ios_xr"
    mtus.EntityData.ParentYangName = "interface-configuration"
    mtus.EntityData.SegmentPath = "mtus"
    mtus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtus.EntityData.Children = make(map[string]types.YChild)
    mtus.EntityData.Children["mtu"] = types.YChild{"Mtu", nil}
    for i := range mtus.Mtu {
        mtus.EntityData.Children[types.GetSegmentPath(&mtus.Mtu[i])] = types.YChild{"Mtu", &mtus.Mtu[i]}
    }
    mtus.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mtus.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu
// The MTU for the interface
type InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The Owner of the interface - eg. for 'LoopbackX'
    // main interface this is 'loopback'. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Owner interface{}

    // The MTU value. The type is interface{} with range: 64..65535. This
    // attribute is mandatory.
    Mtu interface{}
}

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetEntityData() *types.CommonEntityData {
    mtu.EntityData.YFilter = mtu.YFilter
    mtu.EntityData.YangName = "mtu"
    mtu.EntityData.BundleName = "cisco_ios_xr"
    mtu.EntityData.ParentYangName = "mtus"
    mtu.EntityData.SegmentPath = "mtu" + "[owner='" + fmt.Sprintf("%v", mtu.Owner) + "']"
    mtu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtu.EntityData.Children = make(map[string]types.YChild)
    mtu.EntityData.Leafs = make(map[string]types.YLeaf)
    mtu.EntityData.Leafs["owner"] = types.YLeaf{"Owner", mtu.Owner}
    mtu.EntityData.Leafs["mtu"] = types.YLeaf{"Mtu", mtu.Mtu}
    return &(mtu.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Encapsulation
// The encapsulation on the interface
type InterfaceConfigurations_InterfaceConfiguration_Encapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The encapsulation - e.g. hdlc, ppp. The type is string.
    Encapsulation interface{}

    // The options for this capsulation, usually '0'. The type is interface{} with
    // range: -2147483648..2147483647.
    CapsulationOptions interface{}
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetEntityData() *types.CommonEntityData {
    encapsulation.EntityData.YFilter = encapsulation.YFilter
    encapsulation.EntityData.YangName = "encapsulation"
    encapsulation.EntityData.BundleName = "cisco_ios_xr"
    encapsulation.EntityData.ParentYangName = "interface-configuration"
    encapsulation.EntityData.SegmentPath = "encapsulation"
    encapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    encapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    encapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    encapsulation.EntityData.Children = make(map[string]types.YChild)
    encapsulation.EntityData.Leafs = make(map[string]types.YLeaf)
    encapsulation.EntityData.Leafs["encapsulation"] = types.YLeaf{"Encapsulation", encapsulation.Encapsulation}
    encapsulation.EntityData.Leafs["capsulation-options"] = types.YLeaf{"CapsulationOptions", encapsulation.CapsulationOptions}
    return &(encapsulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_AaaTable
// AAA configuration
type InterfaceConfigurations_InterfaceConfiguration_AaaTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AAA radius configuration.
    Radius InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius
}

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetEntityData() *types.CommonEntityData {
    aaaTable.EntityData.YFilter = aaaTable.YFilter
    aaaTable.EntityData.YangName = "aaa-table"
    aaaTable.EntityData.BundleName = "cisco_ios_xr"
    aaaTable.EntityData.ParentYangName = "interface-configuration"
    aaaTable.EntityData.SegmentPath = "Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table"
    aaaTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aaaTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aaaTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aaaTable.EntityData.Children = make(map[string]types.YChild)
    aaaTable.EntityData.Children["radius"] = types.YChild{"Radius", &aaaTable.Radius}
    aaaTable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(aaaTable.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius
// AAA radius configuration
type InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AAA radius attribute.
    Attribute InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute
}

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetEntityData() *types.CommonEntityData {
    radius.EntityData.YFilter = radius.YFilter
    radius.EntityData.YangName = "radius"
    radius.EntityData.BundleName = "cisco_ios_xr"
    radius.EntityData.ParentYangName = "aaa-table"
    radius.EntityData.SegmentPath = "radius"
    radius.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radius.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radius.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radius.EntityData.Children = make(map[string]types.YChild)
    radius.EntityData.Children["attribute"] = types.YChild{"Attribute", &radius.Attribute}
    radius.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(radius.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute
// AAA radius attribute
type InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AAA nas-port-type attribute. The type is NasPortValue.
    NasPortType interface{}
}

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetEntityData() *types.CommonEntityData {
    attribute.EntityData.YFilter = attribute.YFilter
    attribute.EntityData.YangName = "attribute"
    attribute.EntityData.BundleName = "cisco_ios_xr"
    attribute.EntityData.ParentYangName = "radius"
    attribute.EntityData.SegmentPath = "attribute"
    attribute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attribute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attribute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attribute.EntityData.Children = make(map[string]types.YChild)
    attribute.EntityData.Leafs = make(map[string]types.YLeaf)
    attribute.EntityData.Leafs["nas-port-type"] = types.YLeaf{"NasPortType", attribute.NasPortType}
    return &(attribute.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetControl
// EthernetControl
type InterfaceConfigurations_InterfaceConfiguration_EthernetControl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the transport mode on an interface. The type is EtherCtrlTransportMode.
    TransportMode interface{}

    // Enable small frame padding on an interface. The type is interface{}.
    SmallFramePadding interface{}

    // Transceiver.
    Transceiver InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver
}

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetEntityData() *types.CommonEntityData {
    ethernetControl.EntityData.YFilter = ethernetControl.YFilter
    ethernetControl.EntityData.YangName = "ethernet-control"
    ethernetControl.EntityData.BundleName = "cisco_ios_xr"
    ethernetControl.EntityData.ParentYangName = "interface-configuration"
    ethernetControl.EntityData.SegmentPath = "Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control"
    ethernetControl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetControl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetControl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetControl.EntityData.Children = make(map[string]types.YChild)
    ethernetControl.EntityData.Children["transceiver"] = types.YChild{"Transceiver", &ethernetControl.Transceiver}
    ethernetControl.EntityData.Leafs = make(map[string]types.YLeaf)
    ethernetControl.EntityData.Leafs["transport-mode"] = types.YLeaf{"TransportMode", ethernetControl.TransportMode}
    ethernetControl.EntityData.Leafs["small-frame-padding"] = types.YLeaf{"SmallFramePadding", ethernetControl.SmallFramePadding}
    return &(ethernetControl.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver
// Transceiver
type InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Permit.
    Permit InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit
}

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetEntityData() *types.CommonEntityData {
    transceiver.EntityData.YFilter = transceiver.YFilter
    transceiver.EntityData.YangName = "transceiver"
    transceiver.EntityData.BundleName = "cisco_ios_xr"
    transceiver.EntityData.ParentYangName = "ethernet-control"
    transceiver.EntityData.SegmentPath = "transceiver"
    transceiver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transceiver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transceiver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transceiver.EntityData.Children = make(map[string]types.YChild)
    transceiver.EntityData.Children["permit"] = types.YChild{"Permit", &transceiver.Permit}
    transceiver.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(transceiver.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit
// Permit
type InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Permit pluggable type all. The type is PermitPluggable.
    Type_ interface{}

    // Permit pluggable PID (Product ID) all. The type is PermitPluggablePid.
    Pid interface{}
}

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetEntityData() *types.CommonEntityData {
    permit.EntityData.YFilter = permit.YFilter
    permit.EntityData.YangName = "permit"
    permit.EntityData.BundleName = "cisco_ios_xr"
    permit.EntityData.ParentYangName = "transceiver"
    permit.EntityData.SegmentPath = "permit"
    permit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    permit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    permit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    permit.EntityData.Children = make(map[string]types.YChild)
    permit.EntityData.Leafs = make(map[string]types.YLeaf)
    permit.EntityData.Leafs["type"] = types.YLeaf{"Type_", permit.Type_}
    permit.EntityData.Leafs["pid"] = types.YLeaf{"Pid", permit.Pid}
    return &(permit.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp
// Precision Time Protocol interface configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync unicast grant duration, in seconds. The type is interface{} with
    // range: 60..1000. Units are second. The default value is 300.
    SyncGrantDuration interface{}

    // General COS. The type is interface{} with range: 0..7. The default value is
    // 6.
    GeneralCos interface{}

    // Enable the precision time protocol. The type is interface{}.
    Enable interface{}

    // Sync timeout, in milliseconds. The type is interface{} with range:
    // 100..100000. Units are millisecond. The default value is 5000.
    SyncTimeout interface{}

    // Transport. The type is PtpEncap. The default value is ipv4.
    Transport interface{}

    // Precision Time Protocol configuration profile. The type is string.
    Profile interface{}

    // Announce Timeout. The type is interface{} with range: 2..10. The default
    // value is 3.
    AnnounceTimeout interface{}

    // COS. The type is interface{} with range: 0..7. The default value is 6.
    Cos interface{}

    // Port state restriction. The type is PtpPortState. The default value is any.
    PortState interface{}

    // Delay-Response timeout, in milliseconds. The type is interface{} with
    // range: 100..100000. Units are millisecond. The default value is 5000.
    DelayResponseTimeout interface{}

    // Local priority. The type is interface{} with range: 1..255. The default
    // value is 128.
    LocalPriority interface{}

    // Delay-Response unicast grant duration, in seconds. The type is interface{}
    // with range: 60..1000. Units are second. The default value is 300.
    DelayResponseGrantDuration interface{}

    // Event COS. The type is interface{} with range: 0..7. The default value is
    // 6.
    EventCos interface{}

    // DSCP. The type is interface{} with range: 0..63. The default value is 46.
    Dscp interface{}

    // General DSCP. The type is interface{} with range: 0..63. The default value
    // is 46.
    GeneralDscp interface{}

    // Clock Operation. The type is PtpClockOperation. The default value is
    // two-step.
    ClockOperation interface{}

    // Announce unicast grant duration, in seconds. The type is interface{} with
    // range: 60..1000. Units are second. The default value is 300.
    AnnounceGrantDuration interface{}

    // Invalid unicast grant request response. The type is
    // PtpInvalidUnicastGrantRequestResponse. The default value is reduce.
    UnicastGrantInvalidRequest interface{}

    // Event DSCP. The type is interface{} with range: 0..63. The default value is
    // 46.
    EventDscp interface{}

    // Source IPv6 Address.
    SourceIpv6Address InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address

    // Announce interval.
    AnnounceInterval InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval

    // Source IPv4 Address.
    SourceIpv4Address InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address

    // Table for slave configuration.
    Slaves InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves

    // Sync interval.
    SyncInterval InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval

    // Table for master configuration.
    Masters InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters

    // Communication model.
    Communication InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication

    // Minimum delay request interval.
    DelayRequestMinimumInterval InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval
}

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetEntityData() *types.CommonEntityData {
    ptp.EntityData.YFilter = ptp.YFilter
    ptp.EntityData.YangName = "ptp"
    ptp.EntityData.BundleName = "cisco_ios_xr"
    ptp.EntityData.ParentYangName = "interface-configuration"
    ptp.EntityData.SegmentPath = "Cisco-IOS-XR-ptp-cfg:ptp"
    ptp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ptp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ptp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ptp.EntityData.Children = make(map[string]types.YChild)
    ptp.EntityData.Children["source-ipv6-address"] = types.YChild{"SourceIpv6Address", &ptp.SourceIpv6Address}
    ptp.EntityData.Children["announce-interval"] = types.YChild{"AnnounceInterval", &ptp.AnnounceInterval}
    ptp.EntityData.Children["source-ipv4-address"] = types.YChild{"SourceIpv4Address", &ptp.SourceIpv4Address}
    ptp.EntityData.Children["slaves"] = types.YChild{"Slaves", &ptp.Slaves}
    ptp.EntityData.Children["sync-interval"] = types.YChild{"SyncInterval", &ptp.SyncInterval}
    ptp.EntityData.Children["masters"] = types.YChild{"Masters", &ptp.Masters}
    ptp.EntityData.Children["communication"] = types.YChild{"Communication", &ptp.Communication}
    ptp.EntityData.Children["delay-request-minimum-interval"] = types.YChild{"DelayRequestMinimumInterval", &ptp.DelayRequestMinimumInterval}
    ptp.EntityData.Leafs = make(map[string]types.YLeaf)
    ptp.EntityData.Leafs["sync-grant-duration"] = types.YLeaf{"SyncGrantDuration", ptp.SyncGrantDuration}
    ptp.EntityData.Leafs["general-cos"] = types.YLeaf{"GeneralCos", ptp.GeneralCos}
    ptp.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ptp.Enable}
    ptp.EntityData.Leafs["sync-timeout"] = types.YLeaf{"SyncTimeout", ptp.SyncTimeout}
    ptp.EntityData.Leafs["transport"] = types.YLeaf{"Transport", ptp.Transport}
    ptp.EntityData.Leafs["profile"] = types.YLeaf{"Profile", ptp.Profile}
    ptp.EntityData.Leafs["announce-timeout"] = types.YLeaf{"AnnounceTimeout", ptp.AnnounceTimeout}
    ptp.EntityData.Leafs["cos"] = types.YLeaf{"Cos", ptp.Cos}
    ptp.EntityData.Leafs["port-state"] = types.YLeaf{"PortState", ptp.PortState}
    ptp.EntityData.Leafs["delay-response-timeout"] = types.YLeaf{"DelayResponseTimeout", ptp.DelayResponseTimeout}
    ptp.EntityData.Leafs["local-priority"] = types.YLeaf{"LocalPriority", ptp.LocalPriority}
    ptp.EntityData.Leafs["delay-response-grant-duration"] = types.YLeaf{"DelayResponseGrantDuration", ptp.DelayResponseGrantDuration}
    ptp.EntityData.Leafs["event-cos"] = types.YLeaf{"EventCos", ptp.EventCos}
    ptp.EntityData.Leafs["dscp"] = types.YLeaf{"Dscp", ptp.Dscp}
    ptp.EntityData.Leafs["general-dscp"] = types.YLeaf{"GeneralDscp", ptp.GeneralDscp}
    ptp.EntityData.Leafs["clock-operation"] = types.YLeaf{"ClockOperation", ptp.ClockOperation}
    ptp.EntityData.Leafs["announce-grant-duration"] = types.YLeaf{"AnnounceGrantDuration", ptp.AnnounceGrantDuration}
    ptp.EntityData.Leafs["unicast-grant-invalid-request"] = types.YLeaf{"UnicastGrantInvalidRequest", ptp.UnicastGrantInvalidRequest}
    ptp.EntityData.Leafs["event-dscp"] = types.YLeaf{"EventDscp", ptp.EventDscp}
    return &(ptp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address
// Source IPv6 Address
type InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable source IPv6 address. The type is bool.
    Enable interface{}

    // Source IPv6 address to use. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceIpv6 interface{}
}

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetEntityData() *types.CommonEntityData {
    sourceIpv6Address.EntityData.YFilter = sourceIpv6Address.YFilter
    sourceIpv6Address.EntityData.YangName = "source-ipv6-address"
    sourceIpv6Address.EntityData.BundleName = "cisco_ios_xr"
    sourceIpv6Address.EntityData.ParentYangName = "ptp"
    sourceIpv6Address.EntityData.SegmentPath = "source-ipv6-address"
    sourceIpv6Address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceIpv6Address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceIpv6Address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceIpv6Address.EntityData.Children = make(map[string]types.YChild)
    sourceIpv6Address.EntityData.Leafs = make(map[string]types.YLeaf)
    sourceIpv6Address.EntityData.Leafs["enable"] = types.YLeaf{"Enable", sourceIpv6Address.Enable}
    sourceIpv6Address.EntityData.Leafs["source-ipv6"] = types.YLeaf{"SourceIpv6", sourceIpv6Address.SourceIpv6}
    return &(sourceIpv6Address.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval
// Announce interval
type InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval or Frequency. The type is PtpTime. The default value is interval.
    TimeType interface{}

    // Time Period. The type is PtpTimePeriod. The default value is 2.
    TimePeriod interface{}
}

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetEntityData() *types.CommonEntityData {
    announceInterval.EntityData.YFilter = announceInterval.YFilter
    announceInterval.EntityData.YangName = "announce-interval"
    announceInterval.EntityData.BundleName = "cisco_ios_xr"
    announceInterval.EntityData.ParentYangName = "ptp"
    announceInterval.EntityData.SegmentPath = "announce-interval"
    announceInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    announceInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    announceInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    announceInterval.EntityData.Children = make(map[string]types.YChild)
    announceInterval.EntityData.Leafs = make(map[string]types.YLeaf)
    announceInterval.EntityData.Leafs["time-type"] = types.YLeaf{"TimeType", announceInterval.TimeType}
    announceInterval.EntityData.Leafs["time-period"] = types.YLeaf{"TimePeriod", announceInterval.TimePeriod}
    return &(announceInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address
// Source IPv4 Address
type InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable source IP address. The type is bool.
    Enable interface{}

    // Source IP address to use. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceIp interface{}
}

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetEntityData() *types.CommonEntityData {
    sourceIpv4Address.EntityData.YFilter = sourceIpv4Address.YFilter
    sourceIpv4Address.EntityData.YangName = "source-ipv4-address"
    sourceIpv4Address.EntityData.BundleName = "cisco_ios_xr"
    sourceIpv4Address.EntityData.ParentYangName = "ptp"
    sourceIpv4Address.EntityData.SegmentPath = "source-ipv4-address"
    sourceIpv4Address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceIpv4Address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceIpv4Address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceIpv4Address.EntityData.Children = make(map[string]types.YChild)
    sourceIpv4Address.EntityData.Leafs = make(map[string]types.YLeaf)
    sourceIpv4Address.EntityData.Leafs["enable"] = types.YLeaf{"Enable", sourceIpv4Address.Enable}
    sourceIpv4Address.EntityData.Leafs["source-ip"] = types.YLeaf{"SourceIp", sourceIpv4Address.SourceIp}
    return &(sourceIpv4Address.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves
// Table for slave configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Slave configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave.
    Slave []InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave
}

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetEntityData() *types.CommonEntityData {
    slaves.EntityData.YFilter = slaves.YFilter
    slaves.EntityData.YangName = "slaves"
    slaves.EntityData.BundleName = "cisco_ios_xr"
    slaves.EntityData.ParentYangName = "ptp"
    slaves.EntityData.SegmentPath = "slaves"
    slaves.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slaves.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slaves.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slaves.EntityData.Children = make(map[string]types.YChild)
    slaves.EntityData.Children["slave"] = types.YChild{"Slave", nil}
    for i := range slaves.Slave {
        slaves.EntityData.Children[types.GetSegmentPath(&slaves.Slave[i])] = types.YChild{"Slave", &slaves.Slave[i]}
    }
    slaves.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(slaves.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave
// Slave configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Slave Transport Type. The type is PtpEncap.
    Transport interface{}

    // ethernet. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet.
    Ethernet []InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet

    // ipv4 or ipv6. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6.
    Ipv4OrIpv6 []InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6
}

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetEntityData() *types.CommonEntityData {
    slave.EntityData.YFilter = slave.YFilter
    slave.EntityData.YangName = "slave"
    slave.EntityData.BundleName = "cisco_ios_xr"
    slave.EntityData.ParentYangName = "slaves"
    slave.EntityData.SegmentPath = "slave" + "[transport='" + fmt.Sprintf("%v", slave.Transport) + "']"
    slave.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slave.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slave.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slave.EntityData.Children = make(map[string]types.YChild)
    slave.EntityData.Children["ethernet"] = types.YChild{"Ethernet", nil}
    for i := range slave.Ethernet {
        slave.EntityData.Children[types.GetSegmentPath(&slave.Ethernet[i])] = types.YChild{"Ethernet", &slave.Ethernet[i]}
    }
    slave.EntityData.Children["ipv4-or-ipv6"] = types.YChild{"Ipv4OrIpv6", nil}
    for i := range slave.Ipv4OrIpv6 {
        slave.EntityData.Children[types.GetSegmentPath(&slave.Ipv4OrIpv6[i])] = types.YChild{"Ipv4OrIpv6", &slave.Ipv4OrIpv6[i]}
    }
    slave.EntityData.Leafs = make(map[string]types.YLeaf)
    slave.EntityData.Leafs["transport"] = types.YLeaf{"Transport", slave.Transport}
    return &(slave.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet
// ethernet
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Slave MAC Address. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    SlaveMacAddress interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetEntityData() *types.CommonEntityData {
    ethernet.EntityData.YFilter = ethernet.YFilter
    ethernet.EntityData.YangName = "ethernet"
    ethernet.EntityData.BundleName = "cisco_ios_xr"
    ethernet.EntityData.ParentYangName = "slave"
    ethernet.EntityData.SegmentPath = "ethernet" + "[slave-mac-address='" + fmt.Sprintf("%v", ethernet.SlaveMacAddress) + "']"
    ethernet.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernet.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernet.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernet.EntityData.Children = make(map[string]types.YChild)
    ethernet.EntityData.Leafs = make(map[string]types.YLeaf)
    ethernet.EntityData.Leafs["slave-mac-address"] = types.YLeaf{"SlaveMacAddress", ethernet.SlaveMacAddress}
    ethernet.EntityData.Leafs["non-negotiated"] = types.YLeaf{"NonNegotiated", ethernet.NonNegotiated}
    return &(ethernet.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6
// ipv4 or ipv6
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Slave IP Address. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SlaveIpAddress interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetEntityData() *types.CommonEntityData {
    ipv4OrIpv6.EntityData.YFilter = ipv4OrIpv6.YFilter
    ipv4OrIpv6.EntityData.YangName = "ipv4-or-ipv6"
    ipv4OrIpv6.EntityData.BundleName = "cisco_ios_xr"
    ipv4OrIpv6.EntityData.ParentYangName = "slave"
    ipv4OrIpv6.EntityData.SegmentPath = "ipv4-or-ipv6" + "[slave-ip-address='" + fmt.Sprintf("%v", ipv4OrIpv6.SlaveIpAddress) + "']"
    ipv4OrIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4OrIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4OrIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4OrIpv6.EntityData.Children = make(map[string]types.YChild)
    ipv4OrIpv6.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4OrIpv6.EntityData.Leafs["slave-ip-address"] = types.YLeaf{"SlaveIpAddress", ipv4OrIpv6.SlaveIpAddress}
    ipv4OrIpv6.EntityData.Leafs["non-negotiated"] = types.YLeaf{"NonNegotiated", ipv4OrIpv6.NonNegotiated}
    return &(ipv4OrIpv6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval
// Sync interval
type InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval or Frequency. The type is PtpTime. The default value is interval.
    TimeType interface{}

    // Time Period. The type is PtpTimePeriod. The default value is 1.
    TimePeriod interface{}
}

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetEntityData() *types.CommonEntityData {
    syncInterval.EntityData.YFilter = syncInterval.YFilter
    syncInterval.EntityData.YangName = "sync-interval"
    syncInterval.EntityData.BundleName = "cisco_ios_xr"
    syncInterval.EntityData.ParentYangName = "ptp"
    syncInterval.EntityData.SegmentPath = "sync-interval"
    syncInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncInterval.EntityData.Children = make(map[string]types.YChild)
    syncInterval.EntityData.Leafs = make(map[string]types.YLeaf)
    syncInterval.EntityData.Leafs["time-type"] = types.YLeaf{"TimeType", syncInterval.TimeType}
    syncInterval.EntityData.Leafs["time-period"] = types.YLeaf{"TimePeriod", syncInterval.TimePeriod}
    return &(syncInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters
// Table for master configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Master configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master.
    Master []InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master
}

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetEntityData() *types.CommonEntityData {
    masters.EntityData.YFilter = masters.YFilter
    masters.EntityData.YangName = "masters"
    masters.EntityData.BundleName = "cisco_ios_xr"
    masters.EntityData.ParentYangName = "ptp"
    masters.EntityData.SegmentPath = "masters"
    masters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    masters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    masters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    masters.EntityData.Children = make(map[string]types.YChild)
    masters.EntityData.Children["master"] = types.YChild{"Master", nil}
    for i := range masters.Master {
        masters.EntityData.Children[types.GetSegmentPath(&masters.Master[i])] = types.YChild{"Master", &masters.Master[i]}
    }
    masters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(masters.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master
// Master configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Master Transport Type. The type is PtpEncap.
    Transport interface{}

    // ethernet. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet.
    Ethernet []InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet

    // ipv4 or ipv6. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6.
    Ipv4OrIpv6 []InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6
}

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetEntityData() *types.CommonEntityData {
    master.EntityData.YFilter = master.YFilter
    master.EntityData.YangName = "master"
    master.EntityData.BundleName = "cisco_ios_xr"
    master.EntityData.ParentYangName = "masters"
    master.EntityData.SegmentPath = "master" + "[transport='" + fmt.Sprintf("%v", master.Transport) + "']"
    master.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    master.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    master.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    master.EntityData.Children = make(map[string]types.YChild)
    master.EntityData.Children["ethernet"] = types.YChild{"Ethernet", nil}
    for i := range master.Ethernet {
        master.EntityData.Children[types.GetSegmentPath(&master.Ethernet[i])] = types.YChild{"Ethernet", &master.Ethernet[i]}
    }
    master.EntityData.Children["ipv4-or-ipv6"] = types.YChild{"Ipv4OrIpv6", nil}
    for i := range master.Ipv4OrIpv6 {
        master.EntityData.Children[types.GetSegmentPath(&master.Ipv4OrIpv6[i])] = types.YChild{"Ipv4OrIpv6", &master.Ipv4OrIpv6[i]}
    }
    master.EntityData.Leafs = make(map[string]types.YLeaf)
    master.EntityData.Leafs["transport"] = types.YLeaf{"Transport", master.Transport}
    return &(master.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet
// ethernet
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Master MAC Address - only used if Transport is
    // Ethernet. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    MasterMacAddress interface{}

    // Master clock class. The type is interface{} with range: 0..255.
    MasterClockClass interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}

    // Master priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Communication Model. The type is PtpTransport. The default value is
    // unicast.
    Communication interface{}

    // The delay asymmetry for this master.
    DelayAsymmetry InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetEntityData() *types.CommonEntityData {
    ethernet.EntityData.YFilter = ethernet.YFilter
    ethernet.EntityData.YangName = "ethernet"
    ethernet.EntityData.BundleName = "cisco_ios_xr"
    ethernet.EntityData.ParentYangName = "master"
    ethernet.EntityData.SegmentPath = "ethernet" + "[master-mac-address='" + fmt.Sprintf("%v", ethernet.MasterMacAddress) + "']"
    ethernet.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernet.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernet.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernet.EntityData.Children = make(map[string]types.YChild)
    ethernet.EntityData.Children["delay-asymmetry"] = types.YChild{"DelayAsymmetry", &ethernet.DelayAsymmetry}
    ethernet.EntityData.Leafs = make(map[string]types.YLeaf)
    ethernet.EntityData.Leafs["master-mac-address"] = types.YLeaf{"MasterMacAddress", ethernet.MasterMacAddress}
    ethernet.EntityData.Leafs["master-clock-class"] = types.YLeaf{"MasterClockClass", ethernet.MasterClockClass}
    ethernet.EntityData.Leafs["non-negotiated"] = types.YLeaf{"NonNegotiated", ethernet.NonNegotiated}
    ethernet.EntityData.Leafs["priority"] = types.YLeaf{"Priority", ethernet.Priority}
    ethernet.EntityData.Leafs["communication"] = types.YLeaf{"Communication", ethernet.Communication}
    return &(ethernet.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry
// The delay asymmetry for this master
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // How much longer the master to slave path takes than the reverse. The type
    // is interface{} with range: -500000000..500000000. This attribute is
    // mandatory.
    Magnitude interface{}

    // The units to use for the delay asymmetry. The type is
    // PtpDelayAsymmetryUnits. This attribute is mandatory.
    Units interface{}
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetEntityData() *types.CommonEntityData {
    delayAsymmetry.EntityData.YFilter = delayAsymmetry.YFilter
    delayAsymmetry.EntityData.YangName = "delay-asymmetry"
    delayAsymmetry.EntityData.BundleName = "cisco_ios_xr"
    delayAsymmetry.EntityData.ParentYangName = "ethernet"
    delayAsymmetry.EntityData.SegmentPath = "delay-asymmetry"
    delayAsymmetry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delayAsymmetry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delayAsymmetry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delayAsymmetry.EntityData.Children = make(map[string]types.YChild)
    delayAsymmetry.EntityData.Leafs = make(map[string]types.YLeaf)
    delayAsymmetry.EntityData.Leafs["magnitude"] = types.YLeaf{"Magnitude", delayAsymmetry.Magnitude}
    delayAsymmetry.EntityData.Leafs["units"] = types.YLeaf{"Units", delayAsymmetry.Units}
    return &(delayAsymmetry.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6
// ipv4 or ipv6
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Master IP Address - used if Transport is not
    // Ethernet. The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    MasterIpAddress interface{}

    // Master clock class. The type is interface{} with range: 0..255.
    MasterClockClass interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}

    // Master priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Communication Model. The type is PtpTransport. The default value is
    // unicast.
    Communication interface{}

    // The delay asymmetry for this master.
    DelayAsymmetry InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetEntityData() *types.CommonEntityData {
    ipv4OrIpv6.EntityData.YFilter = ipv4OrIpv6.YFilter
    ipv4OrIpv6.EntityData.YangName = "ipv4-or-ipv6"
    ipv4OrIpv6.EntityData.BundleName = "cisco_ios_xr"
    ipv4OrIpv6.EntityData.ParentYangName = "master"
    ipv4OrIpv6.EntityData.SegmentPath = "ipv4-or-ipv6" + "[master-ip-address='" + fmt.Sprintf("%v", ipv4OrIpv6.MasterIpAddress) + "']"
    ipv4OrIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4OrIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4OrIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4OrIpv6.EntityData.Children = make(map[string]types.YChild)
    ipv4OrIpv6.EntityData.Children["delay-asymmetry"] = types.YChild{"DelayAsymmetry", &ipv4OrIpv6.DelayAsymmetry}
    ipv4OrIpv6.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4OrIpv6.EntityData.Leafs["master-ip-address"] = types.YLeaf{"MasterIpAddress", ipv4OrIpv6.MasterIpAddress}
    ipv4OrIpv6.EntityData.Leafs["master-clock-class"] = types.YLeaf{"MasterClockClass", ipv4OrIpv6.MasterClockClass}
    ipv4OrIpv6.EntityData.Leafs["non-negotiated"] = types.YLeaf{"NonNegotiated", ipv4OrIpv6.NonNegotiated}
    ipv4OrIpv6.EntityData.Leafs["priority"] = types.YLeaf{"Priority", ipv4OrIpv6.Priority}
    ipv4OrIpv6.EntityData.Leafs["communication"] = types.YLeaf{"Communication", ipv4OrIpv6.Communication}
    return &(ipv4OrIpv6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry
// The delay asymmetry for this master
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // How much longer the master to slave path takes than the reverse. The type
    // is interface{} with range: -500000000..500000000. This attribute is
    // mandatory.
    Magnitude interface{}

    // The units to use for the delay asymmetry. The type is
    // PtpDelayAsymmetryUnits. This attribute is mandatory.
    Units interface{}
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetEntityData() *types.CommonEntityData {
    delayAsymmetry.EntityData.YFilter = delayAsymmetry.YFilter
    delayAsymmetry.EntityData.YangName = "delay-asymmetry"
    delayAsymmetry.EntityData.BundleName = "cisco_ios_xr"
    delayAsymmetry.EntityData.ParentYangName = "ipv4-or-ipv6"
    delayAsymmetry.EntityData.SegmentPath = "delay-asymmetry"
    delayAsymmetry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delayAsymmetry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delayAsymmetry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delayAsymmetry.EntityData.Children = make(map[string]types.YChild)
    delayAsymmetry.EntityData.Leafs = make(map[string]types.YLeaf)
    delayAsymmetry.EntityData.Leafs["magnitude"] = types.YLeaf{"Magnitude", delayAsymmetry.Magnitude}
    delayAsymmetry.EntityData.Leafs["units"] = types.YLeaf{"Units", delayAsymmetry.Units}
    return &(delayAsymmetry.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication
// Communication model
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Communication Model. The type is PtpTransport. The default value is
    // unicast.
    Model interface{}

    // Target address set. The type is bool. The default value is false.
    TargetAddressSet interface{}

    // Target address. The type is string.
    TargetAddress interface{}
}

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetEntityData() *types.CommonEntityData {
    communication.EntityData.YFilter = communication.YFilter
    communication.EntityData.YangName = "communication"
    communication.EntityData.BundleName = "cisco_ios_xr"
    communication.EntityData.ParentYangName = "ptp"
    communication.EntityData.SegmentPath = "communication"
    communication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    communication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    communication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    communication.EntityData.Children = make(map[string]types.YChild)
    communication.EntityData.Leafs = make(map[string]types.YLeaf)
    communication.EntityData.Leafs["model"] = types.YLeaf{"Model", communication.Model}
    communication.EntityData.Leafs["target-address-set"] = types.YLeaf{"TargetAddressSet", communication.TargetAddressSet}
    communication.EntityData.Leafs["target-address"] = types.YLeaf{"TargetAddress", communication.TargetAddress}
    return &(communication.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval
// Minimum delay request interval
type InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval or Frequency. The type is PtpTime. The default value is interval.
    TimeType interface{}

    // Time Period. The type is PtpTimePeriod. The default value is 1.
    TimePeriod interface{}
}

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetEntityData() *types.CommonEntityData {
    delayRequestMinimumInterval.EntityData.YFilter = delayRequestMinimumInterval.YFilter
    delayRequestMinimumInterval.EntityData.YangName = "delay-request-minimum-interval"
    delayRequestMinimumInterval.EntityData.BundleName = "cisco_ios_xr"
    delayRequestMinimumInterval.EntityData.ParentYangName = "ptp"
    delayRequestMinimumInterval.EntityData.SegmentPath = "delay-request-minimum-interval"
    delayRequestMinimumInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delayRequestMinimumInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delayRequestMinimumInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delayRequestMinimumInterval.EntityData.Children = make(map[string]types.YChild)
    delayRequestMinimumInterval.EntityData.Leafs = make(map[string]types.YLeaf)
    delayRequestMinimumInterval.EntityData.Leafs["time-type"] = types.YLeaf{"TimeType", delayRequestMinimumInterval.TimeType}
    delayRequestMinimumInterval.EntityData.Leafs["time-period"] = types.YLeaf{"TimePeriod", delayRequestMinimumInterval.TimePeriod}
    return &(delayRequestMinimumInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PseudowireEther
// PW-Ether attributes
type InterfaceConfigurations_InterfaceConfiguration_PseudowireEther struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the interface list. The type is string with length: 1..32.
    GenericInterfaceList interface{}

    // PW Ether L2 overhead requirement. The type is interface{} with range:
    // 1..64.
    L2Overhead interface{}
}

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetEntityData() *types.CommonEntityData {
    pseudowireEther.EntityData.YFilter = pseudowireEther.YFilter
    pseudowireEther.EntityData.YangName = "pseudowire-ether"
    pseudowireEther.EntityData.BundleName = "cisco_ios_xr"
    pseudowireEther.EntityData.ParentYangName = "interface-configuration"
    pseudowireEther.EntityData.SegmentPath = "Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether"
    pseudowireEther.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireEther.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireEther.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireEther.EntityData.Children = make(map[string]types.YChild)
    pseudowireEther.EntityData.Leafs = make(map[string]types.YLeaf)
    pseudowireEther.EntityData.Leafs["generic-interface-list"] = types.YLeaf{"GenericInterfaceList", pseudowireEther.GenericInterfaceList}
    pseudowireEther.EntityData.Leafs["l2-overhead"] = types.YLeaf{"L2Overhead", pseudowireEther.L2Overhead}
    return &(pseudowireEther.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PseudowireIw
// PW-IW attributes
type InterfaceConfigurations_InterfaceConfiguration_PseudowireIw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L2 overhead size in bytes. The type is interface{} with range: 1..64. Units
    // are byte.
    L2Overhead interface{}

    // Name of the interface list. The type is string with length: 1..32.
    GenericInterfaceList interface{}
}

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetEntityData() *types.CommonEntityData {
    pseudowireIw.EntityData.YFilter = pseudowireIw.YFilter
    pseudowireIw.EntityData.YangName = "pseudowire-iw"
    pseudowireIw.EntityData.BundleName = "cisco_ios_xr"
    pseudowireIw.EntityData.ParentYangName = "interface-configuration"
    pseudowireIw.EntityData.SegmentPath = "Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw"
    pseudowireIw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireIw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireIw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireIw.EntityData.Children = make(map[string]types.YChild)
    pseudowireIw.EntityData.Leafs = make(map[string]types.YLeaf)
    pseudowireIw.EntityData.Leafs["l2-overhead"] = types.YLeaf{"L2Overhead", pseudowireIw.L2Overhead}
    pseudowireIw.EntityData.Leafs["generic-interface-list"] = types.YLeaf{"GenericInterfaceList", pseudowireIw.GenericInterfaceList}
    return &(pseudowireIw.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bvi
// BVI attributes
type InterfaceConfigurations_InterfaceConfiguration_Bvi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable host-routing on this BVI. The type is interface{}.
    HostRouting interface{}
}

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetEntityData() *types.CommonEntityData {
    bvi.EntityData.YFilter = bvi.YFilter
    bvi.EntityData.YangName = "bvi"
    bvi.EntityData.BundleName = "cisco_ios_xr"
    bvi.EntityData.ParentYangName = "interface-configuration"
    bvi.EntityData.SegmentPath = "Cisco-IOS-XR-l2vpn-cfg:bvi"
    bvi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bvi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bvi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bvi.EntityData.Children = make(map[string]types.YChild)
    bvi.EntityData.Leafs = make(map[string]types.YLeaf)
    bvi.EntityData.Leafs["host-routing"] = types.YLeaf{"HostRouting", bvi.HostRouting}
    return &(bvi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport
// Interface Layer 2 Transport service
// configuration data
type InterfaceConfigurations_InterfaceConfiguration_L2Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is only valid on physical interfaces and it controls whether
    // that interface is a port mode Layer 2 attachment circuit (note that for
    // subinterfaces, the Layer 2 property is specified when the subinterface is
    // created).The object must be set before any other L2Transport configuration
    // is supplied for the interface, and must be the last per-interface
    // configuration object to be removed. The type is interface{}.
    Enabled interface{}

    // Enable propagation of the remote attachment-circuit link state to the
    // localattachment-circuit link state. The type is interface{}.
    PropagateRemoteStatus interface{}

    // ATM L2transport Port Mode Parameters Configuration.
    AtmPortModeParameters InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters

    // Interface specific Layer 2 protocol handling.
    L2Protocols InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols

    // L2 Ethernet Features Configuration.
    L2EthernetFeatures InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures

    // Monitor Session container for this source interface.
    SpanMonitorSessions InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions

    // Port Attachment Circuit configuration.
    Pac InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac

    // Connection Attachment Circuit configuration.
    Cac InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac
}

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetEntityData() *types.CommonEntityData {
    l2Transport.EntityData.YFilter = l2Transport.YFilter
    l2Transport.EntityData.YangName = "l2-transport"
    l2Transport.EntityData.BundleName = "cisco_ios_xr"
    l2Transport.EntityData.ParentYangName = "interface-configuration"
    l2Transport.EntityData.SegmentPath = "Cisco-IOS-XR-l2vpn-cfg:l2-transport"
    l2Transport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Transport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Transport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Transport.EntityData.Children = make(map[string]types.YChild)
    l2Transport.EntityData.Children["Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters"] = types.YChild{"AtmPortModeParameters", &l2Transport.AtmPortModeParameters}
    l2Transport.EntityData.Children["Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols"] = types.YChild{"L2Protocols", &l2Transport.L2Protocols}
    l2Transport.EntityData.Children["Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features"] = types.YChild{"L2EthernetFeatures", &l2Transport.L2EthernetFeatures}
    l2Transport.EntityData.Children["Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"] = types.YChild{"SpanMonitorSessions", &l2Transport.SpanMonitorSessions}
    l2Transport.EntityData.Children["Cisco-IOS-XR-qos-ma-cfg:pac"] = types.YChild{"Pac", &l2Transport.Pac}
    l2Transport.EntityData.Children["Cisco-IOS-XR-qos-ma-cfg:cac"] = types.YChild{"Cac", &l2Transport.Cac}
    l2Transport.EntityData.Leafs = make(map[string]types.YLeaf)
    l2Transport.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", l2Transport.Enabled}
    l2Transport.EntityData.Leafs["propagate-remote-status"] = types.YLeaf{"PropagateRemoteStatus", l2Transport.PropagateRemoteStatus}
    return &(l2Transport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters
// ATM L2transport Port Mode Parameters
// Configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure cell-packing parameters.  All parameters are mandatory.
    CellPacking InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking
}

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetEntityData() *types.CommonEntityData {
    atmPortModeParameters.EntityData.YFilter = atmPortModeParameters.YFilter
    atmPortModeParameters.EntityData.YangName = "atm-port-mode-parameters"
    atmPortModeParameters.EntityData.BundleName = "cisco_ios_xr"
    atmPortModeParameters.EntityData.ParentYangName = "l2-transport"
    atmPortModeParameters.EntityData.SegmentPath = "Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters"
    atmPortModeParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atmPortModeParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atmPortModeParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atmPortModeParameters.EntityData.Children = make(map[string]types.YChild)
    atmPortModeParameters.EntityData.Children["cell-packing"] = types.YChild{"CellPacking", &atmPortModeParameters.CellPacking}
    atmPortModeParameters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(atmPortModeParameters.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking
// Configure cell-packing parameters.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of cells to be packed in a packet. The type is interface{}
    // with range: 2..255. This attribute is mandatory.
    MaximumCellsPacked interface{}

    // Which cell packing timer to use. The type is interface{} with range: 1..3.
    // This attribute is mandatory.
    CellPackingTimerId interface{}
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetEntityData() *types.CommonEntityData {
    cellPacking.EntityData.YFilter = cellPacking.YFilter
    cellPacking.EntityData.YangName = "cell-packing"
    cellPacking.EntityData.BundleName = "cisco_ios_xr"
    cellPacking.EntityData.ParentYangName = "atm-port-mode-parameters"
    cellPacking.EntityData.SegmentPath = "cell-packing"
    cellPacking.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cellPacking.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cellPacking.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cellPacking.EntityData.Children = make(map[string]types.YChild)
    cellPacking.EntityData.Leafs = make(map[string]types.YLeaf)
    cellPacking.EntityData.Leafs["maximum-cells-packed"] = types.YLeaf{"MaximumCellsPacked", cellPacking.MaximumCellsPacked}
    cellPacking.EntityData.Leafs["cell-packing-timer-id"] = types.YLeaf{"CellPackingTimerId", cellPacking.CellPackingTimerId}
    return &(cellPacking.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols
// Interface specific Layer 2 protocol handling
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Handling of a specific Layer 2 protocol. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol.
    L2Protocol []InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol
}

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetEntityData() *types.CommonEntityData {
    l2Protocols.EntityData.YFilter = l2Protocols.YFilter
    l2Protocols.EntityData.YangName = "l2-protocols"
    l2Protocols.EntityData.BundleName = "cisco_ios_xr"
    l2Protocols.EntityData.ParentYangName = "l2-transport"
    l2Protocols.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols"
    l2Protocols.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Protocols.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Protocols.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Protocols.EntityData.Children = make(map[string]types.YChild)
    l2Protocols.EntityData.Children["l2-protocol"] = types.YChild{"L2Protocol", nil}
    for i := range l2Protocols.L2Protocol {
        l2Protocols.EntityData.Children[types.GetSegmentPath(&l2Protocols.L2Protocol[i])] = types.YChild{"L2Protocol", &l2Protocols.L2Protocol[i]}
    }
    l2Protocols.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l2Protocols.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol
// Handling of a specific Layer 2 protocol
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol name. The type is L2ProtocolName.
    L2ProtocolName interface{}

    // How to handle the protocol's packets. The type is L2ProtocolMode. This
    // attribute is mandatory.
    Mode interface{}

    // The value to set the MPLS Exp bits to within the PW.This value may be
    // specified if the mode is forward or tunnel and must not be specified if the
    // mode is drop. The type is interface{} with range: 0..7.
    MplsExpBitsValue interface{}
}

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetEntityData() *types.CommonEntityData {
    l2Protocol.EntityData.YFilter = l2Protocol.YFilter
    l2Protocol.EntityData.YangName = "l2-protocol"
    l2Protocol.EntityData.BundleName = "cisco_ios_xr"
    l2Protocol.EntityData.ParentYangName = "l2-protocols"
    l2Protocol.EntityData.SegmentPath = "l2-protocol" + "[l2-protocol-name='" + fmt.Sprintf("%v", l2Protocol.L2ProtocolName) + "']"
    l2Protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Protocol.EntityData.Children = make(map[string]types.YChild)
    l2Protocol.EntityData.Leafs = make(map[string]types.YLeaf)
    l2Protocol.EntityData.Leafs["l2-protocol-name"] = types.YLeaf{"L2ProtocolName", l2Protocol.L2ProtocolName}
    l2Protocol.EntityData.Leafs["mode"] = types.YLeaf{"Mode", l2Protocol.Mode}
    l2Protocol.EntityData.Leafs["mpls-exp-bits-value"] = types.YLeaf{"MplsExpBitsValue", l2Protocol.MplsExpBitsValue}
    return &(l2Protocol.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures
// L2 Ethernet Features Configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress Ethernet filtering. The type is EgressFiltering. The default value
    // is egress-filtering-type-default.
    EgressFiltering interface{}

    // Mark all ingress packets to bypass any egress VLAN filter. The type is
    // interface{}.
    SourceBypassEgressFiltering interface{}
}

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetEntityData() *types.CommonEntityData {
    l2EthernetFeatures.EntityData.YFilter = l2EthernetFeatures.YFilter
    l2EthernetFeatures.EntityData.YangName = "l2-ethernet-features"
    l2EthernetFeatures.EntityData.BundleName = "cisco_ios_xr"
    l2EthernetFeatures.EntityData.ParentYangName = "l2-transport"
    l2EthernetFeatures.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features"
    l2EthernetFeatures.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2EthernetFeatures.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2EthernetFeatures.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2EthernetFeatures.EntityData.Children = make(map[string]types.YChild)
    l2EthernetFeatures.EntityData.Leafs = make(map[string]types.YLeaf)
    l2EthernetFeatures.EntityData.Leafs["egress-filtering"] = types.YLeaf{"EgressFiltering", l2EthernetFeatures.EgressFiltering}
    l2EthernetFeatures.EntityData.Leafs["source-bypass-egress-filtering"] = types.YLeaf{"SourceBypassEgressFiltering", l2EthernetFeatures.SourceBypassEgressFiltering}
    return &(l2EthernetFeatures.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions
// Monitor Session container for this source
// interface
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular class of Monitor Session. The type is slice
    // of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession.
    SpanMonitorSession []InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetEntityData() *types.CommonEntityData {
    spanMonitorSessions.EntityData.YFilter = spanMonitorSessions.YFilter
    spanMonitorSessions.EntityData.YangName = "span-monitor-sessions"
    spanMonitorSessions.EntityData.BundleName = "cisco_ios_xr"
    spanMonitorSessions.EntityData.ParentYangName = "l2-transport"
    spanMonitorSessions.EntityData.SegmentPath = "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"
    spanMonitorSessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spanMonitorSessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spanMonitorSessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spanMonitorSessions.EntityData.Children = make(map[string]types.YChild)
    spanMonitorSessions.EntityData.Children["span-monitor-session"] = types.YChild{"SpanMonitorSession", nil}
    for i := range spanMonitorSessions.SpanMonitorSession {
        spanMonitorSessions.EntityData.Children[types.GetSegmentPath(&spanMonitorSessions.SpanMonitorSession[i])] = types.YChild{"SpanMonitorSession", &spanMonitorSessions.SpanMonitorSession[i]}
    }
    spanMonitorSessions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(spanMonitorSessions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession
// Configuration for a particular class of Monitor
// Session
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Session Class. The type is SpanSessionClass.
    SessionClass interface{}

    // Mirror a specified number of bytes from start of packet. The type is
    // interface{} with range: 1..10000. Units are byte.
    MirrorFirst interface{}

    // Specify the mirror interval. The type is SpanMirrorInterval.
    MirrorInterval interface{}

    // Attach the interface to a Monitor Session.
    Attachment InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment

    // Enable ACL matching for traffic mirroring.
    Acl InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetEntityData() *types.CommonEntityData {
    spanMonitorSession.EntityData.YFilter = spanMonitorSession.YFilter
    spanMonitorSession.EntityData.YangName = "span-monitor-session"
    spanMonitorSession.EntityData.BundleName = "cisco_ios_xr"
    spanMonitorSession.EntityData.ParentYangName = "span-monitor-sessions"
    spanMonitorSession.EntityData.SegmentPath = "span-monitor-session" + "[session-class='" + fmt.Sprintf("%v", spanMonitorSession.SessionClass) + "']"
    spanMonitorSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spanMonitorSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spanMonitorSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spanMonitorSession.EntityData.Children = make(map[string]types.YChild)
    spanMonitorSession.EntityData.Children["attachment"] = types.YChild{"Attachment", &spanMonitorSession.Attachment}
    spanMonitorSession.EntityData.Children["acl"] = types.YChild{"Acl", &spanMonitorSession.Acl}
    spanMonitorSession.EntityData.Leafs = make(map[string]types.YLeaf)
    spanMonitorSession.EntityData.Leafs["session-class"] = types.YLeaf{"SessionClass", spanMonitorSession.SessionClass}
    spanMonitorSession.EntityData.Leafs["mirror-first"] = types.YLeaf{"MirrorFirst", spanMonitorSession.MirrorFirst}
    spanMonitorSession.EntityData.Leafs["mirror-interval"] = types.YLeaf{"MirrorInterval", spanMonitorSession.MirrorInterval}
    return &(spanMonitorSession.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment
// Attach the interface to a Monitor Session
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session Name. The type is string with length: 1..79. This attribute is
    // mandatory.
    SessionName interface{}

    // Specify the direction of traffic to replicate (optional). The type is
    // SpanTrafficDirection.
    Direction interface{}

    // Enable port level traffic mirroring. The type is interface{}.
    PortLevelEnable interface{}
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetEntityData() *types.CommonEntityData {
    attachment.EntityData.YFilter = attachment.YFilter
    attachment.EntityData.YangName = "attachment"
    attachment.EntityData.BundleName = "cisco_ios_xr"
    attachment.EntityData.ParentYangName = "span-monitor-session"
    attachment.EntityData.SegmentPath = "attachment"
    attachment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attachment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attachment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attachment.EntityData.Children = make(map[string]types.YChild)
    attachment.EntityData.Leafs = make(map[string]types.YLeaf)
    attachment.EntityData.Leafs["session-name"] = types.YLeaf{"SessionName", attachment.SessionName}
    attachment.EntityData.Leafs["direction"] = types.YLeaf{"Direction", attachment.Direction}
    attachment.EntityData.Leafs["port-level-enable"] = types.YLeaf{"PortLevelEnable", attachment.PortLevelEnable}
    return &(attachment.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl
// Enable ACL matching for traffic mirroring
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ACL. The type is interface{}. This attribute is mandatory.
    AclEnable interface{}

    // ACL Name. The type is string with length: 1..80.
    AclName interface{}
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetEntityData() *types.CommonEntityData {
    acl.EntityData.YFilter = acl.YFilter
    acl.EntityData.YangName = "acl"
    acl.EntityData.BundleName = "cisco_ios_xr"
    acl.EntityData.ParentYangName = "span-monitor-session"
    acl.EntityData.SegmentPath = "acl"
    acl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    acl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    acl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    acl.EntityData.Children = make(map[string]types.YChild)
    acl.EntityData.Leafs = make(map[string]types.YLeaf)
    acl.EntityData.Leafs["acl-enable"] = types.YLeaf{"AclEnable", acl.AclEnable}
    acl.EntityData.Leafs["acl-name"] = types.YLeaf{"AclName", acl.AclName}
    return &(acl.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac
// Port Attachment Circuit configuration.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos
}

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetEntityData() *types.CommonEntityData {
    pac.EntityData.YFilter = pac.YFilter
    pac.EntityData.YangName = "pac"
    pac.EntityData.BundleName = "cisco_ios_xr"
    pac.EntityData.ParentYangName = "l2-transport"
    pac.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-cfg:pac"
    pac.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pac.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pac.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pac.EntityData.Children = make(map[string]types.YChild)
    pac.EntityData.Children["qos"] = types.YChild{"Qos", &pac.Qos}
    pac.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(pac.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "pac"
    qos.EntityData.SegmentPath = "qos"
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = make(map[string]types.YChild)
    qos.EntityData.Children["output"] = types.YChild{"Output", &qos.Output}
    qos.EntityData.Children["input"] = types.YChild{"Input", &qos.Input}
    qos.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = make(map[string]types.YChild)
    output.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range output.ServicePolicy {
        output.EntityData.Children[types.GetSegmentPath(&output.ServicePolicy[i])] = types.YChild{"ServicePolicy", &output.ServicePolicy[i]}
    }
    output.EntityData.Children["service-policy-qos"] = types.YChild{"ServicePolicyQos", nil}
    for i := range output.ServicePolicyQos {
        output.EntityData.Children[types.GetSegmentPath(&output.ServicePolicyQos[i])] = types.YChild{"ServicePolicyQos", &output.ServicePolicyQos[i]}
    }
    output.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    servicePolicy.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", servicePolicy.AccountType}
    servicePolicy.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined}
    servicePolicy.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", servicePolicy.SpiName}
    servicePolicy.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy}
    servicePolicy.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", servicePolicy.ResourceId}
    servicePolicy.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "output"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = make(map[string]types.YChild)
    servicePolicyQos.EntityData.Children["subscriber-group-names"] = types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames}
    servicePolicyQos.EntityData.Children["subscriber-parent"] = types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent}
    servicePolicyQos.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicyQos.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName}
    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupNames.EntityData.Children["subscriber-group-name"] = types.YChild{"SubscriberGroupName", nil}
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children[types.GetSegmentPath(&subscriberGroupNames.SubscriberGroupName[i])] = types.YChild{"SubscriberGroupName", &subscriberGroupNames.SubscriberGroupName[i]}
    }
    subscriberGroupNames.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupName.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberGroupName.EntityData.Leafs["subscriber-group-string"] = types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString}
    subscriberGroupName.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberGroupName.AccountType}
    subscriberGroupName.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined}
    subscriberGroupName.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberGroupName.SpiName}
    subscriberGroupName.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge}
    subscriberGroupName.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy}
    subscriberGroupName.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberGroupName.ResourceId}
    subscriberGroupName.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy}
    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = make(map[string]types.YChild)
    subscriberParent.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberParent.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberParent.AccountType}
    subscriberParent.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined}
    subscriberParent.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberParent.SpiName}
    subscriberParent.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge}
    subscriberParent.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy}
    subscriberParent.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberParent.ResourceId}
    subscriberParent.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy}
    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = make(map[string]types.YChild)
    input.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range input.ServicePolicy {
        input.EntityData.Children[types.GetSegmentPath(&input.ServicePolicy[i])] = types.YChild{"ServicePolicy", &input.ServicePolicy[i]}
    }
    input.EntityData.Children["service-policy-qos"] = types.YChild{"ServicePolicyQos", nil}
    for i := range input.ServicePolicyQos {
        input.EntityData.Children[types.GetSegmentPath(&input.ServicePolicyQos[i])] = types.YChild{"ServicePolicyQos", &input.ServicePolicyQos[i]}
    }
    input.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    servicePolicy.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", servicePolicy.AccountType}
    servicePolicy.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined}
    servicePolicy.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", servicePolicy.SpiName}
    servicePolicy.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy}
    servicePolicy.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", servicePolicy.ResourceId}
    servicePolicy.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "input"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = make(map[string]types.YChild)
    servicePolicyQos.EntityData.Children["subscriber-group-names"] = types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames}
    servicePolicyQos.EntityData.Children["subscriber-parent"] = types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent}
    servicePolicyQos.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicyQos.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName}
    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupNames.EntityData.Children["subscriber-group-name"] = types.YChild{"SubscriberGroupName", nil}
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children[types.GetSegmentPath(&subscriberGroupNames.SubscriberGroupName[i])] = types.YChild{"SubscriberGroupName", &subscriberGroupNames.SubscriberGroupName[i]}
    }
    subscriberGroupNames.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupName.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberGroupName.EntityData.Leafs["subscriber-group-string"] = types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString}
    subscriberGroupName.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberGroupName.AccountType}
    subscriberGroupName.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined}
    subscriberGroupName.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberGroupName.SpiName}
    subscriberGroupName.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge}
    subscriberGroupName.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy}
    subscriberGroupName.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberGroupName.ResourceId}
    subscriberGroupName.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy}
    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = make(map[string]types.YChild)
    subscriberParent.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberParent.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberParent.AccountType}
    subscriberParent.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined}
    subscriberParent.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberParent.SpiName}
    subscriberParent.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge}
    subscriberParent.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy}
    subscriberParent.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberParent.ResourceId}
    subscriberParent.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy}
    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac
// Connection Attachment Circuit configuration.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos
}

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetEntityData() *types.CommonEntityData {
    cac.EntityData.YFilter = cac.YFilter
    cac.EntityData.YangName = "cac"
    cac.EntityData.BundleName = "cisco_ios_xr"
    cac.EntityData.ParentYangName = "l2-transport"
    cac.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-cfg:cac"
    cac.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cac.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cac.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cac.EntityData.Children = make(map[string]types.YChild)
    cac.EntityData.Children["qos"] = types.YChild{"Qos", &cac.Qos}
    cac.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cac.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "cac"
    qos.EntityData.SegmentPath = "qos"
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = make(map[string]types.YChild)
    qos.EntityData.Children["output"] = types.YChild{"Output", &qos.Output}
    qos.EntityData.Children["input"] = types.YChild{"Input", &qos.Input}
    qos.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = make(map[string]types.YChild)
    output.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range output.ServicePolicy {
        output.EntityData.Children[types.GetSegmentPath(&output.ServicePolicy[i])] = types.YChild{"ServicePolicy", &output.ServicePolicy[i]}
    }
    output.EntityData.Children["service-policy-qos"] = types.YChild{"ServicePolicyQos", nil}
    for i := range output.ServicePolicyQos {
        output.EntityData.Children[types.GetSegmentPath(&output.ServicePolicyQos[i])] = types.YChild{"ServicePolicyQos", &output.ServicePolicyQos[i]}
    }
    output.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    servicePolicy.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", servicePolicy.AccountType}
    servicePolicy.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined}
    servicePolicy.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", servicePolicy.SpiName}
    servicePolicy.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy}
    servicePolicy.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", servicePolicy.ResourceId}
    servicePolicy.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "output"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = make(map[string]types.YChild)
    servicePolicyQos.EntityData.Children["subscriber-group-names"] = types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames}
    servicePolicyQos.EntityData.Children["subscriber-parent"] = types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent}
    servicePolicyQos.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicyQos.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName}
    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupNames.EntityData.Children["subscriber-group-name"] = types.YChild{"SubscriberGroupName", nil}
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children[types.GetSegmentPath(&subscriberGroupNames.SubscriberGroupName[i])] = types.YChild{"SubscriberGroupName", &subscriberGroupNames.SubscriberGroupName[i]}
    }
    subscriberGroupNames.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupName.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberGroupName.EntityData.Leafs["subscriber-group-string"] = types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString}
    subscriberGroupName.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberGroupName.AccountType}
    subscriberGroupName.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined}
    subscriberGroupName.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberGroupName.SpiName}
    subscriberGroupName.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge}
    subscriberGroupName.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy}
    subscriberGroupName.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberGroupName.ResourceId}
    subscriberGroupName.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy}
    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = make(map[string]types.YChild)
    subscriberParent.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberParent.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberParent.AccountType}
    subscriberParent.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined}
    subscriberParent.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberParent.SpiName}
    subscriberParent.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge}
    subscriberParent.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy}
    subscriberParent.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberParent.ResourceId}
    subscriberParent.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy}
    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = make(map[string]types.YChild)
    input.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range input.ServicePolicy {
        input.EntityData.Children[types.GetSegmentPath(&input.ServicePolicy[i])] = types.YChild{"ServicePolicy", &input.ServicePolicy[i]}
    }
    input.EntityData.Children["service-policy-qos"] = types.YChild{"ServicePolicyQos", nil}
    for i := range input.ServicePolicyQos {
        input.EntityData.Children[types.GetSegmentPath(&input.ServicePolicyQos[i])] = types.YChild{"ServicePolicyQos", &input.ServicePolicyQos[i]}
    }
    input.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    servicePolicy.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", servicePolicy.AccountType}
    servicePolicy.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined}
    servicePolicy.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", servicePolicy.SpiName}
    servicePolicy.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy}
    servicePolicy.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", servicePolicy.ResourceId}
    servicePolicy.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "input"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = make(map[string]types.YChild)
    servicePolicyQos.EntityData.Children["subscriber-group-names"] = types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames}
    servicePolicyQos.EntityData.Children["subscriber-parent"] = types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent}
    servicePolicyQos.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicyQos.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName}
    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupNames.EntityData.Children["subscriber-group-name"] = types.YChild{"SubscriberGroupName", nil}
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children[types.GetSegmentPath(&subscriberGroupNames.SubscriberGroupName[i])] = types.YChild{"SubscriberGroupName", &subscriberGroupNames.SubscriberGroupName[i]}
    }
    subscriberGroupNames.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupName.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberGroupName.EntityData.Leafs["subscriber-group-string"] = types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString}
    subscriberGroupName.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberGroupName.AccountType}
    subscriberGroupName.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined}
    subscriberGroupName.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberGroupName.SpiName}
    subscriberGroupName.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge}
    subscriberGroupName.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy}
    subscriberGroupName.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberGroupName.ResourceId}
    subscriberGroupName.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy}
    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = make(map[string]types.YChild)
    subscriberParent.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberParent.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberParent.AccountType}
    subscriberParent.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined}
    subscriberParent.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberParent.SpiName}
    subscriberParent.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge}
    subscriberParent.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy}
    subscriberParent.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberParent.ResourceId}
    subscriberParent.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy}
    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm
// ATM Configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Support 12-bits VPI cell format. The type is AtmVpiBitsMode.
    MaxVpiBits interface{}

    // Name of the VC class. The type is string with length: 1..30.
    VcClass interface{}

    // PVP Configuration.
    Pvps InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps

    // PVC Configuration.
    Pvcs InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs

    // Configure maximum cell-packing timers.  All parameters are mandatory.
    MaximumCellPackingTimers InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers

    // VP tunnel configuration.
    VpTunnels InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels
}

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetEntityData() *types.CommonEntityData {
    atm.EntityData.YFilter = atm.YFilter
    atm.EntityData.YangName = "atm"
    atm.EntityData.BundleName = "cisco_ios_xr"
    atm.EntityData.ParentYangName = "interface-configuration"
    atm.EntityData.SegmentPath = "Cisco-IOS-XR-atm-vcm-cfg:atm"
    atm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atm.EntityData.Children = make(map[string]types.YChild)
    atm.EntityData.Children["pvps"] = types.YChild{"Pvps", &atm.Pvps}
    atm.EntityData.Children["pvcs"] = types.YChild{"Pvcs", &atm.Pvcs}
    atm.EntityData.Children["maximum-cell-packing-timers"] = types.YChild{"MaximumCellPackingTimers", &atm.MaximumCellPackingTimers}
    atm.EntityData.Children["vp-tunnels"] = types.YChild{"VpTunnels", &atm.VpTunnels}
    atm.EntityData.Leafs = make(map[string]types.YLeaf)
    atm.EntityData.Leafs["max-vpi-bits"] = types.YLeaf{"MaxVpiBits", atm.MaxVpiBits}
    atm.EntityData.Leafs["vc-class"] = types.YLeaf{"VcClass", atm.VcClass}
    return &(atm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps
// PVP Configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration of particular PVP. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp.
    Pvp []InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp
}

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetEntityData() *types.CommonEntityData {
    pvps.EntityData.YFilter = pvps.YFilter
    pvps.EntityData.YangName = "pvps"
    pvps.EntityData.BundleName = "cisco_ios_xr"
    pvps.EntityData.ParentYangName = "atm"
    pvps.EntityData.SegmentPath = "pvps"
    pvps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pvps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pvps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pvps.EntityData.Children = make(map[string]types.YChild)
    pvps.EntityData.Children["pvp"] = types.YChild{"Pvp", nil}
    for i := range pvps.Pvp {
        pvps.EntityData.Children[types.GetSegmentPath(&pvps.Pvp[i])] = types.YChild{"Pvp", &pvps.Pvp[i]}
    }
    pvps.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(pvps.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp
// Configuration of particular PVP
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VPI value. The type is interface{} with range:
    // 0..4095.
    Vpi interface{}

    // Create the PVP. The type is interface{}.
    Enable interface{}

    // Configure the PVP test mode. The type is AtmPvpTestMode.
    TestMode interface{}

    // Enable L2VPN PVP OAM segment endpoint. The type is interface{}.
    OamSegmentEndpoint interface{}

    // Configure traffic shaping parameters.
    Shape InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape

    // Configure cell-packing parameters.  All parameters are mandatory.
    CellPacking InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking
}

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetEntityData() *types.CommonEntityData {
    pvp.EntityData.YFilter = pvp.YFilter
    pvp.EntityData.YangName = "pvp"
    pvp.EntityData.BundleName = "cisco_ios_xr"
    pvp.EntityData.ParentYangName = "pvps"
    pvp.EntityData.SegmentPath = "pvp" + "[vpi='" + fmt.Sprintf("%v", pvp.Vpi) + "']"
    pvp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pvp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pvp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pvp.EntityData.Children = make(map[string]types.YChild)
    pvp.EntityData.Children["shape"] = types.YChild{"Shape", &pvp.Shape}
    pvp.EntityData.Children["cell-packing"] = types.YChild{"CellPacking", &pvp.CellPacking}
    pvp.EntityData.Leafs = make(map[string]types.YLeaf)
    pvp.EntityData.Leafs["vpi"] = types.YLeaf{"Vpi", pvp.Vpi}
    pvp.EntityData.Leafs["enable"] = types.YLeaf{"Enable", pvp.Enable}
    pvp.EntityData.Leafs["test-mode"] = types.YLeaf{"TestMode", pvp.TestMode}
    pvp.EntityData.Leafs["oam-segment-endpoint"] = types.YLeaf{"OamSegmentEndpoint", pvp.OamSegmentEndpoint}
    return &(pvp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape
// Configure traffic shaping parameters
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic shaping type. The type is AtmPvcShaping.
    Type_ interface{}

    // Peak cell rate (kbps). The type is interface{} with range: 8..622080.
    PeakCellRate interface{}

    // Sustained cell rate (kbps). The type is interface{} with range: 8..622080.
    SustainedCellRate interface{}

    // Burst size in cells. The type is interface{} with range: 1..8192.
    BurstSize interface{}
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetEntityData() *types.CommonEntityData {
    shape.EntityData.YFilter = shape.YFilter
    shape.EntityData.YangName = "shape"
    shape.EntityData.BundleName = "cisco_ios_xr"
    shape.EntityData.ParentYangName = "pvp"
    shape.EntityData.SegmentPath = "shape"
    shape.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shape.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shape.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shape.EntityData.Children = make(map[string]types.YChild)
    shape.EntityData.Leafs = make(map[string]types.YLeaf)
    shape.EntityData.Leafs["type"] = types.YLeaf{"Type_", shape.Type_}
    shape.EntityData.Leafs["peak-cell-rate"] = types.YLeaf{"PeakCellRate", shape.PeakCellRate}
    shape.EntityData.Leafs["sustained-cell-rate"] = types.YLeaf{"SustainedCellRate", shape.SustainedCellRate}
    shape.EntityData.Leafs["burst-size"] = types.YLeaf{"BurstSize", shape.BurstSize}
    return &(shape.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking
// Configure cell-packing parameters.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of cells to be packed in a packet. The type is interface{}
    // with range: 2..255. This attribute is mandatory.
    MaximumCellsPacked interface{}

    // Which cell packing timer to use. The type is interface{} with range: 1..3.
    // This attribute is mandatory.
    CellPackingTimerId interface{}
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetEntityData() *types.CommonEntityData {
    cellPacking.EntityData.YFilter = cellPacking.YFilter
    cellPacking.EntityData.YangName = "cell-packing"
    cellPacking.EntityData.BundleName = "cisco_ios_xr"
    cellPacking.EntityData.ParentYangName = "pvp"
    cellPacking.EntityData.SegmentPath = "cell-packing"
    cellPacking.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cellPacking.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cellPacking.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cellPacking.EntityData.Children = make(map[string]types.YChild)
    cellPacking.EntityData.Leafs = make(map[string]types.YLeaf)
    cellPacking.EntityData.Leafs["maximum-cells-packed"] = types.YLeaf{"MaximumCellsPacked", cellPacking.MaximumCellsPacked}
    cellPacking.EntityData.Leafs["cell-packing-timer-id"] = types.YLeaf{"CellPackingTimerId", cellPacking.CellPackingTimerId}
    return &(cellPacking.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs
// PVC Configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration particular PVC. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc.
    Pvc []InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc
}

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetEntityData() *types.CommonEntityData {
    pvcs.EntityData.YFilter = pvcs.YFilter
    pvcs.EntityData.YangName = "pvcs"
    pvcs.EntityData.BundleName = "cisco_ios_xr"
    pvcs.EntityData.ParentYangName = "atm"
    pvcs.EntityData.SegmentPath = "pvcs"
    pvcs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pvcs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pvcs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pvcs.EntityData.Children = make(map[string]types.YChild)
    pvcs.EntityData.Children["pvc"] = types.YChild{"Pvc", nil}
    for i := range pvcs.Pvc {
        pvcs.EntityData.Children[types.GetSegmentPath(&pvcs.Pvc[i])] = types.YChild{"Pvc", &pvcs.Pvc[i]}
    }
    pvcs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(pvcs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc
// Configuration particular PVC
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VPI value. The type is interface{} with range:
    // 0..4095.
    Vpi interface{}

    // This attribute is a key. VCI value. The type is interface{} with range:
    // 1..65535.
    Vci interface{}

    // This attribute is a key. PVC type. The type is AtmPvcData.
    PvCtype interface{}

    // Name of the VC class. The type is string with length: 1..30.
    VcClass interface{}

    // Configure encapsulation. The type is AtmPvcEncapsulation.
    Encapsulation interface{}

    // Create the PVC. The type is interface{}.
    Enable interface{}

    // Configure the PVC test mode. The type is AtmPvcTestMode.
    TestMode interface{}

    // Enable L2VPN PVC OAM segment endpoint. The type is interface{}.
    OamSegmentEndpoint interface{}

    // Configure traffic shaping parameters.
    Shape InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape

    // L2VPN OAM emulation.
    OamEmulation InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation

    // Configure cell-packing parameters.  All parameters are mandatory.
    CellPacking InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking
}

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetEntityData() *types.CommonEntityData {
    pvc.EntityData.YFilter = pvc.YFilter
    pvc.EntityData.YangName = "pvc"
    pvc.EntityData.BundleName = "cisco_ios_xr"
    pvc.EntityData.ParentYangName = "pvcs"
    pvc.EntityData.SegmentPath = "pvc" + "[vpi='" + fmt.Sprintf("%v", pvc.Vpi) + "']" + "[vci='" + fmt.Sprintf("%v", pvc.Vci) + "']" + "[pv-ctype='" + fmt.Sprintf("%v", pvc.PvCtype) + "']"
    pvc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pvc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pvc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pvc.EntityData.Children = make(map[string]types.YChild)
    pvc.EntityData.Children["shape"] = types.YChild{"Shape", &pvc.Shape}
    pvc.EntityData.Children["oam-emulation"] = types.YChild{"OamEmulation", &pvc.OamEmulation}
    pvc.EntityData.Children["cell-packing"] = types.YChild{"CellPacking", &pvc.CellPacking}
    pvc.EntityData.Leafs = make(map[string]types.YLeaf)
    pvc.EntityData.Leafs["vpi"] = types.YLeaf{"Vpi", pvc.Vpi}
    pvc.EntityData.Leafs["vci"] = types.YLeaf{"Vci", pvc.Vci}
    pvc.EntityData.Leafs["pv-ctype"] = types.YLeaf{"PvCtype", pvc.PvCtype}
    pvc.EntityData.Leafs["vc-class"] = types.YLeaf{"VcClass", pvc.VcClass}
    pvc.EntityData.Leafs["encapsulation"] = types.YLeaf{"Encapsulation", pvc.Encapsulation}
    pvc.EntityData.Leafs["enable"] = types.YLeaf{"Enable", pvc.Enable}
    pvc.EntityData.Leafs["test-mode"] = types.YLeaf{"TestMode", pvc.TestMode}
    pvc.EntityData.Leafs["oam-segment-endpoint"] = types.YLeaf{"OamSegmentEndpoint", pvc.OamSegmentEndpoint}
    return &(pvc.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape
// Configure traffic shaping parameters
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic shaping type. The type is AtmPvcShaping.
    Type_ interface{}

    // Peak cell rate (kbps). The type is interface{} with range: 8..622080.
    PeakCellRate interface{}

    // Sustained cell rate (kbps). The type is interface{} with range: 8..622080.
    SustainedCellRate interface{}

    // Burst size in cells. The type is interface{} with range: 1..8192.
    BurstSize interface{}
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetEntityData() *types.CommonEntityData {
    shape.EntityData.YFilter = shape.YFilter
    shape.EntityData.YangName = "shape"
    shape.EntityData.BundleName = "cisco_ios_xr"
    shape.EntityData.ParentYangName = "pvc"
    shape.EntityData.SegmentPath = "shape"
    shape.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shape.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shape.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shape.EntityData.Children = make(map[string]types.YChild)
    shape.EntityData.Leafs = make(map[string]types.YLeaf)
    shape.EntityData.Leafs["type"] = types.YLeaf{"Type_", shape.Type_}
    shape.EntityData.Leafs["peak-cell-rate"] = types.YLeaf{"PeakCellRate", shape.PeakCellRate}
    shape.EntityData.Leafs["sustained-cell-rate"] = types.YLeaf{"SustainedCellRate", shape.SustainedCellRate}
    shape.EntityData.Leafs["burst-size"] = types.YLeaf{"BurstSize", shape.BurstSize}
    return &(shape.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation
// L2VPN OAM emulation
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable OAM emulation. The type is interface{}.
    Enable interface{}

    // AIS cell transmit rate (1 per x seconds). The type is interface{} with
    // range: 0..60.
    AisTransmitRate interface{}
}

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetEntityData() *types.CommonEntityData {
    oamEmulation.EntityData.YFilter = oamEmulation.YFilter
    oamEmulation.EntityData.YangName = "oam-emulation"
    oamEmulation.EntityData.BundleName = "cisco_ios_xr"
    oamEmulation.EntityData.ParentYangName = "pvc"
    oamEmulation.EntityData.SegmentPath = "oam-emulation"
    oamEmulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oamEmulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oamEmulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oamEmulation.EntityData.Children = make(map[string]types.YChild)
    oamEmulation.EntityData.Leafs = make(map[string]types.YLeaf)
    oamEmulation.EntityData.Leafs["enable"] = types.YLeaf{"Enable", oamEmulation.Enable}
    oamEmulation.EntityData.Leafs["ais-transmit-rate"] = types.YLeaf{"AisTransmitRate", oamEmulation.AisTransmitRate}
    return &(oamEmulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking
// Configure cell-packing parameters.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of cells to be packed in a packet. The type is interface{}
    // with range: 2..255. This attribute is mandatory.
    MaximumCellsPacked interface{}

    // Which cell packing timer to use. The type is interface{} with range: 1..3.
    // This attribute is mandatory.
    CellPackingTimerId interface{}
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetEntityData() *types.CommonEntityData {
    cellPacking.EntityData.YFilter = cellPacking.YFilter
    cellPacking.EntityData.YangName = "cell-packing"
    cellPacking.EntityData.BundleName = "cisco_ios_xr"
    cellPacking.EntityData.ParentYangName = "pvc"
    cellPacking.EntityData.SegmentPath = "cell-packing"
    cellPacking.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cellPacking.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cellPacking.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cellPacking.EntityData.Children = make(map[string]types.YChild)
    cellPacking.EntityData.Leafs = make(map[string]types.YLeaf)
    cellPacking.EntityData.Leafs["maximum-cells-packed"] = types.YLeaf{"MaximumCellsPacked", cellPacking.MaximumCellsPacked}
    cellPacking.EntityData.Leafs["cell-packing-timer-id"] = types.YLeaf{"CellPackingTimerId", cellPacking.CellPackingTimerId}
    return &(cellPacking.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers
// Configure maximum cell-packing timers.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Cell-packing timer1 (micro seconds). The type is interface{} with range:
    // 50..4095. This attribute is mandatory.
    CellPackingTimer1 interface{}

    // Cell-packing timer2 (micro seconds). The type is interface{} with range:
    // 50..4095. This attribute is mandatory.
    CellPackingTimer2 interface{}

    // Cell-packing timer3 (micro seconds). The type is interface{} with range:
    // 50..4095. This attribute is mandatory.
    CellPackingTimer3 interface{}
}

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetEntityData() *types.CommonEntityData {
    maximumCellPackingTimers.EntityData.YFilter = maximumCellPackingTimers.YFilter
    maximumCellPackingTimers.EntityData.YangName = "maximum-cell-packing-timers"
    maximumCellPackingTimers.EntityData.BundleName = "cisco_ios_xr"
    maximumCellPackingTimers.EntityData.ParentYangName = "atm"
    maximumCellPackingTimers.EntityData.SegmentPath = "maximum-cell-packing-timers"
    maximumCellPackingTimers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumCellPackingTimers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumCellPackingTimers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumCellPackingTimers.EntityData.Children = make(map[string]types.YChild)
    maximumCellPackingTimers.EntityData.Leafs = make(map[string]types.YLeaf)
    maximumCellPackingTimers.EntityData.Leafs["cell-packing-timer1"] = types.YLeaf{"CellPackingTimer1", maximumCellPackingTimers.CellPackingTimer1}
    maximumCellPackingTimers.EntityData.Leafs["cell-packing-timer2"] = types.YLeaf{"CellPackingTimer2", maximumCellPackingTimers.CellPackingTimer2}
    maximumCellPackingTimers.EntityData.Leafs["cell-packing-timer3"] = types.YLeaf{"CellPackingTimer3", maximumCellPackingTimers.CellPackingTimer3}
    return &(maximumCellPackingTimers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels
// VP tunnel configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure a VP tunnel on this interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel.
    VpTunnel []InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel
}

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetEntityData() *types.CommonEntityData {
    vpTunnels.EntityData.YFilter = vpTunnels.YFilter
    vpTunnels.EntityData.YangName = "vp-tunnels"
    vpTunnels.EntityData.BundleName = "cisco_ios_xr"
    vpTunnels.EntityData.ParentYangName = "atm"
    vpTunnels.EntityData.SegmentPath = "vp-tunnels"
    vpTunnels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vpTunnels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vpTunnels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vpTunnels.EntityData.Children = make(map[string]types.YChild)
    vpTunnels.EntityData.Children["vp-tunnel"] = types.YChild{"VpTunnel", nil}
    for i := range vpTunnels.VpTunnel {
        vpTunnels.EntityData.Children[types.GetSegmentPath(&vpTunnels.VpTunnel[i])] = types.YChild{"VpTunnel", &vpTunnels.VpTunnel[i]}
    }
    vpTunnels.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(vpTunnels.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel
// Configure a VP tunnel on this interface
type InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VPI value. The type is interface{} with range:
    // 0..4095.
    Vpi interface{}

    // Enable Hierarchical Shaping configuration. The type is interface{}.
    EnableHierarchicalShaping interface{}

    // Create the VP Tunnel. The type is interface{}.
    Enable interface{}

    // Disable F4 OAM configuration. The type is interface{}.
    DisableF4Oam interface{}

    // Configure Traffic shaping parameters.
    Shape InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape
}

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetEntityData() *types.CommonEntityData {
    vpTunnel.EntityData.YFilter = vpTunnel.YFilter
    vpTunnel.EntityData.YangName = "vp-tunnel"
    vpTunnel.EntityData.BundleName = "cisco_ios_xr"
    vpTunnel.EntityData.ParentYangName = "vp-tunnels"
    vpTunnel.EntityData.SegmentPath = "vp-tunnel" + "[vpi='" + fmt.Sprintf("%v", vpTunnel.Vpi) + "']"
    vpTunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vpTunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vpTunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vpTunnel.EntityData.Children = make(map[string]types.YChild)
    vpTunnel.EntityData.Children["shape"] = types.YChild{"Shape", &vpTunnel.Shape}
    vpTunnel.EntityData.Leafs = make(map[string]types.YLeaf)
    vpTunnel.EntityData.Leafs["vpi"] = types.YLeaf{"Vpi", vpTunnel.Vpi}
    vpTunnel.EntityData.Leafs["enable-hierarchical-shaping"] = types.YLeaf{"EnableHierarchicalShaping", vpTunnel.EnableHierarchicalShaping}
    vpTunnel.EntityData.Leafs["enable"] = types.YLeaf{"Enable", vpTunnel.Enable}
    vpTunnel.EntityData.Leafs["disable-f4oam"] = types.YLeaf{"DisableF4Oam", vpTunnel.DisableF4Oam}
    return &(vpTunnel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape
// Configure Traffic shaping parameters
type InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic shaping type. The type is AtmVpShaping.
    Type_ interface{}

    // Peak cell rate (kbps). The type is interface{} with range: 8..622080.
    PeakCellRate interface{}

    // Sustained cell rate (kbps). The type is interface{} with range: 8..622080.
    SustainedCellRate interface{}

    // Burst size in cells. The type is interface{} with range: 1..8192.
    BurstSize interface{}
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetEntityData() *types.CommonEntityData {
    shape.EntityData.YFilter = shape.YFilter
    shape.EntityData.YangName = "shape"
    shape.EntityData.BundleName = "cisco_ios_xr"
    shape.EntityData.ParentYangName = "vp-tunnel"
    shape.EntityData.SegmentPath = "shape"
    shape.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shape.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shape.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shape.EntityData.Children = make(map[string]types.YChild)
    shape.EntityData.Leafs = make(map[string]types.YLeaf)
    shape.EntityData.Leafs["type"] = types.YLeaf{"Type_", shape.Type_}
    shape.EntityData.Leafs["peak-cell-rate"] = types.YLeaf{"PeakCellRate", shape.PeakCellRate}
    shape.EntityData.Leafs["sustained-cell-rate"] = types.YLeaf{"SustainedCellRate", shape.SustainedCellRate}
    shape.EntityData.Leafs["burst-size"] = types.YLeaf{"BurstSize", shape.BurstSize}
    return &(shape.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd
// BFD over bundle members configuration
type InterfaceConfigurations_InterfaceConfiguration_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration of BFDoBM mode [cisco|ietf]. The type is BfdMode. The default
    // value is no-cfg.
    Mode interface{}

    // Configuration of BFDoBM for all address families.
    AddressFamily InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "interface-configuration"
    bfd.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Children["address-family"] = types.YChild{"AddressFamily", &bfd.AddressFamily}
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["mode"] = types.YLeaf{"Mode", bfd.Mode}
    return &(bfd.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily
// Configuration of BFDoBM for all address
// families
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration of BFDoBM for IPv6 address family.
    Ipv6 InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6

    // Configuration of BFDoBM for IPv4 address family.
    Ipv4 InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4
}

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetEntityData() *types.CommonEntityData {
    addressFamily.EntityData.YFilter = addressFamily.YFilter
    addressFamily.EntityData.YangName = "address-family"
    addressFamily.EntityData.BundleName = "cisco_ios_xr"
    addressFamily.EntityData.ParentYangName = "bfd"
    addressFamily.EntityData.SegmentPath = "address-family"
    addressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamily.EntityData.Children = make(map[string]types.YChild)
    addressFamily.EntityData.Children["ipv6"] = types.YChild{"Ipv6", &addressFamily.Ipv6}
    addressFamily.EntityData.Children["ipv4"] = types.YChild{"Ipv4", &addressFamily.Ipv4}
    addressFamily.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(addressFamily.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6
// Configuration of BFDoBM for IPv6 address
// family
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Destination address for BFD sessions created by bundlemgr. The type is
    // string.
    Ipv6DestinationAddress interface{}

    // IPv6 Detection multiplier for BFD sessions created by bundlemgr. The type
    // is interface{} with range: 2..50.
    Ipv6DetectionMultiplier interface{}

    // Configure to enable BFD over bundle members. The type is interface{}.
    Ipv6FastDetect interface{}

    // IPV6 Hello interval for BFD sessions created by bundlemgr. The type is
    // interface{} with range: 3..30000.
    Ipv6Interval interface{}

    // Timers associated with BFDoBM.
    Ipv6Timers InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "address-family"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = make(map[string]types.YChild)
    ipv6.EntityData.Children["ipv6-timers"] = types.YChild{"Ipv6Timers", &ipv6.Ipv6Timers}
    ipv6.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6.EntityData.Leafs["ipv6-destination-address"] = types.YLeaf{"Ipv6DestinationAddress", ipv6.Ipv6DestinationAddress}
    ipv6.EntityData.Leafs["ipv6-detection-multiplier"] = types.YLeaf{"Ipv6DetectionMultiplier", ipv6.Ipv6DetectionMultiplier}
    ipv6.EntityData.Leafs["ipv6-fast-detect"] = types.YLeaf{"Ipv6FastDetect", ipv6.Ipv6FastDetect}
    ipv6.EntityData.Leafs["ipv6-interval"] = types.YLeaf{"Ipv6Interval", ipv6.Ipv6Interval}
    return &(ipv6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers
// Timers associated with BFDoBM
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Timer associated with aggressiveness on BFD session peer being
    // unconfigured. The type is interface{} with range: 60..3600.
    Ipv6NborUnconfigTimer interface{}

    // IPv6 Timer associated with aggressiveness on BFD session creation. The type
    // is interface{} with range: 60..3600.
    Ipv6StartTimer interface{}
}

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetEntityData() *types.CommonEntityData {
    ipv6Timers.EntityData.YFilter = ipv6Timers.YFilter
    ipv6Timers.EntityData.YangName = "ipv6-timers"
    ipv6Timers.EntityData.BundleName = "cisco_ios_xr"
    ipv6Timers.EntityData.ParentYangName = "ipv6"
    ipv6Timers.EntityData.SegmentPath = "ipv6-timers"
    ipv6Timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Timers.EntityData.Children = make(map[string]types.YChild)
    ipv6Timers.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6Timers.EntityData.Leafs["ipv6-nbor-unconfig-timer"] = types.YLeaf{"Ipv6NborUnconfigTimer", ipv6Timers.Ipv6NborUnconfigTimer}
    ipv6Timers.EntityData.Leafs["ipv6-start-timer"] = types.YLeaf{"Ipv6StartTimer", ipv6Timers.Ipv6StartTimer}
    return &(ipv6Timers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4
// Configuration of BFDoBM for IPv4 address
// family
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by bundlemgr. The type is
    // interface{} with range: 3..30000.
    Interval interface{}

    // Detection multiplier for BFD sessions created by bundlemgr. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // Destination address for BFD sessions created by bundlemgr. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Configure to enable BFD over bundle members. The type is interface{}.
    FastDetect interface{}

    // Container for Echo min-multiplier.
    Echo InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo

    // Timers associated with BFDoBM.
    Timers InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "address-family"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = make(map[string]types.YChild)
    ipv4.EntityData.Children["echo"] = types.YChild{"Echo", &ipv4.Echo}
    ipv4.EntityData.Children["timers"] = types.YChild{"Timers", &ipv4.Timers}
    ipv4.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4.EntityData.Leafs["interval"] = types.YLeaf{"Interval", ipv4.Interval}
    ipv4.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", ipv4.DetectionMultiplier}
    ipv4.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", ipv4.DestinationAddress}
    ipv4.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", ipv4.FastDetect}
    return &(ipv4.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo
// Container for Echo min-multiplier
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure echo min-interval for bundle interface. The type is interface{}
    // with range: 15..2000.
    MinInterval interface{}
}

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetEntityData() *types.CommonEntityData {
    echo.EntityData.YFilter = echo.YFilter
    echo.EntityData.YangName = "echo"
    echo.EntityData.BundleName = "cisco_ios_xr"
    echo.EntityData.ParentYangName = "ipv4"
    echo.EntityData.SegmentPath = "echo"
    echo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    echo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    echo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    echo.EntityData.Children = make(map[string]types.YChild)
    echo.EntityData.Leafs = make(map[string]types.YLeaf)
    echo.EntityData.Leafs["min-interval"] = types.YLeaf{"MinInterval", echo.MinInterval}
    return &(echo.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers
// Timers associated with BFDoBM
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timer associated with aggressiveness on BFD session peer being
    // unconfigured. The type is interface{} with range: 60..3600.
    NborUnconfigTimer interface{}

    // Timer associated with aggressiveness on BFD session creation. The type is
    // interface{} with range: 60..3600.
    StartTimer interface{}
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "ipv4"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = make(map[string]types.YChild)
    timers.EntityData.Leafs = make(map[string]types.YLeaf)
    timers.EntityData.Leafs["nbor-unconfig-timer"] = types.YLeaf{"NborUnconfigTimer", timers.NborUnconfigTimer}
    timers.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", timers.StartTimer}
    return &(timers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle
// Generic per-bundle configuration
type InterfaceConfigurations_InterfaceConfiguration_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the lacp-delay timeout for members of this bundle. The type is
    // interface{} with range: 1000..15000.
    LacpDelay interface{}

    // Deactivate all member links (down to Standby state). The type is
    // interface{}.
    Shutdown interface{}

    // Set the wait-while timeout for members of this bundle. The type is
    // interface{} with range: 0..2000. The default value is 2000.
    WaitWhile interface{}

    // Load-balance configuration.
    BundleLoadBalancing InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing

    // Minimum criteria for a bundle to be active.
    MinimumActive InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive

    // Set a limit on the number of links that can be active.
    MaximumActive InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive
}

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "interface-configuration"
    bundle.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:bundle"
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = make(map[string]types.YChild)
    bundle.EntityData.Children["bundle-load-balancing"] = types.YChild{"BundleLoadBalancing", &bundle.BundleLoadBalancing}
    bundle.EntityData.Children["minimum-active"] = types.YChild{"MinimumActive", &bundle.MinimumActive}
    bundle.EntityData.Children["maximum-active"] = types.YChild{"MaximumActive", &bundle.MaximumActive}
    bundle.EntityData.Leafs = make(map[string]types.YLeaf)
    bundle.EntityData.Leafs["lacp-delay"] = types.YLeaf{"LacpDelay", bundle.LacpDelay}
    bundle.EntityData.Leafs["shutdown"] = types.YLeaf{"Shutdown", bundle.Shutdown}
    bundle.EntityData.Leafs["wait-while"] = types.YLeaf{"WaitWhile", bundle.WaitWhile}
    return &(bundle.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing
// Load-balance configuration
type InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set thresholds for forwarding bundle traffic within a rack. The type is
    // interface{} with range: 1..64.
    LocalizeLinks interface{}

    // Enable loadbalancing on this Bundle / EFP.
    HashFunction InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction
}

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetEntityData() *types.CommonEntityData {
    bundleLoadBalancing.EntityData.YFilter = bundleLoadBalancing.YFilter
    bundleLoadBalancing.EntityData.YangName = "bundle-load-balancing"
    bundleLoadBalancing.EntityData.BundleName = "cisco_ios_xr"
    bundleLoadBalancing.EntityData.ParentYangName = "bundle"
    bundleLoadBalancing.EntityData.SegmentPath = "bundle-load-balancing"
    bundleLoadBalancing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleLoadBalancing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleLoadBalancing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleLoadBalancing.EntityData.Children = make(map[string]types.YChild)
    bundleLoadBalancing.EntityData.Children["hash-function"] = types.YChild{"HashFunction", &bundleLoadBalancing.HashFunction}
    bundleLoadBalancing.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleLoadBalancing.EntityData.Leafs["localize-links"] = types.YLeaf{"LocalizeLinks", bundleLoadBalancing.LocalizeLinks}
    return &(bundleLoadBalancing.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction
// Enable loadbalancing on this Bundle / EFP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The specified hash function to use. The type is BundleLoadBalance. This
    // attribute is mandatory.
    HashType interface{}

    // The loadbalance hash value selected. For non-EFP Value methods, this value
    // must be set to 1. The type is interface{} with range: 1..64. This attribute
    // is mandatory.
    HashValue interface{}
}

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetEntityData() *types.CommonEntityData {
    hashFunction.EntityData.YFilter = hashFunction.YFilter
    hashFunction.EntityData.YangName = "hash-function"
    hashFunction.EntityData.BundleName = "cisco_ios_xr"
    hashFunction.EntityData.ParentYangName = "bundle-load-balancing"
    hashFunction.EntityData.SegmentPath = "hash-function"
    hashFunction.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hashFunction.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hashFunction.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hashFunction.EntityData.Children = make(map[string]types.YChild)
    hashFunction.EntityData.Leafs = make(map[string]types.YLeaf)
    hashFunction.EntityData.Leafs["hash-type"] = types.YLeaf{"HashType", hashFunction.HashType}
    hashFunction.EntityData.Leafs["hash-value"] = types.YLeaf{"HashValue", hashFunction.HashValue}
    return &(hashFunction.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive
// Minimum criteria for a bundle to be active
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active links needed to bring up a bundle. The type is interface{}
    // with range: 1..64. The default value is 1.
    Links interface{}

    // Bandwidth (in kbps) needed to bring up a bundle.
    Bandwidth InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetEntityData() *types.CommonEntityData {
    minimumActive.EntityData.YFilter = minimumActive.YFilter
    minimumActive.EntityData.YangName = "minimum-active"
    minimumActive.EntityData.BundleName = "cisco_ios_xr"
    minimumActive.EntityData.ParentYangName = "bundle"
    minimumActive.EntityData.SegmentPath = "minimum-active"
    minimumActive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minimumActive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minimumActive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minimumActive.EntityData.Children = make(map[string]types.YChild)
    minimumActive.EntityData.Children["bandwidth"] = types.YChild{"Bandwidth", &minimumActive.Bandwidth}
    minimumActive.EntityData.Leafs = make(map[string]types.YLeaf)
    minimumActive.EntityData.Leafs["links"] = types.YLeaf{"Links", minimumActive.Links}
    return &(minimumActive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth
// Bandwidth (in kbps) needed to bring up a
// bundle
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Minimum Bandwidth Range. The type is BundleMinimumBandwidthRange. This
    // attribute is mandatory.
    MinBandwidthRange interface{}

    // Bandwidth. The type is interface{} with range: 1..4294967295. This
    // attribute is mandatory.
    Bandwidth interface{}
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetEntityData() *types.CommonEntityData {
    bandwidth.EntityData.YFilter = bandwidth.YFilter
    bandwidth.EntityData.YangName = "bandwidth"
    bandwidth.EntityData.BundleName = "cisco_ios_xr"
    bandwidth.EntityData.ParentYangName = "minimum-active"
    bandwidth.EntityData.SegmentPath = "bandwidth"
    bandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidth.EntityData.Children = make(map[string]types.YChild)
    bandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    bandwidth.EntityData.Leafs["min-bandwidth-range"] = types.YLeaf{"MinBandwidthRange", bandwidth.MinBandwidthRange}
    bandwidth.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", bandwidth.Bandwidth}
    return &(bandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive
// Set a limit on the number of links that can be
// active
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of active links in a bundle.
    Links InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links
}

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetEntityData() *types.CommonEntityData {
    maximumActive.EntityData.YFilter = maximumActive.YFilter
    maximumActive.EntityData.YangName = "maximum-active"
    maximumActive.EntityData.BundleName = "cisco_ios_xr"
    maximumActive.EntityData.ParentYangName = "bundle"
    maximumActive.EntityData.SegmentPath = "maximum-active"
    maximumActive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumActive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumActive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumActive.EntityData.Children = make(map[string]types.YChild)
    maximumActive.EntityData.Children["links"] = types.YChild{"Links", &maximumActive.Links}
    maximumActive.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(maximumActive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links
// Maximum number of active links in a bundle
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active links. The type is interface{} with range: 1..64. This
    // attribute is mandatory.
    Links interface{}

    // Maximum active links mode. The type is BundleMaximumActiveLinksMode.
    MaxActiveLinksMode interface{}
}

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetEntityData() *types.CommonEntityData {
    links.EntityData.YFilter = links.YFilter
    links.EntityData.YangName = "links"
    links.EntityData.BundleName = "cisco_ios_xr"
    links.EntityData.ParentYangName = "maximum-active"
    links.EntityData.SegmentPath = "links"
    links.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    links.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    links.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    links.EntityData.Children = make(map[string]types.YChild)
    links.EntityData.Leafs = make(map[string]types.YLeaf)
    links.EntityData.Leafs["links"] = types.YLeaf{"Links", links.Links}
    links.EntityData.Leafs["max-active-links-mode"] = types.YLeaf{"MaxActiveLinksMode", links.MaxActiveLinksMode}
    return &(links.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lacp
// Link Aggregation Control Protocol per-interface
// configuration (for bundle or member)
type InterfaceConfigurations_InterfaceConfiguration_Lacp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System priority for this bundle. Lower value is higher priority. The type
    // is interface{} with range: 1..65535.
    SystemPriority interface{}

    // Lacp period for the bundle. The type is one of the following types:
    // enumeration BundlePeriod, or int with range: 1..1000.
    Period interface{}

    // Collector Max Delay value to signal to the LACP partner. The type is
    // interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // Configure to enable lacp non-revertive mode. The type is interface{}.
    LacpNonrevertive interface{}

    // Lacp mode for the bundle. The type is BundleMode.
    Mode interface{}

    // Configure to enable the fast-switchover mode. The type is interface{}.
    FastSwitchover interface{}

    // Suppress flaps on switchover for the specified period (in ms). The type is
    // interface{} with range: 100..65535.
    SuppressFlaps interface{}

    // System identifier for this bundle. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    SystemMac interface{}

    // LACP period to request from the partner (LACP standard short period, or
    // rate in milliseconds for use with Cisco-specific extensions). Default is
    // LACP standard long period (30s). The type is one of the following types:
    // enumeration PeriodShortEnum Units are millisecond., or int with range:
    // 1..1000 Units are millisecond..
    PeriodShort interface{}

    // Log churn notifications on the specified system(s). The type is
    // ChurnLogging.
    ChurnLogging interface{}

    // Enable bundle Cisco extensions.
    CiscoExtensions InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions

    // Set timeout values for LACP-related timers.
    Timeout InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout
}

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetEntityData() *types.CommonEntityData {
    lacp.EntityData.YFilter = lacp.YFilter
    lacp.EntityData.YangName = "lacp"
    lacp.EntityData.BundleName = "cisco_ios_xr"
    lacp.EntityData.ParentYangName = "interface-configuration"
    lacp.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:lacp"
    lacp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacp.EntityData.Children = make(map[string]types.YChild)
    lacp.EntityData.Children["cisco-extensions"] = types.YChild{"CiscoExtensions", &lacp.CiscoExtensions}
    lacp.EntityData.Children["timeout"] = types.YChild{"Timeout", &lacp.Timeout}
    lacp.EntityData.Leafs = make(map[string]types.YLeaf)
    lacp.EntityData.Leafs["system-priority"] = types.YLeaf{"SystemPriority", lacp.SystemPriority}
    lacp.EntityData.Leafs["period"] = types.YLeaf{"Period", lacp.Period}
    lacp.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", lacp.CollectorMaxDelay}
    lacp.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", lacp.LacpNonrevertive}
    lacp.EntityData.Leafs["mode"] = types.YLeaf{"Mode", lacp.Mode}
    lacp.EntityData.Leafs["fast-switchover"] = types.YLeaf{"FastSwitchover", lacp.FastSwitchover}
    lacp.EntityData.Leafs["suppress-flaps"] = types.YLeaf{"SuppressFlaps", lacp.SuppressFlaps}
    lacp.EntityData.Leafs["system-mac"] = types.YLeaf{"SystemMac", lacp.SystemMac}
    lacp.EntityData.Leafs["period-short"] = types.YLeaf{"PeriodShort", lacp.PeriodShort}
    lacp.EntityData.Leafs["churn-logging"] = types.YLeaf{"ChurnLogging", lacp.ChurnLogging}
    return &(lacp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions
// Enable bundle Cisco extensions
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Cisco extensions. The type is interface{}. This attribute is mandatory.
    CiscoExt interface{}

    // Specific Cisco extension to enable / disable. The type is
    // BundleCiscoExtTypes.
    CiscoExtType interface{}
}

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetEntityData() *types.CommonEntityData {
    ciscoExtensions.EntityData.YFilter = ciscoExtensions.YFilter
    ciscoExtensions.EntityData.YangName = "cisco-extensions"
    ciscoExtensions.EntityData.BundleName = "cisco_ios_xr"
    ciscoExtensions.EntityData.ParentYangName = "lacp"
    ciscoExtensions.EntityData.SegmentPath = "cisco-extensions"
    ciscoExtensions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoExtensions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoExtensions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoExtensions.EntityData.Children = make(map[string]types.YChild)
    ciscoExtensions.EntityData.Leafs = make(map[string]types.YLeaf)
    ciscoExtensions.EntityData.Leafs["cisco-ext"] = types.YLeaf{"CiscoExt", ciscoExtensions.CiscoExt}
    ciscoExtensions.EntityData.Leafs["cisco-ext-type"] = types.YLeaf{"CiscoExtType", ciscoExtensions.CiscoExtType}
    return &(ciscoExtensions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout
// Set timeout values for LACP-related timers
type InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the timeout between expired and defaulted states. The type is
    // interface{} with range: 0..3000.
    RxDefault interface{}

    // The time in milliseconds for which to run the timer. The type is
    // interface{} with range: 0..120.
    ActorChurn interface{}

    // Set the timeout to use before declaring partner churn. The type is
    // interface{} with range: 0..120.
    PartnerChurn interface{}
}

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetEntityData() *types.CommonEntityData {
    timeout.EntityData.YFilter = timeout.YFilter
    timeout.EntityData.YangName = "timeout"
    timeout.EntityData.BundleName = "cisco_ios_xr"
    timeout.EntityData.ParentYangName = "lacp"
    timeout.EntityData.SegmentPath = "timeout"
    timeout.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timeout.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timeout.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timeout.EntityData.Children = make(map[string]types.YChild)
    timeout.EntityData.Leafs = make(map[string]types.YLeaf)
    timeout.EntityData.Leafs["rx-default"] = types.YLeaf{"RxDefault", timeout.RxDefault}
    timeout.EntityData.Leafs["actor-churn"] = types.YLeaf{"ActorChurn", timeout.ActorChurn}
    timeout.EntityData.Leafs["partner-churn"] = types.YLeaf{"PartnerChurn", timeout.PartnerChurn}
    return &(timeout.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_BundleMember
// Generic per-member configuration
type InterfaceConfigurations_InterfaceConfiguration_BundleMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority for this port. Lower value is higher priority. The type is
    // interface{} with range: 1..65535. The default value is 32768.
    PortPriority interface{}

    // Add the port to an aggregated interface.
    Id InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id
}

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetEntityData() *types.CommonEntityData {
    bundleMember.EntityData.YFilter = bundleMember.YFilter
    bundleMember.EntityData.YangName = "bundle-member"
    bundleMember.EntityData.BundleName = "cisco_ios_xr"
    bundleMember.EntityData.ParentYangName = "interface-configuration"
    bundleMember.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:bundle-member"
    bundleMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleMember.EntityData.Children = make(map[string]types.YChild)
    bundleMember.EntityData.Children["id"] = types.YChild{"Id", &bundleMember.Id}
    bundleMember.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleMember.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", bundleMember.PortPriority}
    return &(bundleMember.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id
// Add the port to an aggregated interface.
type InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier of the bundle to add the port to. The type is interface{} with
    // range: 1..65535.
    BundleId interface{}

    // Port Activity. The type is BundlePortActivity.
    PortActivity interface{}
}

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "bundle-member"
    id.EntityData.SegmentPath = "id"
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = make(map[string]types.YChild)
    id.EntityData.Leafs = make(map[string]types.YLeaf)
    id.EntityData.Leafs["bundle-id"] = types.YLeaf{"BundleId", id.BundleId}
    id.EntityData.Leafs["port-activity"] = types.YLeaf{"PortActivity", id.PortActivity}
    return &(id.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mlacp
// Multi-chassis LACP configuration
type InterfaceConfigurations_InterfaceConfiguration_Mlacp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LACP port priority (lower value is higher priority). The type is
    // interface{} with range: 1..65535. The default value is 32768.
    PortPriority interface{}

    // Set the delay before the bundle becomes active after recovery from failure.
    // The type is interface{} with range: 0..65535. The default value is 300.
    RecoveryDelay interface{}

    // Set the type of mLACP switchover to use for this bundle. The type is
    // MlacpSwitchover.
    SwitchoverType interface{}

    // Specify an ICCP Group in which this bundle should operate. The type is
    // interface{} with range: 1..4294967295.
    IccpGroup interface{}

    // Set parameters to maximize between the mLACP peers.
    Maximize InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize
}

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetEntityData() *types.CommonEntityData {
    mlacp.EntityData.YFilter = mlacp.YFilter
    mlacp.EntityData.YangName = "mlacp"
    mlacp.EntityData.BundleName = "cisco_ios_xr"
    mlacp.EntityData.ParentYangName = "interface-configuration"
    mlacp.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:mlacp"
    mlacp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacp.EntityData.Children = make(map[string]types.YChild)
    mlacp.EntityData.Children["maximize"] = types.YChild{"Maximize", &mlacp.Maximize}
    mlacp.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacp.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", mlacp.PortPriority}
    mlacp.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", mlacp.RecoveryDelay}
    mlacp.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", mlacp.SwitchoverType}
    mlacp.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", mlacp.IccpGroup}
    return &(mlacp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize
// Set parameters to maximize between the mLACP
// peers
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The paramenter which should be maximized. The type is
    // MlacpMaximizeParameter. This attribute is mandatory.
    MaximizeBy interface{}

    // The number of links below which to switch to the peer if it has more links
    // available. Only applicable if maximizing by links. If 0, no threshold is
    // applied. The type is interface{} with range: 0..64.
    LinkThreshold interface{}

    // The bandwidth (in kbps) below which to switch to the peer if it has more
    // bandwidth available . Only applicable if maximizing by bandwidth. If 0, no
    // threshold is applied. The type is interface{} with range: 0..4294967295.
    BandwidthThreshold interface{}
}

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetEntityData() *types.CommonEntityData {
    maximize.EntityData.YFilter = maximize.YFilter
    maximize.EntityData.YangName = "maximize"
    maximize.EntityData.BundleName = "cisco_ios_xr"
    maximize.EntityData.ParentYangName = "mlacp"
    maximize.EntityData.SegmentPath = "maximize"
    maximize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximize.EntityData.Children = make(map[string]types.YChild)
    maximize.EntityData.Leafs = make(map[string]types.YLeaf)
    maximize.EntityData.Leafs["maximize-by"] = types.YLeaf{"MaximizeBy", maximize.MaximizeBy}
    maximize.EntityData.Leafs["link-threshold"] = types.YLeaf{"LinkThreshold", maximize.LinkThreshold}
    maximize.EntityData.Leafs["bandwidth-threshold"] = types.YLeaf{"BandwidthThreshold", maximize.BandwidthThreshold}
    return &(maximize.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Cdp
// Interface specific CDP configuration
type InterfaceConfigurations_InterfaceConfiguration_Cdp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable CDP on an interface. The type is interface{}.
    Enable interface{}
}

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetEntityData() *types.CommonEntityData {
    cdp.EntityData.YFilter = cdp.YFilter
    cdp.EntityData.YangName = "cdp"
    cdp.EntityData.BundleName = "cisco_ios_xr"
    cdp.EntityData.ParentYangName = "interface-configuration"
    cdp.EntityData.SegmentPath = "Cisco-IOS-XR-cdp-cfg:cdp"
    cdp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cdp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cdp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cdp.EntityData.Children = make(map[string]types.YChild)
    cdp.EntityData.Leafs = make(map[string]types.YLeaf)
    cdp.EntityData.Leafs["enable"] = types.YLeaf{"Enable", cdp.Enable}
    return &(cdp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics
// Optics controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -190..20.
    OpticsTransmitPower interface{}

    // Configure max delta among all measured channel powers . The type is
    // interface{} with range: -500..300.
    OpticsOtsChannelPowerMaxDelta interface{}

    // Configure optics loopback mode . The type is OpticsLoopback. The default
    // value is none.
    OpticsLoopback interface{}

    // Configure Optical safety remote interlock (OSRI). The type is bool.
    OpticsOtsOsri interface{}

    // Select Amplifier Gain Degrade High Threshold(in units of 0.1dBm). The type
    // is interface{} with range: 0..500.
    OpticsOtsAmplifierGainDegradeHighThreshold interface{}

    // Select RX Voa Attenuation Setpoint(in units of 0.1dBm). The type is
    // interface{} with range: 0..200.
    OpticsOtsRxVoaAttenuation interface{}

    // Configure optics fec . The type is OpticsFec. The default value is
    // fec-none.
    OpticsFec interface{}

    // Select DGD high threshold(in units of 0.1ps). The type is interface{} with
    // range: 0..18000.
    OpticsDgdHighThreshold interface{}

    // Select Amplifier Channel Power(in units of 0 .1dBm). The type is
    // interface{} with range: -500..300.
    OpticsOtsAmplifierChannelPower interface{}

    // Configure amplifier working mode. The type is OpticsOtsAmpliControlMode.
    OpticsOtsAmplifierControlMode interface{}

    // Select Amplifier Gain value(in units of 0.1dBm). The type is interface{}
    // with range: 0..500.
    OpticsOtsAmplifierGain interface{}

    // Normal or extended Ampli Gain Range. The type is OpticsOtsAmpliGainRange.
    OpticsOtsAmplifierGainRange interface{}

    // Configure safety Control Mode. The type is OpticsOtsSafetyControlMode.
    OpticsOtsSafetyControlMode interface{}

    // Select min chromatic dispersion (in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdMin interface{}

    // Select TX Voa Attenuation Setpoint(in units of 0.1dBm). The type is
    // interface{} with range: 0..200.
    OpticsOtsTxVoaAttenuation interface{}

    // Select Amplifier Tilt value(in units of 0.1dB). The type is interface{}
    // with range: -50..50.
    OpticsOtsAmplifierTilt interface{}

    // Configure optics transmit laser shutdown . The type is bool.
    OpticsTransmitShutdown interface{}

    // Configure optics port description . The type is string with length: 1..255.
    OpticsDescription interface{}

    // Select Performance Monitoring as Enable or Disable. The type is bool. The
    // default value is true.
    OpticsPerformanceMonitoring interface{}

    // Select max chromatic dispersion (in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdMax interface{}

    // Select power level (in units of percentage). The type is interface{} with
    // range: 0..100.
    OpticsLbcHighThreshold interface{}

    // Select chromatic dispersion high threshold(in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdHighThreshold interface{}

    // Select OSNR low threshold(in units of 0.01db). The type is interface{} with
    // range: 0..4000.
    OpticsOsnrLowThreshold interface{}

    // Select Amplifier Gain Degrade Low Threshold(in units of 0.1dBm). The type
    // is interface{} with range: 0..500.
    OpticsOtsAmplifierGainDegradeLowThreshold interface{}

    // Select chromatic dispersion low threshold(in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdLowThreshold interface{}

    // breakout mode configuration. The type is string with pattern:
    // b'(4x10)|(4x25)'.
    Breakout interface{}

    // Configure Rx threshold.
    RxThresholds InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds

    // Configure Network srlgs.
    OpticsNetworkSrlgs InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs

    // Configure optics DWDM Carrier.
    OpticsDwdmCarrier InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier

    // Optics lanes.
    OpticsLanes InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes

    // Configure Tx threshold.
    TxThresholds InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds
}

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetEntityData() *types.CommonEntityData {
    optics.EntityData.YFilter = optics.YFilter
    optics.EntityData.YangName = "optics"
    optics.EntityData.BundleName = "cisco_ios_xr"
    optics.EntityData.ParentYangName = "interface-configuration"
    optics.EntityData.SegmentPath = "Cisco-IOS-XR-controller-optics-cfg:optics"
    optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    optics.EntityData.Children = make(map[string]types.YChild)
    optics.EntityData.Children["rx-thresholds"] = types.YChild{"RxThresholds", &optics.RxThresholds}
    optics.EntityData.Children["optics-network-srlgs"] = types.YChild{"OpticsNetworkSrlgs", &optics.OpticsNetworkSrlgs}
    optics.EntityData.Children["optics-dwdm-carrier"] = types.YChild{"OpticsDwdmCarrier", &optics.OpticsDwdmCarrier}
    optics.EntityData.Children["optics-lanes"] = types.YChild{"OpticsLanes", &optics.OpticsLanes}
    optics.EntityData.Children["tx-thresholds"] = types.YChild{"TxThresholds", &optics.TxThresholds}
    optics.EntityData.Leafs = make(map[string]types.YLeaf)
    optics.EntityData.Leafs["optics-transmit-power"] = types.YLeaf{"OpticsTransmitPower", optics.OpticsTransmitPower}
    optics.EntityData.Leafs["optics-ots-channel-power-max-delta"] = types.YLeaf{"OpticsOtsChannelPowerMaxDelta", optics.OpticsOtsChannelPowerMaxDelta}
    optics.EntityData.Leafs["optics-loopback"] = types.YLeaf{"OpticsLoopback", optics.OpticsLoopback}
    optics.EntityData.Leafs["optics-ots-osri"] = types.YLeaf{"OpticsOtsOsri", optics.OpticsOtsOsri}
    optics.EntityData.Leafs["optics-ots-amplifier-gain-degrade-high-threshold"] = types.YLeaf{"OpticsOtsAmplifierGainDegradeHighThreshold", optics.OpticsOtsAmplifierGainDegradeHighThreshold}
    optics.EntityData.Leafs["optics-ots-rx-voa-attenuation"] = types.YLeaf{"OpticsOtsRxVoaAttenuation", optics.OpticsOtsRxVoaAttenuation}
    optics.EntityData.Leafs["optics-fec"] = types.YLeaf{"OpticsFec", optics.OpticsFec}
    optics.EntityData.Leafs["optics-dgd-high-threshold"] = types.YLeaf{"OpticsDgdHighThreshold", optics.OpticsDgdHighThreshold}
    optics.EntityData.Leafs["optics-ots-amplifier-channel-power"] = types.YLeaf{"OpticsOtsAmplifierChannelPower", optics.OpticsOtsAmplifierChannelPower}
    optics.EntityData.Leafs["optics-ots-amplifier-control-mode"] = types.YLeaf{"OpticsOtsAmplifierControlMode", optics.OpticsOtsAmplifierControlMode}
    optics.EntityData.Leafs["optics-ots-amplifier-gain"] = types.YLeaf{"OpticsOtsAmplifierGain", optics.OpticsOtsAmplifierGain}
    optics.EntityData.Leafs["optics-ots-amplifier-gain-range"] = types.YLeaf{"OpticsOtsAmplifierGainRange", optics.OpticsOtsAmplifierGainRange}
    optics.EntityData.Leafs["optics-ots-safety-control-mode"] = types.YLeaf{"OpticsOtsSafetyControlMode", optics.OpticsOtsSafetyControlMode}
    optics.EntityData.Leafs["optics-cd-min"] = types.YLeaf{"OpticsCdMin", optics.OpticsCdMin}
    optics.EntityData.Leafs["optics-ots-tx-voa-attenuation"] = types.YLeaf{"OpticsOtsTxVoaAttenuation", optics.OpticsOtsTxVoaAttenuation}
    optics.EntityData.Leafs["optics-ots-amplifier-tilt"] = types.YLeaf{"OpticsOtsAmplifierTilt", optics.OpticsOtsAmplifierTilt}
    optics.EntityData.Leafs["optics-transmit-shutdown"] = types.YLeaf{"OpticsTransmitShutdown", optics.OpticsTransmitShutdown}
    optics.EntityData.Leafs["optics-description"] = types.YLeaf{"OpticsDescription", optics.OpticsDescription}
    optics.EntityData.Leafs["optics-performance-monitoring"] = types.YLeaf{"OpticsPerformanceMonitoring", optics.OpticsPerformanceMonitoring}
    optics.EntityData.Leafs["optics-cd-max"] = types.YLeaf{"OpticsCdMax", optics.OpticsCdMax}
    optics.EntityData.Leafs["optics-lbc-high-threshold"] = types.YLeaf{"OpticsLbcHighThreshold", optics.OpticsLbcHighThreshold}
    optics.EntityData.Leafs["optics-cd-high-threshold"] = types.YLeaf{"OpticsCdHighThreshold", optics.OpticsCdHighThreshold}
    optics.EntityData.Leafs["optics-osnr-low-threshold"] = types.YLeaf{"OpticsOsnrLowThreshold", optics.OpticsOsnrLowThreshold}
    optics.EntityData.Leafs["optics-ots-amplifier-gain-degrade-low-threshold"] = types.YLeaf{"OpticsOtsAmplifierGainDegradeLowThreshold", optics.OpticsOtsAmplifierGainDegradeLowThreshold}
    optics.EntityData.Leafs["optics-cd-low-threshold"] = types.YLeaf{"OpticsCdLowThreshold", optics.OpticsCdLowThreshold}
    optics.EntityData.Leafs["breakout"] = types.YLeaf{"Breakout", optics.Breakout}
    return &(optics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds
// Configure Rx threshold
type InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Optics RX Low or high threshold configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold.
    RxThreshold []InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold
}

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetEntityData() *types.CommonEntityData {
    rxThresholds.EntityData.YFilter = rxThresholds.YFilter
    rxThresholds.EntityData.YangName = "rx-thresholds"
    rxThresholds.EntityData.BundleName = "cisco_ios_xr"
    rxThresholds.EntityData.ParentYangName = "optics"
    rxThresholds.EntityData.SegmentPath = "rx-thresholds"
    rxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxThresholds.EntityData.Children = make(map[string]types.YChild)
    rxThresholds.EntityData.Children["rx-threshold"] = types.YChild{"RxThreshold", nil}
    for i := range rxThresholds.RxThreshold {
        rxThresholds.EntityData.Children[types.GetSegmentPath(&rxThresholds.RxThreshold[i])] = types.YChild{"RxThreshold", &rxThresholds.RxThreshold[i]}
    }
    rxThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold
// Optics RX Low or high threshold configuration
type InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Low or high rx threshold. The type is Threshold.
    RxThresholdType interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -400..300. This attribute is mandatory.
    RxThreshold interface{}
}

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetEntityData() *types.CommonEntityData {
    rxThreshold.EntityData.YFilter = rxThreshold.YFilter
    rxThreshold.EntityData.YangName = "rx-threshold"
    rxThreshold.EntityData.BundleName = "cisco_ios_xr"
    rxThreshold.EntityData.ParentYangName = "rx-thresholds"
    rxThreshold.EntityData.SegmentPath = "rx-threshold" + "[rx-threshold-type='" + fmt.Sprintf("%v", rxThreshold.RxThresholdType) + "']"
    rxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxThreshold.EntityData.Children = make(map[string]types.YChild)
    rxThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    rxThreshold.EntityData.Leafs["rx-threshold-type"] = types.YLeaf{"RxThresholdType", rxThreshold.RxThresholdType}
    rxThreshold.EntityData.Leafs["rx-threshold"] = types.YLeaf{"RxThreshold", rxThreshold.RxThreshold}
    return &(rxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs
// Configure Network srlgs
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure network srlg sets. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg.
    OpticsNetworkSrlg []InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg
}

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetEntityData() *types.CommonEntityData {
    opticsNetworkSrlgs.EntityData.YFilter = opticsNetworkSrlgs.YFilter
    opticsNetworkSrlgs.EntityData.YangName = "optics-network-srlgs"
    opticsNetworkSrlgs.EntityData.BundleName = "cisco_ios_xr"
    opticsNetworkSrlgs.EntityData.ParentYangName = "optics"
    opticsNetworkSrlgs.EntityData.SegmentPath = "optics-network-srlgs"
    opticsNetworkSrlgs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsNetworkSrlgs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsNetworkSrlgs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsNetworkSrlgs.EntityData.Children = make(map[string]types.YChild)
    opticsNetworkSrlgs.EntityData.Children["optics-network-srlg"] = types.YChild{"OpticsNetworkSrlg", nil}
    for i := range opticsNetworkSrlgs.OpticsNetworkSrlg {
        opticsNetworkSrlgs.EntityData.Children[types.GetSegmentPath(&opticsNetworkSrlgs.OpticsNetworkSrlg[i])] = types.YChild{"OpticsNetworkSrlg", &opticsNetworkSrlgs.OpticsNetworkSrlg[i]}
    }
    opticsNetworkSrlgs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(opticsNetworkSrlgs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg
// Configure network srlg sets
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Set index. The type is interface{} with range:
    // 1..17.
    SetId interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg1 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg2 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg3 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg4 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg5 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg6 interface{}
}

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetEntityData() *types.CommonEntityData {
    opticsNetworkSrlg.EntityData.YFilter = opticsNetworkSrlg.YFilter
    opticsNetworkSrlg.EntityData.YangName = "optics-network-srlg"
    opticsNetworkSrlg.EntityData.BundleName = "cisco_ios_xr"
    opticsNetworkSrlg.EntityData.ParentYangName = "optics-network-srlgs"
    opticsNetworkSrlg.EntityData.SegmentPath = "optics-network-srlg" + "[set-id='" + fmt.Sprintf("%v", opticsNetworkSrlg.SetId) + "']"
    opticsNetworkSrlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsNetworkSrlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsNetworkSrlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsNetworkSrlg.EntityData.Children = make(map[string]types.YChild)
    opticsNetworkSrlg.EntityData.Leafs = make(map[string]types.YLeaf)
    opticsNetworkSrlg.EntityData.Leafs["set-id"] = types.YLeaf{"SetId", opticsNetworkSrlg.SetId}
    opticsNetworkSrlg.EntityData.Leafs["srlg1"] = types.YLeaf{"Srlg1", opticsNetworkSrlg.Srlg1}
    opticsNetworkSrlg.EntityData.Leafs["srlg2"] = types.YLeaf{"Srlg2", opticsNetworkSrlg.Srlg2}
    opticsNetworkSrlg.EntityData.Leafs["srlg3"] = types.YLeaf{"Srlg3", opticsNetworkSrlg.Srlg3}
    opticsNetworkSrlg.EntityData.Leafs["srlg4"] = types.YLeaf{"Srlg4", opticsNetworkSrlg.Srlg4}
    opticsNetworkSrlg.EntityData.Leafs["srlg5"] = types.YLeaf{"Srlg5", opticsNetworkSrlg.Srlg5}
    opticsNetworkSrlg.EntityData.Leafs["srlg6"] = types.YLeaf{"Srlg6", opticsNetworkSrlg.Srlg6}
    return &(opticsNetworkSrlg.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier
// Configure optics DWDM Carrier
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DWDM Channel Grid Type. The type is OpticsDwdmCarrierGrid. This attribute
    // is mandatory.
    GridType interface{}

    // DWDM Channel Parameter Type ITU-Channel or Frequency or Wavelength. The
    // type is OpticsDwdmCarrierParam. This attribute is mandatory.
    ParamType interface{}

    // Type ITU-Channel Range 1-100, Frequency Range 19115-19610, Wavelength Range
    // 1528773-1568362, 100MHz Frequency Range 1911500-1961000. The type is
    // interface{} with range: 1..1961000. This attribute is mandatory.
    ParamValue interface{}
}

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetEntityData() *types.CommonEntityData {
    opticsDwdmCarrier.EntityData.YFilter = opticsDwdmCarrier.YFilter
    opticsDwdmCarrier.EntityData.YangName = "optics-dwdm-carrier"
    opticsDwdmCarrier.EntityData.BundleName = "cisco_ios_xr"
    opticsDwdmCarrier.EntityData.ParentYangName = "optics"
    opticsDwdmCarrier.EntityData.SegmentPath = "optics-dwdm-carrier"
    opticsDwdmCarrier.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsDwdmCarrier.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsDwdmCarrier.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsDwdmCarrier.EntityData.Children = make(map[string]types.YChild)
    opticsDwdmCarrier.EntityData.Leafs = make(map[string]types.YLeaf)
    opticsDwdmCarrier.EntityData.Leafs["grid-type"] = types.YLeaf{"GridType", opticsDwdmCarrier.GridType}
    opticsDwdmCarrier.EntityData.Leafs["param-type"] = types.YLeaf{"ParamType", opticsDwdmCarrier.ParamType}
    opticsDwdmCarrier.EntityData.Leafs["param-value"] = types.YLeaf{"ParamValue", opticsDwdmCarrier.ParamValue}
    return &(opticsDwdmCarrier.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes
// Optics lanes
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Lane. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane.
    OpticsLane []InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane
}

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetEntityData() *types.CommonEntityData {
    opticsLanes.EntityData.YFilter = opticsLanes.YFilter
    opticsLanes.EntityData.YangName = "optics-lanes"
    opticsLanes.EntityData.BundleName = "cisco_ios_xr"
    opticsLanes.EntityData.ParentYangName = "optics"
    opticsLanes.EntityData.SegmentPath = "optics-lanes"
    opticsLanes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsLanes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsLanes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsLanes.EntityData.Children = make(map[string]types.YChild)
    opticsLanes.EntityData.Children["optics-lane"] = types.YChild{"OpticsLane", nil}
    for i := range opticsLanes.OpticsLane {
        opticsLanes.EntityData.Children[types.GetSegmentPath(&opticsLanes.OpticsLane[i])] = types.YChild{"OpticsLane", &opticsLanes.OpticsLane[i]}
    }
    opticsLanes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(opticsLanes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane
// Lane
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Lane Number. The type is interface{} with range:
    // -2147483648..2147483647.
    Index interface{}

    // Configure description for this Lane. The type is string with length:
    // 1..255.
    Description interface{}
}

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetEntityData() *types.CommonEntityData {
    opticsLane.EntityData.YFilter = opticsLane.YFilter
    opticsLane.EntityData.YangName = "optics-lane"
    opticsLane.EntityData.BundleName = "cisco_ios_xr"
    opticsLane.EntityData.ParentYangName = "optics-lanes"
    opticsLane.EntityData.SegmentPath = "optics-lane" + "[index='" + fmt.Sprintf("%v", opticsLane.Index) + "']"
    opticsLane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsLane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsLane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsLane.EntityData.Children = make(map[string]types.YChild)
    opticsLane.EntityData.Leafs = make(map[string]types.YLeaf)
    opticsLane.EntityData.Leafs["index"] = types.YLeaf{"Index", opticsLane.Index}
    opticsLane.EntityData.Leafs["description"] = types.YLeaf{"Description", opticsLane.Description}
    return &(opticsLane.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds
// Configure Tx threshold
type InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Optics TX Low or high threshold configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold.
    TxThreshold []InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold
}

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetEntityData() *types.CommonEntityData {
    txThresholds.EntityData.YFilter = txThresholds.YFilter
    txThresholds.EntityData.YangName = "tx-thresholds"
    txThresholds.EntityData.BundleName = "cisco_ios_xr"
    txThresholds.EntityData.ParentYangName = "optics"
    txThresholds.EntityData.SegmentPath = "tx-thresholds"
    txThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txThresholds.EntityData.Children = make(map[string]types.YChild)
    txThresholds.EntityData.Children["tx-threshold"] = types.YChild{"TxThreshold", nil}
    for i := range txThresholds.TxThreshold {
        txThresholds.EntityData.Children[types.GetSegmentPath(&txThresholds.TxThreshold[i])] = types.YChild{"TxThreshold", &txThresholds.TxThreshold[i]}
    }
    txThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(txThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold
// Optics TX Low or high threshold configuration
type InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Low or high tx threshold. The type is Threshold.
    TxThresholdType interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -400..300. This attribute is mandatory.
    TxThreshold interface{}
}

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetEntityData() *types.CommonEntityData {
    txThreshold.EntityData.YFilter = txThreshold.YFilter
    txThreshold.EntityData.YangName = "tx-threshold"
    txThreshold.EntityData.BundleName = "cisco_ios_xr"
    txThreshold.EntityData.ParentYangName = "tx-thresholds"
    txThreshold.EntityData.SegmentPath = "tx-threshold" + "[tx-threshold-type='" + fmt.Sprintf("%v", txThreshold.TxThresholdType) + "']"
    txThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txThreshold.EntityData.Children = make(map[string]types.YChild)
    txThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    txThreshold.EntityData.Leafs["tx-threshold-type"] = types.YLeaf{"TxThresholdType", txThreshold.TxThresholdType}
    txThreshold.EntityData.Leafs["tx-threshold"] = types.YLeaf{"TxThreshold", txThreshold.TxThreshold}
    return &(txThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu
// OTU port controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Otu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // General Communication Channel configuration. The type is interface{}.
    Gcc interface{}

    // Signal failure threshold. The type is interface{} with range: 5..9.
    Sf interface{}

    // Configure secondary admin state . The type is OtnSecAdminState. The default
    // value is normal.
    SecondaryAdminState interface{}

    // Signal degrade threshold. The type is interface{} with range: 5..9.
    Sd interface{}

    // Configure performance monitoring. The type is OtnPerMon. The default value
    // is enable.
    PerformanceMonitoring interface{}

    // Type of Loopback. The type is OtnLoopback.
    Loopback interface{}

    // Configure forward error correction. The type is OtuForwardErrorCorrection.
    // The default value is none.
    Fec interface{}

    // Configure OTN Send TTI value for OS config.
    OtnSendTtitcmos InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos

    // Configure OTN Send TTI value for DAPI configs.
    OtnSendTtitcmdapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi

    // Configure OTN Expected TTI value for SAPI configs.
    OtnExpectedTtisapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi

    // Configure Proactive Protection.
    ProactiveProtection InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection

    // Configure Network srlgs.
    NetworkSrlgs InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs

    // Configure OTN Send TTI value for Full ASCII/HEX.
    OtnSendTti InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti

    // Configure OTN Expected TTI value for DAPI configs.
    OtnExpectedTtitcmdapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi

    // Configure OTN Send TTI value for SAPI configs.
    OtnSendTtisapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi

    // Enable Prbs And configure.
    Prbs InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs

    // Configure OTN Expected TTI value for OS config.
    OtnExpectedTtitcmos InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos

    // Configure OTN Expected TTI value for Full ASCII/HEX.
    OtnExpectedTti InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetEntityData() *types.CommonEntityData {
    otu.EntityData.YFilter = otu.YFilter
    otu.EntityData.YangName = "otu"
    otu.EntityData.BundleName = "cisco_ios_xr"
    otu.EntityData.ParentYangName = "interface-configuration"
    otu.EntityData.SegmentPath = "Cisco-IOS-XR-controller-otu-cfg:otu"
    otu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otu.EntityData.Children = make(map[string]types.YChild)
    otu.EntityData.Children["otn-send-ttitcmos"] = types.YChild{"OtnSendTtitcmos", &otu.OtnSendTtitcmos}
    otu.EntityData.Children["otn-send-ttitcmdapi"] = types.YChild{"OtnSendTtitcmdapi", &otu.OtnSendTtitcmdapi}
    otu.EntityData.Children["otn-expected-ttisapi"] = types.YChild{"OtnExpectedTtisapi", &otu.OtnExpectedTtisapi}
    otu.EntityData.Children["proactive-protection"] = types.YChild{"ProactiveProtection", &otu.ProactiveProtection}
    otu.EntityData.Children["network-srlgs"] = types.YChild{"NetworkSrlgs", &otu.NetworkSrlgs}
    otu.EntityData.Children["otn-send-tti"] = types.YChild{"OtnSendTti", &otu.OtnSendTti}
    otu.EntityData.Children["otn-expected-ttitcmdapi"] = types.YChild{"OtnExpectedTtitcmdapi", &otu.OtnExpectedTtitcmdapi}
    otu.EntityData.Children["otn-send-ttisapi"] = types.YChild{"OtnSendTtisapi", &otu.OtnSendTtisapi}
    otu.EntityData.Children["prbs"] = types.YChild{"Prbs", &otu.Prbs}
    otu.EntityData.Children["otn-expected-ttitcmos"] = types.YChild{"OtnExpectedTtitcmos", &otu.OtnExpectedTtitcmos}
    otu.EntityData.Children["otn-expected-tti"] = types.YChild{"OtnExpectedTti", &otu.OtnExpectedTti}
    otu.EntityData.Leafs = make(map[string]types.YLeaf)
    otu.EntityData.Leafs["gcc"] = types.YLeaf{"Gcc", otu.Gcc}
    otu.EntityData.Leafs["sf"] = types.YLeaf{"Sf", otu.Sf}
    otu.EntityData.Leafs["secondary-admin-state"] = types.YLeaf{"SecondaryAdminState", otu.SecondaryAdminState}
    otu.EntityData.Leafs["sd"] = types.YLeaf{"Sd", otu.Sd}
    otu.EntityData.Leafs["performance-monitoring"] = types.YLeaf{"PerformanceMonitoring", otu.PerformanceMonitoring}
    otu.EntityData.Leafs["loopback"] = types.YLeaf{"Loopback", otu.Loopback}
    otu.EntityData.Leafs["fec"] = types.YLeaf{"Fec", otu.Fec}
    return &(otu.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos
// Configure OTN Send TTI value for OS config
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeOs.
    StringType interface{}

    // OS ASCII text (Max 32 characters). The type is string with length: 1..32.
    OsasciiString interface{}

    // OS HEX text (Max 64 characters). The type is string with length: 1..64.
    OshexString interface{}
}

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetEntityData() *types.CommonEntityData {
    otnSendTtitcmos.EntityData.YFilter = otnSendTtitcmos.YFilter
    otnSendTtitcmos.EntityData.YangName = "otn-send-ttitcmos"
    otnSendTtitcmos.EntityData.BundleName = "cisco_ios_xr"
    otnSendTtitcmos.EntityData.ParentYangName = "otu"
    otnSendTtitcmos.EntityData.SegmentPath = "otn-send-ttitcmos"
    otnSendTtitcmos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnSendTtitcmos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnSendTtitcmos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnSendTtitcmos.EntityData.Children = make(map[string]types.YChild)
    otnSendTtitcmos.EntityData.Leafs = make(map[string]types.YLeaf)
    otnSendTtitcmos.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otnSendTtitcmos.StringType}
    otnSendTtitcmos.EntityData.Leafs["osascii-string"] = types.YLeaf{"OsasciiString", otnSendTtitcmos.OsasciiString}
    otnSendTtitcmos.EntityData.Leafs["oshex-string"] = types.YLeaf{"OshexString", otnSendTtitcmos.OshexString}
    return &(otnSendTtitcmos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi
// Configure OTN Send TTI value for DAPI configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeDapi.
    StringType interface{}

    // DAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    DapiAsciiString interface{}
}

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetEntityData() *types.CommonEntityData {
    otnSendTtitcmdapi.EntityData.YFilter = otnSendTtitcmdapi.YFilter
    otnSendTtitcmdapi.EntityData.YangName = "otn-send-ttitcmdapi"
    otnSendTtitcmdapi.EntityData.BundleName = "cisco_ios_xr"
    otnSendTtitcmdapi.EntityData.ParentYangName = "otu"
    otnSendTtitcmdapi.EntityData.SegmentPath = "otn-send-ttitcmdapi"
    otnSendTtitcmdapi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnSendTtitcmdapi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnSendTtitcmdapi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnSendTtitcmdapi.EntityData.Children = make(map[string]types.YChild)
    otnSendTtitcmdapi.EntityData.Leafs = make(map[string]types.YLeaf)
    otnSendTtitcmdapi.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otnSendTtitcmdapi.StringType}
    otnSendTtitcmdapi.EntityData.Leafs["dapi-ascii-string"] = types.YLeaf{"DapiAsciiString", otnSendTtitcmdapi.DapiAsciiString}
    return &(otnSendTtitcmdapi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi
// Configure OTN Expected TTI value for SAPI
// configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeSapi.
    StringType interface{}

    // SAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    SapiAsciiString interface{}
}

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetEntityData() *types.CommonEntityData {
    otnExpectedTtisapi.EntityData.YFilter = otnExpectedTtisapi.YFilter
    otnExpectedTtisapi.EntityData.YangName = "otn-expected-ttisapi"
    otnExpectedTtisapi.EntityData.BundleName = "cisco_ios_xr"
    otnExpectedTtisapi.EntityData.ParentYangName = "otu"
    otnExpectedTtisapi.EntityData.SegmentPath = "otn-expected-ttisapi"
    otnExpectedTtisapi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnExpectedTtisapi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnExpectedTtisapi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnExpectedTtisapi.EntityData.Children = make(map[string]types.YChild)
    otnExpectedTtisapi.EntityData.Leafs = make(map[string]types.YLeaf)
    otnExpectedTtisapi.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otnExpectedTtisapi.StringType}
    otnExpectedTtisapi.EntityData.Leafs["sapi-ascii-string"] = types.YLeaf{"SapiAsciiString", otnExpectedTtisapi.SapiAsciiString}
    return &(otnExpectedTtisapi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection
// Configure Proactive Protection
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable Proactive Protection. The type is interface{}.
    Status interface{}

    // Proactive Protection Threshold.
    TriggerThreshold InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold

    // Proactive Protection Window.
    RevertWindow InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow

    // Proactive Protection Window.
    TriggerWindow InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow

    // Proactive Protection Threshold.
    RevertThreshold InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold
}

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetEntityData() *types.CommonEntityData {
    proactiveProtection.EntityData.YFilter = proactiveProtection.YFilter
    proactiveProtection.EntityData.YangName = "proactive-protection"
    proactiveProtection.EntityData.BundleName = "cisco_ios_xr"
    proactiveProtection.EntityData.ParentYangName = "otu"
    proactiveProtection.EntityData.SegmentPath = "proactive-protection"
    proactiveProtection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    proactiveProtection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    proactiveProtection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    proactiveProtection.EntityData.Children = make(map[string]types.YChild)
    proactiveProtection.EntityData.Children["trigger-threshold"] = types.YChild{"TriggerThreshold", &proactiveProtection.TriggerThreshold}
    proactiveProtection.EntityData.Children["revert-window"] = types.YChild{"RevertWindow", &proactiveProtection.RevertWindow}
    proactiveProtection.EntityData.Children["trigger-window"] = types.YChild{"TriggerWindow", &proactiveProtection.TriggerWindow}
    proactiveProtection.EntityData.Children["revert-threshold"] = types.YChild{"RevertThreshold", &proactiveProtection.RevertThreshold}
    proactiveProtection.EntityData.Leafs = make(map[string]types.YLeaf)
    proactiveProtection.EntityData.Leafs["status"] = types.YLeaf{"Status", proactiveProtection.Status}
    return &(proactiveProtection.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold
// Proactive Protection Threshold
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bit error rate coefficient. The type is interface{} with range: 1..9.
    Coefficient interface{}

    // Bit error rate power. The type is interface{} with range: 3..9.
    Power interface{}

    // Proactive Protection supported. The type is interface{}.
    Enable interface{}
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetEntityData() *types.CommonEntityData {
    triggerThreshold.EntityData.YFilter = triggerThreshold.YFilter
    triggerThreshold.EntityData.YangName = "trigger-threshold"
    triggerThreshold.EntityData.BundleName = "cisco_ios_xr"
    triggerThreshold.EntityData.ParentYangName = "proactive-protection"
    triggerThreshold.EntityData.SegmentPath = "trigger-threshold"
    triggerThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerThreshold.EntityData.Children = make(map[string]types.YChild)
    triggerThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    triggerThreshold.EntityData.Leafs["coefficient"] = types.YLeaf{"Coefficient", triggerThreshold.Coefficient}
    triggerThreshold.EntityData.Leafs["power"] = types.YLeaf{"Power", triggerThreshold.Power}
    triggerThreshold.EntityData.Leafs["enable"] = types.YLeaf{"Enable", triggerThreshold.Enable}
    return &(triggerThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow
// Proactive Protection Window
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Integration window for FRR trigger in MS. The type is interface{} with
    // range: 2000..10000.
    Value interface{}

    // Enable Proactive Protection. The type is interface{}.
    Enable interface{}
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetEntityData() *types.CommonEntityData {
    revertWindow.EntityData.YFilter = revertWindow.YFilter
    revertWindow.EntityData.YangName = "revert-window"
    revertWindow.EntityData.BundleName = "cisco_ios_xr"
    revertWindow.EntityData.ParentYangName = "proactive-protection"
    revertWindow.EntityData.SegmentPath = "revert-window"
    revertWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    revertWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    revertWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    revertWindow.EntityData.Children = make(map[string]types.YChild)
    revertWindow.EntityData.Leafs = make(map[string]types.YLeaf)
    revertWindow.EntityData.Leafs["value"] = types.YLeaf{"Value", revertWindow.Value}
    revertWindow.EntityData.Leafs["enable"] = types.YLeaf{"Enable", revertWindow.Enable}
    return &(revertWindow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow
// Proactive Protection Window
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Integration window for FRR trigger in MS. The type is interface{} with
    // range: 10..10000.
    Value interface{}

    // Enable Proactive Protection. The type is interface{}.
    Enable interface{}
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetEntityData() *types.CommonEntityData {
    triggerWindow.EntityData.YFilter = triggerWindow.YFilter
    triggerWindow.EntityData.YangName = "trigger-window"
    triggerWindow.EntityData.BundleName = "cisco_ios_xr"
    triggerWindow.EntityData.ParentYangName = "proactive-protection"
    triggerWindow.EntityData.SegmentPath = "trigger-window"
    triggerWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerWindow.EntityData.Children = make(map[string]types.YChild)
    triggerWindow.EntityData.Leafs = make(map[string]types.YLeaf)
    triggerWindow.EntityData.Leafs["value"] = types.YLeaf{"Value", triggerWindow.Value}
    triggerWindow.EntityData.Leafs["enable"] = types.YLeaf{"Enable", triggerWindow.Enable}
    return &(triggerWindow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold
// Proactive Protection Threshold
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bit error rate coefficient. The type is interface{} with range: 1..9.
    Coefficient interface{}

    // Bit error rate power. The type is interface{} with range: 4..10.
    Power interface{}

    // Proactive Protection supported. The type is interface{}.
    Enable interface{}
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetEntityData() *types.CommonEntityData {
    revertThreshold.EntityData.YFilter = revertThreshold.YFilter
    revertThreshold.EntityData.YangName = "revert-threshold"
    revertThreshold.EntityData.BundleName = "cisco_ios_xr"
    revertThreshold.EntityData.ParentYangName = "proactive-protection"
    revertThreshold.EntityData.SegmentPath = "revert-threshold"
    revertThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    revertThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    revertThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    revertThreshold.EntityData.Children = make(map[string]types.YChild)
    revertThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    revertThreshold.EntityData.Leafs["coefficient"] = types.YLeaf{"Coefficient", revertThreshold.Coefficient}
    revertThreshold.EntityData.Leafs["power"] = types.YLeaf{"Power", revertThreshold.Power}
    revertThreshold.EntityData.Leafs["enable"] = types.YLeaf{"Enable", revertThreshold.Enable}
    return &(revertThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs
// Configure Network srlgs
type InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure network srlg sets. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg.
    NetworkSrlg []InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetEntityData() *types.CommonEntityData {
    networkSrlgs.EntityData.YFilter = networkSrlgs.YFilter
    networkSrlgs.EntityData.YangName = "network-srlgs"
    networkSrlgs.EntityData.BundleName = "cisco_ios_xr"
    networkSrlgs.EntityData.ParentYangName = "otu"
    networkSrlgs.EntityData.SegmentPath = "network-srlgs"
    networkSrlgs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkSrlgs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkSrlgs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkSrlgs.EntityData.Children = make(map[string]types.YChild)
    networkSrlgs.EntityData.Children["network-srlg"] = types.YChild{"NetworkSrlg", nil}
    for i := range networkSrlgs.NetworkSrlg {
        networkSrlgs.EntityData.Children[types.GetSegmentPath(&networkSrlgs.NetworkSrlg[i])] = types.YChild{"NetworkSrlg", &networkSrlgs.NetworkSrlg[i]}
    }
    networkSrlgs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(networkSrlgs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg
// Configure network srlg sets
type InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Set index. The type is interface{} with range:
    // 1..17.
    SetId interface{}

    // First value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg1 interface{}

    // Second value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg2 interface{}

    // Third value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg3 interface{}

    // Forth value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg4 interface{}

    // Fifth value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg5 interface{}

    // Sixth value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg6 interface{}
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetEntityData() *types.CommonEntityData {
    networkSrlg.EntityData.YFilter = networkSrlg.YFilter
    networkSrlg.EntityData.YangName = "network-srlg"
    networkSrlg.EntityData.BundleName = "cisco_ios_xr"
    networkSrlg.EntityData.ParentYangName = "network-srlgs"
    networkSrlg.EntityData.SegmentPath = "network-srlg" + "[set-id='" + fmt.Sprintf("%v", networkSrlg.SetId) + "']"
    networkSrlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkSrlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkSrlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkSrlg.EntityData.Children = make(map[string]types.YChild)
    networkSrlg.EntityData.Leafs = make(map[string]types.YLeaf)
    networkSrlg.EntityData.Leafs["set-id"] = types.YLeaf{"SetId", networkSrlg.SetId}
    networkSrlg.EntityData.Leafs["srlg1"] = types.YLeaf{"Srlg1", networkSrlg.Srlg1}
    networkSrlg.EntityData.Leafs["srlg2"] = types.YLeaf{"Srlg2", networkSrlg.Srlg2}
    networkSrlg.EntityData.Leafs["srlg3"] = types.YLeaf{"Srlg3", networkSrlg.Srlg3}
    networkSrlg.EntityData.Leafs["srlg4"] = types.YLeaf{"Srlg4", networkSrlg.Srlg4}
    networkSrlg.EntityData.Leafs["srlg5"] = types.YLeaf{"Srlg5", networkSrlg.Srlg5}
    networkSrlg.EntityData.Leafs["srlg6"] = types.YLeaf{"Srlg6", networkSrlg.Srlg6}
    return &(networkSrlg.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti
// Configure OTN Send TTI value for Full ASCII/HEX
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeFull.
    StringType interface{}

    // Full ASCII text (Max 64 characters). The type is string with length: 1..64.
    FullAsciiString interface{}

    // Hex nibbles (Max 128 - The string length should be an even number). The
    // type is string with length: 1..128.
    HexString interface{}
}

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetEntityData() *types.CommonEntityData {
    otnSendTti.EntityData.YFilter = otnSendTti.YFilter
    otnSendTti.EntityData.YangName = "otn-send-tti"
    otnSendTti.EntityData.BundleName = "cisco_ios_xr"
    otnSendTti.EntityData.ParentYangName = "otu"
    otnSendTti.EntityData.SegmentPath = "otn-send-tti"
    otnSendTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnSendTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnSendTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnSendTti.EntityData.Children = make(map[string]types.YChild)
    otnSendTti.EntityData.Leafs = make(map[string]types.YLeaf)
    otnSendTti.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otnSendTti.StringType}
    otnSendTti.EntityData.Leafs["full-ascii-string"] = types.YLeaf{"FullAsciiString", otnSendTti.FullAsciiString}
    otnSendTti.EntityData.Leafs["hex-string"] = types.YLeaf{"HexString", otnSendTti.HexString}
    return &(otnSendTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi
// Configure OTN Expected TTI value for DAPI
// configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeDapi.
    StringType interface{}

    // DAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    DapiAsciiString interface{}
}

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetEntityData() *types.CommonEntityData {
    otnExpectedTtitcmdapi.EntityData.YFilter = otnExpectedTtitcmdapi.YFilter
    otnExpectedTtitcmdapi.EntityData.YangName = "otn-expected-ttitcmdapi"
    otnExpectedTtitcmdapi.EntityData.BundleName = "cisco_ios_xr"
    otnExpectedTtitcmdapi.EntityData.ParentYangName = "otu"
    otnExpectedTtitcmdapi.EntityData.SegmentPath = "otn-expected-ttitcmdapi"
    otnExpectedTtitcmdapi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnExpectedTtitcmdapi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnExpectedTtitcmdapi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnExpectedTtitcmdapi.EntityData.Children = make(map[string]types.YChild)
    otnExpectedTtitcmdapi.EntityData.Leafs = make(map[string]types.YLeaf)
    otnExpectedTtitcmdapi.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otnExpectedTtitcmdapi.StringType}
    otnExpectedTtitcmdapi.EntityData.Leafs["dapi-ascii-string"] = types.YLeaf{"DapiAsciiString", otnExpectedTtitcmdapi.DapiAsciiString}
    return &(otnExpectedTtitcmdapi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi
// Configure OTN Send TTI value for SAPI configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeSapi.
    StringType interface{}

    // SAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    SapiAsciiString interface{}
}

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetEntityData() *types.CommonEntityData {
    otnSendTtisapi.EntityData.YFilter = otnSendTtisapi.YFilter
    otnSendTtisapi.EntityData.YangName = "otn-send-ttisapi"
    otnSendTtisapi.EntityData.BundleName = "cisco_ios_xr"
    otnSendTtisapi.EntityData.ParentYangName = "otu"
    otnSendTtisapi.EntityData.SegmentPath = "otn-send-ttisapi"
    otnSendTtisapi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnSendTtisapi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnSendTtisapi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnSendTtisapi.EntityData.Children = make(map[string]types.YChild)
    otnSendTtisapi.EntityData.Leafs = make(map[string]types.YLeaf)
    otnSendTtisapi.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otnSendTtisapi.StringType}
    otnSendTtisapi.EntityData.Leafs["sapi-ascii-string"] = types.YLeaf{"SapiAsciiString", otnSendTtisapi.SapiAsciiString}
    return &(otnSendTtisapi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs
// Enable Prbs And configure
type InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mode value. The type is OtuMode.
    ModeValue interface{}

    // Pattern value. The type is OtuPattern.
    Patternvalue interface{}
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetEntityData() *types.CommonEntityData {
    prbs.EntityData.YFilter = prbs.YFilter
    prbs.EntityData.YangName = "prbs"
    prbs.EntityData.BundleName = "cisco_ios_xr"
    prbs.EntityData.ParentYangName = "otu"
    prbs.EntityData.SegmentPath = "prbs"
    prbs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prbs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prbs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prbs.EntityData.Children = make(map[string]types.YChild)
    prbs.EntityData.Leafs = make(map[string]types.YLeaf)
    prbs.EntityData.Leafs["mode-value"] = types.YLeaf{"ModeValue", prbs.ModeValue}
    prbs.EntityData.Leafs["patternvalue"] = types.YLeaf{"Patternvalue", prbs.Patternvalue}
    return &(prbs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos
// Configure OTN Expected TTI value for OS config
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeOs.
    StringType interface{}

    // OS ASCII text (Max 32 characters). The type is string with length: 1..32.
    OsasciiString interface{}

    // OS HEX text (Max 64 characters). The type is string with length: 1..64.
    OshexString interface{}
}

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetEntityData() *types.CommonEntityData {
    otnExpectedTtitcmos.EntityData.YFilter = otnExpectedTtitcmos.YFilter
    otnExpectedTtitcmos.EntityData.YangName = "otn-expected-ttitcmos"
    otnExpectedTtitcmos.EntityData.BundleName = "cisco_ios_xr"
    otnExpectedTtitcmos.EntityData.ParentYangName = "otu"
    otnExpectedTtitcmos.EntityData.SegmentPath = "otn-expected-ttitcmos"
    otnExpectedTtitcmos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnExpectedTtitcmos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnExpectedTtitcmos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnExpectedTtitcmos.EntityData.Children = make(map[string]types.YChild)
    otnExpectedTtitcmos.EntityData.Leafs = make(map[string]types.YLeaf)
    otnExpectedTtitcmos.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otnExpectedTtitcmos.StringType}
    otnExpectedTtitcmos.EntityData.Leafs["osascii-string"] = types.YLeaf{"OsasciiString", otnExpectedTtitcmos.OsasciiString}
    otnExpectedTtitcmos.EntityData.Leafs["oshex-string"] = types.YLeaf{"OshexString", otnExpectedTtitcmos.OshexString}
    return &(otnExpectedTtitcmos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti
// Configure OTN Expected TTI value for Full
// ASCII/HEX
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeFull.
    StringType interface{}

    // Full ASCII text (Max 64 characters). The type is string with length: 1..64.
    FullAsciiString interface{}

    // Hex nibbles (Max 128 - The string length should be an even number). The
    // type is string with length: 1..128.
    HexString interface{}
}

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetEntityData() *types.CommonEntityData {
    otnExpectedTti.EntityData.YFilter = otnExpectedTti.YFilter
    otnExpectedTti.EntityData.YangName = "otn-expected-tti"
    otnExpectedTti.EntityData.BundleName = "cisco_ios_xr"
    otnExpectedTti.EntityData.ParentYangName = "otu"
    otnExpectedTti.EntityData.SegmentPath = "otn-expected-tti"
    otnExpectedTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnExpectedTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnExpectedTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnExpectedTti.EntityData.Children = make(map[string]types.YChild)
    otnExpectedTti.EntityData.Leafs = make(map[string]types.YLeaf)
    otnExpectedTti.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otnExpectedTti.StringType}
    otnExpectedTti.EntityData.Leafs["full-ascii-string"] = types.YLeaf{"FullAsciiString", otnExpectedTti.FullAsciiString}
    otnExpectedTti.EntityData.Leafs["hex-string"] = types.YLeaf{"HexString", otnExpectedTti.HexString}
    return &(otnExpectedTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Macsec
// MACSec service for an interface
type InterfaceConfigurations_InterfaceConfiguration_Macsec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macsec-service configuration on interface.
    MacsecService InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService

    // Enabling MACSec eap Configuration on Interface.
    Eap InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap

    // MACSec MKA Configuration on Interface.
    PskKeyChain InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain
}

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetEntityData() *types.CommonEntityData {
    macsec.EntityData.YFilter = macsec.YFilter
    macsec.EntityData.YangName = "macsec"
    macsec.EntityData.BundleName = "cisco_ios_xr"
    macsec.EntityData.ParentYangName = "interface-configuration"
    macsec.EntityData.SegmentPath = "Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec"
    macsec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macsec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macsec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macsec.EntityData.Children = make(map[string]types.YChild)
    macsec.EntityData.Children["macsec-service"] = types.YChild{"MacsecService", &macsec.MacsecService}
    macsec.EntityData.Children["eap"] = types.YChild{"Eap", &macsec.Eap}
    macsec.EntityData.Children["psk-key-chain"] = types.YChild{"PskKeyChain", &macsec.PskKeyChain}
    macsec.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(macsec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService
// macsec-service configuration on interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macsec service decryption port. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'. This attribute is mandatory.
    DecryptPort interface{}

    // name of keychain. The type is string with length: 1..32. This attribute is
    // mandatory.
    KeyChain interface{}

    // name of policy. The type is string with length: 1..16.
    Policy interface{}
}

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetEntityData() *types.CommonEntityData {
    macsecService.EntityData.YFilter = macsecService.YFilter
    macsecService.EntityData.YangName = "macsec-service"
    macsecService.EntityData.BundleName = "cisco_ios_xr"
    macsecService.EntityData.ParentYangName = "macsec"
    macsecService.EntityData.SegmentPath = "macsec-service"
    macsecService.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macsecService.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macsecService.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macsecService.EntityData.Children = make(map[string]types.YChild)
    macsecService.EntityData.Leafs = make(map[string]types.YLeaf)
    macsecService.EntityData.Leafs["decrypt-port"] = types.YLeaf{"DecryptPort", macsecService.DecryptPort}
    macsecService.EntityData.Leafs["key-chain"] = types.YLeaf{"KeyChain", macsecService.KeyChain}
    macsecService.EntityData.Leafs["policy"] = types.YLeaf{"Policy", macsecService.Policy}
    return &(macsecService.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap
// Enabling MACSec eap Configuration on Interface
type InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Eap config. The type is string with pattern: b'(eap)'.
    EapConfig interface{}

    // Name of Policy. The type is string with length: 1..16.
    PolicyName interface{}
}

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetEntityData() *types.CommonEntityData {
    eap.EntityData.YFilter = eap.YFilter
    eap.EntityData.YangName = "eap"
    eap.EntityData.BundleName = "cisco_ios_xr"
    eap.EntityData.ParentYangName = "macsec"
    eap.EntityData.SegmentPath = "eap"
    eap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eap.EntityData.Children = make(map[string]types.YChild)
    eap.EntityData.Leafs = make(map[string]types.YLeaf)
    eap.EntityData.Leafs["eap-config"] = types.YLeaf{"EapConfig", eap.EapConfig}
    eap.EntityData.Leafs["policy-name"] = types.YLeaf{"PolicyName", eap.PolicyName}
    return &(eap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain
// MACSec MKA Configuration on Interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of KeyChainName. The type is string with length: 1..32. This attribute
    // is mandatory.
    KeyChainName interface{}

    // Name of Policy. The type is string with length: 1..16.
    PolicyName interface{}

    // name of fallback keychain. The type is string with length: 1..32.
    FallbackKeyChain interface{}
}

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetEntityData() *types.CommonEntityData {
    pskKeyChain.EntityData.YFilter = pskKeyChain.YFilter
    pskKeyChain.EntityData.YangName = "psk-key-chain"
    pskKeyChain.EntityData.BundleName = "cisco_ios_xr"
    pskKeyChain.EntityData.ParentYangName = "macsec"
    pskKeyChain.EntityData.SegmentPath = "psk-key-chain"
    pskKeyChain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pskKeyChain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pskKeyChain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pskKeyChain.EntityData.Children = make(map[string]types.YChild)
    pskKeyChain.EntityData.Leafs = make(map[string]types.YLeaf)
    pskKeyChain.EntityData.Leafs["key-chain-name"] = types.YLeaf{"KeyChainName", pskKeyChain.KeyChainName}
    pskKeyChain.EntityData.Leafs["policy-name"] = types.YLeaf{"PolicyName", pskKeyChain.PolicyName}
    pskKeyChain.EntityData.Leafs["fallback-key-chain"] = types.YLeaf{"FallbackKeyChain", pskKeyChain.FallbackKeyChain}
    return &(pskKeyChain.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface
// Interface Specific Dot1x Configuration
type InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of Dot1x profile. The type is string.
    Dot1XProfile interface{}
}

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetEntityData() *types.CommonEntityData {
    dot1XInterface.EntityData.YFilter = dot1XInterface.YFilter
    dot1XInterface.EntityData.YangName = "dot1x-interface"
    dot1XInterface.EntityData.BundleName = "cisco_ios_xr"
    dot1XInterface.EntityData.ParentYangName = "interface-configuration"
    dot1XInterface.EntityData.SegmentPath = "Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface"
    dot1XInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dot1XInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dot1XInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dot1XInterface.EntityData.Children = make(map[string]types.YChild)
    dot1XInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    dot1XInterface.EntityData.Leafs["dot1x-profile"] = types.YLeaf{"Dot1XProfile", dot1XInterface.Dot1XProfile}
    return &(dot1XInterface.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Loopbacks
// Configure Extended loopback (diagnostics)
type InterfaceConfigurations_InterfaceConfiguration_Loopbacks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure extended loopback mode. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback.
    Loopback []InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback
}

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetEntityData() *types.CommonEntityData {
    loopbacks.EntityData.YFilter = loopbacks.YFilter
    loopbacks.EntityData.YangName = "loopbacks"
    loopbacks.EntityData.BundleName = "cisco_ios_xr"
    loopbacks.EntityData.ParentYangName = "interface-configuration"
    loopbacks.EntityData.SegmentPath = "Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks"
    loopbacks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loopbacks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loopbacks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loopbacks.EntityData.Children = make(map[string]types.YChild)
    loopbacks.EntityData.Children["loopback"] = types.YChild{"Loopback", nil}
    for i := range loopbacks.Loopback {
        loopbacks.EntityData.Children[types.GetSegmentPath(&loopbacks.Loopback[i])] = types.YChild{"Loopback", &loopbacks.Loopback[i]}
    }
    loopbacks.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(loopbacks.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback
// Configure extended loopback mode
type InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Level. The type is interface{} with range: 1..3.
    Level interface{}

    // Loopback. The type is ExtendedEthernetLoopback. This attribute is
    // mandatory.
    Loopback interface{}
}

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetEntityData() *types.CommonEntityData {
    loopback.EntityData.YFilter = loopback.YFilter
    loopback.EntityData.YangName = "loopback"
    loopback.EntityData.BundleName = "cisco_ios_xr"
    loopback.EntityData.ParentYangName = "loopbacks"
    loopback.EntityData.SegmentPath = "loopback" + "[level='" + fmt.Sprintf("%v", loopback.Level) + "']"
    loopback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loopback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loopback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loopback.EntityData.Children = make(map[string]types.YChild)
    loopback.EntityData.Leafs = make(map[string]types.YLeaf)
    loopback.EntityData.Leafs["level"] = types.YLeaf{"Level", loopback.Level}
    loopback.EntityData.Leafs["loopback"] = types.YLeaf{"Loopback", loopback.Loopback}
    return &(loopback.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet
// Ether specific interface configuration
type InterfaceConfigurations_InterfaceConfiguration_Ethernet struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure duplex operational mode. The type is EthernetDuplex.
    Duplex interface{}

    // Link auto-negotiation. The type is EthernetAutoNegotiation.
    AutoNegotiation interface{}

    // Configure flow-control mode. The type is EthernetFlowCtrl.
    FlowControl interface{}

    // Forward Error Correction. The type is EthernetFec.
    ForwardErrorCorrection interface{}

    // Configure priority flow-control mode. The type is EthernetPfc.
    PriorityFlowControl interface{}

    // Configure loopback mode. The type is EthernetLoopback.
    Loopback interface{}

    // Set the ethernet speed on an interface. The type is EthernetSpeed.
    Speed interface{}

    // Inter-packet gap. The type is EthernetIpg.
    InterPacketGap interface{}

    // Signal Fail Bit Error Rate handling options.
    SignalFailBitErrorRate InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate

    // Optical power degrade handling options.
    OpticalPowerDegrade InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade

    // Signal Degrade Bit Error Rate handling options.
    SignalDegradeBitErrorRate InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate

    // Set the carrier transition delay on an interface in msecs.
    CarrierDelay InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetEntityData() *types.CommonEntityData {
    ethernet.EntityData.YFilter = ethernet.YFilter
    ethernet.EntityData.YangName = "ethernet"
    ethernet.EntityData.BundleName = "cisco_ios_xr"
    ethernet.EntityData.ParentYangName = "interface-configuration"
    ethernet.EntityData.SegmentPath = "Cisco-IOS-XR-drivers-media-eth-cfg:ethernet"
    ethernet.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernet.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernet.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernet.EntityData.Children = make(map[string]types.YChild)
    ethernet.EntityData.Children["signal-fail-bit-error-rate"] = types.YChild{"SignalFailBitErrorRate", &ethernet.SignalFailBitErrorRate}
    ethernet.EntityData.Children["optical-power-degrade"] = types.YChild{"OpticalPowerDegrade", &ethernet.OpticalPowerDegrade}
    ethernet.EntityData.Children["signal-degrade-bit-error-rate"] = types.YChild{"SignalDegradeBitErrorRate", &ethernet.SignalDegradeBitErrorRate}
    ethernet.EntityData.Children["carrier-delay"] = types.YChild{"CarrierDelay", &ethernet.CarrierDelay}
    ethernet.EntityData.Leafs = make(map[string]types.YLeaf)
    ethernet.EntityData.Leafs["duplex"] = types.YLeaf{"Duplex", ethernet.Duplex}
    ethernet.EntityData.Leafs["auto-negotiation"] = types.YLeaf{"AutoNegotiation", ethernet.AutoNegotiation}
    ethernet.EntityData.Leafs["flow-control"] = types.YLeaf{"FlowControl", ethernet.FlowControl}
    ethernet.EntityData.Leafs["forward-error-correction"] = types.YLeaf{"ForwardErrorCorrection", ethernet.ForwardErrorCorrection}
    ethernet.EntityData.Leafs["priority-flow-control"] = types.YLeaf{"PriorityFlowControl", ethernet.PriorityFlowControl}
    ethernet.EntityData.Leafs["loopback"] = types.YLeaf{"Loopback", ethernet.Loopback}
    ethernet.EntityData.Leafs["speed"] = types.YLeaf{"Speed", ethernet.Speed}
    ethernet.EntityData.Leafs["inter-packet-gap"] = types.YLeaf{"InterPacketGap", ethernet.InterPacketGap}
    return &(ethernet.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate
// Signal Fail Bit Error Rate handling options
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal a remote fault to the peer device whenever the link is taken down
    // due to crossing the SF-BER threshold. The type is interface{}.
    SignalRemoteFault interface{}

    // Set the Signal Fail bit error rate threshold on an interface to a value of
    // 10e-x, where x is the value passed in here. The type is interface{} with
    // range: 4..12. The default value is 4.
    SignalFailThreshold interface{}

    // Disable generation of an alarm whenever the SF-BER threshold is crossed for
    // this interface. The type is interface{}.
    SignalFailReportDisable interface{}
}

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetEntityData() *types.CommonEntityData {
    signalFailBitErrorRate.EntityData.YFilter = signalFailBitErrorRate.YFilter
    signalFailBitErrorRate.EntityData.YangName = "signal-fail-bit-error-rate"
    signalFailBitErrorRate.EntityData.BundleName = "cisco_ios_xr"
    signalFailBitErrorRate.EntityData.ParentYangName = "ethernet"
    signalFailBitErrorRate.EntityData.SegmentPath = "signal-fail-bit-error-rate"
    signalFailBitErrorRate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    signalFailBitErrorRate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    signalFailBitErrorRate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    signalFailBitErrorRate.EntityData.Children = make(map[string]types.YChild)
    signalFailBitErrorRate.EntityData.Leafs = make(map[string]types.YLeaf)
    signalFailBitErrorRate.EntityData.Leafs["signal-remote-fault"] = types.YLeaf{"SignalRemoteFault", signalFailBitErrorRate.SignalRemoteFault}
    signalFailBitErrorRate.EntityData.Leafs["signal-fail-threshold"] = types.YLeaf{"SignalFailThreshold", signalFailBitErrorRate.SignalFailThreshold}
    signalFailBitErrorRate.EntityData.Leafs["signal-fail-report-disable"] = types.YLeaf{"SignalFailReportDisable", signalFailBitErrorRate.SignalFailReportDisable}
    return &(signalFailBitErrorRate.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade
// Optical power degrade handling options
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the value of the received optical power degrade alarm threshold on an
    // interface. The type is interface{} with range: -300..50.
    RxAlarmThreshold interface{}
}

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetEntityData() *types.CommonEntityData {
    opticalPowerDegrade.EntityData.YFilter = opticalPowerDegrade.YFilter
    opticalPowerDegrade.EntityData.YangName = "optical-power-degrade"
    opticalPowerDegrade.EntityData.BundleName = "cisco_ios_xr"
    opticalPowerDegrade.EntityData.ParentYangName = "ethernet"
    opticalPowerDegrade.EntityData.SegmentPath = "optical-power-degrade"
    opticalPowerDegrade.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticalPowerDegrade.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticalPowerDegrade.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticalPowerDegrade.EntityData.Children = make(map[string]types.YChild)
    opticalPowerDegrade.EntityData.Leafs = make(map[string]types.YLeaf)
    opticalPowerDegrade.EntityData.Leafs["rx-alarm-threshold"] = types.YLeaf{"RxAlarmThreshold", opticalPowerDegrade.RxAlarmThreshold}
    return &(opticalPowerDegrade.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate
// Signal Degrade Bit Error Rate handling options
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the Signal Degrade bit error rate threshold on an interface to a value
    // of 10e-x, where x is the value passed in here. The type is interface{} with
    // range: 3..12. The default value is 6.
    SignalDegradeThreshold interface{}

    // Generate an alarm whenever the SD-BER threshold is crossed for this
    // interface. The type is interface{}.
    SignalDegradeReport interface{}
}

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetEntityData() *types.CommonEntityData {
    signalDegradeBitErrorRate.EntityData.YFilter = signalDegradeBitErrorRate.YFilter
    signalDegradeBitErrorRate.EntityData.YangName = "signal-degrade-bit-error-rate"
    signalDegradeBitErrorRate.EntityData.BundleName = "cisco_ios_xr"
    signalDegradeBitErrorRate.EntityData.ParentYangName = "ethernet"
    signalDegradeBitErrorRate.EntityData.SegmentPath = "signal-degrade-bit-error-rate"
    signalDegradeBitErrorRate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    signalDegradeBitErrorRate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    signalDegradeBitErrorRate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    signalDegradeBitErrorRate.EntityData.Children = make(map[string]types.YChild)
    signalDegradeBitErrorRate.EntityData.Leafs = make(map[string]types.YLeaf)
    signalDegradeBitErrorRate.EntityData.Leafs["signal-degrade-threshold"] = types.YLeaf{"SignalDegradeThreshold", signalDegradeBitErrorRate.SignalDegradeThreshold}
    signalDegradeBitErrorRate.EntityData.Leafs["signal-degrade-report"] = types.YLeaf{"SignalDegradeReport", signalDegradeBitErrorRate.SignalDegradeReport}
    return &(signalDegradeBitErrorRate.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay
// Set the carrier transition delay on an
// interface in msecs
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Carrier Delay (up) in msecs. The type is interface{} with range:
    // 0..2147483647.
    CarrierDelayUp interface{}

    // Carrier Delay (down) in msecs. The type is interface{} with range:
    // 0..2147483647.
    CarrierDelayDown interface{}
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetEntityData() *types.CommonEntityData {
    carrierDelay.EntityData.YFilter = carrierDelay.YFilter
    carrierDelay.EntityData.YangName = "carrier-delay"
    carrierDelay.EntityData.BundleName = "cisco_ios_xr"
    carrierDelay.EntityData.ParentYangName = "ethernet"
    carrierDelay.EntityData.SegmentPath = "carrier-delay"
    carrierDelay.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    carrierDelay.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    carrierDelay.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    carrierDelay.EntityData.Children = make(map[string]types.YChild)
    carrierDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    carrierDelay.EntityData.Leafs["carrier-delay-up"] = types.YLeaf{"CarrierDelayUp", carrierDelay.CarrierDelayUp}
    carrierDelay.EntityData.Leafs["carrier-delay-down"] = types.YLeaf{"CarrierDelayDown", carrierDelay.CarrierDelayDown}
    return &(carrierDelay.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm
// DWDM port controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Dwdm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable or Enable VTXP configuration. The type is bool.
    EnableVtxp interface{}

    // Configure network port id. The type is string with length: 1..64.
    NetworkPortId interface{}

    // Configure transport admin state. The type is DwdmAdminState. The default
    // value is out-of-service.
    TransportAdminState interface{}

    // Configure laser off/on. The type is interface{}.
    Laser interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -190..10.
    TransmitPower interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -350..50.
    RxThreshold interface{}

    // Configure network connection id. The type is string with length: 1..64.
    NetworkConnectionId interface{}

    // Configure loopback mode . The type is DwdmLoopback. The default value is
    // none.
    Loopback interface{}

    // Configure Network srlgs.
    NetworkSrlgs InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs

    // Configure G709 parameters.
    G709 InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709

    // Configure transponder wavelength.
    Wavelength InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength
}

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetEntityData() *types.CommonEntityData {
    dwdm.EntityData.YFilter = dwdm.YFilter
    dwdm.EntityData.YangName = "dwdm"
    dwdm.EntityData.BundleName = "cisco_ios_xr"
    dwdm.EntityData.ParentYangName = "interface-configuration"
    dwdm.EntityData.SegmentPath = "Cisco-IOS-XR-dwdm-ui-cfg:dwdm"
    dwdm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dwdm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dwdm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dwdm.EntityData.Children = make(map[string]types.YChild)
    dwdm.EntityData.Children["network-srlgs"] = types.YChild{"NetworkSrlgs", &dwdm.NetworkSrlgs}
    dwdm.EntityData.Children["g709"] = types.YChild{"G709", &dwdm.G709}
    dwdm.EntityData.Children["wavelength"] = types.YChild{"Wavelength", &dwdm.Wavelength}
    dwdm.EntityData.Leafs = make(map[string]types.YLeaf)
    dwdm.EntityData.Leafs["enable-vtxp"] = types.YLeaf{"EnableVtxp", dwdm.EnableVtxp}
    dwdm.EntityData.Leafs["network-port-id"] = types.YLeaf{"NetworkPortId", dwdm.NetworkPortId}
    dwdm.EntityData.Leafs["transport-admin-state"] = types.YLeaf{"TransportAdminState", dwdm.TransportAdminState}
    dwdm.EntityData.Leafs["laser"] = types.YLeaf{"Laser", dwdm.Laser}
    dwdm.EntityData.Leafs["transmit-power"] = types.YLeaf{"TransmitPower", dwdm.TransmitPower}
    dwdm.EntityData.Leafs["rx-threshold"] = types.YLeaf{"RxThreshold", dwdm.RxThreshold}
    dwdm.EntityData.Leafs["network-connection-id"] = types.YLeaf{"NetworkConnectionId", dwdm.NetworkConnectionId}
    dwdm.EntityData.Leafs["loopback"] = types.YLeaf{"Loopback", dwdm.Loopback}
    return &(dwdm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs
// Configure Network srlgs
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure network srlg sets. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg.
    NetworkSrlg []InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetEntityData() *types.CommonEntityData {
    networkSrlgs.EntityData.YFilter = networkSrlgs.YFilter
    networkSrlgs.EntityData.YangName = "network-srlgs"
    networkSrlgs.EntityData.BundleName = "cisco_ios_xr"
    networkSrlgs.EntityData.ParentYangName = "dwdm"
    networkSrlgs.EntityData.SegmentPath = "network-srlgs"
    networkSrlgs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkSrlgs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkSrlgs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkSrlgs.EntityData.Children = make(map[string]types.YChild)
    networkSrlgs.EntityData.Children["network-srlg"] = types.YChild{"NetworkSrlg", nil}
    for i := range networkSrlgs.NetworkSrlg {
        networkSrlgs.EntityData.Children[types.GetSegmentPath(&networkSrlgs.NetworkSrlg[i])] = types.YChild{"NetworkSrlg", &networkSrlgs.NetworkSrlg[i]}
    }
    networkSrlgs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(networkSrlgs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg
// Configure network srlg sets
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Set index. The type is interface{} with range:
    // 1..17.
    SetId interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg1 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg2 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg3 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg4 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg5 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg6 interface{}
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetEntityData() *types.CommonEntityData {
    networkSrlg.EntityData.YFilter = networkSrlg.YFilter
    networkSrlg.EntityData.YangName = "network-srlg"
    networkSrlg.EntityData.BundleName = "cisco_ios_xr"
    networkSrlg.EntityData.ParentYangName = "network-srlgs"
    networkSrlg.EntityData.SegmentPath = "network-srlg" + "[set-id='" + fmt.Sprintf("%v", networkSrlg.SetId) + "']"
    networkSrlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkSrlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkSrlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkSrlg.EntityData.Children = make(map[string]types.YChild)
    networkSrlg.EntityData.Leafs = make(map[string]types.YLeaf)
    networkSrlg.EntityData.Leafs["set-id"] = types.YLeaf{"SetId", networkSrlg.SetId}
    networkSrlg.EntityData.Leafs["srlg1"] = types.YLeaf{"Srlg1", networkSrlg.Srlg1}
    networkSrlg.EntityData.Leafs["srlg2"] = types.YLeaf{"Srlg2", networkSrlg.Srlg2}
    networkSrlg.EntityData.Leafs["srlg3"] = types.YLeaf{"Srlg3", networkSrlg.Srlg3}
    networkSrlg.EntityData.Leafs["srlg4"] = types.YLeaf{"Srlg4", networkSrlg.Srlg4}
    networkSrlg.EntityData.Leafs["srlg5"] = types.YLeaf{"Srlg5", networkSrlg.Srlg5}
    networkSrlg.EntityData.Leafs["srlg6"] = types.YLeaf{"Srlg6", networkSrlg.Srlg6}
    return &(networkSrlg.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709
// Configure G709 parameters
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable proactive protectioni Graceful or Default mode. The type is
    // Proactive.
    Proactive interface{}

    // Enable GAIS insertion. The type is interface{}.
    BdiToGais interface{}

    // Configure Trace Identifier Mismatch alarm consequence. The type is
    // interface{}.
    TimToGais interface{}

    // Configure proactive protection log file. The type is string with length:
    // 1..128.
    ProactiveLoggingFile interface{}

    // Configure Trail Trace Identifier  processing. The type is interface{}.
    TtiProcessing interface{}

    // Disable or Enable g709 framing. The type is bool.
    Enable interface{}

    // Over clocking mode for client signal bw compatibility. The type is Framing.
    Framing interface{}

    // Configure ODU parameters.
    Odu InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu

    // Configure OTU parameters.
    Otu InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu

    // Configure PRBS mode and pattern.
    Prbs InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs

    // Configure FEC mode.
    Fec InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec
}

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetEntityData() *types.CommonEntityData {
    g709.EntityData.YFilter = g709.YFilter
    g709.EntityData.YangName = "g709"
    g709.EntityData.BundleName = "cisco_ios_xr"
    g709.EntityData.ParentYangName = "dwdm"
    g709.EntityData.SegmentPath = "g709"
    g709.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709.EntityData.Children = make(map[string]types.YChild)
    g709.EntityData.Children["odu"] = types.YChild{"Odu", &g709.Odu}
    g709.EntityData.Children["otu"] = types.YChild{"Otu", &g709.Otu}
    g709.EntityData.Children["prbs"] = types.YChild{"Prbs", &g709.Prbs}
    g709.EntityData.Children["fec"] = types.YChild{"Fec", &g709.Fec}
    g709.EntityData.Leafs = make(map[string]types.YLeaf)
    g709.EntityData.Leafs["proactive"] = types.YLeaf{"Proactive", g709.Proactive}
    g709.EntityData.Leafs["bdi-to-gais"] = types.YLeaf{"BdiToGais", g709.BdiToGais}
    g709.EntityData.Leafs["tim-to-gais"] = types.YLeaf{"TimToGais", g709.TimToGais}
    g709.EntityData.Leafs["proactive-logging-file"] = types.YLeaf{"ProactiveLoggingFile", g709.ProactiveLoggingFile}
    g709.EntityData.Leafs["tti-processing"] = types.YLeaf{"TtiProcessing", g709.TtiProcessing}
    g709.EntityData.Leafs["enable"] = types.YLeaf{"Enable", g709.Enable}
    g709.EntityData.Leafs["framing"] = types.YLeaf{"Framing", g709.Framing}
    return &(g709.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu
// Configure ODU parameters
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ODU alarm reporting.
    OduReports InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports

    // Configure ODU threshold value.
    OduThresholds InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds

    // Configure ODU Expected TTI value.
    OduExpectedTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti

    // Configure ODU TTI value.
    OduTxTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti
}

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetEntityData() *types.CommonEntityData {
    odu.EntityData.YFilter = odu.YFilter
    odu.EntityData.YangName = "odu"
    odu.EntityData.BundleName = "cisco_ios_xr"
    odu.EntityData.ParentYangName = "g709"
    odu.EntityData.SegmentPath = "odu"
    odu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    odu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    odu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    odu.EntityData.Children = make(map[string]types.YChild)
    odu.EntityData.Children["odu-reports"] = types.YChild{"OduReports", &odu.OduReports}
    odu.EntityData.Children["odu-thresholds"] = types.YChild{"OduThresholds", &odu.OduThresholds}
    odu.EntityData.Children["odu-expected-tti"] = types.YChild{"OduExpectedTti", &odu.OduExpectedTti}
    odu.EntityData.Children["odu-tx-tti"] = types.YChild{"OduTxTti", &odu.OduTxTti}
    odu.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(odu.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports
// Configure ODU alarm reporting
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport.
    OduReport []InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport
}

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetEntityData() *types.CommonEntityData {
    oduReports.EntityData.YFilter = oduReports.YFilter
    oduReports.EntityData.YangName = "odu-reports"
    oduReports.EntityData.BundleName = "cisco_ios_xr"
    oduReports.EntityData.ParentYangName = "odu"
    oduReports.EntityData.SegmentPath = "odu-reports"
    oduReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduReports.EntityData.Children = make(map[string]types.YChild)
    oduReports.EntityData.Children["odu-report"] = types.YChild{"OduReport", nil}
    for i := range oduReports.OduReport {
        oduReports.EntityData.Children[types.GetSegmentPath(&oduReports.OduReport[i])] = types.YChild{"OduReport", &oduReports.OduReport[i]}
    }
    oduReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(oduReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ODU alarm type. The type is OduAlarm.
    Alarm interface{}
}

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetEntityData() *types.CommonEntityData {
    oduReport.EntityData.YFilter = oduReport.YFilter
    oduReport.EntityData.YangName = "odu-report"
    oduReport.EntityData.BundleName = "cisco_ios_xr"
    oduReport.EntityData.ParentYangName = "odu-reports"
    oduReport.EntityData.SegmentPath = "odu-report" + "[alarm='" + fmt.Sprintf("%v", oduReport.Alarm) + "']"
    oduReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduReport.EntityData.Children = make(map[string]types.YChild)
    oduReport.EntityData.Leafs = make(map[string]types.YLeaf)
    oduReport.EntityData.Leafs["alarm"] = types.YLeaf{"Alarm", oduReport.Alarm}
    return &(oduReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds
// Configure ODU threshold value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold.
    OduThreshold []InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold
}

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetEntityData() *types.CommonEntityData {
    oduThresholds.EntityData.YFilter = oduThresholds.YFilter
    oduThresholds.EntityData.YangName = "odu-thresholds"
    oduThresholds.EntityData.BundleName = "cisco_ios_xr"
    oduThresholds.EntityData.ParentYangName = "odu"
    oduThresholds.EntityData.SegmentPath = "odu-thresholds"
    oduThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduThresholds.EntityData.Children = make(map[string]types.YChild)
    oduThresholds.EntityData.Children["odu-threshold"] = types.YChild{"OduThreshold", nil}
    for i := range oduThresholds.OduThreshold {
        oduThresholds.EntityData.Children[types.GetSegmentPath(&oduThresholds.OduThreshold[i])] = types.YChild{"OduThreshold", &oduThresholds.OduThreshold[i]}
    }
    oduThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(oduThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ODU Threshold type. The type is OduThreshold.
    Threshold interface{}

    // Bit error rate (10 to the minus n). The type is interface{} with range:
    // 1..9. This attribute is mandatory.
    ThresholdValue interface{}
}

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetEntityData() *types.CommonEntityData {
    oduThreshold.EntityData.YFilter = oduThreshold.YFilter
    oduThreshold.EntityData.YangName = "odu-threshold"
    oduThreshold.EntityData.BundleName = "cisco_ios_xr"
    oduThreshold.EntityData.ParentYangName = "odu-thresholds"
    oduThreshold.EntityData.SegmentPath = "odu-threshold" + "[threshold='" + fmt.Sprintf("%v", oduThreshold.Threshold) + "']"
    oduThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduThreshold.EntityData.Children = make(map[string]types.YChild)
    oduThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    oduThreshold.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", oduThreshold.Threshold}
    oduThreshold.EntityData.Leafs["threshold-value"] = types.YLeaf{"ThresholdValue", oduThreshold.ThresholdValue}
    return &(oduThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti
// Configure ODU Expected TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is ExpectedTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetEntityData() *types.CommonEntityData {
    oduExpectedTti.EntityData.YFilter = oduExpectedTti.YFilter
    oduExpectedTti.EntityData.YangName = "odu-expected-tti"
    oduExpectedTti.EntityData.BundleName = "cisco_ios_xr"
    oduExpectedTti.EntityData.ParentYangName = "odu"
    oduExpectedTti.EntityData.SegmentPath = "odu-expected-tti"
    oduExpectedTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduExpectedTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduExpectedTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduExpectedTti.EntityData.Children = make(map[string]types.YChild)
    oduExpectedTti.EntityData.Leafs = make(map[string]types.YLeaf)
    oduExpectedTti.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", oduExpectedTti.StringType}
    oduExpectedTti.EntityData.Leafs["ascii-string"] = types.YLeaf{"AsciiString", oduExpectedTti.AsciiString}
    oduExpectedTti.EntityData.Leafs["hex-string"] = types.YLeaf{"HexString", oduExpectedTti.HexString}
    return &(oduExpectedTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti
// Configure ODU TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is TxTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetEntityData() *types.CommonEntityData {
    oduTxTti.EntityData.YFilter = oduTxTti.YFilter
    oduTxTti.EntityData.YangName = "odu-tx-tti"
    oduTxTti.EntityData.BundleName = "cisco_ios_xr"
    oduTxTti.EntityData.ParentYangName = "odu"
    oduTxTti.EntityData.SegmentPath = "odu-tx-tti"
    oduTxTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduTxTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduTxTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduTxTti.EntityData.Children = make(map[string]types.YChild)
    oduTxTti.EntityData.Leafs = make(map[string]types.YLeaf)
    oduTxTti.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", oduTxTti.StringType}
    oduTxTti.EntityData.Leafs["ascii-string"] = types.YLeaf{"AsciiString", oduTxTti.AsciiString}
    oduTxTti.EntityData.Leafs["hex-string"] = types.YLeaf{"HexString", oduTxTti.HexString}
    return &(oduTxTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu
// Configure OTU parameters
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure OTU Expected TTI value.
    OtuExpectedTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti

    // Configure OTU threshold value.
    OtuThresholds InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds

    // Configure FRR thresholds and Window for trigger and revert.
    Frr InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr

    // Configure OTU alarm reporting.
    OtuReports InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports

    // Configure OTU TTI value.
    OtuTxTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetEntityData() *types.CommonEntityData {
    otu.EntityData.YFilter = otu.YFilter
    otu.EntityData.YangName = "otu"
    otu.EntityData.BundleName = "cisco_ios_xr"
    otu.EntityData.ParentYangName = "g709"
    otu.EntityData.SegmentPath = "otu"
    otu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otu.EntityData.Children = make(map[string]types.YChild)
    otu.EntityData.Children["otu-expected-tti"] = types.YChild{"OtuExpectedTti", &otu.OtuExpectedTti}
    otu.EntityData.Children["otu-thresholds"] = types.YChild{"OtuThresholds", &otu.OtuThresholds}
    otu.EntityData.Children["frr"] = types.YChild{"Frr", &otu.Frr}
    otu.EntityData.Children["otu-reports"] = types.YChild{"OtuReports", &otu.OtuReports}
    otu.EntityData.Children["otu-tx-tti"] = types.YChild{"OtuTxTti", &otu.OtuTxTti}
    otu.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(otu.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti
// Configure OTU Expected TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is ExpectedTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetEntityData() *types.CommonEntityData {
    otuExpectedTti.EntityData.YFilter = otuExpectedTti.YFilter
    otuExpectedTti.EntityData.YangName = "otu-expected-tti"
    otuExpectedTti.EntityData.BundleName = "cisco_ios_xr"
    otuExpectedTti.EntityData.ParentYangName = "otu"
    otuExpectedTti.EntityData.SegmentPath = "otu-expected-tti"
    otuExpectedTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuExpectedTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuExpectedTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuExpectedTti.EntityData.Children = make(map[string]types.YChild)
    otuExpectedTti.EntityData.Leafs = make(map[string]types.YLeaf)
    otuExpectedTti.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otuExpectedTti.StringType}
    otuExpectedTti.EntityData.Leafs["ascii-string"] = types.YLeaf{"AsciiString", otuExpectedTti.AsciiString}
    otuExpectedTti.EntityData.Leafs["hex-string"] = types.YLeaf{"HexString", otuExpectedTti.HexString}
    return &(otuExpectedTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds
// Configure OTU threshold value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold.
    OtuThreshold []InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold
}

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetEntityData() *types.CommonEntityData {
    otuThresholds.EntityData.YFilter = otuThresholds.YFilter
    otuThresholds.EntityData.YangName = "otu-thresholds"
    otuThresholds.EntityData.BundleName = "cisco_ios_xr"
    otuThresholds.EntityData.ParentYangName = "otu"
    otuThresholds.EntityData.SegmentPath = "otu-thresholds"
    otuThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuThresholds.EntityData.Children = make(map[string]types.YChild)
    otuThresholds.EntityData.Children["otu-threshold"] = types.YChild{"OtuThreshold", nil}
    for i := range otuThresholds.OtuThreshold {
        otuThresholds.EntityData.Children[types.GetSegmentPath(&otuThresholds.OtuThreshold[i])] = types.YChild{"OtuThreshold", &otuThresholds.OtuThreshold[i]}
    }
    otuThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(otuThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. OTU Threshold type. The type is OtuThreshold.
    Threshold interface{}

    // Bit error rate (10 to the minus n). The type is interface{} with range:
    // 1..9. This attribute is mandatory.
    ThresholdValue interface{}
}

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetEntityData() *types.CommonEntityData {
    otuThreshold.EntityData.YFilter = otuThreshold.YFilter
    otuThreshold.EntityData.YangName = "otu-threshold"
    otuThreshold.EntityData.BundleName = "cisco_ios_xr"
    otuThreshold.EntityData.ParentYangName = "otu-thresholds"
    otuThreshold.EntityData.SegmentPath = "otu-threshold" + "[threshold='" + fmt.Sprintf("%v", otuThreshold.Threshold) + "']"
    otuThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuThreshold.EntityData.Children = make(map[string]types.YChild)
    otuThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    otuThreshold.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", otuThreshold.Threshold}
    otuThreshold.EntityData.Leafs["threshold-value"] = types.YLeaf{"ThresholdValue", otuThreshold.ThresholdValue}
    return &(otuThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr
// Configure FRR thresholds and Window for
// trigger and revert
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure FRR trigger window.
    TriggerWindow InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow

    // Configure proactive protection revert threshold.
    RevertThreshold InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold

    // Configure proactive protection trigger threshold.
    TriggerThreshold InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold

    // Configure FRR revert window.
    RevertWindow InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow
}

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetEntityData() *types.CommonEntityData {
    frr.EntityData.YFilter = frr.YFilter
    frr.EntityData.YangName = "frr"
    frr.EntityData.BundleName = "cisco_ios_xr"
    frr.EntityData.ParentYangName = "otu"
    frr.EntityData.SegmentPath = "frr"
    frr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frr.EntityData.Children = make(map[string]types.YChild)
    frr.EntityData.Children["trigger-window"] = types.YChild{"TriggerWindow", &frr.TriggerWindow}
    frr.EntityData.Children["revert-threshold"] = types.YChild{"RevertThreshold", &frr.RevertThreshold}
    frr.EntityData.Children["trigger-threshold"] = types.YChild{"TriggerThreshold", &frr.TriggerThreshold}
    frr.EntityData.Children["revert-window"] = types.YChild{"RevertWindow", &frr.RevertWindow}
    frr.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(frr.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow
// Configure FRR trigger window
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Integration window for FRR trigger in MS. The type is interface{} with
    // range: 10..10000. This attribute is mandatory.
    Window interface{}

    // Just a Dummy for window for FRR revert in MS. The type is interface{} with
    // range: 0..2.
    Dummy interface{}
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetEntityData() *types.CommonEntityData {
    triggerWindow.EntityData.YFilter = triggerWindow.YFilter
    triggerWindow.EntityData.YangName = "trigger-window"
    triggerWindow.EntityData.BundleName = "cisco_ios_xr"
    triggerWindow.EntityData.ParentYangName = "frr"
    triggerWindow.EntityData.SegmentPath = "trigger-window"
    triggerWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerWindow.EntityData.Children = make(map[string]types.YChild)
    triggerWindow.EntityData.Leafs = make(map[string]types.YLeaf)
    triggerWindow.EntityData.Leafs["window"] = types.YLeaf{"Window", triggerWindow.Window}
    triggerWindow.EntityData.Leafs["dummy"] = types.YLeaf{"Dummy", triggerWindow.Dummy}
    return &(triggerWindow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold
// Configure proactive protection revert
// threshold
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bit error rate base (x of xE-y). The type is interface{} with range: 1..9.
    // This attribute is mandatory.
    BerBase interface{}

    // Bit error rate power (y of xE-y). The type is interface{} with range:
    // 3..10. This attribute is mandatory.
    BerPower interface{}
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetEntityData() *types.CommonEntityData {
    revertThreshold.EntityData.YFilter = revertThreshold.YFilter
    revertThreshold.EntityData.YangName = "revert-threshold"
    revertThreshold.EntityData.BundleName = "cisco_ios_xr"
    revertThreshold.EntityData.ParentYangName = "frr"
    revertThreshold.EntityData.SegmentPath = "revert-threshold"
    revertThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    revertThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    revertThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    revertThreshold.EntityData.Children = make(map[string]types.YChild)
    revertThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    revertThreshold.EntityData.Leafs["ber-base"] = types.YLeaf{"BerBase", revertThreshold.BerBase}
    revertThreshold.EntityData.Leafs["ber-power"] = types.YLeaf{"BerPower", revertThreshold.BerPower}
    return &(revertThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold
// Configure proactive protection trigger
// threshold
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bit error rate base (x of xE-y). The type is interface{} with range: 1..9.
    // This attribute is mandatory.
    BerBase interface{}

    // Bit error rate power (y of xE-y). The type is interface{} with range: 2..9.
    // This attribute is mandatory.
    BerPower interface{}
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetEntityData() *types.CommonEntityData {
    triggerThreshold.EntityData.YFilter = triggerThreshold.YFilter
    triggerThreshold.EntityData.YangName = "trigger-threshold"
    triggerThreshold.EntityData.BundleName = "cisco_ios_xr"
    triggerThreshold.EntityData.ParentYangName = "frr"
    triggerThreshold.EntityData.SegmentPath = "trigger-threshold"
    triggerThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerThreshold.EntityData.Children = make(map[string]types.YChild)
    triggerThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    triggerThreshold.EntityData.Leafs["ber-base"] = types.YLeaf{"BerBase", triggerThreshold.BerBase}
    triggerThreshold.EntityData.Leafs["ber-power"] = types.YLeaf{"BerPower", triggerThreshold.BerPower}
    return &(triggerThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow
// Configure FRR revert window
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Integration window for FRR revert in MS. The type is interface{} with
    // range: 500..100000. This attribute is mandatory.
    Window interface{}

    // Just a Dummy for window for FRR revert in MS. The type is interface{} with
    // range: 0..2.
    Dummy interface{}
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetEntityData() *types.CommonEntityData {
    revertWindow.EntityData.YFilter = revertWindow.YFilter
    revertWindow.EntityData.YangName = "revert-window"
    revertWindow.EntityData.BundleName = "cisco_ios_xr"
    revertWindow.EntityData.ParentYangName = "frr"
    revertWindow.EntityData.SegmentPath = "revert-window"
    revertWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    revertWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    revertWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    revertWindow.EntityData.Children = make(map[string]types.YChild)
    revertWindow.EntityData.Leafs = make(map[string]types.YLeaf)
    revertWindow.EntityData.Leafs["window"] = types.YLeaf{"Window", revertWindow.Window}
    revertWindow.EntityData.Leafs["dummy"] = types.YLeaf{"Dummy", revertWindow.Dummy}
    return &(revertWindow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports
// Configure OTU alarm reporting
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport.
    OtuReport []InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport
}

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetEntityData() *types.CommonEntityData {
    otuReports.EntityData.YFilter = otuReports.YFilter
    otuReports.EntityData.YangName = "otu-reports"
    otuReports.EntityData.BundleName = "cisco_ios_xr"
    otuReports.EntityData.ParentYangName = "otu"
    otuReports.EntityData.SegmentPath = "otu-reports"
    otuReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuReports.EntityData.Children = make(map[string]types.YChild)
    otuReports.EntityData.Children["otu-report"] = types.YChild{"OtuReport", nil}
    for i := range otuReports.OtuReport {
        otuReports.EntityData.Children[types.GetSegmentPath(&otuReports.OtuReport[i])] = types.YChild{"OtuReport", &otuReports.OtuReport[i]}
    }
    otuReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(otuReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. OTU alarm type. The type is OtuAlarm.
    Alarm interface{}
}

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetEntityData() *types.CommonEntityData {
    otuReport.EntityData.YFilter = otuReport.YFilter
    otuReport.EntityData.YangName = "otu-report"
    otuReport.EntityData.BundleName = "cisco_ios_xr"
    otuReport.EntityData.ParentYangName = "otu-reports"
    otuReport.EntityData.SegmentPath = "otu-report" + "[alarm='" + fmt.Sprintf("%v", otuReport.Alarm) + "']"
    otuReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuReport.EntityData.Children = make(map[string]types.YChild)
    otuReport.EntityData.Leafs = make(map[string]types.YLeaf)
    otuReport.EntityData.Leafs["alarm"] = types.YLeaf{"Alarm", otuReport.Alarm}
    return &(otuReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti
// Configure OTU TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is TxTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetEntityData() *types.CommonEntityData {
    otuTxTti.EntityData.YFilter = otuTxTti.YFilter
    otuTxTti.EntityData.YangName = "otu-tx-tti"
    otuTxTti.EntityData.BundleName = "cisco_ios_xr"
    otuTxTti.EntityData.ParentYangName = "otu"
    otuTxTti.EntityData.SegmentPath = "otu-tx-tti"
    otuTxTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuTxTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuTxTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuTxTti.EntityData.Children = make(map[string]types.YChild)
    otuTxTti.EntityData.Leafs = make(map[string]types.YLeaf)
    otuTxTti.EntityData.Leafs["string-type"] = types.YLeaf{"StringType", otuTxTti.StringType}
    otuTxTti.EntityData.Leafs["ascii-string"] = types.YLeaf{"AsciiString", otuTxTti.AsciiString}
    otuTxTti.EntityData.Leafs["hex-string"] = types.YLeaf{"HexString", otuTxTti.HexString}
    return &(otuTxTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs
// Configure PRBS mode and pattern
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable PRBS with mode. The type is PrbsMode. This attribute is mandatory.
    PrbsMode interface{}

    // Enable prbs test with pattern. The type is PrbsPattern. This attribute is
    // mandatory.
    PrbsPattern interface{}
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetEntityData() *types.CommonEntityData {
    prbs.EntityData.YFilter = prbs.YFilter
    prbs.EntityData.YangName = "prbs"
    prbs.EntityData.BundleName = "cisco_ios_xr"
    prbs.EntityData.ParentYangName = "g709"
    prbs.EntityData.SegmentPath = "prbs"
    prbs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prbs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prbs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prbs.EntityData.Children = make(map[string]types.YChild)
    prbs.EntityData.Leafs = make(map[string]types.YLeaf)
    prbs.EntityData.Leafs["prbs-mode"] = types.YLeaf{"PrbsMode", prbs.PrbsMode}
    prbs.EntityData.Leafs["prbs-pattern"] = types.YLeaf{"PrbsPattern", prbs.PrbsPattern}
    return &(prbs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec
// Configure FEC mode
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // None, Standard, Enhanced, High-Gain, Long-Haul, Ci-BCH. The type is Fec.
    // This attribute is mandatory.
    FecMode interface{}

    // Enhanced FECMode to use i.4, i.7, Other FECMode to use None. The type is
    // Efec. The default value is none.
    EfecMode interface{}
}

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetEntityData() *types.CommonEntityData {
    fec.EntityData.YFilter = fec.YFilter
    fec.EntityData.YangName = "fec"
    fec.EntityData.BundleName = "cisco_ios_xr"
    fec.EntityData.ParentYangName = "g709"
    fec.EntityData.SegmentPath = "fec"
    fec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec.EntityData.Children = make(map[string]types.YChild)
    fec.EntityData.Leafs = make(map[string]types.YLeaf)
    fec.EntityData.Leafs["fec-mode"] = types.YLeaf{"FecMode", fec.FecMode}
    fec.EntityData.Leafs["efec-mode"] = types.YLeaf{"EfecMode", fec.EfecMode}
    return &(fec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength
// Configure transponder wavelength
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Select a ITU channel number,channel range for C-band:
    // 1~82,L-band:106~185,spacing:50GHZ or 100MHz. The type is interface{} with
    // range: 1..1568362. This attribute is mandatory.
    WaveChannel interface{}

    // Wave Channel Number. The type is WaveChannelNum. This attribute is
    // mandatory.
    WaveChannelNumber interface{}

    // Enter Frequency Data in THz. The type is string with length: 1..128.
    ProgFrequency interface{}
}

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetEntityData() *types.CommonEntityData {
    wavelength.EntityData.YFilter = wavelength.YFilter
    wavelength.EntityData.YangName = "wavelength"
    wavelength.EntityData.BundleName = "cisco_ios_xr"
    wavelength.EntityData.ParentYangName = "dwdm"
    wavelength.EntityData.SegmentPath = "wavelength"
    wavelength.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    wavelength.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    wavelength.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    wavelength.EntityData.Children = make(map[string]types.YChild)
    wavelength.EntityData.Leafs = make(map[string]types.YLeaf)
    wavelength.EntityData.Leafs["wave-channel"] = types.YLeaf{"WaveChannel", wavelength.WaveChannel}
    wavelength.EntityData.Leafs["wave-channel-number"] = types.YLeaf{"WaveChannelNumber", wavelength.WaveChannelNumber}
    wavelength.EntityData.Leafs["prog-frequency"] = types.YLeaf{"ProgFrequency", wavelength.ProgFrequency}
    return &(wavelength.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration
// IEEE 802.1Q VLAN subinterface configuration
type InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The VLAN tag stack associated with this sub-interface.
    VlanIdentifier InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier
}

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetEntityData() *types.CommonEntityData {
    vlanSubConfiguration.EntityData.YFilter = vlanSubConfiguration.YFilter
    vlanSubConfiguration.EntityData.YangName = "vlan-sub-configuration"
    vlanSubConfiguration.EntityData.BundleName = "cisco_ios_xr"
    vlanSubConfiguration.EntityData.ParentYangName = "interface-configuration"
    vlanSubConfiguration.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration"
    vlanSubConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanSubConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanSubConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanSubConfiguration.EntityData.Children = make(map[string]types.YChild)
    vlanSubConfiguration.EntityData.Children["vlan-identifier"] = types.YChild{"VlanIdentifier", &vlanSubConfiguration.VlanIdentifier}
    vlanSubConfiguration.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(vlanSubConfiguration.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier
// The VLAN tag stack associated with this
// sub-interface.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether this sub-interface is dot1ad or dot1Q. The type is Vlan. This
    // attribute is mandatory.
    VlanType interface{}

    // First (outermost) VLAN tag value. The type is interface{} with range:
    // 1..4094. This attribute is mandatory.
    FirstTag interface{}

    // Second VLAN tag value. The any value may only be used for Layer 2
    // subinterfaces. The type is one of the following types: enumeration
    // VlanTagOrNull, or int with range: 0..4094.
    SecondTag interface{}
}

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetEntityData() *types.CommonEntityData {
    vlanIdentifier.EntityData.YFilter = vlanIdentifier.YFilter
    vlanIdentifier.EntityData.YangName = "vlan-identifier"
    vlanIdentifier.EntityData.BundleName = "cisco_ios_xr"
    vlanIdentifier.EntityData.ParentYangName = "vlan-sub-configuration"
    vlanIdentifier.EntityData.SegmentPath = "vlan-identifier"
    vlanIdentifier.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanIdentifier.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanIdentifier.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanIdentifier.EntityData.Children = make(map[string]types.YChild)
    vlanIdentifier.EntityData.Leafs = make(map[string]types.YLeaf)
    vlanIdentifier.EntityData.Leafs["vlan-type"] = types.YLeaf{"VlanType", vlanIdentifier.VlanType}
    vlanIdentifier.EntityData.Leafs["first-tag"] = types.YLeaf{"FirstTag", vlanIdentifier.FirstTag}
    vlanIdentifier.EntityData.Leafs["second-tag"] = types.YLeaf{"SecondTag", vlanIdentifier.SecondTag}
    return &(vlanIdentifier.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetService
// Ethernet service configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetService struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The default encapsulation to be used for locally-sourced packets.
    LocalTrafficDefaultEncapsulation InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation

    // The encapsulation of this Ethernet service.
    Encapsulation InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation

    // The rewrite operation for the Ethernet service.
    Rewrite InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite
}

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetEntityData() *types.CommonEntityData {
    ethernetService.EntityData.YFilter = ethernetService.YFilter
    ethernetService.EntityData.YangName = "ethernet-service"
    ethernetService.EntityData.BundleName = "cisco_ios_xr"
    ethernetService.EntityData.ParentYangName = "interface-configuration"
    ethernetService.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service"
    ethernetService.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetService.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetService.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetService.EntityData.Children = make(map[string]types.YChild)
    ethernetService.EntityData.Children["local-traffic-default-encapsulation"] = types.YChild{"LocalTrafficDefaultEncapsulation", &ethernetService.LocalTrafficDefaultEncapsulation}
    ethernetService.EntityData.Children["encapsulation"] = types.YChild{"Encapsulation", &ethernetService.Encapsulation}
    ethernetService.EntityData.Children["rewrite"] = types.YChild{"Rewrite", &ethernetService.Rewrite}
    ethernetService.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ethernetService.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation
// The default encapsulation to be used for
// locally-sourced packets
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of outer tag. The type is Vlan. This attribute is mandatory.
    OuterTagType interface{}

    // VLAN id for outer tag. The type is interface{} with range: 1..4094. This
    // attribute is mandatory.
    OuterVlanId interface{}

    // Optional VLAN Id for inner Dot1Q tag. The type is interface{} with range:
    // 1..4094.
    InnerVlanId interface{}
}

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetEntityData() *types.CommonEntityData {
    localTrafficDefaultEncapsulation.EntityData.YFilter = localTrafficDefaultEncapsulation.YFilter
    localTrafficDefaultEncapsulation.EntityData.YangName = "local-traffic-default-encapsulation"
    localTrafficDefaultEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    localTrafficDefaultEncapsulation.EntityData.ParentYangName = "ethernet-service"
    localTrafficDefaultEncapsulation.EntityData.SegmentPath = "local-traffic-default-encapsulation"
    localTrafficDefaultEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localTrafficDefaultEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localTrafficDefaultEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localTrafficDefaultEncapsulation.EntityData.Children = make(map[string]types.YChild)
    localTrafficDefaultEncapsulation.EntityData.Leafs = make(map[string]types.YLeaf)
    localTrafficDefaultEncapsulation.EntityData.Leafs["outer-tag-type"] = types.YLeaf{"OuterTagType", localTrafficDefaultEncapsulation.OuterTagType}
    localTrafficDefaultEncapsulation.EntityData.Leafs["outer-vlan-id"] = types.YLeaf{"OuterVlanId", localTrafficDefaultEncapsulation.OuterVlanId}
    localTrafficDefaultEncapsulation.EntityData.Leafs["inner-vlan-id"] = types.YLeaf{"InnerVlanId", localTrafficDefaultEncapsulation.InnerVlanId}
    return &(localTrafficDefaultEncapsulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation
// The encapsulation of this Ethernet service
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether to match all unmatched packets, untagged packets or tagged packets,
    // and if matching tagged packets, the outer tag type to match. The type is
    // Match. This attribute is mandatory.
    OuterTagType interface{}

    // Low value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    OuterRange1Low interface{}

    // High value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrNative, or int with range: 1..65535.
    OuterRange1High interface{}

    // Type of tag for inner match (if present). The type is Match.
    InnerTagType interface{}

    // Low value of first range for inner tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    InnerRange1Low interface{}

    // High value of first range for inner tag match. The type is interface{} with
    // range: 1..4094.
    InnerRange1High interface{}

    // Low value of first additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange1Low interface{}

    // High value of first additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange1High interface{}

    // Low value of second additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange2Low interface{}

    // High value of second additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange2High interface{}

    // Low value of third additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange3Low interface{}

    // High value of third additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange3High interface{}

    // Low value of forth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange4Low interface{}

    // High value of forth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange4High interface{}

    // Low value of fifth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange5Low interface{}

    // High value of fifth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange5High interface{}

    // Low value of sixth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange6Low interface{}

    // High value of sixth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange6High interface{}

    // Low value of seventh additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange7Low interface{}

    // High value of seventh additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange7High interface{}

    // Low value of eighth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange8Low interface{}

    // High value of eighth additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange8High interface{}

    // Value to match against Class Of Service bits for outer tag. The type is
    // interface{} with range: 0..7.
    OuterClassOfService interface{}

    // Value to match against Class Of Service bits for inner tag. The type is
    // interface{} with range: 0..7.
    InnerClassOfService interface{}

    // Which payload ethertype values to match. The type is EthertypeMatch.
    PayloadEthertypeMatch interface{}

    // Source MAC address to match on ingress. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    IngressSourceMac interface{}

    // Destination MAC address to match on egress. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    IngressDestinationMac interface{}

    // Only match packets with no more tags than explicitly matched. The type is
    // interface{}.
    Exact interface{}
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetEntityData() *types.CommonEntityData {
    encapsulation.EntityData.YFilter = encapsulation.YFilter
    encapsulation.EntityData.YangName = "encapsulation"
    encapsulation.EntityData.BundleName = "cisco_ios_xr"
    encapsulation.EntityData.ParentYangName = "ethernet-service"
    encapsulation.EntityData.SegmentPath = "encapsulation"
    encapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    encapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    encapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    encapsulation.EntityData.Children = make(map[string]types.YChild)
    encapsulation.EntityData.Leafs = make(map[string]types.YLeaf)
    encapsulation.EntityData.Leafs["outer-tag-type"] = types.YLeaf{"OuterTagType", encapsulation.OuterTagType}
    encapsulation.EntityData.Leafs["outer-range1-low"] = types.YLeaf{"OuterRange1Low", encapsulation.OuterRange1Low}
    encapsulation.EntityData.Leafs["outer-range1-high"] = types.YLeaf{"OuterRange1High", encapsulation.OuterRange1High}
    encapsulation.EntityData.Leafs["inner-tag-type"] = types.YLeaf{"InnerTagType", encapsulation.InnerTagType}
    encapsulation.EntityData.Leafs["inner-range1-low"] = types.YLeaf{"InnerRange1Low", encapsulation.InnerRange1Low}
    encapsulation.EntityData.Leafs["inner-range1-high"] = types.YLeaf{"InnerRange1High", encapsulation.InnerRange1High}
    encapsulation.EntityData.Leafs["additional-range1-low"] = types.YLeaf{"AdditionalRange1Low", encapsulation.AdditionalRange1Low}
    encapsulation.EntityData.Leafs["additional-range1-high"] = types.YLeaf{"AdditionalRange1High", encapsulation.AdditionalRange1High}
    encapsulation.EntityData.Leafs["additional-range2-low"] = types.YLeaf{"AdditionalRange2Low", encapsulation.AdditionalRange2Low}
    encapsulation.EntityData.Leafs["additional-range2-high"] = types.YLeaf{"AdditionalRange2High", encapsulation.AdditionalRange2High}
    encapsulation.EntityData.Leafs["additional-range3-low"] = types.YLeaf{"AdditionalRange3Low", encapsulation.AdditionalRange3Low}
    encapsulation.EntityData.Leafs["additional-range3-high"] = types.YLeaf{"AdditionalRange3High", encapsulation.AdditionalRange3High}
    encapsulation.EntityData.Leafs["additional-range4-low"] = types.YLeaf{"AdditionalRange4Low", encapsulation.AdditionalRange4Low}
    encapsulation.EntityData.Leafs["additional-range4-high"] = types.YLeaf{"AdditionalRange4High", encapsulation.AdditionalRange4High}
    encapsulation.EntityData.Leafs["additional-range5-low"] = types.YLeaf{"AdditionalRange5Low", encapsulation.AdditionalRange5Low}
    encapsulation.EntityData.Leafs["additional-range5-high"] = types.YLeaf{"AdditionalRange5High", encapsulation.AdditionalRange5High}
    encapsulation.EntityData.Leafs["additional-range6-low"] = types.YLeaf{"AdditionalRange6Low", encapsulation.AdditionalRange6Low}
    encapsulation.EntityData.Leafs["additional-range6-high"] = types.YLeaf{"AdditionalRange6High", encapsulation.AdditionalRange6High}
    encapsulation.EntityData.Leafs["additional-range7-low"] = types.YLeaf{"AdditionalRange7Low", encapsulation.AdditionalRange7Low}
    encapsulation.EntityData.Leafs["additional-range7-high"] = types.YLeaf{"AdditionalRange7High", encapsulation.AdditionalRange7High}
    encapsulation.EntityData.Leafs["additional-range8-low"] = types.YLeaf{"AdditionalRange8Low", encapsulation.AdditionalRange8Low}
    encapsulation.EntityData.Leafs["additional-range8-high"] = types.YLeaf{"AdditionalRange8High", encapsulation.AdditionalRange8High}
    encapsulation.EntityData.Leafs["outer-class-of-service"] = types.YLeaf{"OuterClassOfService", encapsulation.OuterClassOfService}
    encapsulation.EntityData.Leafs["inner-class-of-service"] = types.YLeaf{"InnerClassOfService", encapsulation.InnerClassOfService}
    encapsulation.EntityData.Leafs["payload-ethertype-match"] = types.YLeaf{"PayloadEthertypeMatch", encapsulation.PayloadEthertypeMatch}
    encapsulation.EntityData.Leafs["ingress-source-mac"] = types.YLeaf{"IngressSourceMac", encapsulation.IngressSourceMac}
    encapsulation.EntityData.Leafs["ingress-destination-mac"] = types.YLeaf{"IngressDestinationMac", encapsulation.IngressDestinationMac}
    encapsulation.EntityData.Leafs["exact"] = types.YLeaf{"Exact", encapsulation.Exact}
    return &(encapsulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite
// The rewrite operation for the Ethernet service
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of rewrite to perform. The type is Rewrite. This attribute is
    // mandatory.
    RewriteType interface{}

    // Type of outermost tag to be pushed. The type is Match.
    OuterTagType interface{}

    // VLAN Id of outermost tag to be pushed. The type is interface{} with range:
    // 1..4094.
    OuterTagValue interface{}

    // Type of innermost tag to be pushed. The type is Match.
    InnerTagType interface{}

    // VLAN Id of innermost tag to be pushed. The type is interface{} with range:
    // 1..4094.
    InnerTagValue interface{}
}

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetEntityData() *types.CommonEntityData {
    rewrite.EntityData.YFilter = rewrite.YFilter
    rewrite.EntityData.YangName = "rewrite"
    rewrite.EntityData.BundleName = "cisco_ios_xr"
    rewrite.EntityData.ParentYangName = "ethernet-service"
    rewrite.EntityData.SegmentPath = "rewrite"
    rewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewrite.EntityData.Children = make(map[string]types.YChild)
    rewrite.EntityData.Leafs = make(map[string]types.YLeaf)
    rewrite.EntityData.Leafs["rewrite-type"] = types.YLeaf{"RewriteType", rewrite.RewriteType}
    rewrite.EntityData.Leafs["outer-tag-type"] = types.YLeaf{"OuterTagType", rewrite.OuterTagType}
    rewrite.EntityData.Leafs["outer-tag-value"] = types.YLeaf{"OuterTagValue", rewrite.OuterTagValue}
    rewrite.EntityData.Leafs["inner-tag-type"] = types.YLeaf{"InnerTagType", rewrite.InnerTagType}
    rewrite.EntityData.Leafs["inner-tag-value"] = types.YLeaf{"InnerTagValue", rewrite.InnerTagValue}
    return &(rewrite.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetBng
// Ethernet Infra BNG specific configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetBng struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L3 Ambiguous encapsulation.
    AmbiguousEncapsulation InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation
}

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetEntityData() *types.CommonEntityData {
    ethernetBng.EntityData.YFilter = ethernetBng.YFilter
    ethernetBng.EntityData.YangName = "ethernet-bng"
    ethernetBng.EntityData.BundleName = "cisco_ios_xr"
    ethernetBng.EntityData.ParentYangName = "interface-configuration"
    ethernetBng.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng"
    ethernetBng.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetBng.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetBng.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetBng.EntityData.Children = make(map[string]types.YChild)
    ethernetBng.EntityData.Children["ambiguous-encapsulation"] = types.YChild{"AmbiguousEncapsulation", &ethernetBng.AmbiguousEncapsulation}
    ethernetBng.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ethernetBng.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation
// L3 Ambiguous encapsulation
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether to match all unmatched packets, untagged packets or tagged packets,
    // and if matching tagged packets, the outer tag type to match. The type is
    // Match. This attribute is mandatory.
    OuterTagType interface{}

    // Low value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    OuterRange1Low interface{}

    // High value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrNative, or int with range: 1..65535.
    OuterRange1High interface{}

    // Type of tag for inner match (if present). The type is Match.
    InnerTagType interface{}

    // Low value of first range for inner tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    InnerRange1Low interface{}

    // High value of first range for inner tag match. The type is interface{} with
    // range: 1..4094.
    InnerRange1High interface{}

    // Low value of first additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange1Low interface{}

    // High value of first additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange1High interface{}

    // Low value of second additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange2Low interface{}

    // High value of second additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange2High interface{}

    // Low value of third additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange3Low interface{}

    // High value of third additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange3High interface{}

    // Low value of forth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange4Low interface{}

    // High value of forth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange4High interface{}

    // Low value of fifth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange5Low interface{}

    // High value of fifth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange5High interface{}

    // Low value of sixth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange6Low interface{}

    // High value of sixth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange6High interface{}

    // Low value of seventh additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange7Low interface{}

    // High value of seventh additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange7High interface{}

    // Low value of eighth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange8Low interface{}

    // High value of eighth additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange8High interface{}

    // Value to match against Class Of Service bits for outer tag. The type is
    // interface{} with range: 0..7.
    OuterClassOfService interface{}

    // Value to match against Class Of Service bits for inner tag. The type is
    // interface{} with range: 0..7.
    InnerClassOfService interface{}

    // Which payload ethertype values to match. The type is EthertypeMatch.
    PayloadEthertypeMatch interface{}

    // Source MAC address to match on ingress. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    IngressSourceMac interface{}

    // Destination MAC address to match on egress. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    IngressDestinationMac interface{}

    // Only match packets with no more tags than explicitly matched. The type is
    // interface{}.
    Exact interface{}
}

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetEntityData() *types.CommonEntityData {
    ambiguousEncapsulation.EntityData.YFilter = ambiguousEncapsulation.YFilter
    ambiguousEncapsulation.EntityData.YangName = "ambiguous-encapsulation"
    ambiguousEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ambiguousEncapsulation.EntityData.ParentYangName = "ethernet-bng"
    ambiguousEncapsulation.EntityData.SegmentPath = "ambiguous-encapsulation"
    ambiguousEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ambiguousEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ambiguousEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ambiguousEncapsulation.EntityData.Children = make(map[string]types.YChild)
    ambiguousEncapsulation.EntityData.Leafs = make(map[string]types.YLeaf)
    ambiguousEncapsulation.EntityData.Leafs["outer-tag-type"] = types.YLeaf{"OuterTagType", ambiguousEncapsulation.OuterTagType}
    ambiguousEncapsulation.EntityData.Leafs["outer-range1-low"] = types.YLeaf{"OuterRange1Low", ambiguousEncapsulation.OuterRange1Low}
    ambiguousEncapsulation.EntityData.Leafs["outer-range1-high"] = types.YLeaf{"OuterRange1High", ambiguousEncapsulation.OuterRange1High}
    ambiguousEncapsulation.EntityData.Leafs["inner-tag-type"] = types.YLeaf{"InnerTagType", ambiguousEncapsulation.InnerTagType}
    ambiguousEncapsulation.EntityData.Leafs["inner-range1-low"] = types.YLeaf{"InnerRange1Low", ambiguousEncapsulation.InnerRange1Low}
    ambiguousEncapsulation.EntityData.Leafs["inner-range1-high"] = types.YLeaf{"InnerRange1High", ambiguousEncapsulation.InnerRange1High}
    ambiguousEncapsulation.EntityData.Leafs["additional-range1-low"] = types.YLeaf{"AdditionalRange1Low", ambiguousEncapsulation.AdditionalRange1Low}
    ambiguousEncapsulation.EntityData.Leafs["additional-range1-high"] = types.YLeaf{"AdditionalRange1High", ambiguousEncapsulation.AdditionalRange1High}
    ambiguousEncapsulation.EntityData.Leafs["additional-range2-low"] = types.YLeaf{"AdditionalRange2Low", ambiguousEncapsulation.AdditionalRange2Low}
    ambiguousEncapsulation.EntityData.Leafs["additional-range2-high"] = types.YLeaf{"AdditionalRange2High", ambiguousEncapsulation.AdditionalRange2High}
    ambiguousEncapsulation.EntityData.Leafs["additional-range3-low"] = types.YLeaf{"AdditionalRange3Low", ambiguousEncapsulation.AdditionalRange3Low}
    ambiguousEncapsulation.EntityData.Leafs["additional-range3-high"] = types.YLeaf{"AdditionalRange3High", ambiguousEncapsulation.AdditionalRange3High}
    ambiguousEncapsulation.EntityData.Leafs["additional-range4-low"] = types.YLeaf{"AdditionalRange4Low", ambiguousEncapsulation.AdditionalRange4Low}
    ambiguousEncapsulation.EntityData.Leafs["additional-range4-high"] = types.YLeaf{"AdditionalRange4High", ambiguousEncapsulation.AdditionalRange4High}
    ambiguousEncapsulation.EntityData.Leafs["additional-range5-low"] = types.YLeaf{"AdditionalRange5Low", ambiguousEncapsulation.AdditionalRange5Low}
    ambiguousEncapsulation.EntityData.Leafs["additional-range5-high"] = types.YLeaf{"AdditionalRange5High", ambiguousEncapsulation.AdditionalRange5High}
    ambiguousEncapsulation.EntityData.Leafs["additional-range6-low"] = types.YLeaf{"AdditionalRange6Low", ambiguousEncapsulation.AdditionalRange6Low}
    ambiguousEncapsulation.EntityData.Leafs["additional-range6-high"] = types.YLeaf{"AdditionalRange6High", ambiguousEncapsulation.AdditionalRange6High}
    ambiguousEncapsulation.EntityData.Leafs["additional-range7-low"] = types.YLeaf{"AdditionalRange7Low", ambiguousEncapsulation.AdditionalRange7Low}
    ambiguousEncapsulation.EntityData.Leafs["additional-range7-high"] = types.YLeaf{"AdditionalRange7High", ambiguousEncapsulation.AdditionalRange7High}
    ambiguousEncapsulation.EntityData.Leafs["additional-range8-low"] = types.YLeaf{"AdditionalRange8Low", ambiguousEncapsulation.AdditionalRange8Low}
    ambiguousEncapsulation.EntityData.Leafs["additional-range8-high"] = types.YLeaf{"AdditionalRange8High", ambiguousEncapsulation.AdditionalRange8High}
    ambiguousEncapsulation.EntityData.Leafs["outer-class-of-service"] = types.YLeaf{"OuterClassOfService", ambiguousEncapsulation.OuterClassOfService}
    ambiguousEncapsulation.EntityData.Leafs["inner-class-of-service"] = types.YLeaf{"InnerClassOfService", ambiguousEncapsulation.InnerClassOfService}
    ambiguousEncapsulation.EntityData.Leafs["payload-ethertype-match"] = types.YLeaf{"PayloadEthertypeMatch", ambiguousEncapsulation.PayloadEthertypeMatch}
    ambiguousEncapsulation.EntityData.Leafs["ingress-source-mac"] = types.YLeaf{"IngressSourceMac", ambiguousEncapsulation.IngressSourceMac}
    ambiguousEncapsulation.EntityData.Leafs["ingress-destination-mac"] = types.YLeaf{"IngressDestinationMac", ambiguousEncapsulation.IngressDestinationMac}
    ambiguousEncapsulation.EntityData.Leafs["exact"] = types.YLeaf{"Exact", ambiguousEncapsulation.Exact}
    return &(ambiguousEncapsulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MacAccounting
// MAC Accounting Configuration
type InterfaceConfigurations_InterfaceConfiguration_MacAccounting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per MAC address accounting statistics. The type is interface{}.
    Ingress interface{}

    // Per MAC address accounting statistics. The type is interface{}.
    Egress interface{}
}

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetEntityData() *types.CommonEntityData {
    macAccounting.EntityData.YFilter = macAccounting.YFilter
    macAccounting.EntityData.YangName = "mac-accounting"
    macAccounting.EntityData.BundleName = "cisco_ios_xr"
    macAccounting.EntityData.ParentYangName = "interface-configuration"
    macAccounting.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting"
    macAccounting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAccounting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAccounting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAccounting.EntityData.Children = make(map[string]types.YChild)
    macAccounting.EntityData.Leafs = make(map[string]types.YLeaf)
    macAccounting.EntityData.Leafs["ingress"] = types.YLeaf{"Ingress", macAccounting.Ingress}
    macAccounting.EntityData.Leafs["egress"] = types.YLeaf{"Egress", macAccounting.Egress}
    return &(macAccounting.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures
// Ethernet Features Configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Ingress Ethernet frame filtering. The type is Filtering.
    Filtering interface{}

    // Enable Ethernet Link OAM on the interface. The type is interface{}.
    EtherLinkOamEnable interface{}

    // CFM interface configuration.
    Cfm InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm

    // Ethernet Link OAM Interface Configuration.
    EtherLinkOam InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetEntityData() *types.CommonEntityData {
    ethernetFeatures.EntityData.YFilter = ethernetFeatures.YFilter
    ethernetFeatures.EntityData.YangName = "ethernet-features"
    ethernetFeatures.EntityData.BundleName = "cisco_ios_xr"
    ethernetFeatures.EntityData.ParentYangName = "interface-configuration"
    ethernetFeatures.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features"
    ethernetFeatures.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetFeatures.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetFeatures.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetFeatures.EntityData.Children = make(map[string]types.YChild)
    ethernetFeatures.EntityData.Children["Cisco-IOS-XR-ethernet-cfm-cfg:cfm"] = types.YChild{"Cfm", &ethernetFeatures.Cfm}
    ethernetFeatures.EntityData.Children["Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam"] = types.YChild{"EtherLinkOam", &ethernetFeatures.EtherLinkOam}
    ethernetFeatures.EntityData.Leafs = make(map[string]types.YLeaf)
    ethernetFeatures.EntityData.Leafs["filtering"] = types.YLeaf{"Filtering", ethernetFeatures.Filtering}
    ethernetFeatures.EntityData.Leafs["ether-link-oam-enable"] = types.YLeaf{"EtherLinkOamEnable", ethernetFeatures.EtherLinkOamEnable}
    return &(ethernetFeatures.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm
// CFM interface configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain-specific interface configuration.
    Domains InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains

    // Interface specific AIS configuration.
    AisUp InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetEntityData() *types.CommonEntityData {
    cfm.EntityData.YFilter = cfm.YFilter
    cfm.EntityData.YangName = "cfm"
    cfm.EntityData.BundleName = "cisco_ios_xr"
    cfm.EntityData.ParentYangName = "ethernet-features"
    cfm.EntityData.SegmentPath = "Cisco-IOS-XR-ethernet-cfm-cfg:cfm"
    cfm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cfm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cfm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cfm.EntityData.Children = make(map[string]types.YChild)
    cfm.EntityData.Children["domains"] = types.YChild{"Domains", &cfm.Domains}
    cfm.EntityData.Children["ais-up"] = types.YChild{"AisUp", &cfm.AisUp}
    cfm.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cfm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains
// Domain-specific interface configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular Maintenance Domain. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain.
    Domain []InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain
}

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetEntityData() *types.CommonEntityData {
    domains.EntityData.YFilter = domains.YFilter
    domains.EntityData.YangName = "domains"
    domains.EntityData.BundleName = "cisco_ios_xr"
    domains.EntityData.ParentYangName = "cfm"
    domains.EntityData.SegmentPath = "domains"
    domains.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domains.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domains.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domains.EntityData.Children = make(map[string]types.YChild)
    domains.EntityData.Children["domain"] = types.YChild{"Domain", nil}
    for i := range domains.Domain {
        domains.EntityData.Children[types.GetSegmentPath(&domains.Domain[i])] = types.YChild{"Domain", &domains.Domain[i]}
    }
    domains.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(domains.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain
// Configuration for a particular Maintenance
// Domain
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Maintenance Domain. The type is string with
    // length: 1..79.
    Domain interface{}

    // MEP Configuration.
    Mep InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep
}

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetEntityData() *types.CommonEntityData {
    domain.EntityData.YFilter = domain.YFilter
    domain.EntityData.YangName = "domain"
    domain.EntityData.BundleName = "cisco_ios_xr"
    domain.EntityData.ParentYangName = "domains"
    domain.EntityData.SegmentPath = "domain" + "[domain='" + fmt.Sprintf("%v", domain.Domain) + "']"
    domain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domain.EntityData.Children = make(map[string]types.YChild)
    domain.EntityData.Children["mep"] = types.YChild{"Mep", &domain.Mep}
    domain.EntityData.Leafs = make(map[string]types.YLeaf)
    domain.EntityData.Leafs["domain"] = types.YLeaf{"Domain", domain.Domain}
    return &(domain.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep
// MEP Configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Class of Service bits for this MEP. The type is interface{} with range:
    // 0..7.
    Cos interface{}

    // SLA specific configuration.
    SlaProfileTargetMepIds InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds

    // Properties for this MEP.
    MepProperties InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties

    // Loss-measurement specific configuration.
    LossMeasurementCounters InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters
}

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetEntityData() *types.CommonEntityData {
    mep.EntityData.YFilter = mep.YFilter
    mep.EntityData.YangName = "mep"
    mep.EntityData.BundleName = "cisco_ios_xr"
    mep.EntityData.ParentYangName = "domain"
    mep.EntityData.SegmentPath = "mep"
    mep.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mep.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mep.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mep.EntityData.Children = make(map[string]types.YChild)
    mep.EntityData.Children["sla-profile-target-mep-ids"] = types.YChild{"SlaProfileTargetMepIds", &mep.SlaProfileTargetMepIds}
    mep.EntityData.Children["mep-properties"] = types.YChild{"MepProperties", &mep.MepProperties}
    mep.EntityData.Children["loss-measurement-counters"] = types.YChild{"LossMeasurementCounters", &mep.LossMeasurementCounters}
    mep.EntityData.Leafs = make(map[string]types.YLeaf)
    mep.EntityData.Leafs["cos"] = types.YLeaf{"Cos", mep.Cos}
    return &(mep.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds
// SLA specific configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular SLA operation. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId.
    SlaProfileTargetMepId []InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId

    // Configuration for a particular SLA operation. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress.
    SlaProfileTargetMacAddress []InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress
}

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetEntityData() *types.CommonEntityData {
    slaProfileTargetMepIds.EntityData.YFilter = slaProfileTargetMepIds.YFilter
    slaProfileTargetMepIds.EntityData.YangName = "sla-profile-target-mep-ids"
    slaProfileTargetMepIds.EntityData.BundleName = "cisco_ios_xr"
    slaProfileTargetMepIds.EntityData.ParentYangName = "mep"
    slaProfileTargetMepIds.EntityData.SegmentPath = "sla-profile-target-mep-ids"
    slaProfileTargetMepIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slaProfileTargetMepIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slaProfileTargetMepIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slaProfileTargetMepIds.EntityData.Children = make(map[string]types.YChild)
    slaProfileTargetMepIds.EntityData.Children["sla-profile-target-mep-id"] = types.YChild{"SlaProfileTargetMepId", nil}
    for i := range slaProfileTargetMepIds.SlaProfileTargetMepId {
        slaProfileTargetMepIds.EntityData.Children[types.GetSegmentPath(&slaProfileTargetMepIds.SlaProfileTargetMepId[i])] = types.YChild{"SlaProfileTargetMepId", &slaProfileTargetMepIds.SlaProfileTargetMepId[i]}
    }
    slaProfileTargetMepIds.EntityData.Children["sla-profile-target-mac-address"] = types.YChild{"SlaProfileTargetMacAddress", nil}
    for i := range slaProfileTargetMepIds.SlaProfileTargetMacAddress {
        slaProfileTargetMepIds.EntityData.Children[types.GetSegmentPath(&slaProfileTargetMepIds.SlaProfileTargetMacAddress[i])] = types.YChild{"SlaProfileTargetMacAddress", &slaProfileTargetMepIds.SlaProfileTargetMacAddress[i]}
    }
    slaProfileTargetMepIds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(slaProfileTargetMepIds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId
// Configuration for a particular SLA
// operation
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. SLA profile name. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Profile interface{}

    // This attribute is a key. Target MEP-ID. The type is interface{} with range:
    // 1..8191.
    TargetMepId interface{}
}

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetEntityData() *types.CommonEntityData {
    slaProfileTargetMepId.EntityData.YFilter = slaProfileTargetMepId.YFilter
    slaProfileTargetMepId.EntityData.YangName = "sla-profile-target-mep-id"
    slaProfileTargetMepId.EntityData.BundleName = "cisco_ios_xr"
    slaProfileTargetMepId.EntityData.ParentYangName = "sla-profile-target-mep-ids"
    slaProfileTargetMepId.EntityData.SegmentPath = "sla-profile-target-mep-id" + "[profile='" + fmt.Sprintf("%v", slaProfileTargetMepId.Profile) + "']" + "[target-mep-id='" + fmt.Sprintf("%v", slaProfileTargetMepId.TargetMepId) + "']"
    slaProfileTargetMepId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slaProfileTargetMepId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slaProfileTargetMepId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slaProfileTargetMepId.EntityData.Children = make(map[string]types.YChild)
    slaProfileTargetMepId.EntityData.Leafs = make(map[string]types.YLeaf)
    slaProfileTargetMepId.EntityData.Leafs["profile"] = types.YLeaf{"Profile", slaProfileTargetMepId.Profile}
    slaProfileTargetMepId.EntityData.Leafs["target-mep-id"] = types.YLeaf{"TargetMepId", slaProfileTargetMepId.TargetMepId}
    return &(slaProfileTargetMepId.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress
// Configuration for a particular SLA
// operation
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. SLA profile name. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Profile interface{}

    // This attribute is a key. Target MAC address. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    TargetMacAddress interface{}
}

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetEntityData() *types.CommonEntityData {
    slaProfileTargetMacAddress.EntityData.YFilter = slaProfileTargetMacAddress.YFilter
    slaProfileTargetMacAddress.EntityData.YangName = "sla-profile-target-mac-address"
    slaProfileTargetMacAddress.EntityData.BundleName = "cisco_ios_xr"
    slaProfileTargetMacAddress.EntityData.ParentYangName = "sla-profile-target-mep-ids"
    slaProfileTargetMacAddress.EntityData.SegmentPath = "sla-profile-target-mac-address" + "[profile='" + fmt.Sprintf("%v", slaProfileTargetMacAddress.Profile) + "']" + "[target-mac-address='" + fmt.Sprintf("%v", slaProfileTargetMacAddress.TargetMacAddress) + "']"
    slaProfileTargetMacAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slaProfileTargetMacAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slaProfileTargetMacAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slaProfileTargetMacAddress.EntityData.Children = make(map[string]types.YChild)
    slaProfileTargetMacAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    slaProfileTargetMacAddress.EntityData.Leafs["profile"] = types.YLeaf{"Profile", slaProfileTargetMacAddress.Profile}
    slaProfileTargetMacAddress.EntityData.Leafs["target-mac-address"] = types.YLeaf{"TargetMacAddress", slaProfileTargetMacAddress.TargetMacAddress}
    return &(slaProfileTargetMacAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties
// Properties for this MEP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service (Maintenance Association). The type is string with length: 1..79.
    // This attribute is mandatory.
    Service interface{}

    // MEP ID. The type is interface{} with range: 1..8191. This attribute is
    // mandatory.
    MepId interface{}
}

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetEntityData() *types.CommonEntityData {
    mepProperties.EntityData.YFilter = mepProperties.YFilter
    mepProperties.EntityData.YangName = "mep-properties"
    mepProperties.EntityData.BundleName = "cisco_ios_xr"
    mepProperties.EntityData.ParentYangName = "mep"
    mepProperties.EntityData.SegmentPath = "mep-properties"
    mepProperties.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mepProperties.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mepProperties.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mepProperties.EntityData.Children = make(map[string]types.YChild)
    mepProperties.EntityData.Leafs = make(map[string]types.YLeaf)
    mepProperties.EntityData.Leafs["service"] = types.YLeaf{"Service", mepProperties.Service}
    mepProperties.EntityData.Leafs["mep-id"] = types.YLeaf{"MepId", mepProperties.MepId}
    return &(mepProperties.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters
// Loss-measurement specific configuration
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Aggregate, List, or Range. The type is CfmLmCountersCfg. This attribute is
    // mandatory.
    CfgType interface{}

    // CoS bits for per-CoS counters - start of range or list item. The type is
    // interface{} with range: 0..7.
    Cos0 interface{}

    // CoS bits for per-CoS counters - end of range or list item. The type is
    // interface{} with range: 0..7.
    Cos1 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos2 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos3 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos4 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos5 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos6 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos7 interface{}
}

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetEntityData() *types.CommonEntityData {
    lossMeasurementCounters.EntityData.YFilter = lossMeasurementCounters.YFilter
    lossMeasurementCounters.EntityData.YangName = "loss-measurement-counters"
    lossMeasurementCounters.EntityData.BundleName = "cisco_ios_xr"
    lossMeasurementCounters.EntityData.ParentYangName = "mep"
    lossMeasurementCounters.EntityData.SegmentPath = "loss-measurement-counters"
    lossMeasurementCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lossMeasurementCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lossMeasurementCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lossMeasurementCounters.EntityData.Children = make(map[string]types.YChild)
    lossMeasurementCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    lossMeasurementCounters.EntityData.Leafs["cfg-type"] = types.YLeaf{"CfgType", lossMeasurementCounters.CfgType}
    lossMeasurementCounters.EntityData.Leafs["cos0"] = types.YLeaf{"Cos0", lossMeasurementCounters.Cos0}
    lossMeasurementCounters.EntityData.Leafs["cos1"] = types.YLeaf{"Cos1", lossMeasurementCounters.Cos1}
    lossMeasurementCounters.EntityData.Leafs["cos2"] = types.YLeaf{"Cos2", lossMeasurementCounters.Cos2}
    lossMeasurementCounters.EntityData.Leafs["cos3"] = types.YLeaf{"Cos3", lossMeasurementCounters.Cos3}
    lossMeasurementCounters.EntityData.Leafs["cos4"] = types.YLeaf{"Cos4", lossMeasurementCounters.Cos4}
    lossMeasurementCounters.EntityData.Leafs["cos5"] = types.YLeaf{"Cos5", lossMeasurementCounters.Cos5}
    lossMeasurementCounters.EntityData.Leafs["cos6"] = types.YLeaf{"Cos6", lossMeasurementCounters.Cos6}
    lossMeasurementCounters.EntityData.Leafs["cos7"] = types.YLeaf{"Cos7", lossMeasurementCounters.Cos7}
    return &(lossMeasurementCounters.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp
// Interface specific AIS configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIS transmission configuration.
    Transmission InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission
}

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetEntityData() *types.CommonEntityData {
    aisUp.EntityData.YFilter = aisUp.YFilter
    aisUp.EntityData.YangName = "ais-up"
    aisUp.EntityData.BundleName = "cisco_ios_xr"
    aisUp.EntityData.ParentYangName = "cfm"
    aisUp.EntityData.SegmentPath = "ais-up"
    aisUp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aisUp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aisUp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aisUp.EntityData.Children = make(map[string]types.YChild)
    aisUp.EntityData.Children["transmission"] = types.YChild{"Transmission", &aisUp.Transmission}
    aisUp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(aisUp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission
// AIS transmission configuration
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIS Interval. The type is CfmAisInterval.
    AisInterval interface{}

    // Class of Service bits. The type is interface{} with range: 0..7.
    Cos interface{}
}

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetEntityData() *types.CommonEntityData {
    transmission.EntityData.YFilter = transmission.YFilter
    transmission.EntityData.YangName = "transmission"
    transmission.EntityData.BundleName = "cisco_ios_xr"
    transmission.EntityData.ParentYangName = "ais-up"
    transmission.EntityData.SegmentPath = "transmission"
    transmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transmission.EntityData.Children = make(map[string]types.YChild)
    transmission.EntityData.Leafs = make(map[string]types.YLeaf)
    transmission.EntityData.Leafs["ais-interval"] = types.YLeaf{"AisInterval", transmission.AisInterval}
    transmission.EntityData.Leafs["cos"] = types.YLeaf{"Cos", transmission.Cos}
    return &(transmission.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam
// Ethernet Link OAM Interface Configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Connection timeout period in number of lost heartbeats. The type is
    // interface{} with range: 2..30.
    Timeout interface{}

    // Possible Ethernet Link OAM modes. The type is EtherLinkOamModeEnum.
    Mode interface{}

    // Enable or disable MIB retrieval. The type is bool.
    MibRetrieval interface{}

    // Set the profile to use on the interface. The type is string.
    ProfileName interface{}

    // Enable or disable remote loopback. The type is bool.
    RemoteLoopback interface{}

    // Possible Ethernet Link OAM hello intervals. The type is
    // EtherLinkOamHelloIntervalEnum.
    HelloInterval interface{}

    // Enable or disable uni-directional link-fault detection. The type is bool.
    Udlf interface{}

    // Configure action parameters.
    Action InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action

    // Configure remote requirement parameters.
    RequireRemote InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote

    // Configure link monitor parameters.
    LinkMonitoring InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring
}

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetEntityData() *types.CommonEntityData {
    etherLinkOam.EntityData.YFilter = etherLinkOam.YFilter
    etherLinkOam.EntityData.YangName = "ether-link-oam"
    etherLinkOam.EntityData.BundleName = "cisco_ios_xr"
    etherLinkOam.EntityData.ParentYangName = "ethernet-features"
    etherLinkOam.EntityData.SegmentPath = "Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam"
    etherLinkOam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    etherLinkOam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    etherLinkOam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    etherLinkOam.EntityData.Children = make(map[string]types.YChild)
    etherLinkOam.EntityData.Children["action"] = types.YChild{"Action", &etherLinkOam.Action}
    etherLinkOam.EntityData.Children["require-remote"] = types.YChild{"RequireRemote", &etherLinkOam.RequireRemote}
    etherLinkOam.EntityData.Children["link-monitoring"] = types.YChild{"LinkMonitoring", &etherLinkOam.LinkMonitoring}
    etherLinkOam.EntityData.Leafs = make(map[string]types.YLeaf)
    etherLinkOam.EntityData.Leafs["timeout"] = types.YLeaf{"Timeout", etherLinkOam.Timeout}
    etherLinkOam.EntityData.Leafs["mode"] = types.YLeaf{"Mode", etherLinkOam.Mode}
    etherLinkOam.EntityData.Leafs["mib-retrieval"] = types.YLeaf{"MibRetrieval", etherLinkOam.MibRetrieval}
    etherLinkOam.EntityData.Leafs["profile-name"] = types.YLeaf{"ProfileName", etherLinkOam.ProfileName}
    etherLinkOam.EntityData.Leafs["remote-loopback"] = types.YLeaf{"RemoteLoopback", etherLinkOam.RemoteLoopback}
    etherLinkOam.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", etherLinkOam.HelloInterval}
    etherLinkOam.EntityData.Leafs["udlf"] = types.YLeaf{"Udlf", etherLinkOam.Udlf}
    return &(etherLinkOam.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action
// Configure action parameters
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Action to perform when a dying gasp occurs. The type is
    // EtherLinkOamEventActionEnum.
    DyingGasp interface{}

    // Action to perform when a link fault occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    LinkFault interface{}

    // Action to perform when a capabilities conflict occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    CapabilitiesConflict interface{}

    // Action to perform when a session comes up. The type is
    // EtherLinkOamEventActionPrimEnum.
    SessionUp interface{}

    // Action to perform when a critical event occurs. The type is
    // EtherLinkOamEventActionEnum.
    CriticalEvent interface{}

    // Action to perform when remote loopback is entered or exited. The type is
    // EtherLinkOamEventActionPrimEnum.
    RemoteLoopback interface{}

    // Action to perform when a wiring conflict occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    WiringConflict interface{}

    // Action to perform when a high-threshold event occurs. The type is
    // EtherLinkOamEventActionEnum.
    HighThreshold interface{}

    // Action to perform when discovery timeout occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    DiscoveryTimeout interface{}

    // Action to perform when a session comes down. The type is
    // EtherLinkOamEventActionEnumEfd.
    SessionDown interface{}
}

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetEntityData() *types.CommonEntityData {
    action.EntityData.YFilter = action.YFilter
    action.EntityData.YangName = "action"
    action.EntityData.BundleName = "cisco_ios_xr"
    action.EntityData.ParentYangName = "ether-link-oam"
    action.EntityData.SegmentPath = "action"
    action.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    action.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    action.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    action.EntityData.Children = make(map[string]types.YChild)
    action.EntityData.Leafs = make(map[string]types.YLeaf)
    action.EntityData.Leafs["dying-gasp"] = types.YLeaf{"DyingGasp", action.DyingGasp}
    action.EntityData.Leafs["link-fault"] = types.YLeaf{"LinkFault", action.LinkFault}
    action.EntityData.Leafs["capabilities-conflict"] = types.YLeaf{"CapabilitiesConflict", action.CapabilitiesConflict}
    action.EntityData.Leafs["session-up"] = types.YLeaf{"SessionUp", action.SessionUp}
    action.EntityData.Leafs["critical-event"] = types.YLeaf{"CriticalEvent", action.CriticalEvent}
    action.EntityData.Leafs["remote-loopback"] = types.YLeaf{"RemoteLoopback", action.RemoteLoopback}
    action.EntityData.Leafs["wiring-conflict"] = types.YLeaf{"WiringConflict", action.WiringConflict}
    action.EntityData.Leafs["high-threshold"] = types.YLeaf{"HighThreshold", action.HighThreshold}
    action.EntityData.Leafs["discovery-timeout"] = types.YLeaf{"DiscoveryTimeout", action.DiscoveryTimeout}
    action.EntityData.Leafs["session-down"] = types.YLeaf{"SessionDown", action.SessionDown}
    return &(action.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote
// Configure remote requirement parameters
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Possible required peer modes. The type is EtherLinkOamRequireModeEnum.
    Mode interface{}

    // Enable or disable MIB retrieval peer requirement. The type is bool.
    MibRetrieval interface{}

    // Enable or disable remote loopback peer requirement. The type is bool.
    RemoteLoopback interface{}

    // Enable or disable link monitoring peer requirement. The type is bool.
    LinkMonitoring interface{}
}

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetEntityData() *types.CommonEntityData {
    requireRemote.EntityData.YFilter = requireRemote.YFilter
    requireRemote.EntityData.YangName = "require-remote"
    requireRemote.EntityData.BundleName = "cisco_ios_xr"
    requireRemote.EntityData.ParentYangName = "ether-link-oam"
    requireRemote.EntityData.SegmentPath = "require-remote"
    requireRemote.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requireRemote.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requireRemote.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requireRemote.EntityData.Children = make(map[string]types.YChild)
    requireRemote.EntityData.Leafs = make(map[string]types.YLeaf)
    requireRemote.EntityData.Leafs["mode"] = types.YLeaf{"Mode", requireRemote.Mode}
    requireRemote.EntityData.Leafs["mib-retrieval"] = types.YLeaf{"MibRetrieval", requireRemote.MibRetrieval}
    requireRemote.EntityData.Leafs["remote-loopback"] = types.YLeaf{"RemoteLoopback", requireRemote.RemoteLoopback}
    requireRemote.EntityData.Leafs["link-monitoring"] = types.YLeaf{"LinkMonitoring", requireRemote.LinkMonitoring}
    return &(requireRemote.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring
// Configure link monitor parameters
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable monitoring. The type is bool.
    Monitoring interface{}

    // Symbol-period event configuration.
    SymbolPeriod InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod

    // Frame-period event configuration.
    FramePeriod InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod

    // Frame-seconds event configuration.
    FrameSeconds InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds

    // Frame event configuration.
    Frame InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame
}

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetEntityData() *types.CommonEntityData {
    linkMonitoring.EntityData.YFilter = linkMonitoring.YFilter
    linkMonitoring.EntityData.YangName = "link-monitoring"
    linkMonitoring.EntityData.BundleName = "cisco_ios_xr"
    linkMonitoring.EntityData.ParentYangName = "ether-link-oam"
    linkMonitoring.EntityData.SegmentPath = "link-monitoring"
    linkMonitoring.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkMonitoring.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkMonitoring.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkMonitoring.EntityData.Children = make(map[string]types.YChild)
    linkMonitoring.EntityData.Children["symbol-period"] = types.YChild{"SymbolPeriod", &linkMonitoring.SymbolPeriod}
    linkMonitoring.EntityData.Children["frame-period"] = types.YChild{"FramePeriod", &linkMonitoring.FramePeriod}
    linkMonitoring.EntityData.Children["frame-seconds"] = types.YChild{"FrameSeconds", &linkMonitoring.FrameSeconds}
    linkMonitoring.EntityData.Children["frame"] = types.YChild{"Frame", &linkMonitoring.Frame}
    linkMonitoring.EntityData.Leafs = make(map[string]types.YLeaf)
    linkMonitoring.EntityData.Leafs["monitoring"] = types.YLeaf{"Monitoring", linkMonitoring.Monitoring}
    return &(linkMonitoring.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod
// Symbol-period event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Window size configuration for symbol-period events.
    Window InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window

    // Threshold configuration for symbol-period events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold
}

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetEntityData() *types.CommonEntityData {
    symbolPeriod.EntityData.YFilter = symbolPeriod.YFilter
    symbolPeriod.EntityData.YangName = "symbol-period"
    symbolPeriod.EntityData.BundleName = "cisco_ios_xr"
    symbolPeriod.EntityData.ParentYangName = "link-monitoring"
    symbolPeriod.EntityData.SegmentPath = "symbol-period"
    symbolPeriod.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    symbolPeriod.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    symbolPeriod.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    symbolPeriod.EntityData.Children = make(map[string]types.YChild)
    symbolPeriod.EntityData.Children["window"] = types.YChild{"Window", &symbolPeriod.Window}
    symbolPeriod.EntityData.Children["threshold"] = types.YChild{"Threshold", &symbolPeriod.Threshold}
    symbolPeriod.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(symbolPeriod.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window
// Window size configuration for symbol-period
// events
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the symbol-period window. The type is interface{} with range:
    // 1..4294967295. This attribute is mandatory.
    Window interface{}

    // Units to use for this window. The type is
    // EtherLinkOamWindowUnitsSymbolsEnum. This attribute is mandatory.
    Units interface{}

    // The multiplier to use for this window (only valid if 'Units' is Symbols and
    // treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    Multiplier interface{}
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetEntityData() *types.CommonEntityData {
    window.EntityData.YFilter = window.YFilter
    window.EntityData.YangName = "window"
    window.EntityData.BundleName = "cisco_ios_xr"
    window.EntityData.ParentYangName = "symbol-period"
    window.EntityData.SegmentPath = "window"
    window.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    window.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    window.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    window.EntityData.Children = make(map[string]types.YChild)
    window.EntityData.Leafs = make(map[string]types.YLeaf)
    window.EntityData.Leafs["window"] = types.YLeaf{"Window", window.Window}
    window.EntityData.Leafs["units"] = types.YLeaf{"Units", window.Units}
    window.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", window.Multiplier}
    return &(window.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold
// Threshold configuration for symbol-period
// events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The low threshold for symbol-period. The type is interface{} with range:
    // 1..4294967295. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for symbol-period. The type is interface{} with range:
    // 1..4294967295.
    ThresholdHigh interface{}

    // The units to use for these thresholds. The type is
    // EtherLinkOamThresholdUnitsSymbolsEnum. The default value is symbols.
    Units interface{}

    // The multiplier to use for the low threshold (only valid if 'Units' is
    // Symbols and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    MultiplierLow interface{}

    // The multiplier to use for the high threshold (only valid if 'Units' is
    // Symbols and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum.
    MultiplierHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "symbol-period"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = make(map[string]types.YChild)
    threshold.EntityData.Leafs = make(map[string]types.YLeaf)
    threshold.EntityData.Leafs["threshold-low"] = types.YLeaf{"ThresholdLow", threshold.ThresholdLow}
    threshold.EntityData.Leafs["threshold-high"] = types.YLeaf{"ThresholdHigh", threshold.ThresholdHigh}
    threshold.EntityData.Leafs["units"] = types.YLeaf{"Units", threshold.Units}
    threshold.EntityData.Leafs["multiplier-low"] = types.YLeaf{"MultiplierLow", threshold.MultiplierLow}
    threshold.EntityData.Leafs["multiplier-high"] = types.YLeaf{"MultiplierHigh", threshold.MultiplierHigh}
    return &(threshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod
// Frame-period event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Window size configuration for frame-period events.
    Window InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window

    // Threshold configuration for frame-period events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold
}

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetEntityData() *types.CommonEntityData {
    framePeriod.EntityData.YFilter = framePeriod.YFilter
    framePeriod.EntityData.YangName = "frame-period"
    framePeriod.EntityData.BundleName = "cisco_ios_xr"
    framePeriod.EntityData.ParentYangName = "link-monitoring"
    framePeriod.EntityData.SegmentPath = "frame-period"
    framePeriod.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    framePeriod.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    framePeriod.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    framePeriod.EntityData.Children = make(map[string]types.YChild)
    framePeriod.EntityData.Children["window"] = types.YChild{"Window", &framePeriod.Window}
    framePeriod.EntityData.Children["threshold"] = types.YChild{"Threshold", &framePeriod.Threshold}
    framePeriod.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(framePeriod.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window
// Window size configuration for frame-period
// events
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Size of the frame-period window. The type is interface{} with range:
    // 1..4294967295. This attribute is mandatory.
    Window interface{}

    // The units to use for this window. The type is
    // EtherLinkOamWindowUnitsFramesEnum. This attribute is mandatory.
    Units interface{}

    // The multiplier to use for this window (only valid if 'Units' is Frames and
    // treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    Multiplier interface{}
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetEntityData() *types.CommonEntityData {
    window.EntityData.YFilter = window.YFilter
    window.EntityData.YangName = "window"
    window.EntityData.BundleName = "cisco_ios_xr"
    window.EntityData.ParentYangName = "frame-period"
    window.EntityData.SegmentPath = "window"
    window.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    window.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    window.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    window.EntityData.Children = make(map[string]types.YChild)
    window.EntityData.Leafs = make(map[string]types.YLeaf)
    window.EntityData.Leafs["window"] = types.YLeaf{"Window", window.Window}
    window.EntityData.Leafs["units"] = types.YLeaf{"Units", window.Units}
    window.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", window.Multiplier}
    return &(window.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold
// Threshold configuration for frame-period
// events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The low threshold for frame-period events. The type is interface{} with
    // range: 1..4294967295. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for frame-period events. The type is interface{} with
    // range: 1..4294967295.
    ThresholdHigh interface{}

    // The units to use for these thresholds. The type is
    // EtherLinkOamThresholdUnitsFramesEnum. The default value is ppm.
    Units interface{}

    // The multiplier to use for the low threshold (only valid if 'Units' is
    // Frames and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    MultiplierLow interface{}

    // The multiplier to use for the high threshold (only valid if 'Units' is
    // Frames and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum.
    MultiplierHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "frame-period"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = make(map[string]types.YChild)
    threshold.EntityData.Leafs = make(map[string]types.YLeaf)
    threshold.EntityData.Leafs["threshold-low"] = types.YLeaf{"ThresholdLow", threshold.ThresholdLow}
    threshold.EntityData.Leafs["threshold-high"] = types.YLeaf{"ThresholdHigh", threshold.ThresholdHigh}
    threshold.EntityData.Leafs["units"] = types.YLeaf{"Units", threshold.Units}
    threshold.EntityData.Leafs["multiplier-low"] = types.YLeaf{"MultiplierLow", threshold.MultiplierLow}
    threshold.EntityData.Leafs["multiplier-high"] = types.YLeaf{"MultiplierHigh", threshold.MultiplierHigh}
    return &(threshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds
// Frame-seconds event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Window size configuration for frame-seconds events. The type is interface{}
    // with range: 10000..900000. Units are millisecond. The default value is
    // 60000.
    Window interface{}

    // Threshold configuration for frame-seconds events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold
}

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetEntityData() *types.CommonEntityData {
    frameSeconds.EntityData.YFilter = frameSeconds.YFilter
    frameSeconds.EntityData.YangName = "frame-seconds"
    frameSeconds.EntityData.BundleName = "cisco_ios_xr"
    frameSeconds.EntityData.ParentYangName = "link-monitoring"
    frameSeconds.EntityData.SegmentPath = "frame-seconds"
    frameSeconds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frameSeconds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frameSeconds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frameSeconds.EntityData.Children = make(map[string]types.YChild)
    frameSeconds.EntityData.Children["threshold"] = types.YChild{"Threshold", &frameSeconds.Threshold}
    frameSeconds.EntityData.Leafs = make(map[string]types.YLeaf)
    frameSeconds.EntityData.Leafs["window"] = types.YLeaf{"Window", frameSeconds.Window}
    return &(frameSeconds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold
// Threshold configuration for frame-seconds
// events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The low threshold for frame-seconds events. The type is interface{} with
    // range: 1..900. Units are second. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for frame-seconds events. The type is interface{} with
    // range: 1..900. Units are second.
    ThresholdHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "frame-seconds"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = make(map[string]types.YChild)
    threshold.EntityData.Leafs = make(map[string]types.YLeaf)
    threshold.EntityData.Leafs["threshold-low"] = types.YLeaf{"ThresholdLow", threshold.ThresholdLow}
    threshold.EntityData.Leafs["threshold-high"] = types.YLeaf{"ThresholdHigh", threshold.ThresholdHigh}
    return &(threshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame
// Frame event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Window size configuration for frame events. The type is interface{} with
    // range: 1000..60000. Units are millisecond. The default value is 1000.
    Window interface{}

    // Threshold configuration for frame events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold
}

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetEntityData() *types.CommonEntityData {
    frame.EntityData.YFilter = frame.YFilter
    frame.EntityData.YangName = "frame"
    frame.EntityData.BundleName = "cisco_ios_xr"
    frame.EntityData.ParentYangName = "link-monitoring"
    frame.EntityData.SegmentPath = "frame"
    frame.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frame.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frame.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frame.EntityData.Children = make(map[string]types.YChild)
    frame.EntityData.Children["threshold"] = types.YChild{"Threshold", &frame.Threshold}
    frame.EntityData.Leafs = make(map[string]types.YLeaf)
    frame.EntityData.Leafs["window"] = types.YLeaf{"Window", frame.Window}
    return &(frame.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold
// Threshold configuration for frame events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The low threshold for frame events. The type is interface{} with range:
    // 1..4294967295. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for frame events. The type is interface{} with range:
    // 1..4294967295.
    ThresholdHigh interface{}

    // The multiplier to use for the low threshold (treated as 1 if unspecified).
    // The type is EtherLinkOamThresholdWindowMultiplierEnum. The default value is
    // none.
    MultiplierLow interface{}

    // The multiplier to use for the high threshold (treated as 1 if unspecified).
    // The type is EtherLinkOamThresholdWindowMultiplierEnum.
    MultiplierHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "frame"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = make(map[string]types.YChild)
    threshold.EntityData.Leafs = make(map[string]types.YLeaf)
    threshold.EntityData.Leafs["threshold-low"] = types.YLeaf{"ThresholdLow", threshold.ThresholdLow}
    threshold.EntityData.Leafs["threshold-high"] = types.YLeaf{"ThresholdHigh", threshold.ThresholdHigh}
    threshold.EntityData.Leafs["multiplier-low"] = types.YLeaf{"MultiplierLow", threshold.MultiplierLow}
    threshold.EntityData.Leafs["multiplier-high"] = types.YLeaf{"MultiplierHigh", threshold.MultiplierHigh}
    return &(threshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CarrierDelay
// Set the carrier transition delay on an interface
// in msecs
type InterfaceConfigurations_InterfaceConfiguration_CarrierDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Carrier Delay (up) in msecs. The type is interface{} with range: 1..65535.
    CarrierDelayUp interface{}

    // Carrier Delay down in msecs, must be set to 0. The type is interface{} with
    // range: 0..4294967295.
    CarrierDelayDown interface{}
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetEntityData() *types.CommonEntityData {
    carrierDelay.EntityData.YFilter = carrierDelay.YFilter
    carrierDelay.EntityData.YangName = "carrier-delay"
    carrierDelay.EntityData.BundleName = "cisco_ios_xr"
    carrierDelay.EntityData.ParentYangName = "interface-configuration"
    carrierDelay.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay"
    carrierDelay.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    carrierDelay.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    carrierDelay.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    carrierDelay.EntityData.Children = make(map[string]types.YChild)
    carrierDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    carrierDelay.EntityData.Leafs["carrier-delay-up"] = types.YLeaf{"CarrierDelayUp", carrierDelay.CarrierDelayUp}
    carrierDelay.EntityData.Leafs["carrier-delay-down"] = types.YLeaf{"CarrierDelayDown", carrierDelay.CarrierDelayDown}
    return &(carrierDelay.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration
// IEEE 802.1Q VLAN trunk interface configuration
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The outer ethertype used in Q-in-Q frames. The default value is 0x8100. The
    // type is TunnelingEthertype.
    TunnelingEthertype interface{}

    // The Native VLAN identifier associated with this trunk interface.
    NativeVlanIdentifier InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier
}

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetEntityData() *types.CommonEntityData {
    vlanTrunkConfiguration.EntityData.YFilter = vlanTrunkConfiguration.YFilter
    vlanTrunkConfiguration.EntityData.YangName = "vlan-trunk-configuration"
    vlanTrunkConfiguration.EntityData.BundleName = "cisco_ios_xr"
    vlanTrunkConfiguration.EntityData.ParentYangName = "interface-configuration"
    vlanTrunkConfiguration.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration"
    vlanTrunkConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanTrunkConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanTrunkConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanTrunkConfiguration.EntityData.Children = make(map[string]types.YChild)
    vlanTrunkConfiguration.EntityData.Children["native-vlan-identifier"] = types.YChild{"NativeVlanIdentifier", &vlanTrunkConfiguration.NativeVlanIdentifier}
    vlanTrunkConfiguration.EntityData.Leafs = make(map[string]types.YLeaf)
    vlanTrunkConfiguration.EntityData.Leafs["tunneling-ethertype"] = types.YLeaf{"TunnelingEthertype", vlanTrunkConfiguration.TunnelingEthertype}
    return &(vlanTrunkConfiguration.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier
// The Native VLAN identifier associated with this
// trunk interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether this interface is dot1ad or dot1Q. The type is Vlan. This attribute
    // is mandatory.
    VlanType interface{}

    // VLAN identifier. The type is interface{} with range: 1..4094. This
    // attribute is mandatory.
    VlanIdentifier interface{}
}

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetEntityData() *types.CommonEntityData {
    nativeVlanIdentifier.EntityData.YFilter = nativeVlanIdentifier.YFilter
    nativeVlanIdentifier.EntityData.YangName = "native-vlan-identifier"
    nativeVlanIdentifier.EntityData.BundleName = "cisco_ios_xr"
    nativeVlanIdentifier.EntityData.ParentYangName = "vlan-trunk-configuration"
    nativeVlanIdentifier.EntityData.SegmentPath = "native-vlan-identifier"
    nativeVlanIdentifier.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeVlanIdentifier.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeVlanIdentifier.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeVlanIdentifier.EntityData.Children = make(map[string]types.YChild)
    nativeVlanIdentifier.EntityData.Leafs = make(map[string]types.YLeaf)
    nativeVlanIdentifier.EntityData.Leafs["vlan-type"] = types.YLeaf{"VlanType", nativeVlanIdentifier.VlanType}
    nativeVlanIdentifier.EntityData.Leafs["vlan-identifier"] = types.YLeaf{"VlanIdentifier", nativeVlanIdentifier.VlanIdentifier}
    return &(nativeVlanIdentifier.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype represents default value is 0x8100
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype string

const (
    // 0x9100
    InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype_Y_0x9100 InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype = "0x9100"

    // 0x9200
    InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype_Y_0x9200 InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype = "0x9200"
)

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess
// nV Satellite Access Link Configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos
}

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetEntityData() *types.CommonEntityData {
    nvSatelliteAccess.EntityData.YFilter = nvSatelliteAccess.YFilter
    nvSatelliteAccess.EntityData.YangName = "nv-satellite-access"
    nvSatelliteAccess.EntityData.BundleName = "cisco_ios_xr"
    nvSatelliteAccess.EntityData.ParentYangName = "interface-configuration"
    nvSatelliteAccess.EntityData.SegmentPath = "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access"
    nvSatelliteAccess.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nvSatelliteAccess.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nvSatelliteAccess.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nvSatelliteAccess.EntityData.Children = make(map[string]types.YChild)
    nvSatelliteAccess.EntityData.Children["Cisco-IOS-XR-qos-ma-sat-cfg:qos"] = types.YChild{"Qos", &nvSatelliteAccess.Qos}
    nvSatelliteAccess.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nvSatelliteAccess.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "nv-satellite-access"
    qos.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = make(map[string]types.YChild)
    qos.EntityData.Children["output"] = types.YChild{"Output", &qos.Output}
    qos.EntityData.Children["input"] = types.YChild{"Input", &qos.Input}
    qos.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = make(map[string]types.YChild)
    output.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range output.ServicePolicy {
        output.EntityData.Children[types.GetSegmentPath(&output.ServicePolicy[i])] = types.YChild{"ServicePolicy", &output.ServicePolicy[i]}
    }
    output.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = make(map[string]types.YChild)
    input.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range input.ServicePolicy {
        input.EntityData.Children[types.GetSegmentPath(&input.ServicePolicy[i])] = types.YChild{"ServicePolicy", &input.ServicePolicy[i]}
    }
    input.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink
// nV Satellite Fabric Link Configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hub & Spoke connection to a single Satellite. The type is interface{} with
    // range: 100..65534.
    Satellite interface{}

    // Mininum number of active links required. The type is interface{} with
    // range: 1..64.
    MinimumRequiredLinks interface{}

    // Redundancy submode.
    Redundancy InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy

    // Remote Ports table.
    RemotePorts InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts

    // Ethernet Satellite configuration.
    EthernetFeatures InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures

    // Frequency Synchronization satellite configuration.
    FrequencySynchronization InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos
}

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetEntityData() *types.CommonEntityData {
    nvSatelliteFabricLink.EntityData.YFilter = nvSatelliteFabricLink.YFilter
    nvSatelliteFabricLink.EntityData.YangName = "nv-satellite-fabric-link"
    nvSatelliteFabricLink.EntityData.BundleName = "cisco_ios_xr"
    nvSatelliteFabricLink.EntityData.ParentYangName = "interface-configuration"
    nvSatelliteFabricLink.EntityData.SegmentPath = "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link"
    nvSatelliteFabricLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nvSatelliteFabricLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nvSatelliteFabricLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nvSatelliteFabricLink.EntityData.Children = make(map[string]types.YChild)
    nvSatelliteFabricLink.EntityData.Children["redundancy"] = types.YChild{"Redundancy", &nvSatelliteFabricLink.Redundancy}
    nvSatelliteFabricLink.EntityData.Children["remote-ports"] = types.YChild{"RemotePorts", &nvSatelliteFabricLink.RemotePorts}
    nvSatelliteFabricLink.EntityData.Children["Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features"] = types.YChild{"EthernetFeatures", &nvSatelliteFabricLink.EthernetFeatures}
    nvSatelliteFabricLink.EntityData.Children["Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization"] = types.YChild{"FrequencySynchronization", &nvSatelliteFabricLink.FrequencySynchronization}
    nvSatelliteFabricLink.EntityData.Children["Cisco-IOS-XR-qos-ma-sat-cfg:qos"] = types.YChild{"Qos", &nvSatelliteFabricLink.Qos}
    nvSatelliteFabricLink.EntityData.Leafs = make(map[string]types.YLeaf)
    nvSatelliteFabricLink.EntityData.Leafs["satellite"] = types.YLeaf{"Satellite", nvSatelliteFabricLink.Satellite}
    nvSatelliteFabricLink.EntityData.Leafs["minimum-required-links"] = types.YLeaf{"MinimumRequiredLinks", nvSatelliteFabricLink.MinimumRequiredLinks}
    return &(nvSatelliteFabricLink.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy
// Redundancy submode
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Links the satellite fabric to the given ICCP group. The type is interface{}
    // with range: 0..4294967295.
    IccpGroup interface{}

    // Mininum number of active links preferred. The type is interface{} with
    // range: 1..64.
    MinimumPreferredLinks interface{}
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetEntityData() *types.CommonEntityData {
    redundancy.EntityData.YFilter = redundancy.YFilter
    redundancy.EntityData.YangName = "redundancy"
    redundancy.EntityData.BundleName = "cisco_ios_xr"
    redundancy.EntityData.ParentYangName = "nv-satellite-fabric-link"
    redundancy.EntityData.SegmentPath = "redundancy"
    redundancy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redundancy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redundancy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redundancy.EntityData.Children = make(map[string]types.YChild)
    redundancy.EntityData.Leafs = make(map[string]types.YLeaf)
    redundancy.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", redundancy.IccpGroup}
    redundancy.EntityData.Leafs["minimum-preferred-links"] = types.YLeaf{"MinimumPreferredLinks", redundancy.MinimumPreferredLinks}
    return &(redundancy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts
// Remote Ports table
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Ports. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort.
    RemotePort []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetEntityData() *types.CommonEntityData {
    remotePorts.EntityData.YFilter = remotePorts.YFilter
    remotePorts.EntityData.YangName = "remote-ports"
    remotePorts.EntityData.BundleName = "cisco_ios_xr"
    remotePorts.EntityData.ParentYangName = "nv-satellite-fabric-link"
    remotePorts.EntityData.SegmentPath = "remote-ports"
    remotePorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePorts.EntityData.Children = make(map[string]types.YChild)
    remotePorts.EntityData.Children["remote-port"] = types.YChild{"RemotePort", nil}
    for i := range remotePorts.RemotePort {
        remotePorts.EntityData.Children[types.GetSegmentPath(&remotePorts.RemotePort[i])] = types.YChild{"RemotePort", &remotePorts.RemotePort[i]}
    }
    remotePorts.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(remotePorts.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort
// Remote Ports
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Port type. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    PortType interface{}

    // This attribute is a key. Slot. The type is interface{} with range: 0..8.
    Slot interface{}

    // This attribute is a key. Sub slot. The type is interface{} with range:
    // 0..8.
    SubSlot interface{}

    // Port range. The type is string. This attribute is mandatory.
    PortRange interface{}
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetEntityData() *types.CommonEntityData {
    remotePort.EntityData.YFilter = remotePort.YFilter
    remotePort.EntityData.YangName = "remote-port"
    remotePort.EntityData.BundleName = "cisco_ios_xr"
    remotePort.EntityData.ParentYangName = "remote-ports"
    remotePort.EntityData.SegmentPath = "remote-port" + "[port-type='" + fmt.Sprintf("%v", remotePort.PortType) + "']" + "[slot='" + fmt.Sprintf("%v", remotePort.Slot) + "']" + "[sub-slot='" + fmt.Sprintf("%v", remotePort.SubSlot) + "']"
    remotePort.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePort.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePort.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePort.EntityData.Children = make(map[string]types.YChild)
    remotePort.EntityData.Leafs = make(map[string]types.YLeaf)
    remotePort.EntityData.Leafs["port-type"] = types.YLeaf{"PortType", remotePort.PortType}
    remotePort.EntityData.Leafs["slot"] = types.YLeaf{"Slot", remotePort.Slot}
    remotePort.EntityData.Leafs["sub-slot"] = types.YLeaf{"SubSlot", remotePort.SubSlot}
    remotePort.EntityData.Leafs["port-range"] = types.YLeaf{"PortRange", remotePort.PortRange}
    return &(remotePort.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures
// Ethernet Satellite configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // CFM Satellite configuration.
    Cfm InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetEntityData() *types.CommonEntityData {
    ethernetFeatures.EntityData.YFilter = ethernetFeatures.YFilter
    ethernetFeatures.EntityData.YangName = "ethernet-features"
    ethernetFeatures.EntityData.BundleName = "cisco_ios_xr"
    ethernetFeatures.EntityData.ParentYangName = "nv-satellite-fabric-link"
    ethernetFeatures.EntityData.SegmentPath = "Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features"
    ethernetFeatures.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetFeatures.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetFeatures.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetFeatures.EntityData.Children = make(map[string]types.YChild)
    ethernetFeatures.EntityData.Children["cfm"] = types.YChild{"Cfm", &ethernetFeatures.Cfm}
    ethernetFeatures.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ethernetFeatures.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm
// CFM Satellite configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Continuity-Check Interval. The type is CfmCcmInterval.
    ContinuityCheckInterval interface{}

    // Maintenance Domain Level. The type is interface{} with range: 0..7.
    Level interface{}

    // Enable CFM on Satellite. The type is interface{}.
    Enable interface{}
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetEntityData() *types.CommonEntityData {
    cfm.EntityData.YFilter = cfm.YFilter
    cfm.EntityData.YangName = "cfm"
    cfm.EntityData.BundleName = "cisco_ios_xr"
    cfm.EntityData.ParentYangName = "ethernet-features"
    cfm.EntityData.SegmentPath = "cfm"
    cfm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cfm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cfm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cfm.EntityData.Children = make(map[string]types.YChild)
    cfm.EntityData.Leafs = make(map[string]types.YLeaf)
    cfm.EntityData.Leafs["continuity-check-interval"] = types.YLeaf{"ContinuityCheckInterval", cfm.ContinuityCheckInterval}
    cfm.EntityData.Leafs["level"] = types.YLeaf{"Level", cfm.Level}
    cfm.EntityData.Leafs["enable"] = types.YLeaf{"Enable", cfm.Enable}
    return &(cfm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization
// Frequency Synchronization satellite
// configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable Frequency Synchronization. The type is interface{}.
    Enable interface{}
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetEntityData() *types.CommonEntityData {
    frequencySynchronization.EntityData.YFilter = frequencySynchronization.YFilter
    frequencySynchronization.EntityData.YangName = "frequency-synchronization"
    frequencySynchronization.EntityData.BundleName = "cisco_ios_xr"
    frequencySynchronization.EntityData.ParentYangName = "nv-satellite-fabric-link"
    frequencySynchronization.EntityData.SegmentPath = "Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization"
    frequencySynchronization.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frequencySynchronization.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frequencySynchronization.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frequencySynchronization.EntityData.Children = make(map[string]types.YChild)
    frequencySynchronization.EntityData.Leafs = make(map[string]types.YLeaf)
    frequencySynchronization.EntityData.Leafs["enable"] = types.YLeaf{"Enable", frequencySynchronization.Enable}
    return &(frequencySynchronization.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "nv-satellite-fabric-link"
    qos.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = make(map[string]types.YChild)
    qos.EntityData.Children["output"] = types.YChild{"Output", &qos.Output}
    qos.EntityData.Children["input"] = types.YChild{"Input", &qos.Input}
    qos.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = make(map[string]types.YChild)
    output.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range output.ServicePolicy {
        output.EntityData.Children[types.GetSegmentPath(&output.ServicePolicy[i])] = types.YChild{"ServicePolicy", &output.ServicePolicy[i]}
    }
    output.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = make(map[string]types.YChild)
    input.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range input.ServicePolicy {
        input.EntityData.Children[types.GetSegmentPath(&input.ServicePolicy[i])] = types.YChild{"ServicePolicy", &input.ServicePolicy[i]}
    }
    input.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork
// Complex Network connection to one or more
// Satellites
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable. The type is interface{}.
    Enable interface{}

    // Connected Satellite table.
    Satellites InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites

    // Redundancy submode.
    Redundancy InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy
}

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetEntityData() *types.CommonEntityData {
    nvSatelliteFabricNetwork.EntityData.YFilter = nvSatelliteFabricNetwork.YFilter
    nvSatelliteFabricNetwork.EntityData.YangName = "nv-satellite-fabric-network"
    nvSatelliteFabricNetwork.EntityData.BundleName = "cisco_ios_xr"
    nvSatelliteFabricNetwork.EntityData.ParentYangName = "interface-configuration"
    nvSatelliteFabricNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network"
    nvSatelliteFabricNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nvSatelliteFabricNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nvSatelliteFabricNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nvSatelliteFabricNetwork.EntityData.Children = make(map[string]types.YChild)
    nvSatelliteFabricNetwork.EntityData.Children["satellites"] = types.YChild{"Satellites", &nvSatelliteFabricNetwork.Satellites}
    nvSatelliteFabricNetwork.EntityData.Children["redundancy"] = types.YChild{"Redundancy", &nvSatelliteFabricNetwork.Redundancy}
    nvSatelliteFabricNetwork.EntityData.Leafs = make(map[string]types.YLeaf)
    nvSatelliteFabricNetwork.EntityData.Leafs["enable"] = types.YLeaf{"Enable", nvSatelliteFabricNetwork.Enable}
    return &(nvSatelliteFabricNetwork.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites
// Connected Satellite table
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Connected Satellite. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite.
    Satellite []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos
}

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetEntityData() *types.CommonEntityData {
    satellites.EntityData.YFilter = satellites.YFilter
    satellites.EntityData.YangName = "satellites"
    satellites.EntityData.BundleName = "cisco_ios_xr"
    satellites.EntityData.ParentYangName = "nv-satellite-fabric-network"
    satellites.EntityData.SegmentPath = "satellites"
    satellites.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    satellites.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    satellites.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    satellites.EntityData.Children = make(map[string]types.YChild)
    satellites.EntityData.Children["satellite"] = types.YChild{"Satellite", nil}
    for i := range satellites.Satellite {
        satellites.EntityData.Children[types.GetSegmentPath(&satellites.Satellite[i])] = types.YChild{"Satellite", &satellites.Satellite[i]}
    }
    satellites.EntityData.Children["Cisco-IOS-XR-qos-ma-sat-cfg:qos"] = types.YChild{"Qos", &satellites.Qos}
    satellites.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(satellites.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite
// Connected Satellite
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Satellite ID. The type is interface{} with range:
    // 100..65534.
    SatelliteId interface{}

    // Enable. The type is interface{}.
    Enable interface{}

    // Remote Ports table.
    RemotePorts InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts
}

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetEntityData() *types.CommonEntityData {
    satellite.EntityData.YFilter = satellite.YFilter
    satellite.EntityData.YangName = "satellite"
    satellite.EntityData.BundleName = "cisco_ios_xr"
    satellite.EntityData.ParentYangName = "satellites"
    satellite.EntityData.SegmentPath = "satellite" + "[satellite-id='" + fmt.Sprintf("%v", satellite.SatelliteId) + "']"
    satellite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    satellite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    satellite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    satellite.EntityData.Children = make(map[string]types.YChild)
    satellite.EntityData.Children["remote-ports"] = types.YChild{"RemotePorts", &satellite.RemotePorts}
    satellite.EntityData.Leafs = make(map[string]types.YLeaf)
    satellite.EntityData.Leafs["satellite-id"] = types.YLeaf{"SatelliteId", satellite.SatelliteId}
    satellite.EntityData.Leafs["enable"] = types.YLeaf{"Enable", satellite.Enable}
    return &(satellite.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts
// Remote Ports table
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Ports. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort.
    RemotePort []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetEntityData() *types.CommonEntityData {
    remotePorts.EntityData.YFilter = remotePorts.YFilter
    remotePorts.EntityData.YangName = "remote-ports"
    remotePorts.EntityData.BundleName = "cisco_ios_xr"
    remotePorts.EntityData.ParentYangName = "satellite"
    remotePorts.EntityData.SegmentPath = "remote-ports"
    remotePorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePorts.EntityData.Children = make(map[string]types.YChild)
    remotePorts.EntityData.Children["remote-port"] = types.YChild{"RemotePort", nil}
    for i := range remotePorts.RemotePort {
        remotePorts.EntityData.Children[types.GetSegmentPath(&remotePorts.RemotePort[i])] = types.YChild{"RemotePort", &remotePorts.RemotePort[i]}
    }
    remotePorts.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(remotePorts.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort
// Remote Ports
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Port type. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    PortType interface{}

    // This attribute is a key. Slot. The type is interface{} with range: 0..8.
    Slot interface{}

    // This attribute is a key. Sub slot. The type is interface{} with range:
    // 0..8.
    SubSlot interface{}

    // Port range. The type is string. This attribute is mandatory.
    PortRange interface{}
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetEntityData() *types.CommonEntityData {
    remotePort.EntityData.YFilter = remotePort.YFilter
    remotePort.EntityData.YangName = "remote-port"
    remotePort.EntityData.BundleName = "cisco_ios_xr"
    remotePort.EntityData.ParentYangName = "remote-ports"
    remotePort.EntityData.SegmentPath = "remote-port" + "[port-type='" + fmt.Sprintf("%v", remotePort.PortType) + "']" + "[slot='" + fmt.Sprintf("%v", remotePort.Slot) + "']" + "[sub-slot='" + fmt.Sprintf("%v", remotePort.SubSlot) + "']"
    remotePort.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePort.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePort.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePort.EntityData.Children = make(map[string]types.YChild)
    remotePort.EntityData.Leafs = make(map[string]types.YLeaf)
    remotePort.EntityData.Leafs["port-type"] = types.YLeaf{"PortType", remotePort.PortType}
    remotePort.EntityData.Leafs["slot"] = types.YLeaf{"Slot", remotePort.Slot}
    remotePort.EntityData.Leafs["sub-slot"] = types.YLeaf{"SubSlot", remotePort.SubSlot}
    remotePort.EntityData.Leafs["port-range"] = types.YLeaf{"PortRange", remotePort.PortRange}
    return &(remotePort.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "satellites"
    qos.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = make(map[string]types.YChild)
    qos.EntityData.Children["output"] = types.YChild{"Output", &qos.Output}
    qos.EntityData.Children["input"] = types.YChild{"Input", &qos.Input}
    qos.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = make(map[string]types.YChild)
    output.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range output.ServicePolicy {
        output.EntityData.Children[types.GetSegmentPath(&output.ServicePolicy[i])] = types.YChild{"ServicePolicy", &output.ServicePolicy[i]}
    }
    output.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = make(map[string]types.YChild)
    input.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range input.ServicePolicy {
        input.EntityData.Children[types.GetSegmentPath(&input.ServicePolicy[i])] = types.YChild{"ServicePolicy", &input.ServicePolicy[i]}
    }
    input.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy
// Redundancy submode
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Links the satellite fabric to the given ICCP group. The type is interface{}
    // with range: 0..4294967295.
    IccpGroup interface{}

    // Mininum number of active links preferred. The type is interface{} with
    // range: 1..64.
    MinimumPreferredLinks interface{}
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetEntityData() *types.CommonEntityData {
    redundancy.EntityData.YFilter = redundancy.YFilter
    redundancy.EntityData.YangName = "redundancy"
    redundancy.EntityData.BundleName = "cisco_ios_xr"
    redundancy.EntityData.ParentYangName = "nv-satellite-fabric-network"
    redundancy.EntityData.SegmentPath = "redundancy"
    redundancy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redundancy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redundancy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redundancy.EntityData.Children = make(map[string]types.YChild)
    redundancy.EntityData.Leafs = make(map[string]types.YLeaf)
    redundancy.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", redundancy.IccpGroup}
    redundancy.EntityData.Leafs["minimum-preferred-links"] = types.YLeaf{"MinimumPreferredLinks", redundancy.MinimumPreferredLinks}
    return &(redundancy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lldp
// Disable LLDP TX or RX
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Lldp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // enter LLDP interface submode. The type is bool. This attribute is
    // mandatory.
    LldpIntfEnter interface{}

    // Disable LLDP TX.
    Transmit InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit

    // Disable LLDP RX.
    Receive InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive
}

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetEntityData() *types.CommonEntityData {
    lldp.EntityData.YFilter = lldp.YFilter
    lldp.EntityData.YangName = "lldp"
    lldp.EntityData.BundleName = "cisco_ios_xr"
    lldp.EntityData.ParentYangName = "interface-configuration"
    lldp.EntityData.SegmentPath = "Cisco-IOS-XR-ethernet-lldp-cfg:lldp"
    lldp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lldp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lldp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lldp.EntityData.Children = make(map[string]types.YChild)
    lldp.EntityData.Children["transmit"] = types.YChild{"Transmit", &lldp.Transmit}
    lldp.EntityData.Children["receive"] = types.YChild{"Receive", &lldp.Receive}
    lldp.EntityData.Leafs = make(map[string]types.YLeaf)
    lldp.EntityData.Leafs["lldp-intf-enter"] = types.YLeaf{"LldpIntfEnter", lldp.LldpIntfEnter}
    return &(lldp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit
// Disable LLDP TX
type InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // disable LLDP TX. The type is bool. The default value is false.
    Disable interface{}
}

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetEntityData() *types.CommonEntityData {
    transmit.EntityData.YFilter = transmit.YFilter
    transmit.EntityData.YangName = "transmit"
    transmit.EntityData.BundleName = "cisco_ios_xr"
    transmit.EntityData.ParentYangName = "lldp"
    transmit.EntityData.SegmentPath = "transmit"
    transmit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transmit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transmit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transmit.EntityData.Children = make(map[string]types.YChild)
    transmit.EntityData.Leafs = make(map[string]types.YLeaf)
    transmit.EntityData.Leafs["disable"] = types.YLeaf{"Disable", transmit.Disable}
    return &(transmit.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive
// Disable LLDP RX
type InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // disable LLDP RX. The type is bool. The default value is false.
    Disable interface{}
}

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetEntityData() *types.CommonEntityData {
    receive.EntityData.YFilter = receive.YFilter
    receive.EntityData.YangName = "receive"
    receive.EntityData.BundleName = "cisco_ios_xr"
    receive.EntityData.ParentYangName = "lldp"
    receive.EntityData.SegmentPath = "receive"
    receive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receive.EntityData.Children = make(map[string]types.YChild)
    receive.EntityData.Leafs = make(map[string]types.YLeaf)
    receive.EntityData.Leafs["disable"] = types.YLeaf{"Disable", receive.Disable}
    return &(receive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions
// Monitor Session container for this source
// interface
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular class of Monitor Session. The type is slice
    // of
    // InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession.
    SpanMonitorSession []InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetEntityData() *types.CommonEntityData {
    spanMonitorSessions.EntityData.YFilter = spanMonitorSessions.YFilter
    spanMonitorSessions.EntityData.YangName = "span-monitor-sessions"
    spanMonitorSessions.EntityData.BundleName = "cisco_ios_xr"
    spanMonitorSessions.EntityData.ParentYangName = "interface-configuration"
    spanMonitorSessions.EntityData.SegmentPath = "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"
    spanMonitorSessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spanMonitorSessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spanMonitorSessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spanMonitorSessions.EntityData.Children = make(map[string]types.YChild)
    spanMonitorSessions.EntityData.Children["span-monitor-session"] = types.YChild{"SpanMonitorSession", nil}
    for i := range spanMonitorSessions.SpanMonitorSession {
        spanMonitorSessions.EntityData.Children[types.GetSegmentPath(&spanMonitorSessions.SpanMonitorSession[i])] = types.YChild{"SpanMonitorSession", &spanMonitorSessions.SpanMonitorSession[i]}
    }
    spanMonitorSessions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(spanMonitorSessions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession
// Configuration for a particular class of Monitor
// Session
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Session Class. The type is SpanSessionClass.
    SessionClass interface{}

    // Mirror a specified number of bytes from start of packet. The type is
    // interface{} with range: 1..10000. Units are byte.
    MirrorFirst interface{}

    // Specify the mirror interval. The type is SpanMirrorInterval.
    MirrorInterval interface{}

    // Attach the interface to a Monitor Session.
    Attachment InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment

    // Enable ACL matching for traffic mirroring.
    Acl InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetEntityData() *types.CommonEntityData {
    spanMonitorSession.EntityData.YFilter = spanMonitorSession.YFilter
    spanMonitorSession.EntityData.YangName = "span-monitor-session"
    spanMonitorSession.EntityData.BundleName = "cisco_ios_xr"
    spanMonitorSession.EntityData.ParentYangName = "span-monitor-sessions"
    spanMonitorSession.EntityData.SegmentPath = "span-monitor-session" + "[session-class='" + fmt.Sprintf("%v", spanMonitorSession.SessionClass) + "']"
    spanMonitorSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spanMonitorSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spanMonitorSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spanMonitorSession.EntityData.Children = make(map[string]types.YChild)
    spanMonitorSession.EntityData.Children["attachment"] = types.YChild{"Attachment", &spanMonitorSession.Attachment}
    spanMonitorSession.EntityData.Children["acl"] = types.YChild{"Acl", &spanMonitorSession.Acl}
    spanMonitorSession.EntityData.Leafs = make(map[string]types.YLeaf)
    spanMonitorSession.EntityData.Leafs["session-class"] = types.YLeaf{"SessionClass", spanMonitorSession.SessionClass}
    spanMonitorSession.EntityData.Leafs["mirror-first"] = types.YLeaf{"MirrorFirst", spanMonitorSession.MirrorFirst}
    spanMonitorSession.EntityData.Leafs["mirror-interval"] = types.YLeaf{"MirrorInterval", spanMonitorSession.MirrorInterval}
    return &(spanMonitorSession.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment
// Attach the interface to a Monitor Session
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session Name. The type is string with length: 1..79. This attribute is
    // mandatory.
    SessionName interface{}

    // Specify the direction of traffic to replicate (optional). The type is
    // SpanTrafficDirection.
    Direction interface{}

    // Enable port level traffic mirroring. The type is interface{}.
    PortLevelEnable interface{}
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetEntityData() *types.CommonEntityData {
    attachment.EntityData.YFilter = attachment.YFilter
    attachment.EntityData.YangName = "attachment"
    attachment.EntityData.BundleName = "cisco_ios_xr"
    attachment.EntityData.ParentYangName = "span-monitor-session"
    attachment.EntityData.SegmentPath = "attachment"
    attachment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attachment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attachment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attachment.EntityData.Children = make(map[string]types.YChild)
    attachment.EntityData.Leafs = make(map[string]types.YLeaf)
    attachment.EntityData.Leafs["session-name"] = types.YLeaf{"SessionName", attachment.SessionName}
    attachment.EntityData.Leafs["direction"] = types.YLeaf{"Direction", attachment.Direction}
    attachment.EntityData.Leafs["port-level-enable"] = types.YLeaf{"PortLevelEnable", attachment.PortLevelEnable}
    return &(attachment.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl
// Enable ACL matching for traffic mirroring
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ACL. The type is interface{}. This attribute is mandatory.
    AclEnable interface{}

    // ACL Name. The type is string with length: 1..80.
    AclName interface{}
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetEntityData() *types.CommonEntityData {
    acl.EntityData.YFilter = acl.YFilter
    acl.EntityData.YangName = "acl"
    acl.EntityData.BundleName = "cisco_ios_xr"
    acl.EntityData.ParentYangName = "span-monitor-session"
    acl.EntityData.SegmentPath = "acl"
    acl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    acl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    acl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    acl.EntityData.Children = make(map[string]types.YChild)
    acl.EntityData.Leafs = make(map[string]types.YLeaf)
    acl.EntityData.Leafs["acl-enable"] = types.YLeaf{"AclEnable", acl.AclEnable}
    acl.EntityData.Leafs["acl-name"] = types.YLeaf{"AclName", acl.AclName}
    return &(acl.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization
// Frequency Synchronization interface
// configuration
type InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable SSM on this source. The type is interface{}.
    SsmDisable interface{}

    // Set the time-of-day priority of this source. The type is interface{} with
    // range: 1..254. The default value is 100.
    TimeOfDayPriority interface{}

    // Assign this source as a selection input. The type is interface{}.
    SelectionInput interface{}

    // Enable Frequency Synchronization. The type is interface{}.
    Enable interface{}

    // Set the priority of this source. The type is interface{} with range:
    // 1..254. The default value is 100.
    Priority interface{}

    // Set the wait-to-restore time for this source. The type is interface{} with
    // range: 0..12. The default value is 5.
    WaitToRestoreTime interface{}

    // Set the input quality level.
    InputQualityLevel InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_InputQualityLevel

    // Set the output quality level.
    OutputQualityLevel InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_OutputQualityLevel
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization) GetEntityData() *types.CommonEntityData {
    frequencySynchronization.EntityData.YFilter = frequencySynchronization.YFilter
    frequencySynchronization.EntityData.YangName = "frequency-synchronization"
    frequencySynchronization.EntityData.BundleName = "cisco_ios_xr"
    frequencySynchronization.EntityData.ParentYangName = "interface-configuration"
    frequencySynchronization.EntityData.SegmentPath = "Cisco-IOS-XR-freqsync-cfg:frequency-synchronization"
    frequencySynchronization.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frequencySynchronization.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frequencySynchronization.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frequencySynchronization.EntityData.Children = make(map[string]types.YChild)
    frequencySynchronization.EntityData.Children["input-quality-level"] = types.YChild{"InputQualityLevel", &frequencySynchronization.InputQualityLevel}
    frequencySynchronization.EntityData.Children["output-quality-level"] = types.YChild{"OutputQualityLevel", &frequencySynchronization.OutputQualityLevel}
    frequencySynchronization.EntityData.Leafs = make(map[string]types.YLeaf)
    frequencySynchronization.EntityData.Leafs["ssm-disable"] = types.YLeaf{"SsmDisable", frequencySynchronization.SsmDisable}
    frequencySynchronization.EntityData.Leafs["time-of-day-priority"] = types.YLeaf{"TimeOfDayPriority", frequencySynchronization.TimeOfDayPriority}
    frequencySynchronization.EntityData.Leafs["selection-input"] = types.YLeaf{"SelectionInput", frequencySynchronization.SelectionInput}
    frequencySynchronization.EntityData.Leafs["enable"] = types.YLeaf{"Enable", frequencySynchronization.Enable}
    frequencySynchronization.EntityData.Leafs["priority"] = types.YLeaf{"Priority", frequencySynchronization.Priority}
    frequencySynchronization.EntityData.Leafs["wait-to-restore-time"] = types.YLeaf{"WaitToRestoreTime", frequencySynchronization.WaitToRestoreTime}
    return &(frequencySynchronization.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_InputQualityLevel
// Set the input quality level
type InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_InputQualityLevel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Quality level option. The type is FsyncQlOption.
    QualityLevelOption interface{}

    // Exact quality level value. The type is FsyncQlValue.
    ExactQualityLevelValue interface{}

    // Minimum quality level value. The type is FsyncQlValue.
    MinQualityLevelValue interface{}

    // Maximum quality level value. The type is FsyncQlValue.
    MaxQualityLevelValue interface{}
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_InputQualityLevel) GetEntityData() *types.CommonEntityData {
    inputQualityLevel.EntityData.YFilter = inputQualityLevel.YFilter
    inputQualityLevel.EntityData.YangName = "input-quality-level"
    inputQualityLevel.EntityData.BundleName = "cisco_ios_xr"
    inputQualityLevel.EntityData.ParentYangName = "frequency-synchronization"
    inputQualityLevel.EntityData.SegmentPath = "input-quality-level"
    inputQualityLevel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inputQualityLevel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inputQualityLevel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inputQualityLevel.EntityData.Children = make(map[string]types.YChild)
    inputQualityLevel.EntityData.Leafs = make(map[string]types.YLeaf)
    inputQualityLevel.EntityData.Leafs["quality-level-option"] = types.YLeaf{"QualityLevelOption", inputQualityLevel.QualityLevelOption}
    inputQualityLevel.EntityData.Leafs["exact-quality-level-value"] = types.YLeaf{"ExactQualityLevelValue", inputQualityLevel.ExactQualityLevelValue}
    inputQualityLevel.EntityData.Leafs["min-quality-level-value"] = types.YLeaf{"MinQualityLevelValue", inputQualityLevel.MinQualityLevelValue}
    inputQualityLevel.EntityData.Leafs["max-quality-level-value"] = types.YLeaf{"MaxQualityLevelValue", inputQualityLevel.MaxQualityLevelValue}
    return &(inputQualityLevel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_OutputQualityLevel
// Set the output quality level
type InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_OutputQualityLevel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Quality level option. The type is FsyncQlOption.
    QualityLevelOption interface{}

    // Exact quality level value. The type is FsyncQlValue.
    ExactQualityLevelValue interface{}

    // Minimum quality level value. The type is FsyncQlValue.
    MinQualityLevelValue interface{}

    // Maximum quality level value. The type is FsyncQlValue.
    MaxQualityLevelValue interface{}
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_OutputQualityLevel) GetEntityData() *types.CommonEntityData {
    outputQualityLevel.EntityData.YFilter = outputQualityLevel.YFilter
    outputQualityLevel.EntityData.YangName = "output-quality-level"
    outputQualityLevel.EntityData.BundleName = "cisco_ios_xr"
    outputQualityLevel.EntityData.ParentYangName = "frequency-synchronization"
    outputQualityLevel.EntityData.SegmentPath = "output-quality-level"
    outputQualityLevel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outputQualityLevel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outputQualityLevel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outputQualityLevel.EntityData.Children = make(map[string]types.YChild)
    outputQualityLevel.EntityData.Leafs = make(map[string]types.YLeaf)
    outputQualityLevel.EntityData.Leafs["quality-level-option"] = types.YLeaf{"QualityLevelOption", outputQualityLevel.QualityLevelOption}
    outputQualityLevel.EntityData.Leafs["exact-quality-level-value"] = types.YLeaf{"ExactQualityLevelValue", outputQualityLevel.ExactQualityLevelValue}
    outputQualityLevel.EntityData.Leafs["min-quality-level-value"] = types.YLeaf{"MinQualityLevelValue", outputQualityLevel.MinQualityLevelValue}
    outputQualityLevel.EntityData.Leafs["max-quality-level-value"] = types.YLeaf{"MaxQualityLevelValue", outputQualityLevel.MaxQualityLevelValue}
    return &(outputQualityLevel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_ServicePolicies
// Interface control subscriber policy
// configuration
type InterfaceConfigurations_InterfaceConfiguration_ServicePolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy to be applied to access interface  for subscribers. The type
    // is slice of
    // InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy
}

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetEntityData() *types.CommonEntityData {
    servicePolicies.EntityData.YFilter = servicePolicies.YFilter
    servicePolicies.EntityData.YangName = "service-policies"
    servicePolicies.EntityData.BundleName = "cisco_ios_xr"
    servicePolicies.EntityData.ParentYangName = "interface-configuration"
    servicePolicies.EntityData.SegmentPath = "Cisco-IOS-XR-iedge4710-cfg:service-policies"
    servicePolicies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicies.EntityData.Children = make(map[string]types.YChild)
    servicePolicies.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range servicePolicies.ServicePolicy {
        servicePolicies.EntityData.Children[types.GetSegmentPath(&servicePolicies.ServicePolicy[i])] = types.YChild{"ServicePolicy", &servicePolicies.ServicePolicy[i]}
    }
    servicePolicies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(servicePolicies.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy
// Service policy to be applied to access
// interface  for subscribers
type InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 1..63.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "service-policies"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Afs
// Per-address-family and topology configuration
type InterfaceConfigurations_InterfaceConfiguration_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The presence of this object enables the givenaddress-family and topology on
    // the interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Afs_Af.
    Af []InterfaceConfigurations_InterfaceConfiguration_Afs_Af

    // The presence of this object enables the givenaddress-family and topology on
    // the interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName.
    AfTopologyName []InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName
}

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "interface-configuration"
    afs.EntityData.SegmentPath = "Cisco-IOS-XR-infra-rsi-cfg:afs"
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = make(map[string]types.YChild)
    afs.EntityData.Children["af"] = types.YChild{"Af", nil}
    for i := range afs.Af {
        afs.EntityData.Children[types.GetSegmentPath(&afs.Af[i])] = types.YChild{"Af", &afs.Af[i]}
    }
    afs.EntityData.Children["af-topology-name"] = types.YChild{"AfTopologyName", nil}
    for i := range afs.AfTopologyName {
        afs.EntityData.Children[types.GetSegmentPath(&afs.AfTopologyName[i])] = types.YChild{"AfTopologyName", &afs.AfTopologyName[i]}
    }
    afs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(afs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Afs_Af
// The presence of this object enables the
// givenaddress-family and topology on the
// interface.
type InterfaceConfigurations_InterfaceConfiguration_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Address-family. The type is VrfAddressFamily.
    AfName interface{}

    // This attribute is a key. Sub-address-family. The type is
    // VrfSubAddressFamily.
    SafName interface{}
}

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + "[af-name='" + fmt.Sprintf("%v", af.AfName) + "']" + "[saf-name='" + fmt.Sprintf("%v", af.SafName) + "']"
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = make(map[string]types.YChild)
    af.EntityData.Leafs = make(map[string]types.YLeaf)
    af.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", af.AfName}
    af.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", af.SafName}
    return &(af.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName
// The presence of this object enables the
// givenaddress-family and topology on the
// interface.
type InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Topology name. The type is string with length:
    // 1..32.
    TopologyName interface{}

    // This attribute is a key. Address-family. The type is VrfAddressFamily.
    AfName interface{}

    // This attribute is a key. Sub-address-family. The type is
    // VrfSubAddressFamily.
    SafName interface{}
}

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetEntityData() *types.CommonEntityData {
    afTopologyName.EntityData.YFilter = afTopologyName.YFilter
    afTopologyName.EntityData.YangName = "af-topology-name"
    afTopologyName.EntityData.BundleName = "cisco_ios_xr"
    afTopologyName.EntityData.ParentYangName = "afs"
    afTopologyName.EntityData.SegmentPath = "af-topology-name" + "[topology-name='" + fmt.Sprintf("%v", afTopologyName.TopologyName) + "']" + "[af-name='" + fmt.Sprintf("%v", afTopologyName.AfName) + "']" + "[saf-name='" + fmt.Sprintf("%v", afTopologyName.SafName) + "']"
    afTopologyName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afTopologyName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afTopologyName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afTopologyName.EntityData.Children = make(map[string]types.YChild)
    afTopologyName.EntityData.Leafs = make(map[string]types.YLeaf)
    afTopologyName.EntityData.Leafs["topology-name"] = types.YLeaf{"TopologyName", afTopologyName.TopologyName}
    afTopologyName.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", afTopologyName.AfName}
    afTopologyName.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", afTopologyName.SafName}
    return &(afTopologyName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Statistics
// Per-interface statistics configuration
type InterfaceConfigurations_InterfaceConfiguration_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify interval for load calculation for an interface. The type is
    // interface{} with range: 0..600. The default value is 300.
    LoadInterval interface{}
}

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "interface-configuration"
    statistics.EntityData.SegmentPath = "Cisco-IOS-XR-infra-statsd-cfg:statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    statistics.EntityData.Leafs["load-interval"] = types.YLeaf{"LoadInterval", statistics.LoadInterval}
    return &(statistics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter
// IPv6 Packet Filtering configuration for the
// interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Packet filter to be applied to inbound packets.
    Inbound InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound

    // IPv6 Packet filter to be applied to outbound packets.
    Outbound InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound
}

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetEntityData() *types.CommonEntityData {
    ipv6PacketFilter.EntityData.YFilter = ipv6PacketFilter.YFilter
    ipv6PacketFilter.EntityData.YangName = "ipv6-packet-filter"
    ipv6PacketFilter.EntityData.BundleName = "cisco_ios_xr"
    ipv6PacketFilter.EntityData.ParentYangName = "interface-configuration"
    ipv6PacketFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter"
    ipv6PacketFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6PacketFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6PacketFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6PacketFilter.EntityData.Children = make(map[string]types.YChild)
    ipv6PacketFilter.EntityData.Children["inbound"] = types.YChild{"Inbound", &ipv6PacketFilter.Inbound}
    ipv6PacketFilter.EntityData.Children["outbound"] = types.YChild{"Outbound", &ipv6PacketFilter.Outbound}
    ipv6PacketFilter.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6PacketFilter.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound
// IPv6 Packet filter to be applied to inbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reserved for backward compatibility. IPv6 Packet Filter Name to be applied
    // to Inbound packets, ACL providing HW optimization when applied on multiple
    // interfaces. NOTE: This parameter is mandatory if 'Name' is not specified.
    // The type is string with length: 1..65.
    CommonAclName interface{}

    // Reserved for backward compatibility. IPv6 Packet Filter Name to be applied
    // to Inbound  NOTE: This parameter is mandatory if 'CommonACLName' is not
    // specified. The type is string with length: 1..65.
    Name interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. NOTE: InterfaceStatistics is
    // allowed only if Name is specified. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv6 Packet Filter Names to be applied to Inbound packets. The
    // type is slice of string with length: 1..65.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetEntityData() *types.CommonEntityData {
    inbound.EntityData.YFilter = inbound.YFilter
    inbound.EntityData.YangName = "inbound"
    inbound.EntityData.BundleName = "cisco_ios_xr"
    inbound.EntityData.ParentYangName = "ipv6-packet-filter"
    inbound.EntityData.SegmentPath = "inbound"
    inbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inbound.EntityData.Children = make(map[string]types.YChild)
    inbound.EntityData.Leafs = make(map[string]types.YLeaf)
    inbound.EntityData.Leafs["common-acl-name"] = types.YLeaf{"CommonAclName", inbound.CommonAclName}
    inbound.EntityData.Leafs["name"] = types.YLeaf{"Name", inbound.Name}
    inbound.EntityData.Leafs["interface-statistics"] = types.YLeaf{"InterfaceStatistics", inbound.InterfaceStatistics}
    inbound.EntityData.Leafs["compression-level"] = types.YLeaf{"CompressionLevel", inbound.CompressionLevel}
    inbound.EntityData.Leafs["acl-name-array"] = types.YLeaf{"AclNameArray", inbound.AclNameArray}
    inbound.EntityData.Leafs["is-common-array"] = types.YLeaf{"IsCommonArray", inbound.IsCommonArray}
    return &(inbound.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound
// IPv6 Packet filter to be applied to outbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reserved.  Error if specified. The type is string with length: 1..65.
    DoNotUse interface{}

    // Reserved for backward compatibility. IPv6 Packet Filter Name to be applied
    // to Outbound  packets. The type is string with length: 1..65.
    Name interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv6 Packet Filter Names to be applied to Inbound packets. The
    // type is slice of string with length: 1..65.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetEntityData() *types.CommonEntityData {
    outbound.EntityData.YFilter = outbound.YFilter
    outbound.EntityData.YangName = "outbound"
    outbound.EntityData.BundleName = "cisco_ios_xr"
    outbound.EntityData.ParentYangName = "ipv6-packet-filter"
    outbound.EntityData.SegmentPath = "outbound"
    outbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outbound.EntityData.Children = make(map[string]types.YChild)
    outbound.EntityData.Leafs = make(map[string]types.YLeaf)
    outbound.EntityData.Leafs["do-not-use"] = types.YLeaf{"DoNotUse", outbound.DoNotUse}
    outbound.EntityData.Leafs["name"] = types.YLeaf{"Name", outbound.Name}
    outbound.EntityData.Leafs["interface-statistics"] = types.YLeaf{"InterfaceStatistics", outbound.InterfaceStatistics}
    outbound.EntityData.Leafs["compression-level"] = types.YLeaf{"CompressionLevel", outbound.CompressionLevel}
    outbound.EntityData.Leafs["acl-name-array"] = types.YLeaf{"AclNameArray", outbound.AclNameArray}
    outbound.EntityData.Leafs["is-common-array"] = types.YLeaf{"IsCommonArray", outbound.IsCommonArray}
    return &(outbound.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter
// ES Packet Filtering configuration for the
// interface
type InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of filter to be applied to outbound packets. The type is string with
    // length: 1..65.
    Outbound interface{}

    // Name of filter to be applied to inbound packets. The type is string with
    // length: 1..65.
    Inbound interface{}
}

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetEntityData() *types.CommonEntityData {
    esPacketFilter.EntityData.YFilter = esPacketFilter.YFilter
    esPacketFilter.EntityData.YangName = "es-packet-filter"
    esPacketFilter.EntityData.BundleName = "cisco_ios_xr"
    esPacketFilter.EntityData.ParentYangName = "interface-configuration"
    esPacketFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter"
    esPacketFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esPacketFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esPacketFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esPacketFilter.EntityData.Children = make(map[string]types.YChild)
    esPacketFilter.EntityData.Leafs = make(map[string]types.YLeaf)
    esPacketFilter.EntityData.Leafs["outbound"] = types.YLeaf{"Outbound", esPacketFilter.Outbound}
    esPacketFilter.EntityData.Leafs["inbound"] = types.YLeaf{"Inbound", esPacketFilter.Inbound}
    return &(esPacketFilter.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter
// IPv4 Packet Filtering configuration for the
// interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 Packet filter to be applied to outbound packets.
    Outbound InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound

    // IPv4 Packet filter to be applied to inbound packets.
    Inbound InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound
}

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetEntityData() *types.CommonEntityData {
    ipv4PacketFilter.EntityData.YFilter = ipv4PacketFilter.YFilter
    ipv4PacketFilter.EntityData.YangName = "ipv4-packet-filter"
    ipv4PacketFilter.EntityData.BundleName = "cisco_ios_xr"
    ipv4PacketFilter.EntityData.ParentYangName = "interface-configuration"
    ipv4PacketFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter"
    ipv4PacketFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4PacketFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4PacketFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4PacketFilter.EntityData.Children = make(map[string]types.YChild)
    ipv4PacketFilter.EntityData.Children["outbound"] = types.YChild{"Outbound", &ipv4PacketFilter.Outbound}
    ipv4PacketFilter.EntityData.Children["inbound"] = types.YChild{"Inbound", &ipv4PacketFilter.Inbound}
    ipv4PacketFilter.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4PacketFilter.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound
// IPv4 Packet filter to be applied to outbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reserved.  Error if specified. The type is string with length: 1..65.
    DoNotUse interface{}

    // Reserved for backward compatibility. IPv4 Packet Filter Name to be applied
    // to Outbound packets NOTE: This parameter is mandatory if 'CommonACLName' is
    // not specified. The type is string with length: 1..65.
    Name interface{}

    // True if packets hitting the ACL should be counted in the hardware.  The
    // default is not to count them. The type is interface{}.
    HardwareCount interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv4 Packet Filter Names to be applied to Outbound packets. The
    // type is slice of string with length: 1..65.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetEntityData() *types.CommonEntityData {
    outbound.EntityData.YFilter = outbound.YFilter
    outbound.EntityData.YangName = "outbound"
    outbound.EntityData.BundleName = "cisco_ios_xr"
    outbound.EntityData.ParentYangName = "ipv4-packet-filter"
    outbound.EntityData.SegmentPath = "outbound"
    outbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outbound.EntityData.Children = make(map[string]types.YChild)
    outbound.EntityData.Leafs = make(map[string]types.YLeaf)
    outbound.EntityData.Leafs["do-not-use"] = types.YLeaf{"DoNotUse", outbound.DoNotUse}
    outbound.EntityData.Leafs["name"] = types.YLeaf{"Name", outbound.Name}
    outbound.EntityData.Leafs["hardware-count"] = types.YLeaf{"HardwareCount", outbound.HardwareCount}
    outbound.EntityData.Leafs["interface-statistics"] = types.YLeaf{"InterfaceStatistics", outbound.InterfaceStatistics}
    outbound.EntityData.Leafs["compression-level"] = types.YLeaf{"CompressionLevel", outbound.CompressionLevel}
    outbound.EntityData.Leafs["acl-name-array"] = types.YLeaf{"AclNameArray", outbound.AclNameArray}
    outbound.EntityData.Leafs["is-common-array"] = types.YLeaf{"IsCommonArray", outbound.IsCommonArray}
    return &(outbound.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound
// IPv4 Packet filter to be applied to inbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reserved for backward compatibility. IPv4 Packet Filter Name to be applied
    // to Inbound packets, ACL providing HW optimization when applied on multiple
    // interfaces. NOTE: This parameter is mandatory if 'Name' is not specified.
    // The type is string with length: 1..65.
    CommonAclName interface{}

    // Reserved for backward compatibility. IPv4 Packet Filter Name to be applied
    // to Inbound packets NOTE: This parameter is mandatory if 'CommonACLName' is
    // not specified. The type is string with length: 1..65.
    Name interface{}

    // True if packets hitting the ACL should be counted in the hardware.  The
    // default is not to count them. NOTE: HardwareCount is allowed only if Name
    // is specified. The type is interface{}.
    HardwareCount interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. NOTE: InterfaceStatistics is
    // allowed only if Name is specified. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv4 Packet Filter Names to be applied to Inbound packets. The
    // type is slice of string with length: 1..65.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetEntityData() *types.CommonEntityData {
    inbound.EntityData.YFilter = inbound.YFilter
    inbound.EntityData.YangName = "inbound"
    inbound.EntityData.BundleName = "cisco_ios_xr"
    inbound.EntityData.ParentYangName = "ipv4-packet-filter"
    inbound.EntityData.SegmentPath = "inbound"
    inbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inbound.EntityData.Children = make(map[string]types.YChild)
    inbound.EntityData.Leafs = make(map[string]types.YLeaf)
    inbound.EntityData.Leafs["common-acl-name"] = types.YLeaf{"CommonAclName", inbound.CommonAclName}
    inbound.EntityData.Leafs["name"] = types.YLeaf{"Name", inbound.Name}
    inbound.EntityData.Leafs["hardware-count"] = types.YLeaf{"HardwareCount", inbound.HardwareCount}
    inbound.EntityData.Leafs["interface-statistics"] = types.YLeaf{"InterfaceStatistics", inbound.InterfaceStatistics}
    inbound.EntityData.Leafs["compression-level"] = types.YLeaf{"CompressionLevel", inbound.CompressionLevel}
    inbound.EntityData.Leafs["acl-name-array"] = types.YLeaf{"AclNameArray", inbound.AclNameArray}
    inbound.EntityData.Leafs["is-common-array"] = types.YLeaf{"IsCommonArray", inbound.IsCommonArray}
    return &(inbound.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs
// Direct-Attached Gateway Redundancy configuration
type InterfaceConfigurations_InterfaceConfiguration_Dagrs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The DAGR entry being configured. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr.
    Dagr []InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr
}

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetEntityData() *types.CommonEntityData {
    dagrs.EntityData.YFilter = dagrs.YFilter
    dagrs.EntityData.YangName = "dagrs"
    dagrs.EntityData.BundleName = "cisco_ios_xr"
    dagrs.EntityData.ParentYangName = "interface-configuration"
    dagrs.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-arp-cfg:dagrs"
    dagrs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dagrs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dagrs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dagrs.EntityData.Children = make(map[string]types.YChild)
    dagrs.EntityData.Children["dagr"] = types.YChild{"Dagr", nil}
    for i := range dagrs.Dagr {
        dagrs.EntityData.Children[types.GetSegmentPath(&dagrs.Dagr[i])] = types.YChild{"Dagr", &dagrs.Dagr[i]}
    }
    dagrs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(dagrs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr
// The DAGR entry being configured
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. DAGR Peer IPv4 address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpAddr interface{}

    // DAGR Group Enter item. The type is interface{}.
    Enter interface{}

    // DAGR Submode configuration.
    Sub InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub
}

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetEntityData() *types.CommonEntityData {
    dagr.EntityData.YFilter = dagr.YFilter
    dagr.EntityData.YangName = "dagr"
    dagr.EntityData.BundleName = "cisco_ios_xr"
    dagr.EntityData.ParentYangName = "dagrs"
    dagr.EntityData.SegmentPath = "dagr" + "[ip-addr='" + fmt.Sprintf("%v", dagr.IpAddr) + "']"
    dagr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dagr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dagr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dagr.EntityData.Children = make(map[string]types.YChild)
    dagr.EntityData.Children["sub"] = types.YChild{"Sub", &dagr.Sub}
    dagr.EntityData.Leafs = make(map[string]types.YLeaf)
    dagr.EntityData.Leafs["ip-addr"] = types.YLeaf{"IpAddr", dagr.IpAddr}
    dagr.EntityData.Leafs["enter"] = types.YLeaf{"Enter", dagr.Enter}
    return &(dagr.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub
// DAGR Submode configuration
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority Timeout value. The type is interface{} with range: 1..10000. The
    // default value is 20.
    PriorityTimeout interface{}

    // Set Route Metric.
    Metric InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric

    // Set Query Timers.
    Timers InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers

    // Set Route Distance.
    Distance InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance
}

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetEntityData() *types.CommonEntityData {
    sub.EntityData.YFilter = sub.YFilter
    sub.EntityData.YangName = "sub"
    sub.EntityData.BundleName = "cisco_ios_xr"
    sub.EntityData.ParentYangName = "dagr"
    sub.EntityData.SegmentPath = "sub"
    sub.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sub.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sub.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sub.EntityData.Children = make(map[string]types.YChild)
    sub.EntityData.Children["metric"] = types.YChild{"Metric", &sub.Metric}
    sub.EntityData.Children["timers"] = types.YChild{"Timers", &sub.Timers}
    sub.EntityData.Children["distance"] = types.YChild{"Distance", &sub.Distance}
    sub.EntityData.Leafs = make(map[string]types.YLeaf)
    sub.EntityData.Leafs["priority-timeout"] = types.YLeaf{"PriorityTimeout", sub.PriorityTimeout}
    return &(sub.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric
// Set Route Metric
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Normal Route Metric. The type is interface{} with range: 0..256. The
    // default value is 100.
    MetricNorm interface{}

    // Priority Route Metric. The type is interface{} with range: 0..256. The
    // default value is 90.
    MetricPrio interface{}
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetEntityData() *types.CommonEntityData {
    metric.EntityData.YFilter = metric.YFilter
    metric.EntityData.YangName = "metric"
    metric.EntityData.BundleName = "cisco_ios_xr"
    metric.EntityData.ParentYangName = "sub"
    metric.EntityData.SegmentPath = "metric"
    metric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    metric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    metric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    metric.EntityData.Children = make(map[string]types.YChild)
    metric.EntityData.Leafs = make(map[string]types.YLeaf)
    metric.EntityData.Leafs["metric-norm"] = types.YLeaf{"MetricNorm", metric.MetricNorm}
    metric.EntityData.Leafs["metric-prio"] = types.YLeaf{"MetricPrio", metric.MetricPrio}
    return &(metric.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers
// Set Query Timers
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Query Timeout. The type is interface{} with range: 1..10000. The default
    // value is 1.
    QueryTime interface{}

    // Standby Query Timeout. The type is interface{} with range: 1..10000. The
    // default value is 20.
    SbyTime interface{}
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "sub"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = make(map[string]types.YChild)
    timers.EntityData.Leafs = make(map[string]types.YLeaf)
    timers.EntityData.Leafs["query-time"] = types.YLeaf{"QueryTime", timers.QueryTime}
    timers.EntityData.Leafs["sby-time"] = types.YLeaf{"SbyTime", timers.SbyTime}
    return &(timers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance
// Set Route Distance
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Normal Route Distance. The type is interface{} with range: 0..256. The
    // default value is 150.
    DistNorm interface{}

    // Priority Route Distance. The type is interface{} with range: 0..256. The
    // default value is 5.
    DistPrio interface{}
}

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetEntityData() *types.CommonEntityData {
    distance.EntityData.YFilter = distance.YFilter
    distance.EntityData.YangName = "distance"
    distance.EntityData.BundleName = "cisco_ios_xr"
    distance.EntityData.ParentYangName = "sub"
    distance.EntityData.SegmentPath = "distance"
    distance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distance.EntityData.Children = make(map[string]types.YChild)
    distance.EntityData.Leafs = make(map[string]types.YLeaf)
    distance.EntityData.Leafs["dist-norm"] = types.YLeaf{"DistNorm", distance.DistNorm}
    distance.EntityData.Leafs["dist-prio"] = types.YLeaf{"DistPrio", distance.DistPrio}
    return &(distance.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp
// Configure Address Resolution Protocol
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable the dynamic learning of ARP entries(for local subnet) on the
    // interface. The type is interface{}.
    LearningLocal interface{}

    // ARP learning solicited configuration. The type is interface{}.
    LearningSolicited interface{}

    // Ignore the receipt of Gratuitous ARP packets on the interface. The type is
    // interface{}.
    GratuitousIgnore interface{}

    // Proxy ARP configuration. The type is interface{}.
    ProxyArp interface{}

    // Time to delay purging arp entries when the interface goes down. The type is
    // interface{} with range: 1..65535.
    PurgeDelay interface{}

    // Disable the dynamic learning of ARP entries on the interface. The type is
    // interface{}.
    LearningDisable interface{}

    // Local Proxy ARP configuration. The type is interface{}.
    LocalProxyArp interface{}

    // Number of seconds for ARP cache timeout. The type is interface{} with
    // range: 30..2144448000. Units are second.
    Timeout interface{}
}

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetEntityData() *types.CommonEntityData {
    ipv4Arp.EntityData.YFilter = ipv4Arp.YFilter
    ipv4Arp.EntityData.YangName = "ipv4arp"
    ipv4Arp.EntityData.BundleName = "cisco_ios_xr"
    ipv4Arp.EntityData.ParentYangName = "interface-configuration"
    ipv4Arp.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp"
    ipv4Arp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Arp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Arp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Arp.EntityData.Children = make(map[string]types.YChild)
    ipv4Arp.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4Arp.EntityData.Leafs["learning-local"] = types.YLeaf{"LearningLocal", ipv4Arp.LearningLocal}
    ipv4Arp.EntityData.Leafs["learning-solicited"] = types.YLeaf{"LearningSolicited", ipv4Arp.LearningSolicited}
    ipv4Arp.EntityData.Leafs["gratuitous-ignore"] = types.YLeaf{"GratuitousIgnore", ipv4Arp.GratuitousIgnore}
    ipv4Arp.EntityData.Leafs["proxy-arp"] = types.YLeaf{"ProxyArp", ipv4Arp.ProxyArp}
    ipv4Arp.EntityData.Leafs["purge-delay"] = types.YLeaf{"PurgeDelay", ipv4Arp.PurgeDelay}
    ipv4Arp.EntityData.Leafs["learning-disable"] = types.YLeaf{"LearningDisable", ipv4Arp.LearningDisable}
    ipv4Arp.EntityData.Leafs["local-proxy-arp"] = types.YLeaf{"LocalProxyArp", ipv4Arp.LocalProxyArp}
    ipv4Arp.EntityData.Leafs["timeout"] = types.YLeaf{"Timeout", ipv4Arp.Timeout}
    return &(ipv4Arp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network
// Interface IPv4 Network configuration data
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 forwarding to get enabled on an interface. The type is interface{}.
    ForwardingEnable interface{}

    // The flag for enabling sending of ICMP mask reply messages. The type is
    // interface{}.
    IcmpMaskReply interface{}

    // Enable TCP MSS Adjust on an interface. The type is interface{}.
    TcpMssAdjustEnable interface{}

    // Disable TTL propagate on an interface. The type is interface{}.
    TtlPropagateDisable interface{}

    // Enable point-to-point handling for this interface. The type is interface{}.
    PointToPoint interface{}

    // The IP Maximum Transmission Unit. The type is interface{} with range:
    // 68..65535.
    Mtu interface{}

    // Interface ipv4 bgp configuration.
    BgpPa InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa

    // Enable Verify handling for this interface.
    Verify InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify

    // Interface ipv4 bgp configuration.
    Bgp InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp

    // Set the IP address of an interface.
    Addresses InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses

    // The set of IP destination addresses for UDP broadcasts.
    HelperAddresses InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses
}

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetEntityData() *types.CommonEntityData {
    ipv4Network.EntityData.YFilter = ipv4Network.YFilter
    ipv4Network.EntityData.YangName = "ipv4-network"
    ipv4Network.EntityData.BundleName = "cisco_ios_xr"
    ipv4Network.EntityData.ParentYangName = "interface-configuration"
    ipv4Network.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network"
    ipv4Network.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Network.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Network.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Network.EntityData.Children = make(map[string]types.YChild)
    ipv4Network.EntityData.Children["bgp-pa"] = types.YChild{"BgpPa", &ipv4Network.BgpPa}
    ipv4Network.EntityData.Children["verify"] = types.YChild{"Verify", &ipv4Network.Verify}
    ipv4Network.EntityData.Children["bgp"] = types.YChild{"Bgp", &ipv4Network.Bgp}
    ipv4Network.EntityData.Children["addresses"] = types.YChild{"Addresses", &ipv4Network.Addresses}
    ipv4Network.EntityData.Children["helper-addresses"] = types.YChild{"HelperAddresses", &ipv4Network.HelperAddresses}
    ipv4Network.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4Network.EntityData.Leafs["forwarding-enable"] = types.YLeaf{"ForwardingEnable", ipv4Network.ForwardingEnable}
    ipv4Network.EntityData.Leafs["icmp-mask-reply"] = types.YLeaf{"IcmpMaskReply", ipv4Network.IcmpMaskReply}
    ipv4Network.EntityData.Leafs["tcp-mss-adjust-enable"] = types.YLeaf{"TcpMssAdjustEnable", ipv4Network.TcpMssAdjustEnable}
    ipv4Network.EntityData.Leafs["ttl-propagate-disable"] = types.YLeaf{"TtlPropagateDisable", ipv4Network.TtlPropagateDisable}
    ipv4Network.EntityData.Leafs["point-to-point"] = types.YLeaf{"PointToPoint", ipv4Network.PointToPoint}
    ipv4Network.EntityData.Leafs["mtu"] = types.YLeaf{"Mtu", ipv4Network.Mtu}
    return &(ipv4Network.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa
// Interface ipv4 bgp configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Input.
    Input InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input

    // Output.
    Output InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output
}

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetEntityData() *types.CommonEntityData {
    bgpPa.EntityData.YFilter = bgpPa.YFilter
    bgpPa.EntityData.YangName = "bgp-pa"
    bgpPa.EntityData.BundleName = "cisco_ios_xr"
    bgpPa.EntityData.ParentYangName = "ipv4-network"
    bgpPa.EntityData.SegmentPath = "bgp-pa"
    bgpPa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpPa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpPa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpPa.EntityData.Children = make(map[string]types.YChild)
    bgpPa.EntityData.Children["input"] = types.YChild{"Input", &bgpPa.Input}
    bgpPa.EntityData.Children["output"] = types.YChild{"Output", &bgpPa.Output}
    bgpPa.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bgpPa.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BGP PA configuration on source. The type is bool.
    SourceAccounting interface{}

    // BGP PA configuration on destination. The type is bool.
    DestinationAccounting interface{}
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "bgp-pa"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = make(map[string]types.YChild)
    input.EntityData.Leafs = make(map[string]types.YLeaf)
    input.EntityData.Leafs["source-accounting"] = types.YLeaf{"SourceAccounting", input.SourceAccounting}
    input.EntityData.Leafs["destination-accounting"] = types.YLeaf{"DestinationAccounting", input.DestinationAccounting}
    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output
// Output
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BGP PA configuration on source. The type is bool.
    SourceAccounting interface{}

    // BGP PA configuration on destination. The type is bool.
    DestinationAccounting interface{}
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "bgp-pa"
    output.EntityData.SegmentPath = "output"
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = make(map[string]types.YChild)
    output.EntityData.Leafs = make(map[string]types.YLeaf)
    output.EntityData.Leafs["source-accounting"] = types.YLeaf{"SourceAccounting", output.SourceAccounting}
    output.EntityData.Leafs["destination-accounting"] = types.YLeaf{"DestinationAccounting", output.DestinationAccounting}
    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify
// Enable Verify handling for this interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source is reachable via any interface or interface on which packet was
    // received. The type is Ipv4Reachable.
    Reachable interface{}

    // Allow router to ping itself (opens vulnerability in verification). The type
    // is Ipv4SelfPing.
    SelfPing interface{}

    // Allow default route to match when checking source address. The type is
    // Ipv4DefaultPing.
    DefaultPing interface{}
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetEntityData() *types.CommonEntityData {
    verify.EntityData.YFilter = verify.YFilter
    verify.EntityData.YangName = "verify"
    verify.EntityData.BundleName = "cisco_ios_xr"
    verify.EntityData.ParentYangName = "ipv4-network"
    verify.EntityData.SegmentPath = "verify"
    verify.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    verify.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    verify.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    verify.EntityData.Children = make(map[string]types.YChild)
    verify.EntityData.Leafs = make(map[string]types.YLeaf)
    verify.EntityData.Leafs["reachable"] = types.YLeaf{"Reachable", verify.Reachable}
    verify.EntityData.Leafs["self-ping"] = types.YLeaf{"SelfPing", verify.SelfPing}
    verify.EntityData.Leafs["default-ping"] = types.YLeaf{"DefaultPing", verify.DefaultPing}
    return &(verify.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp
// Interface ipv4 bgp configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface ipv4 bgp policy propagation configuration.
    Qppb InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb

    // Interface ipv4 bgp policy propagation flow tag configuration.
    FlowTag InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag
}

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetEntityData() *types.CommonEntityData {
    bgp.EntityData.YFilter = bgp.YFilter
    bgp.EntityData.YangName = "bgp"
    bgp.EntityData.BundleName = "cisco_ios_xr"
    bgp.EntityData.ParentYangName = "ipv4-network"
    bgp.EntityData.SegmentPath = "bgp"
    bgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgp.EntityData.Children = make(map[string]types.YChild)
    bgp.EntityData.Children["qppb"] = types.YChild{"Qppb", &bgp.Qppb}
    bgp.EntityData.Children["flow-tag"] = types.YChild{"FlowTag", &bgp.FlowTag}
    bgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bgp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb
// Interface ipv4 bgp policy propagation
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Input.
    Input InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input
}

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetEntityData() *types.CommonEntityData {
    qppb.EntityData.YFilter = qppb.YFilter
    qppb.EntityData.YangName = "qppb"
    qppb.EntityData.BundleName = "cisco_ios_xr"
    qppb.EntityData.ParentYangName = "bgp"
    qppb.EntityData.SegmentPath = "qppb"
    qppb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qppb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qppb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qppb.EntityData.Children = make(map[string]types.YChild)
    qppb.EntityData.Children["input"] = types.YChild{"Input", &qppb.Input}
    qppb.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qppb.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // QPPB configuration on source. The type is Ipv4InterfaceQppb.
    Source interface{}

    // QPPB configuration on destination. The type is Ipv4InterfaceQppb.
    Destination interface{}
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qppb"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = make(map[string]types.YChild)
    input.EntityData.Leafs = make(map[string]types.YLeaf)
    input.EntityData.Leafs["source"] = types.YLeaf{"Source", input.Source}
    input.EntityData.Leafs["destination"] = types.YLeaf{"Destination", input.Destination}
    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag
// Interface ipv4 bgp policy propagation flow tag
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Input.
    FlowTagInput InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput
}

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetEntityData() *types.CommonEntityData {
    flowTag.EntityData.YFilter = flowTag.YFilter
    flowTag.EntityData.YangName = "flow-tag"
    flowTag.EntityData.BundleName = "cisco_ios_xr"
    flowTag.EntityData.ParentYangName = "bgp"
    flowTag.EntityData.SegmentPath = "flow-tag"
    flowTag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowTag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowTag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowTag.EntityData.Children = make(map[string]types.YChild)
    flowTag.EntityData.Children["flow-tag-input"] = types.YChild{"FlowTagInput", &flowTag.FlowTagInput}
    flowTag.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flowTag.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowTag configuration on source. The type is bool.
    Source interface{}

    // FlowTag configuration on destination. The type is bool.
    Destination interface{}
}

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetEntityData() *types.CommonEntityData {
    flowTagInput.EntityData.YFilter = flowTagInput.YFilter
    flowTagInput.EntityData.YangName = "flow-tag-input"
    flowTagInput.EntityData.BundleName = "cisco_ios_xr"
    flowTagInput.EntityData.ParentYangName = "flow-tag"
    flowTagInput.EntityData.SegmentPath = "flow-tag-input"
    flowTagInput.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowTagInput.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowTagInput.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowTagInput.EntityData.Children = make(map[string]types.YChild)
    flowTagInput.EntityData.Leafs = make(map[string]types.YLeaf)
    flowTagInput.EntityData.Leafs["source"] = types.YLeaf{"Source", flowTagInput.Source}
    flowTagInput.EntityData.Leafs["destination"] = types.YLeaf{"Destination", flowTagInput.Destination}
    return &(flowTagInput.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses
// Set the IP address of an interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable IP processing without an explicit address. The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    Unnumbered interface{}

    // Specify a secondary address.
    Secondaries InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries

    // IP address and Mask.
    Primary InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary

    // IPv4 address and Mask negotiated via DHCP.
    Dhcp InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Dhcp
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetEntityData() *types.CommonEntityData {
    addresses.EntityData.YFilter = addresses.YFilter
    addresses.EntityData.YangName = "addresses"
    addresses.EntityData.BundleName = "cisco_ios_xr"
    addresses.EntityData.ParentYangName = "ipv4-network"
    addresses.EntityData.SegmentPath = "addresses"
    addresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addresses.EntityData.Children = make(map[string]types.YChild)
    addresses.EntityData.Children["secondaries"] = types.YChild{"Secondaries", &addresses.Secondaries}
    addresses.EntityData.Children["primary"] = types.YChild{"Primary", &addresses.Primary}
    addresses.EntityData.Children["dhcp"] = types.YChild{"Dhcp", &addresses.Dhcp}
    addresses.EntityData.Leafs = make(map[string]types.YLeaf)
    addresses.EntityData.Leafs["unnumbered"] = types.YLeaf{"Unnumbered", addresses.Unnumbered}
    return &(addresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries
// Specify a secondary address
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address and Mask. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary.
    Secondary []InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary
}

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetEntityData() *types.CommonEntityData {
    secondaries.EntityData.YFilter = secondaries.YFilter
    secondaries.EntityData.YangName = "secondaries"
    secondaries.EntityData.BundleName = "cisco_ios_xr"
    secondaries.EntityData.ParentYangName = "addresses"
    secondaries.EntityData.SegmentPath = "secondaries"
    secondaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondaries.EntityData.Children = make(map[string]types.YChild)
    secondaries.EntityData.Children["secondary"] = types.YChild{"Secondary", nil}
    for i := range secondaries.Secondary {
        secondaries.EntityData.Children[types.GetSegmentPath(&secondaries.Secondary[i])] = types.YChild{"Secondary", &secondaries.Secondary[i]}
    }
    secondaries.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(secondaries.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary
// IP address and Mask
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secondary IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Netmask. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // This attribute is mandatory.
    Netmask interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetEntityData() *types.CommonEntityData {
    secondary.EntityData.YFilter = secondary.YFilter
    secondary.EntityData.YangName = "secondary"
    secondary.EntityData.BundleName = "cisco_ios_xr"
    secondary.EntityData.ParentYangName = "secondaries"
    secondary.EntityData.SegmentPath = "secondary" + "[address='" + fmt.Sprintf("%v", secondary.Address) + "']"
    secondary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondary.EntityData.Children = make(map[string]types.YChild)
    secondary.EntityData.Leafs = make(map[string]types.YLeaf)
    secondary.EntityData.Leafs["address"] = types.YLeaf{"Address", secondary.Address}
    secondary.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", secondary.Netmask}
    secondary.EntityData.Leafs["route-tag"] = types.YLeaf{"RouteTag", secondary.RouteTag}
    return &(secondary.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary
// IP address and Mask
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // This attribute is mandatory.
    Address interface{}

    // Netmask. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // This attribute is mandatory.
    Netmask interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "addresses"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = make(map[string]types.YChild)
    primary.EntityData.Leafs = make(map[string]types.YLeaf)
    primary.EntityData.Leafs["address"] = types.YLeaf{"Address", primary.Address}
    primary.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", primary.Netmask}
    primary.EntityData.Leafs["route-tag"] = types.YLeaf{"RouteTag", primary.RouteTag}
    return &(primary.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Dhcp
// IPv4 address and Mask negotiated via DHCP
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Dhcp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable DHCP client on an interface. The type is interface{}.
    Enabled interface{}

    // DHCP option code. The type is DhcpClientOptionCode.
    OptionCode interface{}

    // Format type. The type is interface{} with range: -2147483648..2147483647.
    Format interface{}

    // Vendor id string. The type is string.
    Pattern interface{}
}

func (dhcp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Dhcp) GetEntityData() *types.CommonEntityData {
    dhcp.EntityData.YFilter = dhcp.YFilter
    dhcp.EntityData.YangName = "dhcp"
    dhcp.EntityData.BundleName = "cisco_ios_xr"
    dhcp.EntityData.ParentYangName = "addresses"
    dhcp.EntityData.SegmentPath = "dhcp"
    dhcp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcp.EntityData.Children = make(map[string]types.YChild)
    dhcp.EntityData.Leafs = make(map[string]types.YLeaf)
    dhcp.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", dhcp.Enabled}
    dhcp.EntityData.Leafs["option-code"] = types.YLeaf{"OptionCode", dhcp.OptionCode}
    dhcp.EntityData.Leafs["format"] = types.YLeaf{"Format", dhcp.Format}
    dhcp.EntityData.Leafs["pattern"] = types.YLeaf{"Pattern", dhcp.Pattern}
    return &(dhcp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses
// The set of IP destination addresses for UDP
// broadcasts
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IP destination addresses for UDP broadcasts. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress.
    HelperAddress []InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress
}

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetEntityData() *types.CommonEntityData {
    helperAddresses.EntityData.YFilter = helperAddresses.YFilter
    helperAddresses.EntityData.YangName = "helper-addresses"
    helperAddresses.EntityData.BundleName = "cisco_ios_xr"
    helperAddresses.EntityData.ParentYangName = "ipv4-network"
    helperAddresses.EntityData.SegmentPath = "helper-addresses"
    helperAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helperAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helperAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helperAddresses.EntityData.Children = make(map[string]types.YChild)
    helperAddresses.EntityData.Children["helper-address"] = types.YChild{"HelperAddress", nil}
    for i := range helperAddresses.HelperAddress {
        helperAddresses.EntityData.Children[types.GetSegmentPath(&helperAddresses.HelperAddress[i])] = types.YChild{"HelperAddress", &helperAddresses.HelperAddress[i]}
    }
    helperAddresses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(helperAddresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress
// An IP destination addresses for UDP broadcasts
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP destination address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}
}

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetEntityData() *types.CommonEntityData {
    helperAddress.EntityData.YFilter = helperAddress.YFilter
    helperAddress.EntityData.YangName = "helper-address"
    helperAddress.EntityData.BundleName = "cisco_ios_xr"
    helperAddress.EntityData.ParentYangName = "helper-addresses"
    helperAddress.EntityData.SegmentPath = "helper-address" + "[address='" + fmt.Sprintf("%v", helperAddress.Address) + "']" + "[vrf-name='" + fmt.Sprintf("%v", helperAddress.VrfName) + "']"
    helperAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helperAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helperAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helperAddress.EntityData.Children = make(map[string]types.YChild)
    helperAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    helperAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", helperAddress.Address}
    helperAddress.EntityData.Leafs["vrf-name"] = types.YLeaf{"VrfName", helperAddress.VrfName}
    return &(helperAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding
// Interface IPv4 Network configuration data also
// used for forwarding
type InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable forwarding of directed broadcast. The type is interface{}.
    DirectedBroadcast interface{}

    // Disable sending ICMP unreachables. The type is interface{}.
    Unreachables interface{}

    // Enable sending ICMP Redirect messages. The type is interface{}.
    Redirects interface{}
}

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetEntityData() *types.CommonEntityData {
    ipv4NetworkForwarding.EntityData.YFilter = ipv4NetworkForwarding.YFilter
    ipv4NetworkForwarding.EntityData.YangName = "ipv4-network-forwarding"
    ipv4NetworkForwarding.EntityData.BundleName = "cisco_ios_xr"
    ipv4NetworkForwarding.EntityData.ParentYangName = "interface-configuration"
    ipv4NetworkForwarding.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding"
    ipv4NetworkForwarding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4NetworkForwarding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4NetworkForwarding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4NetworkForwarding.EntityData.Children = make(map[string]types.YChild)
    ipv4NetworkForwarding.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4NetworkForwarding.EntityData.Leafs["directed-broadcast"] = types.YLeaf{"DirectedBroadcast", ipv4NetworkForwarding.DirectedBroadcast}
    ipv4NetworkForwarding.EntityData.Leafs["unreachables"] = types.YLeaf{"Unreachables", ipv4NetworkForwarding.Unreachables}
    ipv4NetworkForwarding.EntityData.Leafs["redirects"] = types.YLeaf{"Redirects", ipv4NetworkForwarding.Redirects}
    return &(ipv4NetworkForwarding.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network
// Interface IPv6 Network configuration data
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MTU Setting of Interface. The type is interface{} with range: 1280..65535.
    Mtu interface{}

    // Enable IPv6 processing without an explicit address. The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    Unnumbered interface{}

    // Disabled TTL propagate on an interface. The type is interface{}.
    TtlPropagateDisable interface{}

    // Enable TCP MSS adjust on an interface. The type is interface{}.
    TcpMssAdjustEnable interface{}

    // Override Sending of ICMP Unreachable Messages. The type is interface{}.
    Unreachables interface{}

    // Configure BGP QoS policy propagation.
    BgpQosPolicyPropagation InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation

    // IPv6 BGP Policy Accounting.
    BgpPolicyAccountings InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings

    // IPv6 Verify Unicast Souce Reachable.
    Verify InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify

    // Set the IPv6 address of an interface.
    Addresses InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses

    // Interface ipv6 bgp policy propagation flowtag configuration.
    BgpFlowTagPolicyTable InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable
}

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetEntityData() *types.CommonEntityData {
    ipv6Network.EntityData.YFilter = ipv6Network.YFilter
    ipv6Network.EntityData.YangName = "ipv6-network"
    ipv6Network.EntityData.BundleName = "cisco_ios_xr"
    ipv6Network.EntityData.ParentYangName = "interface-configuration"
    ipv6Network.EntityData.SegmentPath = "Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network"
    ipv6Network.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Network.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Network.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Network.EntityData.Children = make(map[string]types.YChild)
    ipv6Network.EntityData.Children["bgp-qos-policy-propagation"] = types.YChild{"BgpQosPolicyPropagation", &ipv6Network.BgpQosPolicyPropagation}
    ipv6Network.EntityData.Children["bgp-policy-accountings"] = types.YChild{"BgpPolicyAccountings", &ipv6Network.BgpPolicyAccountings}
    ipv6Network.EntityData.Children["verify"] = types.YChild{"Verify", &ipv6Network.Verify}
    ipv6Network.EntityData.Children["addresses"] = types.YChild{"Addresses", &ipv6Network.Addresses}
    ipv6Network.EntityData.Children["bgp-flow-tag-policy-table"] = types.YChild{"BgpFlowTagPolicyTable", &ipv6Network.BgpFlowTagPolicyTable}
    ipv6Network.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6Network.EntityData.Leafs["mtu"] = types.YLeaf{"Mtu", ipv6Network.Mtu}
    ipv6Network.EntityData.Leafs["unnumbered"] = types.YLeaf{"Unnumbered", ipv6Network.Unnumbered}
    ipv6Network.EntityData.Leafs["ttl-propagate-disable"] = types.YLeaf{"TtlPropagateDisable", ipv6Network.TtlPropagateDisable}
    ipv6Network.EntityData.Leafs["tcp-mss-adjust-enable"] = types.YLeaf{"TcpMssAdjustEnable", ipv6Network.TcpMssAdjustEnable}
    ipv6Network.EntityData.Leafs["unreachables"] = types.YLeaf{"Unreachables", ipv6Network.Unreachables}
    return &(ipv6Network.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation
// Configure BGP QoS policy propagation
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // QPPB configuration on source. The type is Ipv6Qppb. This attribute is
    // mandatory.
    Source interface{}

    // QPPB configuration on destination. The type is Ipv6Qppb. This attribute is
    // mandatory.
    Destination interface{}
}

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetEntityData() *types.CommonEntityData {
    bgpQosPolicyPropagation.EntityData.YFilter = bgpQosPolicyPropagation.YFilter
    bgpQosPolicyPropagation.EntityData.YangName = "bgp-qos-policy-propagation"
    bgpQosPolicyPropagation.EntityData.BundleName = "cisco_ios_xr"
    bgpQosPolicyPropagation.EntityData.ParentYangName = "ipv6-network"
    bgpQosPolicyPropagation.EntityData.SegmentPath = "bgp-qos-policy-propagation"
    bgpQosPolicyPropagation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpQosPolicyPropagation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpQosPolicyPropagation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpQosPolicyPropagation.EntityData.Children = make(map[string]types.YChild)
    bgpQosPolicyPropagation.EntityData.Leafs = make(map[string]types.YLeaf)
    bgpQosPolicyPropagation.EntityData.Leafs["source"] = types.YLeaf{"Source", bgpQosPolicyPropagation.Source}
    bgpQosPolicyPropagation.EntityData.Leafs["destination"] = types.YLeaf{"Destination", bgpQosPolicyPropagation.Destination}
    return &(bgpQosPolicyPropagation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings
// IPv6 BGP Policy Accounting
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accounting input or output. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting.
    BgpPolicyAccounting []InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting
}

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetEntityData() *types.CommonEntityData {
    bgpPolicyAccountings.EntityData.YFilter = bgpPolicyAccountings.YFilter
    bgpPolicyAccountings.EntityData.YangName = "bgp-policy-accountings"
    bgpPolicyAccountings.EntityData.BundleName = "cisco_ios_xr"
    bgpPolicyAccountings.EntityData.ParentYangName = "ipv6-network"
    bgpPolicyAccountings.EntityData.SegmentPath = "bgp-policy-accountings"
    bgpPolicyAccountings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpPolicyAccountings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpPolicyAccountings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpPolicyAccountings.EntityData.Children = make(map[string]types.YChild)
    bgpPolicyAccountings.EntityData.Children["bgp-policy-accounting"] = types.YChild{"BgpPolicyAccounting", nil}
    for i := range bgpPolicyAccountings.BgpPolicyAccounting {
        bgpPolicyAccountings.EntityData.Children[types.GetSegmentPath(&bgpPolicyAccountings.BgpPolicyAccounting[i])] = types.YChild{"BgpPolicyAccounting", &bgpPolicyAccountings.BgpPolicyAccounting[i]}
    }
    bgpPolicyAccountings.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bgpPolicyAccountings.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting
// Accounting input or output
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Accouting on input or output. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Direction interface{}

    // Accounting on Destination IP Address. The type is bool. This attribute is
    // mandatory.
    DestinationAccounting interface{}

    // Accounting on Source IP Address. The type is bool. This attribute is
    // mandatory.
    SourceAccounting interface{}
}

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetEntityData() *types.CommonEntityData {
    bgpPolicyAccounting.EntityData.YFilter = bgpPolicyAccounting.YFilter
    bgpPolicyAccounting.EntityData.YangName = "bgp-policy-accounting"
    bgpPolicyAccounting.EntityData.BundleName = "cisco_ios_xr"
    bgpPolicyAccounting.EntityData.ParentYangName = "bgp-policy-accountings"
    bgpPolicyAccounting.EntityData.SegmentPath = "bgp-policy-accounting" + "[direction='" + fmt.Sprintf("%v", bgpPolicyAccounting.Direction) + "']"
    bgpPolicyAccounting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpPolicyAccounting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpPolicyAccounting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpPolicyAccounting.EntityData.Children = make(map[string]types.YChild)
    bgpPolicyAccounting.EntityData.Leafs = make(map[string]types.YLeaf)
    bgpPolicyAccounting.EntityData.Leafs["direction"] = types.YLeaf{"Direction", bgpPolicyAccounting.Direction}
    bgpPolicyAccounting.EntityData.Leafs["destination-accounting"] = types.YLeaf{"DestinationAccounting", bgpPolicyAccounting.DestinationAccounting}
    bgpPolicyAccounting.EntityData.Leafs["source-accounting"] = types.YLeaf{"SourceAccounting", bgpPolicyAccounting.SourceAccounting}
    return &(bgpPolicyAccounting.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify
// IPv6 Verify Unicast Souce Reachable
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Reachable Interface. The type is Ipv6Reachable. This attribute is
    // mandatory.
    Reachable interface{}

    // Allow Self Ping. The type is Ipv6SelfPing. This attribute is mandatory.
    SelfPing interface{}

    // Allow Default Route. The type is Ipv6DefaultPing. This attribute is
    // mandatory.
    DefaultPing interface{}
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetEntityData() *types.CommonEntityData {
    verify.EntityData.YFilter = verify.YFilter
    verify.EntityData.YangName = "verify"
    verify.EntityData.BundleName = "cisco_ios_xr"
    verify.EntityData.ParentYangName = "ipv6-network"
    verify.EntityData.SegmentPath = "verify"
    verify.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    verify.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    verify.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    verify.EntityData.Children = make(map[string]types.YChild)
    verify.EntityData.Leafs = make(map[string]types.YLeaf)
    verify.EntityData.Leafs["reachable"] = types.YLeaf{"Reachable", verify.Reachable}
    verify.EntityData.Leafs["self-ping"] = types.YLeaf{"SelfPing", verify.SelfPing}
    verify.EntityData.Leafs["default-ping"] = types.YLeaf{"DefaultPing", verify.DefaultPing}
    return &(verify.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses
// Set the IPv6 address of an interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Segment Routing Table.
    SegmentRoutings InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings

    // Link local IPv6 address.
    LinkLocalAddress InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress

    // EUI-64 IPv6 address Table.
    Eui64Addresses InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses

    // Regular IPv6 address Table.
    RegularAddresses InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses

    // Auto IPv6 Interface Configuration.
    AutoConfiguration InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetEntityData() *types.CommonEntityData {
    addresses.EntityData.YFilter = addresses.YFilter
    addresses.EntityData.YangName = "addresses"
    addresses.EntityData.BundleName = "cisco_ios_xr"
    addresses.EntityData.ParentYangName = "ipv6-network"
    addresses.EntityData.SegmentPath = "addresses"
    addresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addresses.EntityData.Children = make(map[string]types.YChild)
    addresses.EntityData.Children["segment-routings"] = types.YChild{"SegmentRoutings", &addresses.SegmentRoutings}
    addresses.EntityData.Children["link-local-address"] = types.YChild{"LinkLocalAddress", &addresses.LinkLocalAddress}
    addresses.EntityData.Children["eui64-addresses"] = types.YChild{"Eui64Addresses", &addresses.Eui64Addresses}
    addresses.EntityData.Children["regular-addresses"] = types.YChild{"RegularAddresses", &addresses.RegularAddresses}
    addresses.EntityData.Children["auto-configuration"] = types.YChild{"AutoConfiguration", &addresses.AutoConfiguration}
    addresses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(addresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings
// Segment Routing Table
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Segment Routing Submode . The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting.
    SegmentRouting []InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting
}

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetEntityData() *types.CommonEntityData {
    segmentRoutings.EntityData.YFilter = segmentRoutings.YFilter
    segmentRoutings.EntityData.YangName = "segment-routings"
    segmentRoutings.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutings.EntityData.ParentYangName = "addresses"
    segmentRoutings.EntityData.SegmentPath = "segment-routings"
    segmentRoutings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutings.EntityData.Children = make(map[string]types.YChild)
    segmentRoutings.EntityData.Children["segment-routing"] = types.YChild{"SegmentRouting", nil}
    for i := range segmentRoutings.SegmentRouting {
        segmentRoutings.EntityData.Children[types.GetSegmentPath(&segmentRoutings.SegmentRouting[i])] = types.YChild{"SegmentRouting", &segmentRoutings.SegmentRouting[i]}
    }
    segmentRoutings.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(segmentRoutings.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting
// Segment Routing Submode 
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 address. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Segment Routing Submode. The type is interface{}.
    Enable interface{}

    // Prefix-Sid for Segment Routing.
    Ipv6PrefixSid InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid
}

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "cisco_ios_xr"
    segmentRouting.EntityData.ParentYangName = "segment-routings"
    segmentRouting.EntityData.SegmentPath = "segment-routing" + "[address='" + fmt.Sprintf("%v", segmentRouting.Address) + "']"
    segmentRouting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouting.EntityData.Children = make(map[string]types.YChild)
    segmentRouting.EntityData.Children["ipv6-prefix-sid"] = types.YChild{"Ipv6PrefixSid", &segmentRouting.Ipv6PrefixSid}
    segmentRouting.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRouting.EntityData.Leafs["address"] = types.YLeaf{"Address", segmentRouting.Address}
    segmentRouting.EntityData.Leafs["enable"] = types.YLeaf{"Enable", segmentRouting.Enable}
    return &(segmentRouting.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid
// Prefix-Sid for Segment Routing
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Length. The type is interface{} with range: 0..128. This attribute
    // is mandatory.
    PrefixLength interface{}

    // IPv6 address zone. The type is string.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetEntityData() *types.CommonEntityData {
    ipv6PrefixSid.EntityData.YFilter = ipv6PrefixSid.YFilter
    ipv6PrefixSid.EntityData.YangName = "ipv6-prefix-sid"
    ipv6PrefixSid.EntityData.BundleName = "cisco_ios_xr"
    ipv6PrefixSid.EntityData.ParentYangName = "segment-routing"
    ipv6PrefixSid.EntityData.SegmentPath = "ipv6-prefix-sid"
    ipv6PrefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6PrefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6PrefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6PrefixSid.EntityData.Children = make(map[string]types.YChild)
    ipv6PrefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6PrefixSid.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv6PrefixSid.PrefixLength}
    ipv6PrefixSid.EntityData.Leafs["zone"] = types.YLeaf{"Zone", ipv6PrefixSid.Zone}
    ipv6PrefixSid.EntityData.Leafs["route-tag"] = types.YLeaf{"RouteTag", ipv6PrefixSid.RouteTag}
    return &(ipv6PrefixSid.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress
// Link local IPv6 address
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 address. The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'
    // This attribute is mandatory., or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'
    // This attribute is mandatory..
    Address interface{}

    // IPv6 address zone. The type is string. The default value is 0.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetEntityData() *types.CommonEntityData {
    linkLocalAddress.EntityData.YFilter = linkLocalAddress.YFilter
    linkLocalAddress.EntityData.YangName = "link-local-address"
    linkLocalAddress.EntityData.BundleName = "cisco_ios_xr"
    linkLocalAddress.EntityData.ParentYangName = "addresses"
    linkLocalAddress.EntityData.SegmentPath = "link-local-address"
    linkLocalAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLocalAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLocalAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLocalAddress.EntityData.Children = make(map[string]types.YChild)
    linkLocalAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    linkLocalAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", linkLocalAddress.Address}
    linkLocalAddress.EntityData.Leafs["zone"] = types.YLeaf{"Zone", linkLocalAddress.Zone}
    linkLocalAddress.EntityData.Leafs["route-tag"] = types.YLeaf{"RouteTag", linkLocalAddress.RouteTag}
    return &(linkLocalAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses
// EUI-64 IPv6 address Table
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EUI-64 IPv6 address. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address.
    Eui64Address []InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address
}

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetEntityData() *types.CommonEntityData {
    eui64Addresses.EntityData.YFilter = eui64Addresses.YFilter
    eui64Addresses.EntityData.YangName = "eui64-addresses"
    eui64Addresses.EntityData.BundleName = "cisco_ios_xr"
    eui64Addresses.EntityData.ParentYangName = "addresses"
    eui64Addresses.EntityData.SegmentPath = "eui64-addresses"
    eui64Addresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eui64Addresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eui64Addresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eui64Addresses.EntityData.Children = make(map[string]types.YChild)
    eui64Addresses.EntityData.Children["eui64-address"] = types.YChild{"Eui64Address", nil}
    for i := range eui64Addresses.Eui64Address {
        eui64Addresses.EntityData.Children[types.GetSegmentPath(&eui64Addresses.Eui64Address[i])] = types.YChild{"Eui64Address", &eui64Addresses.Eui64Address[i]}
    }
    eui64Addresses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eui64Addresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address
// EUI-64 IPv6 address
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 address. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..128. This attribute
    // is mandatory.
    PrefixLength interface{}

    // IPv6 address zone. The type is string. The default value is 0.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetEntityData() *types.CommonEntityData {
    eui64Address.EntityData.YFilter = eui64Address.YFilter
    eui64Address.EntityData.YangName = "eui64-address"
    eui64Address.EntityData.BundleName = "cisco_ios_xr"
    eui64Address.EntityData.ParentYangName = "eui64-addresses"
    eui64Address.EntityData.SegmentPath = "eui64-address" + "[address='" + fmt.Sprintf("%v", eui64Address.Address) + "']"
    eui64Address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eui64Address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eui64Address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eui64Address.EntityData.Children = make(map[string]types.YChild)
    eui64Address.EntityData.Leafs = make(map[string]types.YLeaf)
    eui64Address.EntityData.Leafs["address"] = types.YLeaf{"Address", eui64Address.Address}
    eui64Address.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", eui64Address.PrefixLength}
    eui64Address.EntityData.Leafs["zone"] = types.YLeaf{"Zone", eui64Address.Zone}
    eui64Address.EntityData.Leafs["route-tag"] = types.YLeaf{"RouteTag", eui64Address.RouteTag}
    return &(eui64Address.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses
// Regular IPv6 address Table
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Regular IPv6 address. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress.
    RegularAddress []InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress
}

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetEntityData() *types.CommonEntityData {
    regularAddresses.EntityData.YFilter = regularAddresses.YFilter
    regularAddresses.EntityData.YangName = "regular-addresses"
    regularAddresses.EntityData.BundleName = "cisco_ios_xr"
    regularAddresses.EntityData.ParentYangName = "addresses"
    regularAddresses.EntityData.SegmentPath = "regular-addresses"
    regularAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    regularAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    regularAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    regularAddresses.EntityData.Children = make(map[string]types.YChild)
    regularAddresses.EntityData.Children["regular-address"] = types.YChild{"RegularAddress", nil}
    for i := range regularAddresses.RegularAddress {
        regularAddresses.EntityData.Children[types.GetSegmentPath(&regularAddresses.RegularAddress[i])] = types.YChild{"RegularAddress", &regularAddresses.RegularAddress[i]}
    }
    regularAddresses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(regularAddresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress
// Regular IPv6 address
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 address. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..128. This attribute
    // is mandatory.
    PrefixLength interface{}

    // IPv6 address zone. The type is string. The default value is 0.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetEntityData() *types.CommonEntityData {
    regularAddress.EntityData.YFilter = regularAddress.YFilter
    regularAddress.EntityData.YangName = "regular-address"
    regularAddress.EntityData.BundleName = "cisco_ios_xr"
    regularAddress.EntityData.ParentYangName = "regular-addresses"
    regularAddress.EntityData.SegmentPath = "regular-address" + "[address='" + fmt.Sprintf("%v", regularAddress.Address) + "']"
    regularAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    regularAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    regularAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    regularAddress.EntityData.Children = make(map[string]types.YChild)
    regularAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    regularAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", regularAddress.Address}
    regularAddress.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", regularAddress.PrefixLength}
    regularAddress.EntityData.Leafs["zone"] = types.YLeaf{"Zone", regularAddress.Zone}
    regularAddress.EntityData.Leafs["route-tag"] = types.YLeaf{"RouteTag", regularAddress.RouteTag}
    return &(regularAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration
// Auto IPv6 Interface Configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The flag to enable auto ipv6 interface configuration. The type is
    // interface{}.
    Enable interface{}

    // Enable slaac on Mgmt interface. The type is interface{}.
    AutoConfigSlaac interface{}
}

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetEntityData() *types.CommonEntityData {
    autoConfiguration.EntityData.YFilter = autoConfiguration.YFilter
    autoConfiguration.EntityData.YangName = "auto-configuration"
    autoConfiguration.EntityData.BundleName = "cisco_ios_xr"
    autoConfiguration.EntityData.ParentYangName = "addresses"
    autoConfiguration.EntityData.SegmentPath = "auto-configuration"
    autoConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoConfiguration.EntityData.Children = make(map[string]types.YChild)
    autoConfiguration.EntityData.Leafs = make(map[string]types.YLeaf)
    autoConfiguration.EntityData.Leafs["enable"] = types.YLeaf{"Enable", autoConfiguration.Enable}
    autoConfiguration.EntityData.Leafs["auto-config-slaac"] = types.YLeaf{"AutoConfigSlaac", autoConfiguration.AutoConfigSlaac}
    return &(autoConfiguration.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable
// Interface ipv6 bgp policy propagation flowtag
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Input.
    BgpFlowTagPolicy InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy
}

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetEntityData() *types.CommonEntityData {
    bgpFlowTagPolicyTable.EntityData.YFilter = bgpFlowTagPolicyTable.YFilter
    bgpFlowTagPolicyTable.EntityData.YangName = "bgp-flow-tag-policy-table"
    bgpFlowTagPolicyTable.EntityData.BundleName = "cisco_ios_xr"
    bgpFlowTagPolicyTable.EntityData.ParentYangName = "ipv6-network"
    bgpFlowTagPolicyTable.EntityData.SegmentPath = "bgp-flow-tag-policy-table"
    bgpFlowTagPolicyTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpFlowTagPolicyTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpFlowTagPolicyTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpFlowTagPolicyTable.EntityData.Children = make(map[string]types.YChild)
    bgpFlowTagPolicyTable.EntityData.Children["bgp-flow-tag-policy"] = types.YChild{"BgpFlowTagPolicy", &bgpFlowTagPolicyTable.BgpFlowTagPolicy}
    bgpFlowTagPolicyTable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bgpFlowTagPolicyTable.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flow Tag configuration on source. The type is bool.
    Source interface{}

    // Flow Tag configuration on destination. The type is bool.
    Destination interface{}
}

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetEntityData() *types.CommonEntityData {
    bgpFlowTagPolicy.EntityData.YFilter = bgpFlowTagPolicy.YFilter
    bgpFlowTagPolicy.EntityData.YangName = "bgp-flow-tag-policy"
    bgpFlowTagPolicy.EntityData.BundleName = "cisco_ios_xr"
    bgpFlowTagPolicy.EntityData.ParentYangName = "bgp-flow-tag-policy-table"
    bgpFlowTagPolicy.EntityData.SegmentPath = "bgp-flow-tag-policy"
    bgpFlowTagPolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpFlowTagPolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpFlowTagPolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpFlowTagPolicy.EntityData.Children = make(map[string]types.YChild)
    bgpFlowTagPolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    bgpFlowTagPolicy.EntityData.Leafs["source"] = types.YLeaf{"Source", bgpFlowTagPolicy.Source}
    bgpFlowTagPolicy.EntityData.Leafs["destination"] = types.YLeaf{"Destination", bgpFlowTagPolicy.Destination}
    return &(bgpFlowTagPolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor
// IPv6 interface neighbor or neighbor discovery
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set advertised reachability time in milliseconds. The type is interface{}
    // with range: 0..3600000. Units are millisecond.
    ReachableTime interface{}

    // Unspecify IPv6 Router Advertisement (RA) hop-limit. The type is
    // interface{}.
    RaUnspecifyHoplimit interface{}

    // Set IPv6 duplicate address detection transmits. The type is interface{}
    // with range: 0..600.
    DadAttempts interface{}

    // Set SRP multicast prefer encapsulation. The type is Ipv6srpEncapsulation.
    SrpMulticastEncapsulation interface{}

    // Set advertised NS retransmission interval in milliseconds. The type is
    // interface{} with range: 1000..4294967295. Units are millisecond.
    NsInterval interface{}

    // Set the cache limit for neighbor entries. The type is interface{} with
    // range: 0..128000.
    CacheLimit interface{}

    // Enable sending of ICMP Redirect messages. The type is interface{}.
    Redirect interface{}

    // Set SRP unicast prefer encapsulation. The type is Ipv6srpEncapsulation.
    SrpUnicastEncapsulation interface{}

    // Enable suppress MTU in IPv6 router advertisement. The type is interface{}.
    RamtuSuppress interface{}

    // Host to use stateful protocol for address configuration. The type is
    // interface{}.
    ManagedConfig interface{}

    // Enable unicast IPv6 router advertisement. The type is interface{}.
    RaUnicast interface{}

    // Set IPv6 Router Advertisement (RA) lifetime in seconds. The type is
    // interface{} with range: 0..9000. Units are second.
    RaLifetime interface{}

    // Host to use stateful protocol for non-address configuration. The type is
    // interface{}.
    OtherConfig interface{}

    // Enable suppress IPv6 router advertisement. The type is interface{}.
    RaSuppress interface{}

    // RA Router Preference. The type is Ipv6NdRouterPref.
    RouterPreference interface{}

    // IPv6 Router Advertisement (RA) Specific Route.
    RaspecificRouteS InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS

    // IPv6 Router Advertisement (RA) DNS Search List.
    RadnsSearches InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches

    // IPv6 Router Advertisement (RA) DNS Servre.
    RadnsServers InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers

    // Set IPv6 Router Advertisement (RA) interval in seconds.
    RaInterval InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval

    // Prefixes .
    Ipv6Prefixes InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes
}

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetEntityData() *types.CommonEntityData {
    ipv6Neighbor.EntityData.YFilter = ipv6Neighbor.YFilter
    ipv6Neighbor.EntityData.YangName = "ipv6-neighbor"
    ipv6Neighbor.EntityData.BundleName = "cisco_ios_xr"
    ipv6Neighbor.EntityData.ParentYangName = "interface-configuration"
    ipv6Neighbor.EntityData.SegmentPath = "Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor"
    ipv6Neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Neighbor.EntityData.Children = make(map[string]types.YChild)
    ipv6Neighbor.EntityData.Children["raspecific-route-s"] = types.YChild{"RaspecificRouteS", &ipv6Neighbor.RaspecificRouteS}
    ipv6Neighbor.EntityData.Children["radns-searches"] = types.YChild{"RadnsSearches", &ipv6Neighbor.RadnsSearches}
    ipv6Neighbor.EntityData.Children["radns-servers"] = types.YChild{"RadnsServers", &ipv6Neighbor.RadnsServers}
    ipv6Neighbor.EntityData.Children["ra-interval"] = types.YChild{"RaInterval", &ipv6Neighbor.RaInterval}
    ipv6Neighbor.EntityData.Children["ipv6-prefixes"] = types.YChild{"Ipv6Prefixes", &ipv6Neighbor.Ipv6Prefixes}
    ipv6Neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6Neighbor.EntityData.Leafs["reachable-time"] = types.YLeaf{"ReachableTime", ipv6Neighbor.ReachableTime}
    ipv6Neighbor.EntityData.Leafs["ra-unspecify-hoplimit"] = types.YLeaf{"RaUnspecifyHoplimit", ipv6Neighbor.RaUnspecifyHoplimit}
    ipv6Neighbor.EntityData.Leafs["dad-attempts"] = types.YLeaf{"DadAttempts", ipv6Neighbor.DadAttempts}
    ipv6Neighbor.EntityData.Leafs["srp-multicast-encapsulation"] = types.YLeaf{"SrpMulticastEncapsulation", ipv6Neighbor.SrpMulticastEncapsulation}
    ipv6Neighbor.EntityData.Leafs["ns-interval"] = types.YLeaf{"NsInterval", ipv6Neighbor.NsInterval}
    ipv6Neighbor.EntityData.Leafs["cache-limit"] = types.YLeaf{"CacheLimit", ipv6Neighbor.CacheLimit}
    ipv6Neighbor.EntityData.Leafs["redirect"] = types.YLeaf{"Redirect", ipv6Neighbor.Redirect}
    ipv6Neighbor.EntityData.Leafs["srp-unicast-encapsulation"] = types.YLeaf{"SrpUnicastEncapsulation", ipv6Neighbor.SrpUnicastEncapsulation}
    ipv6Neighbor.EntityData.Leafs["ramtu-suppress"] = types.YLeaf{"RamtuSuppress", ipv6Neighbor.RamtuSuppress}
    ipv6Neighbor.EntityData.Leafs["managed-config"] = types.YLeaf{"ManagedConfig", ipv6Neighbor.ManagedConfig}
    ipv6Neighbor.EntityData.Leafs["ra-unicast"] = types.YLeaf{"RaUnicast", ipv6Neighbor.RaUnicast}
    ipv6Neighbor.EntityData.Leafs["ra-lifetime"] = types.YLeaf{"RaLifetime", ipv6Neighbor.RaLifetime}
    ipv6Neighbor.EntityData.Leafs["other-config"] = types.YLeaf{"OtherConfig", ipv6Neighbor.OtherConfig}
    ipv6Neighbor.EntityData.Leafs["ra-suppress"] = types.YLeaf{"RaSuppress", ipv6Neighbor.RaSuppress}
    ipv6Neighbor.EntityData.Leafs["router-preference"] = types.YLeaf{"RouterPreference", ipv6Neighbor.RouterPreference}
    return &(ipv6Neighbor.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS
// IPv6 Router Advertisement (RA) Specific Route
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Router Advertisement (RA) Specific Route. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute.
    RaspecificRoute []InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute
}

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetEntityData() *types.CommonEntityData {
    raspecificRouteS.EntityData.YFilter = raspecificRouteS.YFilter
    raspecificRouteS.EntityData.YangName = "raspecific-route-s"
    raspecificRouteS.EntityData.BundleName = "cisco_ios_xr"
    raspecificRouteS.EntityData.ParentYangName = "ipv6-neighbor"
    raspecificRouteS.EntityData.SegmentPath = "raspecific-route-s"
    raspecificRouteS.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    raspecificRouteS.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    raspecificRouteS.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    raspecificRouteS.EntityData.Children = make(map[string]types.YChild)
    raspecificRouteS.EntityData.Children["raspecific-route"] = types.YChild{"RaspecificRoute", nil}
    for i := range raspecificRouteS.RaspecificRoute {
        raspecificRouteS.EntityData.Children[types.GetSegmentPath(&raspecificRouteS.RaspecificRoute[i])] = types.YChild{"RaspecificRoute", &raspecificRouteS.RaspecificRoute[i]}
    }
    raspecificRouteS.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(raspecificRouteS.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute
// IPv6 Router Advertisement (RA) Specific Route
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 Address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SpecificRoute interface{}

    // Prefix mask length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Lifetime (seconds). The type is interface{} with range: 0..4294967295.
    Lifetime interface{}

    // Preference. The type is Ipv6NdRouterPref.
    Preference interface{}
}

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetEntityData() *types.CommonEntityData {
    raspecificRoute.EntityData.YFilter = raspecificRoute.YFilter
    raspecificRoute.EntityData.YangName = "raspecific-route"
    raspecificRoute.EntityData.BundleName = "cisco_ios_xr"
    raspecificRoute.EntityData.ParentYangName = "raspecific-route-s"
    raspecificRoute.EntityData.SegmentPath = "raspecific-route" + "[specific-route='" + fmt.Sprintf("%v", raspecificRoute.SpecificRoute) + "']"
    raspecificRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    raspecificRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    raspecificRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    raspecificRoute.EntityData.Children = make(map[string]types.YChild)
    raspecificRoute.EntityData.Leafs = make(map[string]types.YLeaf)
    raspecificRoute.EntityData.Leafs["specific-route"] = types.YLeaf{"SpecificRoute", raspecificRoute.SpecificRoute}
    raspecificRoute.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", raspecificRoute.PrefixLength}
    raspecificRoute.EntityData.Leafs["lifetime"] = types.YLeaf{"Lifetime", raspecificRoute.Lifetime}
    raspecificRoute.EntityData.Leafs["preference"] = types.YLeaf{"Preference", raspecificRoute.Preference}
    return &(raspecificRoute.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches
// IPv6 Router Advertisement (RA) DNS Search List
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Router Advertisement (RA) DNS Search List. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch.
    RadnsSearch []InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch
}

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetEntityData() *types.CommonEntityData {
    radnsSearches.EntityData.YFilter = radnsSearches.YFilter
    radnsSearches.EntityData.YangName = "radns-searches"
    radnsSearches.EntityData.BundleName = "cisco_ios_xr"
    radnsSearches.EntityData.ParentYangName = "ipv6-neighbor"
    radnsSearches.EntityData.SegmentPath = "radns-searches"
    radnsSearches.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radnsSearches.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radnsSearches.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radnsSearches.EntityData.Children = make(map[string]types.YChild)
    radnsSearches.EntityData.Children["radns-search"] = types.YChild{"RadnsSearch", nil}
    for i := range radnsSearches.RadnsSearch {
        radnsSearches.EntityData.Children[types.GetSegmentPath(&radnsSearches.RadnsSearch[i])] = types.YChild{"RadnsSearch", &radnsSearches.RadnsSearch[i]}
    }
    radnsSearches.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(radnsSearches.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch
// IPv6 Router Advertisement (RA) DNS Search List
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Search List. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    DnsSearchList interface{}

    // Lifetime value in seconds. The type is interface{} with range: 4..3600.
    // This attribute is mandatory.
    Lifetime interface{}
}

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetEntityData() *types.CommonEntityData {
    radnsSearch.EntityData.YFilter = radnsSearch.YFilter
    radnsSearch.EntityData.YangName = "radns-search"
    radnsSearch.EntityData.BundleName = "cisco_ios_xr"
    radnsSearch.EntityData.ParentYangName = "radns-searches"
    radnsSearch.EntityData.SegmentPath = "radns-search" + "[dns-search-list='" + fmt.Sprintf("%v", radnsSearch.DnsSearchList) + "']"
    radnsSearch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radnsSearch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radnsSearch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radnsSearch.EntityData.Children = make(map[string]types.YChild)
    radnsSearch.EntityData.Leafs = make(map[string]types.YLeaf)
    radnsSearch.EntityData.Leafs["dns-search-list"] = types.YLeaf{"DnsSearchList", radnsSearch.DnsSearchList}
    radnsSearch.EntityData.Leafs["lifetime"] = types.YLeaf{"Lifetime", radnsSearch.Lifetime}
    return &(radnsSearch.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers
// IPv6 Router Advertisement (RA) DNS Servre
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Router Advertisement (RA) DNS Servre. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer.
    RadnsServer []InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer
}

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetEntityData() *types.CommonEntityData {
    radnsServers.EntityData.YFilter = radnsServers.YFilter
    radnsServers.EntityData.YangName = "radns-servers"
    radnsServers.EntityData.BundleName = "cisco_ios_xr"
    radnsServers.EntityData.ParentYangName = "ipv6-neighbor"
    radnsServers.EntityData.SegmentPath = "radns-servers"
    radnsServers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radnsServers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radnsServers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radnsServers.EntityData.Children = make(map[string]types.YChild)
    radnsServers.EntityData.Children["radns-server"] = types.YChild{"RadnsServer", nil}
    for i := range radnsServers.RadnsServer {
        radnsServers.EntityData.Children[types.GetSegmentPath(&radnsServers.RadnsServer[i])] = types.YChild{"RadnsServer", &radnsServers.RadnsServer[i]}
    }
    radnsServers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(radnsServers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer
// IPv6 Router Advertisement (RA) DNS Servre
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 Address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DnsServer interface{}

    // Lifetime value in seconds. The type is interface{} with range: 4..3600.
    // This attribute is mandatory.
    Lifetime interface{}
}

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetEntityData() *types.CommonEntityData {
    radnsServer.EntityData.YFilter = radnsServer.YFilter
    radnsServer.EntityData.YangName = "radns-server"
    radnsServer.EntityData.BundleName = "cisco_ios_xr"
    radnsServer.EntityData.ParentYangName = "radns-servers"
    radnsServer.EntityData.SegmentPath = "radns-server" + "[dns-server='" + fmt.Sprintf("%v", radnsServer.DnsServer) + "']"
    radnsServer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radnsServer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radnsServer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radnsServer.EntityData.Children = make(map[string]types.YChild)
    radnsServer.EntityData.Leafs = make(map[string]types.YLeaf)
    radnsServer.EntityData.Leafs["dns-server"] = types.YLeaf{"DnsServer", radnsServer.DnsServer}
    radnsServer.EntityData.Leafs["lifetime"] = types.YLeaf{"Lifetime", radnsServer.Lifetime}
    return &(radnsServer.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval
// Set IPv6 Router Advertisement (RA) interval in
// seconds
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum RA interval in seconds. The type is interface{} with range:
    // 4..1800. This attribute is mandatory.
    Maximum interface{}

    // Minimum RA interval in seconds. Must be less than 0.75 * maximum interval.
    // The type is interface{} with range: 3..1800.
    Minimum interface{}
}

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetEntityData() *types.CommonEntityData {
    raInterval.EntityData.YFilter = raInterval.YFilter
    raInterval.EntityData.YangName = "ra-interval"
    raInterval.EntityData.BundleName = "cisco_ios_xr"
    raInterval.EntityData.ParentYangName = "ipv6-neighbor"
    raInterval.EntityData.SegmentPath = "ra-interval"
    raInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    raInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    raInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    raInterval.EntityData.Children = make(map[string]types.YChild)
    raInterval.EntityData.Leafs = make(map[string]types.YLeaf)
    raInterval.EntityData.Leafs["maximum"] = types.YLeaf{"Maximum", raInterval.Maximum}
    raInterval.EntityData.Leafs["minimum"] = types.YLeaf{"Minimum", raInterval.Minimum}
    return &(raInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes
// Prefixes 
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure prefix with paramemters. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix.
    Ipv6Prefix []InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix
}

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetEntityData() *types.CommonEntityData {
    ipv6Prefixes.EntityData.YFilter = ipv6Prefixes.YFilter
    ipv6Prefixes.EntityData.YangName = "ipv6-prefixes"
    ipv6Prefixes.EntityData.BundleName = "cisco_ios_xr"
    ipv6Prefixes.EntityData.ParentYangName = "ipv6-neighbor"
    ipv6Prefixes.EntityData.SegmentPath = "ipv6-prefixes"
    ipv6Prefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Prefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Prefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Prefixes.EntityData.Children = make(map[string]types.YChild)
    ipv6Prefixes.EntityData.Children["ipv6-prefix"] = types.YChild{"Ipv6Prefix", nil}
    for i := range ipv6Prefixes.Ipv6Prefix {
        ipv6Prefixes.EntityData.Children[types.GetSegmentPath(&ipv6Prefixes.Ipv6Prefix[i])] = types.YChild{"Ipv6Prefix", &ipv6Prefixes.Ipv6Prefix[i]}
    }
    ipv6Prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Prefixes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix
// Configure prefix with paramemters
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 prefix. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // Prefix zone. The type is string with length: 1..9.
    PrefixZone interface{}

    // Prefix mask length. The type is interface{} with range: 0..128. This
    // attribute is mandatory.
    PrefixLength interface{}

    // Valid Lifetime (seconds). The type is interface{} with range:
    // 0..4294967295.
    ValidLifetime interface{}

    // Preferred Lifetime (seconds) must be <= Valid Lifetime. The type is
    // interface{} with range: 0..4294967295.
    PreferredLifetime interface{}

    // If set, prefix will not be used for onlink determination. The type is bool.
    OffLink interface{}

    // If set, prefix will not be used for auto configuration. The type is bool.
    NoAutoConfig interface{}

    // If set, prefix will not be advertized. The type is bool.
    NoAdvertize interface{}

    // Month to expire valid lifetime. The type is Ipv6ndMonth.
    ExpiryMonth interface{}

    // Date to expire valid lifetime. The type is interface{} with range: 1..31.
    ExpiryDate interface{}

    // Year to expire valid lifetime. The type is interface{} with range:
    // 2003..2035.
    ExpiryYear interface{}

    // Hour to expire valid lifetime. The type is interface{} with range: 0..23.
    ExpiryHour interface{}

    // Minute to expire valid lifetime. The type is interface{} with range: 0..59.
    ExpiryMinute interface{}

    // Month to expire preferred lifetime. The type is Ipv6ndMonth.
    PrefExpiryMonth interface{}

    // Date to expire preferred lifetime. The type is interface{} with range:
    // 1..31.
    PrefExpiryDate interface{}

    // Year to expire preferred lifetime. The type is interface{} with range:
    // 2003..2035.
    PrefExpiryYear interface{}

    // Hour to expire preferred lifetime. The type is interface{} with range:
    // 0..23.
    PrefExpiryHour interface{}

    // Minute to expire preferred lifetime. The type is interface{} with range:
    // 0..59.
    PrefExpiryMinute interface{}
}

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetEntityData() *types.CommonEntityData {
    ipv6Prefix.EntityData.YFilter = ipv6Prefix.YFilter
    ipv6Prefix.EntityData.YangName = "ipv6-prefix"
    ipv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    ipv6Prefix.EntityData.ParentYangName = "ipv6-prefixes"
    ipv6Prefix.EntityData.SegmentPath = "ipv6-prefix" + "[prefix='" + fmt.Sprintf("%v", ipv6Prefix.Prefix) + "']"
    ipv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Prefix.EntityData.Children = make(map[string]types.YChild)
    ipv6Prefix.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6Prefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", ipv6Prefix.Prefix}
    ipv6Prefix.EntityData.Leafs["prefix-zone"] = types.YLeaf{"PrefixZone", ipv6Prefix.PrefixZone}
    ipv6Prefix.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv6Prefix.PrefixLength}
    ipv6Prefix.EntityData.Leafs["valid-lifetime"] = types.YLeaf{"ValidLifetime", ipv6Prefix.ValidLifetime}
    ipv6Prefix.EntityData.Leafs["preferred-lifetime"] = types.YLeaf{"PreferredLifetime", ipv6Prefix.PreferredLifetime}
    ipv6Prefix.EntityData.Leafs["off-link"] = types.YLeaf{"OffLink", ipv6Prefix.OffLink}
    ipv6Prefix.EntityData.Leafs["no-auto-config"] = types.YLeaf{"NoAutoConfig", ipv6Prefix.NoAutoConfig}
    ipv6Prefix.EntityData.Leafs["no-advertize"] = types.YLeaf{"NoAdvertize", ipv6Prefix.NoAdvertize}
    ipv6Prefix.EntityData.Leafs["expiry-month"] = types.YLeaf{"ExpiryMonth", ipv6Prefix.ExpiryMonth}
    ipv6Prefix.EntityData.Leafs["expiry-date"] = types.YLeaf{"ExpiryDate", ipv6Prefix.ExpiryDate}
    ipv6Prefix.EntityData.Leafs["expiry-year"] = types.YLeaf{"ExpiryYear", ipv6Prefix.ExpiryYear}
    ipv6Prefix.EntityData.Leafs["expiry-hour"] = types.YLeaf{"ExpiryHour", ipv6Prefix.ExpiryHour}
    ipv6Prefix.EntityData.Leafs["expiry-minute"] = types.YLeaf{"ExpiryMinute", ipv6Prefix.ExpiryMinute}
    ipv6Prefix.EntityData.Leafs["pref-expiry-month"] = types.YLeaf{"PrefExpiryMonth", ipv6Prefix.PrefExpiryMonth}
    ipv6Prefix.EntityData.Leafs["pref-expiry-date"] = types.YLeaf{"PrefExpiryDate", ipv6Prefix.PrefExpiryDate}
    ipv6Prefix.EntityData.Leafs["pref-expiry-year"] = types.YLeaf{"PrefExpiryYear", ipv6Prefix.PrefExpiryYear}
    ipv6Prefix.EntityData.Leafs["pref-expiry-hour"] = types.YLeaf{"PrefExpiryHour", ipv6Prefix.PrefExpiryHour}
    ipv6Prefix.EntityData.Leafs["pref-expiry-minute"] = types.YLeaf{"PrefExpiryMinute", ipv6Prefix.PrefExpiryMinute}
    return &(ipv6Prefix.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mpls
// MPLS configuration under an interface
type InterfaceConfigurations_InterfaceConfiguration_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the MPLS MTU for the interface. The type is interface{} with range:
    // 68..65535.
    Mtu interface{}

    // MPLS label security.
    LabelSecurity InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "interface-configuration"
    mpls.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-io-cfg:mpls"
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = make(map[string]types.YChild)
    mpls.EntityData.Children["label-security"] = types.YChild{"LabelSecurity", &mpls.LabelSecurity}
    mpls.EntityData.Leafs = make(map[string]types.YLeaf)
    mpls.EntityData.Leafs["mtu"] = types.YLeaf{"Mtu", mpls.Mtu}
    return &(mpls.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity
// MPLS label security
type InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable drop of multi-labelled incoming packets on a Interface. The type is
    // interface{}.
    MultiLabelDrop interface{}

    // Enable MPLS RPF for incoming packets on a Interface. The type is
    // interface{}.
    Rpf interface{}
}

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetEntityData() *types.CommonEntityData {
    labelSecurity.EntityData.YFilter = labelSecurity.YFilter
    labelSecurity.EntityData.YangName = "label-security"
    labelSecurity.EntityData.BundleName = "cisco_ios_xr"
    labelSecurity.EntityData.ParentYangName = "mpls"
    labelSecurity.EntityData.SegmentPath = "label-security"
    labelSecurity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSecurity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSecurity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSecurity.EntityData.Children = make(map[string]types.YChild)
    labelSecurity.EntityData.Leafs = make(map[string]types.YLeaf)
    labelSecurity.EntityData.Leafs["multi-label-drop"] = types.YLeaf{"MultiLabelDrop", labelSecurity.MultiLabelDrop}
    labelSecurity.EntityData.Leafs["rpf"] = types.YLeaf{"Rpf", labelSecurity.Rpf}
    return &(labelSecurity.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes
// MPLS tunnel attributes
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify MPLS tunnel to be path protected. The type is interface{}.
    PathProtection interface{}

    // Forward class value. The type is interface{} with range: 1..7.
    ForwardClass interface{}

    // Set the destination of the tunnel. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Destination interface{}

    // Record the route used by the tunnel. The type is interface{}.
    RecordRoute interface{}

    // Path selection metric to use in path calculation. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // Enable the soft-preemption feature on the tunnel. The type is interface{}.
    SoftPreemption interface{}

    // Tunnel loadsharing metric. The type is interface{} with range:
    // 1..4294967295.
    LoadShare interface{}

    // The name of the tunnel to be included in signalling messages. The type is
    // string with length: 1..254.
    SignalledName interface{}

    // Tunnel backup bandwidth requirement.
    BackupBandwidth InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth

    // BFD over TE LSP.
    BfdOverLsp InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp

    // Allocate MPLS binding segment ID.
    BindingSegmentIdMpls InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls

    // Forwarding adjacency announcement to IGP.
    ForwardingAdjacency InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency

    // Tunnel path protection state.
    PathOptionProtects InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects

    // Tunnel Interface Bidirectional configuration data.
    Bidirectional InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional

    // Performs admin operations on the optical tunnel interface.
    AdminMode InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode

    // Specify tunnel LSPs switching capability descriptor.
    Switching InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching

    // PCE config.
    Pce InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce

    // Configure path selection properties.
    TunnelPathSelection InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection

    // Tunnel Interface Auto-bandwidth configuration data.
    AutoBandwidth InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth

    // Tunnel Setup and Hold Priorities.
    Priority InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority

    // Set the affinity flags and mask.
    AffinityMask InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask

    // Log tunnel LSP messages.
    Logging InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging

    // Tunnel bandwidth requirement.
    Bandwidth InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth

    // Parameters for IGP routing over tunnel.
    Autoroute InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute

    // Policy classes for PBTS.
    PolicyClasses InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses

    // Tunnel new style affinity attributes table.
    NewStyleAffinityAffinityTypes InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes

    // Specify MPLS tunnel can be fast-rerouted.
    FastReroute InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute
}

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetEntityData() *types.CommonEntityData {
    tunnelTeAttributes.EntityData.YFilter = tunnelTeAttributes.YFilter
    tunnelTeAttributes.EntityData.YangName = "tunnel-te-attributes"
    tunnelTeAttributes.EntityData.BundleName = "cisco_ios_xr"
    tunnelTeAttributes.EntityData.ParentYangName = "interface-configuration"
    tunnelTeAttributes.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes"
    tunnelTeAttributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelTeAttributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelTeAttributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelTeAttributes.EntityData.Children = make(map[string]types.YChild)
    tunnelTeAttributes.EntityData.Children["backup-bandwidth"] = types.YChild{"BackupBandwidth", &tunnelTeAttributes.BackupBandwidth}
    tunnelTeAttributes.EntityData.Children["bfd-over-lsp"] = types.YChild{"BfdOverLsp", &tunnelTeAttributes.BfdOverLsp}
    tunnelTeAttributes.EntityData.Children["binding-segment-id-mpls"] = types.YChild{"BindingSegmentIdMpls", &tunnelTeAttributes.BindingSegmentIdMpls}
    tunnelTeAttributes.EntityData.Children["forwarding-adjacency"] = types.YChild{"ForwardingAdjacency", &tunnelTeAttributes.ForwardingAdjacency}
    tunnelTeAttributes.EntityData.Children["path-option-protects"] = types.YChild{"PathOptionProtects", &tunnelTeAttributes.PathOptionProtects}
    tunnelTeAttributes.EntityData.Children["bidirectional"] = types.YChild{"Bidirectional", &tunnelTeAttributes.Bidirectional}
    tunnelTeAttributes.EntityData.Children["admin-mode"] = types.YChild{"AdminMode", &tunnelTeAttributes.AdminMode}
    tunnelTeAttributes.EntityData.Children["switching"] = types.YChild{"Switching", &tunnelTeAttributes.Switching}
    tunnelTeAttributes.EntityData.Children["pce"] = types.YChild{"Pce", &tunnelTeAttributes.Pce}
    tunnelTeAttributes.EntityData.Children["tunnel-path-selection"] = types.YChild{"TunnelPathSelection", &tunnelTeAttributes.TunnelPathSelection}
    tunnelTeAttributes.EntityData.Children["auto-bandwidth"] = types.YChild{"AutoBandwidth", &tunnelTeAttributes.AutoBandwidth}
    tunnelTeAttributes.EntityData.Children["priority"] = types.YChild{"Priority", &tunnelTeAttributes.Priority}
    tunnelTeAttributes.EntityData.Children["affinity-mask"] = types.YChild{"AffinityMask", &tunnelTeAttributes.AffinityMask}
    tunnelTeAttributes.EntityData.Children["logging"] = types.YChild{"Logging", &tunnelTeAttributes.Logging}
    tunnelTeAttributes.EntityData.Children["bandwidth"] = types.YChild{"Bandwidth", &tunnelTeAttributes.Bandwidth}
    tunnelTeAttributes.EntityData.Children["autoroute"] = types.YChild{"Autoroute", &tunnelTeAttributes.Autoroute}
    tunnelTeAttributes.EntityData.Children["policy-classes"] = types.YChild{"PolicyClasses", &tunnelTeAttributes.PolicyClasses}
    tunnelTeAttributes.EntityData.Children["new-style-affinity-affinity-types"] = types.YChild{"NewStyleAffinityAffinityTypes", &tunnelTeAttributes.NewStyleAffinityAffinityTypes}
    tunnelTeAttributes.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &tunnelTeAttributes.FastReroute}
    tunnelTeAttributes.EntityData.Leafs = make(map[string]types.YLeaf)
    tunnelTeAttributes.EntityData.Leafs["path-protection"] = types.YLeaf{"PathProtection", tunnelTeAttributes.PathProtection}
    tunnelTeAttributes.EntityData.Leafs["forward-class"] = types.YLeaf{"ForwardClass", tunnelTeAttributes.ForwardClass}
    tunnelTeAttributes.EntityData.Leafs["destination"] = types.YLeaf{"Destination", tunnelTeAttributes.Destination}
    tunnelTeAttributes.EntityData.Leafs["record-route"] = types.YLeaf{"RecordRoute", tunnelTeAttributes.RecordRoute}
    tunnelTeAttributes.EntityData.Leafs["path-selection-metric"] = types.YLeaf{"PathSelectionMetric", tunnelTeAttributes.PathSelectionMetric}
    tunnelTeAttributes.EntityData.Leafs["soft-preemption"] = types.YLeaf{"SoftPreemption", tunnelTeAttributes.SoftPreemption}
    tunnelTeAttributes.EntityData.Leafs["load-share"] = types.YLeaf{"LoadShare", tunnelTeAttributes.LoadShare}
    tunnelTeAttributes.EntityData.Leafs["signalled-name"] = types.YLeaf{"SignalledName", tunnelTeAttributes.SignalledName}
    return &(tunnelTeAttributes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth
// Tunnel backup bandwidth requirement
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste.
    DsteType interface{}

    // Backup bandwidth pool type, relevant only if DSTEType is PreStandardDSTE.
    // The type is MplsTeBackupBandwidthPool.
    PoolType interface{}

    // Backup bandwidth class type, relevant only if DSTEType is StandardDSTE. The
    // type is MplsTeBackupBandwidthClass.
    ClassType interface{}

    // Backup bandwidth limit type. The type is MplsTeBandwidthLimit.
    LimitType interface{}

    // Backup bandwidth requested by this tunnel in kbps. Ignored if bandwidth
    // limit type is unlimited. The type is interface{} with range: 1..4294967295.
    BackupBandwidth interface{}
}

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetEntityData() *types.CommonEntityData {
    backupBandwidth.EntityData.YFilter = backupBandwidth.YFilter
    backupBandwidth.EntityData.YangName = "backup-bandwidth"
    backupBandwidth.EntityData.BundleName = "cisco_ios_xr"
    backupBandwidth.EntityData.ParentYangName = "tunnel-te-attributes"
    backupBandwidth.EntityData.SegmentPath = "backup-bandwidth"
    backupBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupBandwidth.EntityData.Children = make(map[string]types.YChild)
    backupBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    backupBandwidth.EntityData.Leafs["dste-type"] = types.YLeaf{"DsteType", backupBandwidth.DsteType}
    backupBandwidth.EntityData.Leafs["pool-type"] = types.YLeaf{"PoolType", backupBandwidth.PoolType}
    backupBandwidth.EntityData.Leafs["class-type"] = types.YLeaf{"ClassType", backupBandwidth.ClassType}
    backupBandwidth.EntityData.Leafs["limit-type"] = types.YLeaf{"LimitType", backupBandwidth.LimitType}
    backupBandwidth.EntityData.Leafs["backup-bandwidth"] = types.YLeaf{"BackupBandwidth", backupBandwidth.BackupBandwidth}
    return &(backupBandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp
// BFD over TE LSP
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Initial delay in milliseconds (default 16000). The type is interface{} with
    // range: 1..518400000.
    DampeningInitialWait interface{}

    // Enable BFD Fast Detect On the tunnel. The type is MplsTebfdSession.
    FastDetect interface{}

    // Always set to true. The type is interface{}.
    Enable interface{}

    // Specify the multiplier for BFD failure detection. The type is interface{}
    // with range: 3..10.
    Multiplier interface{}

    // Wait for session to come up in seconds (default 60). The type is
    // interface{} with range: 10..3600.
    BringupTimeout interface{}

    // Disable Periodic LSP Ping for BFD over LSP. The type is interface{}.
    PeriodicPingDisable interface{}

    // Secondary delay in milliseconds (default 20000). The type is interface{}
    // with range: 1..518400000.
    DampeningSecondaryWait interface{}

    // Periodic LSP Ping Interval in seconds (default 120). The type is
    // interface{} with range: 60..3600.
    PeriodicPingInterval interface{}

    // Maximum delay in milliseconds (default 600000). The type is interface{}
    // with range: 1..518400000.
    DampeningMaximumWait interface{}

    // Specify the minimum interval for BFD failure detection. The type is
    // interface{} with range: 3..30000.
    MinimumInterval interface{}

    // Specify BFD Encap Mode on the tunnel. The type is interface{} with range:
    // 0..1.
    EncapMode interface{}
}

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetEntityData() *types.CommonEntityData {
    bfdOverLsp.EntityData.YFilter = bfdOverLsp.YFilter
    bfdOverLsp.EntityData.YangName = "bfd-over-lsp"
    bfdOverLsp.EntityData.BundleName = "cisco_ios_xr"
    bfdOverLsp.EntityData.ParentYangName = "tunnel-te-attributes"
    bfdOverLsp.EntityData.SegmentPath = "bfd-over-lsp"
    bfdOverLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdOverLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdOverLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdOverLsp.EntityData.Children = make(map[string]types.YChild)
    bfdOverLsp.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdOverLsp.EntityData.Leafs["dampening-initial-wait"] = types.YLeaf{"DampeningInitialWait", bfdOverLsp.DampeningInitialWait}
    bfdOverLsp.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdOverLsp.FastDetect}
    bfdOverLsp.EntityData.Leafs["enable"] = types.YLeaf{"Enable", bfdOverLsp.Enable}
    bfdOverLsp.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", bfdOverLsp.Multiplier}
    bfdOverLsp.EntityData.Leafs["bringup-timeout"] = types.YLeaf{"BringupTimeout", bfdOverLsp.BringupTimeout}
    bfdOverLsp.EntityData.Leafs["periodic-ping-disable"] = types.YLeaf{"PeriodicPingDisable", bfdOverLsp.PeriodicPingDisable}
    bfdOverLsp.EntityData.Leafs["dampening-secondary-wait"] = types.YLeaf{"DampeningSecondaryWait", bfdOverLsp.DampeningSecondaryWait}
    bfdOverLsp.EntityData.Leafs["periodic-ping-interval"] = types.YLeaf{"PeriodicPingInterval", bfdOverLsp.PeriodicPingInterval}
    bfdOverLsp.EntityData.Leafs["dampening-maximum-wait"] = types.YLeaf{"DampeningMaximumWait", bfdOverLsp.DampeningMaximumWait}
    bfdOverLsp.EntityData.Leafs["minimum-interval"] = types.YLeaf{"MinimumInterval", bfdOverLsp.MinimumInterval}
    bfdOverLsp.EntityData.Leafs["encap-mode"] = types.YLeaf{"EncapMode", bfdOverLsp.EncapMode}
    return &(bfdOverLsp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls
// Allocate MPLS binding segment ID
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS label value type. The type is BindingSegmentId.
    SegmentIdType interface{}

    // MPLS label. The type is interface{} with range: 16..4015.
    LabelValue interface{}
}

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetEntityData() *types.CommonEntityData {
    bindingSegmentIdMpls.EntityData.YFilter = bindingSegmentIdMpls.YFilter
    bindingSegmentIdMpls.EntityData.YangName = "binding-segment-id-mpls"
    bindingSegmentIdMpls.EntityData.BundleName = "cisco_ios_xr"
    bindingSegmentIdMpls.EntityData.ParentYangName = "tunnel-te-attributes"
    bindingSegmentIdMpls.EntityData.SegmentPath = "binding-segment-id-mpls"
    bindingSegmentIdMpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingSegmentIdMpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingSegmentIdMpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingSegmentIdMpls.EntityData.Children = make(map[string]types.YChild)
    bindingSegmentIdMpls.EntityData.Leafs = make(map[string]types.YLeaf)
    bindingSegmentIdMpls.EntityData.Leafs["segment-id-type"] = types.YLeaf{"SegmentIdType", bindingSegmentIdMpls.SegmentIdType}
    bindingSegmentIdMpls.EntityData.Leafs["label-value"] = types.YLeaf{"LabelValue", bindingSegmentIdMpls.LabelValue}
    return &(bindingSegmentIdMpls.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency
// Forwarding adjacency announcement to IGP
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable forwarding adjacency. The type is interface{}.
    Enable interface{}

    // Specify that the tunnel should be an IPv6 forwarding adjacency also. The
    // type is interface{}.
    IncludeIpv6 interface{}

    // Specify the holdtime for the tunnel as forwarding adjacency. The type is
    // interface{} with range: 0..20000.
    HoldTime interface{}
}

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetEntityData() *types.CommonEntityData {
    forwardingAdjacency.EntityData.YFilter = forwardingAdjacency.YFilter
    forwardingAdjacency.EntityData.YangName = "forwarding-adjacency"
    forwardingAdjacency.EntityData.BundleName = "cisco_ios_xr"
    forwardingAdjacency.EntityData.ParentYangName = "tunnel-te-attributes"
    forwardingAdjacency.EntityData.SegmentPath = "forwarding-adjacency"
    forwardingAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingAdjacency.EntityData.Children = make(map[string]types.YChild)
    forwardingAdjacency.EntityData.Leafs = make(map[string]types.YLeaf)
    forwardingAdjacency.EntityData.Leafs["enable"] = types.YLeaf{"Enable", forwardingAdjacency.Enable}
    forwardingAdjacency.EntityData.Leafs["include-ipv6"] = types.YLeaf{"IncludeIpv6", forwardingAdjacency.IncludeIpv6}
    forwardingAdjacency.EntityData.Leafs["hold-time"] = types.YLeaf{"HoldTime", forwardingAdjacency.HoldTime}
    return &(forwardingAdjacency.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects
// Tunnel path protection state
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel path protection. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect.
    PathOptionProtect []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect
}

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetEntityData() *types.CommonEntityData {
    pathOptionProtects.EntityData.YFilter = pathOptionProtects.YFilter
    pathOptionProtects.EntityData.YangName = "path-option-protects"
    pathOptionProtects.EntityData.BundleName = "cisco_ios_xr"
    pathOptionProtects.EntityData.ParentYangName = "tunnel-te-attributes"
    pathOptionProtects.EntityData.SegmentPath = "path-option-protects"
    pathOptionProtects.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOptionProtects.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOptionProtects.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOptionProtects.EntityData.Children = make(map[string]types.YChild)
    pathOptionProtects.EntityData.Children["path-option-protect"] = types.YChild{"PathOptionProtect", nil}
    for i := range pathOptionProtects.PathOptionProtect {
        pathOptionProtects.EntityData.Children[types.GetSegmentPath(&pathOptionProtects.PathOptionProtect[i])] = types.YChild{"PathOptionProtect", &pathOptionProtects.PathOptionProtect[i]}
    }
    pathOptionProtects.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(pathOptionProtects.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect
// Tunnel path protection
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Protection type for this path. The type is
    // MplsTePathOptionProtection.
    Protection interface{}

    // Tunnel path options.
    PathOptions InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions
}

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetEntityData() *types.CommonEntityData {
    pathOptionProtect.EntityData.YFilter = pathOptionProtect.YFilter
    pathOptionProtect.EntityData.YangName = "path-option-protect"
    pathOptionProtect.EntityData.BundleName = "cisco_ios_xr"
    pathOptionProtect.EntityData.ParentYangName = "path-option-protects"
    pathOptionProtect.EntityData.SegmentPath = "path-option-protect" + "[protection='" + fmt.Sprintf("%v", pathOptionProtect.Protection) + "']"
    pathOptionProtect.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOptionProtect.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOptionProtect.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOptionProtect.EntityData.Children = make(map[string]types.YChild)
    pathOptionProtect.EntityData.Children["path-options"] = types.YChild{"PathOptions", &pathOptionProtect.PathOptions}
    pathOptionProtect.EntityData.Leafs = make(map[string]types.YLeaf)
    pathOptionProtect.EntityData.Leafs["protection"] = types.YLeaf{"Protection", pathOptionProtect.Protection}
    return &(pathOptionProtect.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions
// Tunnel path options
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A tunnel path option. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption.
    PathOption []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetEntityData() *types.CommonEntityData {
    pathOptions.EntityData.YFilter = pathOptions.YFilter
    pathOptions.EntityData.YangName = "path-options"
    pathOptions.EntityData.BundleName = "cisco_ios_xr"
    pathOptions.EntityData.ParentYangName = "path-option-protect"
    pathOptions.EntityData.SegmentPath = "path-options"
    pathOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOptions.EntityData.Children = make(map[string]types.YChild)
    pathOptions.EntityData.Children["path-option"] = types.YChild{"PathOption", nil}
    for i := range pathOptions.PathOption {
        pathOptions.EntityData.Children[types.GetSegmentPath(&pathOptions.PathOption[i])] = types.YChild{"PathOption", &pathOptions.PathOption[i]}
    }
    pathOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(pathOptions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption
// A tunnel path option
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Preference level for this path option. The type is
    // interface{} with range: 1..1000.
    PreferenceLevel interface{}

    // The type of the path option. The type is MplsTePathOption. This attribute
    // is mandatory.
    PathType interface{}

    // The ID of the IP explicit path associated with this option. The type is
    // interface{} with range: 1..65535. The default value is 1.
    PathId interface{}

    // The name of the IP explicit path associated with this option. The type is
    // string.
    PathName interface{}

    // Deprecated. The type is interface{} with range: -2147483648..2147483647.
    // The default value is 0.
    PathProperty interface{}

    // Deprecated. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    Interface_ interface{}

    // Deprecated. The type is interface{} with range: -2147483648..2147483647.
    // The default value is 0.
    OutputLabel interface{}

    // Deprecated. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // The default value is 0.0.0.0.
    Destination interface{}

    // Lockdown properties. The type is MplsTePathOptionProperty. The default
    // value is none.
    Lockdown interface{}

    // Verbatim properties. The type is MplsTePathOptionProperty. The default
    // value is none.
    Verbatim interface{}

    // PCE properties. The type is MplsTePathOptionProperty. The default value is
    // none.
    Pce interface{}

    // PCE address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // The default value is 0.0.0.0.
    PceAddress interface{}

    // IGP type. The type is MplsTeIgpProtocol. The default value is none.
    IgpType interface{}

    // IGP instance name. The type is string with length: 1..40.
    IgpInstance interface{}

    // IGP area ID in integer format. The type is interface{} with range:
    // -2147483648..2147483647. The default value is 0.
    IgpArea interface{}

    // IGP area ID in IP address format. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // The default value is 0.0.0.0.
    IgpAreaIpAddressId interface{}

    // Path option attribute set name. The type is string.
    PathOptionAttributeSetName interface{}

    // Preference level of the protecting explicit path. Leave unset in order to
    // not use an explicit protecting path. The type is interface{} with range:
    // 1..1000. The default value is 1.
    ProtectedByPreferenceLevel interface{}

    // SegmentRouting properties. The type is MplsTePathOptionProperty. The
    // default value is none.
    SegmentRouting interface{}
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetEntityData() *types.CommonEntityData {
    pathOption.EntityData.YFilter = pathOption.YFilter
    pathOption.EntityData.YangName = "path-option"
    pathOption.EntityData.BundleName = "cisco_ios_xr"
    pathOption.EntityData.ParentYangName = "path-options"
    pathOption.EntityData.SegmentPath = "path-option" + "[preference-level='" + fmt.Sprintf("%v", pathOption.PreferenceLevel) + "']"
    pathOption.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOption.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOption.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOption.EntityData.Children = make(map[string]types.YChild)
    pathOption.EntityData.Leafs = make(map[string]types.YLeaf)
    pathOption.EntityData.Leafs["preference-level"] = types.YLeaf{"PreferenceLevel", pathOption.PreferenceLevel}
    pathOption.EntityData.Leafs["path-type"] = types.YLeaf{"PathType", pathOption.PathType}
    pathOption.EntityData.Leafs["path-id"] = types.YLeaf{"PathId", pathOption.PathId}
    pathOption.EntityData.Leafs["path-name"] = types.YLeaf{"PathName", pathOption.PathName}
    pathOption.EntityData.Leafs["path-property"] = types.YLeaf{"PathProperty", pathOption.PathProperty}
    pathOption.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", pathOption.Interface_}
    pathOption.EntityData.Leafs["output-label"] = types.YLeaf{"OutputLabel", pathOption.OutputLabel}
    pathOption.EntityData.Leafs["destination"] = types.YLeaf{"Destination", pathOption.Destination}
    pathOption.EntityData.Leafs["lockdown"] = types.YLeaf{"Lockdown", pathOption.Lockdown}
    pathOption.EntityData.Leafs["verbatim"] = types.YLeaf{"Verbatim", pathOption.Verbatim}
    pathOption.EntityData.Leafs["pce"] = types.YLeaf{"Pce", pathOption.Pce}
    pathOption.EntityData.Leafs["pce-address"] = types.YLeaf{"PceAddress", pathOption.PceAddress}
    pathOption.EntityData.Leafs["igp-type"] = types.YLeaf{"IgpType", pathOption.IgpType}
    pathOption.EntityData.Leafs["igp-instance"] = types.YLeaf{"IgpInstance", pathOption.IgpInstance}
    pathOption.EntityData.Leafs["igp-area"] = types.YLeaf{"IgpArea", pathOption.IgpArea}
    pathOption.EntityData.Leafs["igp-area-ip-address-id"] = types.YLeaf{"IgpAreaIpAddressId", pathOption.IgpAreaIpAddressId}
    pathOption.EntityData.Leafs["path-option-attribute-set-name"] = types.YLeaf{"PathOptionAttributeSetName", pathOption.PathOptionAttributeSetName}
    pathOption.EntityData.Leafs["protected-by-preference-level"] = types.YLeaf{"ProtectedByPreferenceLevel", pathOption.ProtectedByPreferenceLevel}
    pathOption.EntityData.Leafs["segment-routing"] = types.YLeaf{"SegmentRouting", pathOption.SegmentRouting}
    return &(pathOption.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional
// Tunnel Interface Bidirectional configuration
// data
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is only valid for tunnel interfaces and it controls whether
    // that interface has bidirectional enabled on it or not. The type is
    // interface{}.
    Enabled interface{}

    // Association Corouted Type.
    AssociationCoroutedType InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType

    // Association ID, Source IP Address, and Global ID.
    AssociationParameters InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters
}

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetEntityData() *types.CommonEntityData {
    bidirectional.EntityData.YFilter = bidirectional.YFilter
    bidirectional.EntityData.YangName = "bidirectional"
    bidirectional.EntityData.BundleName = "cisco_ios_xr"
    bidirectional.EntityData.ParentYangName = "tunnel-te-attributes"
    bidirectional.EntityData.SegmentPath = "bidirectional"
    bidirectional.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bidirectional.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bidirectional.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bidirectional.EntityData.Children = make(map[string]types.YChild)
    bidirectional.EntityData.Children["association-corouted-type"] = types.YChild{"AssociationCoroutedType", &bidirectional.AssociationCoroutedType}
    bidirectional.EntityData.Children["association-parameters"] = types.YChild{"AssociationParameters", &bidirectional.AssociationParameters}
    bidirectional.EntityData.Leafs = make(map[string]types.YLeaf)
    bidirectional.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", bidirectional.Enabled}
    return &(bidirectional.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType
// Association Corouted Type
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is only valid for bidirectional tunnel interfaces and it
    // controls whether that interface has LSP Wrap protectionenabled on it or
    // not. The type is interface{}.
    WrapProtectionEnable interface{}

    // Controls whether association type is co-routed. The type is interface{}.
    Enable interface{}

    // Tunnel Fault OAM.
    FaultOam InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam
}

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetEntityData() *types.CommonEntityData {
    associationCoroutedType.EntityData.YFilter = associationCoroutedType.YFilter
    associationCoroutedType.EntityData.YangName = "association-corouted-type"
    associationCoroutedType.EntityData.BundleName = "cisco_ios_xr"
    associationCoroutedType.EntityData.ParentYangName = "bidirectional"
    associationCoroutedType.EntityData.SegmentPath = "association-corouted-type"
    associationCoroutedType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associationCoroutedType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associationCoroutedType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associationCoroutedType.EntityData.Children = make(map[string]types.YChild)
    associationCoroutedType.EntityData.Children["fault-oam"] = types.YChild{"FaultOam", &associationCoroutedType.FaultOam}
    associationCoroutedType.EntityData.Leafs = make(map[string]types.YLeaf)
    associationCoroutedType.EntityData.Leafs["wrap-protection-enable"] = types.YLeaf{"WrapProtectionEnable", associationCoroutedType.WrapProtectionEnable}
    associationCoroutedType.EntityData.Leafs["enable"] = types.YLeaf{"Enable", associationCoroutedType.Enable}
    return &(associationCoroutedType.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam
// Tunnel Fault OAM
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is only valid for bidirectional tunnel interfaces and it
    // controls whether that interface has fault OAM enabled on it or not. The
    // type is interface{}.
    Enable interface{}
}

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetEntityData() *types.CommonEntityData {
    faultOam.EntityData.YFilter = faultOam.YFilter
    faultOam.EntityData.YangName = "fault-oam"
    faultOam.EntityData.BundleName = "cisco_ios_xr"
    faultOam.EntityData.ParentYangName = "association-corouted-type"
    faultOam.EntityData.SegmentPath = "fault-oam"
    faultOam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    faultOam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    faultOam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    faultOam.EntityData.Children = make(map[string]types.YChild)
    faultOam.EntityData.Leafs = make(map[string]types.YLeaf)
    faultOam.EntityData.Leafs["enable"] = types.YLeaf{"Enable", faultOam.Enable}
    return &(faultOam.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters
// Association ID, Source IP Address, and Global
// ID
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Association ID. The type is interface{} with range: 0..65535. This
    // attribute is mandatory.
    AssociationId interface{}

    // Association Source IP Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // This attribute is mandatory.
    AssociationSourceAddress interface{}

    // Is Association Global ID Configured. The type is bool.
    AssociationIsGlobalIdConfigured interface{}

    // Association Global ID. The type is interface{} with range: 0..4294967295.
    AssociationGlobalId interface{}
}

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetEntityData() *types.CommonEntityData {
    associationParameters.EntityData.YFilter = associationParameters.YFilter
    associationParameters.EntityData.YangName = "association-parameters"
    associationParameters.EntityData.BundleName = "cisco_ios_xr"
    associationParameters.EntityData.ParentYangName = "bidirectional"
    associationParameters.EntityData.SegmentPath = "association-parameters"
    associationParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associationParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associationParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associationParameters.EntityData.Children = make(map[string]types.YChild)
    associationParameters.EntityData.Leafs = make(map[string]types.YLeaf)
    associationParameters.EntityData.Leafs["association-id"] = types.YLeaf{"AssociationId", associationParameters.AssociationId}
    associationParameters.EntityData.Leafs["association-source-address"] = types.YLeaf{"AssociationSourceAddress", associationParameters.AssociationSourceAddress}
    associationParameters.EntityData.Leafs["association-is-global-id-configured"] = types.YLeaf{"AssociationIsGlobalIdConfigured", associationParameters.AssociationIsGlobalIdConfigured}
    associationParameters.EntityData.Leafs["association-global-id"] = types.YLeaf{"AssociationGlobalId", associationParameters.AssociationGlobalId}
    return &(associationParameters.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode
// Performs admin operations on the optical tunnel
// interface
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Performs signalling operation to deactivate optical tunnel. The type is
    // interface{}.
    DeactivateTunnel interface{}
}

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetEntityData() *types.CommonEntityData {
    adminMode.EntityData.YFilter = adminMode.YFilter
    adminMode.EntityData.YangName = "admin-mode"
    adminMode.EntityData.BundleName = "cisco_ios_xr"
    adminMode.EntityData.ParentYangName = "tunnel-te-attributes"
    adminMode.EntityData.SegmentPath = "admin-mode"
    adminMode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adminMode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adminMode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adminMode.EntityData.Children = make(map[string]types.YChild)
    adminMode.EntityData.Leafs = make(map[string]types.YLeaf)
    adminMode.EntityData.Leafs["deactivate-tunnel"] = types.YLeaf{"DeactivateTunnel", adminMode.DeactivateTunnel}
    return &(adminMode.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching
// Specify tunnel LSPs switching capability
// descriptor
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify transit switching descriptor parameters.
    Transit InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit

    // Specify end point switching descriptor parameters.
    Endpoint InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint
}

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetEntityData() *types.CommonEntityData {
    switching.EntityData.YFilter = switching.YFilter
    switching.EntityData.YangName = "switching"
    switching.EntityData.BundleName = "cisco_ios_xr"
    switching.EntityData.ParentYangName = "tunnel-te-attributes"
    switching.EntityData.SegmentPath = "switching"
    switching.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switching.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switching.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switching.EntityData.Children = make(map[string]types.YChild)
    switching.EntityData.Children["transit"] = types.YChild{"Transit", &switching.Transit}
    switching.EntityData.Children["endpoint"] = types.YChild{"Endpoint", &switching.Endpoint}
    switching.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(switching.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit
// Specify transit switching descriptor
// parameters
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Switching capability. The type is MplsTeSwitchingCap. This attribute is
    // mandatory.
    Capability interface{}

    // LSP encoding. The type is MplsTeSwitchingEncode.
    Encoding interface{}
}

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetEntityData() *types.CommonEntityData {
    transit.EntityData.YFilter = transit.YFilter
    transit.EntityData.YangName = "transit"
    transit.EntityData.BundleName = "cisco_ios_xr"
    transit.EntityData.ParentYangName = "switching"
    transit.EntityData.SegmentPath = "transit"
    transit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transit.EntityData.Children = make(map[string]types.YChild)
    transit.EntityData.Leafs = make(map[string]types.YLeaf)
    transit.EntityData.Leafs["capability"] = types.YLeaf{"Capability", transit.Capability}
    transit.EntityData.Leafs["encoding"] = types.YLeaf{"Encoding", transit.Encoding}
    return &(transit.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint
// Specify end point switching descriptor
// parameters
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Switching capability. The type is MplsTeSwitchingCap. This attribute is
    // mandatory.
    Capability interface{}

    // LSP encoding. The type is MplsTeSwitchingEncode.
    Encoding interface{}
}

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetEntityData() *types.CommonEntityData {
    endpoint.EntityData.YFilter = endpoint.YFilter
    endpoint.EntityData.YangName = "endpoint"
    endpoint.EntityData.BundleName = "cisco_ios_xr"
    endpoint.EntityData.ParentYangName = "switching"
    endpoint.EntityData.SegmentPath = "endpoint"
    endpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endpoint.EntityData.Children = make(map[string]types.YChild)
    endpoint.EntityData.Leafs = make(map[string]types.YLeaf)
    endpoint.EntityData.Leafs["capability"] = types.YLeaf{"Capability", endpoint.Capability}
    endpoint.EntityData.Leafs["encoding"] = types.YLeaf{"Encoding", endpoint.Encoding}
    return &(endpoint.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce
// PCE config
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Always set to true. The type is interface{}.
    Enable interface{}

    // Enable PCE Delegation. The type is interface{}.
    Delegation interface{}
}

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetEntityData() *types.CommonEntityData {
    pce.EntityData.YFilter = pce.YFilter
    pce.EntityData.YangName = "pce"
    pce.EntityData.BundleName = "cisco_ios_xr"
    pce.EntityData.ParentYangName = "tunnel-te-attributes"
    pce.EntityData.SegmentPath = "pce"
    pce.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pce.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pce.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pce.EntityData.Children = make(map[string]types.YChild)
    pce.EntityData.Leafs = make(map[string]types.YLeaf)
    pce.EntityData.Leafs["enable"] = types.YLeaf{"Enable", pce.Enable}
    pce.EntityData.Leafs["delegation"] = types.YLeaf{"Delegation", pce.Delegation}
    return &(pce.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection
// Configure path selection properties
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // CSPF tiebreaker to use in path calculation. The type is
    // MplsTePathSelectionTiebreaker.
    Tiebreaker interface{}

    // Path selection hop limit configuration for this specific tunnel. The type
    // is interface{} with range: 1..255.
    PathSelectionHopLimit interface{}

    // Path selection cost limit configuration for this specific tunnel. The type
    // is interface{} with range: 1..4294967295.
    PathSelectionCostLimit interface{}

    // Path invalidation configuration for this specific tunnel.
    Invalidation InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation
}

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetEntityData() *types.CommonEntityData {
    tunnelPathSelection.EntityData.YFilter = tunnelPathSelection.YFilter
    tunnelPathSelection.EntityData.YangName = "tunnel-path-selection"
    tunnelPathSelection.EntityData.BundleName = "cisco_ios_xr"
    tunnelPathSelection.EntityData.ParentYangName = "tunnel-te-attributes"
    tunnelPathSelection.EntityData.SegmentPath = "tunnel-path-selection"
    tunnelPathSelection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelPathSelection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelPathSelection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelPathSelection.EntityData.Children = make(map[string]types.YChild)
    tunnelPathSelection.EntityData.Children["invalidation"] = types.YChild{"Invalidation", &tunnelPathSelection.Invalidation}
    tunnelPathSelection.EntityData.Leafs = make(map[string]types.YLeaf)
    tunnelPathSelection.EntityData.Leafs["tiebreaker"] = types.YLeaf{"Tiebreaker", tunnelPathSelection.Tiebreaker}
    tunnelPathSelection.EntityData.Leafs["path-selection-hop-limit"] = types.YLeaf{"PathSelectionHopLimit", tunnelPathSelection.PathSelectionHopLimit}
    tunnelPathSelection.EntityData.Leafs["path-selection-cost-limit"] = types.YLeaf{"PathSelectionCostLimit", tunnelPathSelection.PathSelectionCostLimit}
    return &(tunnelPathSelection.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation
// Path invalidation configuration for this
// specific tunnel
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Path Invalidation Timeout. The type is interface{} with range: 0..60000.
    PathInvalidationTimeout interface{}

    // Path Invalidation Action. The type is PathInvalidationAction.
    PathInvalidationAction interface{}
}

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetEntityData() *types.CommonEntityData {
    invalidation.EntityData.YFilter = invalidation.YFilter
    invalidation.EntityData.YangName = "invalidation"
    invalidation.EntityData.BundleName = "cisco_ios_xr"
    invalidation.EntityData.ParentYangName = "tunnel-path-selection"
    invalidation.EntityData.SegmentPath = "invalidation"
    invalidation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalidation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalidation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalidation.EntityData.Children = make(map[string]types.YChild)
    invalidation.EntityData.Leafs = make(map[string]types.YLeaf)
    invalidation.EntityData.Leafs["path-invalidation-timeout"] = types.YLeaf{"PathInvalidationTimeout", invalidation.PathInvalidationTimeout}
    invalidation.EntityData.Leafs["path-invalidation-action"] = types.YLeaf{"PathInvalidationAction", invalidation.PathInvalidationAction}
    return &(invalidation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth
// Tunnel Interface Auto-bandwidth configuration
// data
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable auto bandwidth underflow detection. The type is bool.
    UnderflowEnable interface{}

    // This object is only valid for tunnel interfaces and it controls whether
    // that interface has auto-bw enabled on it or not.The object must be set
    // before any other auto-bw configuration is supplied for the interface, and
    // must be the last auto-bw configuration object to be removed . The type is
    // bool.
    Enabled interface{}

    // Set the tunnel auto-bw application frequency in minutes. The type is
    // interface{} with range: 5..10080. Units are minute.
    ApplicationFrequency interface{}

    // Enable auto bandwidth overflow detection. The type is bool.
    OverflowEnable interface{}

    // Enable bandwidth collection only, no auto-bw adjustment. The type is
    // interface{}.
    CollectionOnly interface{}

    // Configuring the tunnel underflow detection.
    Underflow InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow

    // Configuring the tunnel overflow detection.
    Overflow InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow

    // Set min/max bandwidth auto-bw can apply on a tunnel.
    BandwidthLimits InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits

    // Set the bandwidth change threshold to trigger adjustment.
    AdjustmentThreshold InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold
}

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetEntityData() *types.CommonEntityData {
    autoBandwidth.EntityData.YFilter = autoBandwidth.YFilter
    autoBandwidth.EntityData.YangName = "auto-bandwidth"
    autoBandwidth.EntityData.BundleName = "cisco_ios_xr"
    autoBandwidth.EntityData.ParentYangName = "tunnel-te-attributes"
    autoBandwidth.EntityData.SegmentPath = "auto-bandwidth"
    autoBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoBandwidth.EntityData.Children = make(map[string]types.YChild)
    autoBandwidth.EntityData.Children["underflow"] = types.YChild{"Underflow", &autoBandwidth.Underflow}
    autoBandwidth.EntityData.Children["overflow"] = types.YChild{"Overflow", &autoBandwidth.Overflow}
    autoBandwidth.EntityData.Children["bandwidth-limits"] = types.YChild{"BandwidthLimits", &autoBandwidth.BandwidthLimits}
    autoBandwidth.EntityData.Children["adjustment-threshold"] = types.YChild{"AdjustmentThreshold", &autoBandwidth.AdjustmentThreshold}
    autoBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    autoBandwidth.EntityData.Leafs["underflow-enable"] = types.YLeaf{"UnderflowEnable", autoBandwidth.UnderflowEnable}
    autoBandwidth.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", autoBandwidth.Enabled}
    autoBandwidth.EntityData.Leafs["application-frequency"] = types.YLeaf{"ApplicationFrequency", autoBandwidth.ApplicationFrequency}
    autoBandwidth.EntityData.Leafs["overflow-enable"] = types.YLeaf{"OverflowEnable", autoBandwidth.OverflowEnable}
    autoBandwidth.EntityData.Leafs["collection-only"] = types.YLeaf{"CollectionOnly", autoBandwidth.CollectionOnly}
    return &(autoBandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow
// Configuring the tunnel underflow detection
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth change percent to trigger an underflow. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    UnderflowThresholdPercent interface{}

    // Bandwidth change value to trigger an underflow (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    UnderflowThresholdValue interface{}

    // Number of consecutive collections exceeding threshold. The type is
    // interface{} with range: 1..10. This attribute is mandatory.
    UnderflowThresholdLimit interface{}
}

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetEntityData() *types.CommonEntityData {
    underflow.EntityData.YFilter = underflow.YFilter
    underflow.EntityData.YangName = "underflow"
    underflow.EntityData.BundleName = "cisco_ios_xr"
    underflow.EntityData.ParentYangName = "auto-bandwidth"
    underflow.EntityData.SegmentPath = "underflow"
    underflow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underflow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underflow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underflow.EntityData.Children = make(map[string]types.YChild)
    underflow.EntityData.Leafs = make(map[string]types.YLeaf)
    underflow.EntityData.Leafs["underflow-threshold-percent"] = types.YLeaf{"UnderflowThresholdPercent", underflow.UnderflowThresholdPercent}
    underflow.EntityData.Leafs["underflow-threshold-value"] = types.YLeaf{"UnderflowThresholdValue", underflow.UnderflowThresholdValue}
    underflow.EntityData.Leafs["underflow-threshold-limit"] = types.YLeaf{"UnderflowThresholdLimit", underflow.UnderflowThresholdLimit}
    return &(underflow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow
// Configuring the tunnel overflow detection
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth change percent to trigger an overflow. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    OverflowThresholdPercent interface{}

    // Bandwidth change value to trigger an overflow (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    OverflowThresholdValue interface{}

    // Number of consecutive collections exceeding threshold. The type is
    // interface{} with range: 1..10. This attribute is mandatory.
    OverflowThresholdLimit interface{}
}

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetEntityData() *types.CommonEntityData {
    overflow.EntityData.YFilter = overflow.YFilter
    overflow.EntityData.YangName = "overflow"
    overflow.EntityData.BundleName = "cisco_ios_xr"
    overflow.EntityData.ParentYangName = "auto-bandwidth"
    overflow.EntityData.SegmentPath = "overflow"
    overflow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    overflow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    overflow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    overflow.EntityData.Children = make(map[string]types.YChild)
    overflow.EntityData.Leafs = make(map[string]types.YLeaf)
    overflow.EntityData.Leafs["overflow-threshold-percent"] = types.YLeaf{"OverflowThresholdPercent", overflow.OverflowThresholdPercent}
    overflow.EntityData.Leafs["overflow-threshold-value"] = types.YLeaf{"OverflowThresholdValue", overflow.OverflowThresholdValue}
    overflow.EntityData.Leafs["overflow-threshold-limit"] = types.YLeaf{"OverflowThresholdLimit", overflow.OverflowThresholdLimit}
    return &(overflow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits
// Set min/max bandwidth auto-bw can apply on a
// tunnel
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set minimum bandwidth auto-bw can apply on a tunnel. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory.
    BandwidthMinLimit interface{}

    // Set maximum bandwidth auto-bw can apply on a tunnel. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory.
    BandwidthMaxLimit interface{}
}

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetEntityData() *types.CommonEntityData {
    bandwidthLimits.EntityData.YFilter = bandwidthLimits.YFilter
    bandwidthLimits.EntityData.YangName = "bandwidth-limits"
    bandwidthLimits.EntityData.BundleName = "cisco_ios_xr"
    bandwidthLimits.EntityData.ParentYangName = "auto-bandwidth"
    bandwidthLimits.EntityData.SegmentPath = "bandwidth-limits"
    bandwidthLimits.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthLimits.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthLimits.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthLimits.EntityData.Children = make(map[string]types.YChild)
    bandwidthLimits.EntityData.Leafs = make(map[string]types.YLeaf)
    bandwidthLimits.EntityData.Leafs["bandwidth-min-limit"] = types.YLeaf{"BandwidthMinLimit", bandwidthLimits.BandwidthMinLimit}
    bandwidthLimits.EntityData.Leafs["bandwidth-max-limit"] = types.YLeaf{"BandwidthMaxLimit", bandwidthLimits.BandwidthMaxLimit}
    return &(bandwidthLimits.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold
// Set the bandwidth change threshold to trigger
// adjustment
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth change percent to trigger adjustment. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    AdjustmentThresholdPercent interface{}

    // Bandwidth change value to trigger adjustment (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    AdjustmentThresholdValue interface{}
}

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetEntityData() *types.CommonEntityData {
    adjustmentThreshold.EntityData.YFilter = adjustmentThreshold.YFilter
    adjustmentThreshold.EntityData.YangName = "adjustment-threshold"
    adjustmentThreshold.EntityData.BundleName = "cisco_ios_xr"
    adjustmentThreshold.EntityData.ParentYangName = "auto-bandwidth"
    adjustmentThreshold.EntityData.SegmentPath = "adjustment-threshold"
    adjustmentThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjustmentThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjustmentThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjustmentThreshold.EntityData.Children = make(map[string]types.YChild)
    adjustmentThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    adjustmentThreshold.EntityData.Leafs["adjustment-threshold-percent"] = types.YLeaf{"AdjustmentThresholdPercent", adjustmentThreshold.AdjustmentThresholdPercent}
    adjustmentThreshold.EntityData.Leafs["adjustment-threshold-value"] = types.YLeaf{"AdjustmentThresholdValue", adjustmentThreshold.AdjustmentThresholdValue}
    return &(adjustmentThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority
// Tunnel Setup and Hold Priorities
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetEntityData() *types.CommonEntityData {
    priority.EntityData.YFilter = priority.YFilter
    priority.EntityData.YangName = "priority"
    priority.EntityData.BundleName = "cisco_ios_xr"
    priority.EntityData.ParentYangName = "tunnel-te-attributes"
    priority.EntityData.SegmentPath = "priority"
    priority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    priority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    priority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    priority.EntityData.Children = make(map[string]types.YChild)
    priority.EntityData.Leafs = make(map[string]types.YLeaf)
    priority.EntityData.Leafs["setup-priority"] = types.YLeaf{"SetupPriority", priority.SetupPriority}
    priority.EntityData.Leafs["hold-priority"] = types.YLeaf{"HoldPriority", priority.HoldPriority}
    return &(priority.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask
// Set the affinity flags and mask
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: b'[0-9a-fA-F]{1,8}'. This
    // attribute is mandatory.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: b'[0-9a-fA-F]{1,8}'. This
    // attribute is mandatory.
    Mask interface{}
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetEntityData() *types.CommonEntityData {
    affinityMask.EntityData.YFilter = affinityMask.YFilter
    affinityMask.EntityData.YangName = "affinity-mask"
    affinityMask.EntityData.BundleName = "cisco_ios_xr"
    affinityMask.EntityData.ParentYangName = "tunnel-te-attributes"
    affinityMask.EntityData.SegmentPath = "affinity-mask"
    affinityMask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    affinityMask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    affinityMask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    affinityMask.EntityData.Children = make(map[string]types.YChild)
    affinityMask.EntityData.Leafs = make(map[string]types.YLeaf)
    affinityMask.EntityData.Leafs["affinity"] = types.YLeaf{"Affinity", affinityMask.Affinity}
    affinityMask.EntityData.Leafs["mask"] = types.YLeaf{"Mask", affinityMask.Mask}
    return &(affinityMask.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging
// Log tunnel LSP messages
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log tunnel messages for bandwidth change. The type is interface{}.
    LspSwitchOverChangeMessage interface{}

    // Log all events for a tunnel. The type is interface{}.
    All interface{}

    // Log tunnel record-route messages. The type is interface{}.
    RecordRouteMesssage interface{}

    // Enable BFD session state change alarm. The type is interface{}.
    BfdStateMessage interface{}

    // Log tunnel messages for bandwidth change. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetEntityData() *types.CommonEntityData {
    logging.EntityData.YFilter = logging.YFilter
    logging.EntityData.YangName = "logging"
    logging.EntityData.BundleName = "cisco_ios_xr"
    logging.EntityData.ParentYangName = "tunnel-te-attributes"
    logging.EntityData.SegmentPath = "logging"
    logging.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logging.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logging.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logging.EntityData.Children = make(map[string]types.YChild)
    logging.EntityData.Leafs = make(map[string]types.YLeaf)
    logging.EntityData.Leafs["lsp-switch-over-change-message"] = types.YLeaf{"LspSwitchOverChangeMessage", logging.LspSwitchOverChangeMessage}
    logging.EntityData.Leafs["all"] = types.YLeaf{"All", logging.All}
    logging.EntityData.Leafs["record-route-messsage"] = types.YLeaf{"RecordRouteMesssage", logging.RecordRouteMesssage}
    logging.EntityData.Leafs["bfd-state-message"] = types.YLeaf{"BfdStateMessage", logging.BfdStateMessage}
    logging.EntityData.Leafs["bandwidth-change-message"] = types.YLeaf{"BandwidthChangeMessage", logging.BandwidthChangeMessage}
    logging.EntityData.Leafs["reoptimize-attempts-message"] = types.YLeaf{"ReoptimizeAttemptsMessage", logging.ReoptimizeAttemptsMessage}
    logging.EntityData.Leafs["reroute-messsage"] = types.YLeaf{"RerouteMesssage", logging.RerouteMesssage}
    logging.EntityData.Leafs["state-message"] = types.YLeaf{"StateMessage", logging.StateMessage}
    logging.EntityData.Leafs["insufficient-bw-message"] = types.YLeaf{"InsufficientBwMessage", logging.InsufficientBwMessage}
    logging.EntityData.Leafs["reoptimized-message"] = types.YLeaf{"ReoptimizedMessage", logging.ReoptimizedMessage}
    logging.EntityData.Leafs["pcalc-failure-message"] = types.YLeaf{"PcalcFailureMessage", logging.PcalcFailureMessage}
    return &(logging.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth
// Tunnel bandwidth requirement
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste. This attribute is
    // mandatory.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1. This attribute is mandatory.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    Bandwidth interface{}
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetEntityData() *types.CommonEntityData {
    bandwidth.EntityData.YFilter = bandwidth.YFilter
    bandwidth.EntityData.YangName = "bandwidth"
    bandwidth.EntityData.BundleName = "cisco_ios_xr"
    bandwidth.EntityData.ParentYangName = "tunnel-te-attributes"
    bandwidth.EntityData.SegmentPath = "bandwidth"
    bandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidth.EntityData.Children = make(map[string]types.YChild)
    bandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    bandwidth.EntityData.Leafs["dste-type"] = types.YLeaf{"DsteType", bandwidth.DsteType}
    bandwidth.EntityData.Leafs["class-or-pool-type"] = types.YLeaf{"ClassOrPoolType", bandwidth.ClassOrPoolType}
    bandwidth.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", bandwidth.Bandwidth}
    return &(bandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute
// Parameters for IGP routing over tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Announce tunnel to IGP.
    AutorouteAnnounce InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce

    // Tunnel Autoroute Destination(s).
    Destinations InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations
}

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetEntityData() *types.CommonEntityData {
    autoroute.EntityData.YFilter = autoroute.YFilter
    autoroute.EntityData.YangName = "autoroute"
    autoroute.EntityData.BundleName = "cisco_ios_xr"
    autoroute.EntityData.ParentYangName = "tunnel-te-attributes"
    autoroute.EntityData.SegmentPath = "autoroute"
    autoroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoroute.EntityData.Children = make(map[string]types.YChild)
    autoroute.EntityData.Children["autoroute-announce"] = types.YChild{"AutorouteAnnounce", &autoroute.AutorouteAnnounce}
    autoroute.EntityData.Children["destinations"] = types.YChild{"Destinations", &autoroute.Destinations}
    autoroute.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(autoroute.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce
// Announce tunnel to IGP
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable autoroute announce. The type is interface{}.
    Enable interface{}

    // Specify that the tunnel should be an IPv6 autoroute announce also. The type
    // is interface{}.
    IncludeIpv6 interface{}

    // Exclude traffic on autorouted tunnel.
    ExcludeTraffic InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic

    // Specify MPLS tunnel metric.
    Metric InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric
}

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetEntityData() *types.CommonEntityData {
    autorouteAnnounce.EntityData.YFilter = autorouteAnnounce.YFilter
    autorouteAnnounce.EntityData.YangName = "autoroute-announce"
    autorouteAnnounce.EntityData.BundleName = "cisco_ios_xr"
    autorouteAnnounce.EntityData.ParentYangName = "autoroute"
    autorouteAnnounce.EntityData.SegmentPath = "autoroute-announce"
    autorouteAnnounce.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autorouteAnnounce.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autorouteAnnounce.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autorouteAnnounce.EntityData.Children = make(map[string]types.YChild)
    autorouteAnnounce.EntityData.Children["exclude-traffic"] = types.YChild{"ExcludeTraffic", &autorouteAnnounce.ExcludeTraffic}
    autorouteAnnounce.EntityData.Children["metric"] = types.YChild{"Metric", &autorouteAnnounce.Metric}
    autorouteAnnounce.EntityData.Leafs = make(map[string]types.YLeaf)
    autorouteAnnounce.EntityData.Leafs["enable"] = types.YLeaf{"Enable", autorouteAnnounce.Enable}
    autorouteAnnounce.EntityData.Leafs["include-ipv6"] = types.YLeaf{"IncludeIpv6", autorouteAnnounce.IncludeIpv6}
    return &(autorouteAnnounce.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic
// Exclude traffic on autorouted tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude tunnel in IGP for SR prefixes. The type is interface{}.
    SegmentRouting interface{}
}

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetEntityData() *types.CommonEntityData {
    excludeTraffic.EntityData.YFilter = excludeTraffic.YFilter
    excludeTraffic.EntityData.YangName = "exclude-traffic"
    excludeTraffic.EntityData.BundleName = "cisco_ios_xr"
    excludeTraffic.EntityData.ParentYangName = "autoroute-announce"
    excludeTraffic.EntityData.SegmentPath = "exclude-traffic"
    excludeTraffic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeTraffic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeTraffic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeTraffic.EntityData.Children = make(map[string]types.YChild)
    excludeTraffic.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeTraffic.EntityData.Leafs["segment-routing"] = types.YLeaf{"SegmentRouting", excludeTraffic.SegmentRouting}
    return &(excludeTraffic.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric
// Specify MPLS tunnel metric
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autoroute tunnel metric type. The type is MplsTeAutorouteMetric.
    MetricType interface{}

    // The absolute metric value. The type is interface{} with range:
    // 1..2147483647.
    AbsoluteMetric interface{}

    // The value of the adjustment. The type is interface{} with range: -10..10.
    RelativeMetric interface{}

    // The constant metric value. The type is interface{} with range:
    // 1..2147483647.
    ConstantMetric interface{}
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetEntityData() *types.CommonEntityData {
    metric.EntityData.YFilter = metric.YFilter
    metric.EntityData.YangName = "metric"
    metric.EntityData.BundleName = "cisco_ios_xr"
    metric.EntityData.ParentYangName = "autoroute-announce"
    metric.EntityData.SegmentPath = "metric"
    metric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    metric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    metric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    metric.EntityData.Children = make(map[string]types.YChild)
    metric.EntityData.Leafs = make(map[string]types.YLeaf)
    metric.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", metric.MetricType}
    metric.EntityData.Leafs["absolute-metric"] = types.YLeaf{"AbsoluteMetric", metric.AbsoluteMetric}
    metric.EntityData.Leafs["relative-metric"] = types.YLeaf{"RelativeMetric", metric.RelativeMetric}
    metric.EntityData.Leafs["constant-metric"] = types.YLeaf{"ConstantMetric", metric.ConstantMetric}
    return &(metric.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations
// Tunnel Autoroute Destination(s)
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address to add in RIB. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination.
    Destination []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination
}

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetEntityData() *types.CommonEntityData {
    destinations.EntityData.YFilter = destinations.YFilter
    destinations.EntityData.YangName = "destinations"
    destinations.EntityData.BundleName = "cisco_ios_xr"
    destinations.EntityData.ParentYangName = "autoroute"
    destinations.EntityData.SegmentPath = "destinations"
    destinations.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinations.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinations.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinations.EntityData.Children = make(map[string]types.YChild)
    destinations.EntityData.Children["destination"] = types.YChild{"Destination", nil}
    for i := range destinations.Destination {
        destinations.EntityData.Children[types.GetSegmentPath(&destinations.Destination[i])] = types.YChild{"Destination", &destinations.Destination[i]}
    }
    destinations.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(destinations.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination
// Destination address to add in RIB
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP address of destination. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "destinations"
    destination.EntityData.SegmentPath = "destination" + "[destination-address='" + fmt.Sprintf("%v", destination.DestinationAddress) + "']"
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = make(map[string]types.YChild)
    destination.EntityData.Leafs = make(map[string]types.YLeaf)
    destination.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", destination.DestinationAddress}
    return &(destination.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses
// Policy classes for PBTS
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of Policy class. The type is slice of interface{} with range: 1..8.
    PolicyClass []interface{}
}

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetEntityData() *types.CommonEntityData {
    policyClasses.EntityData.YFilter = policyClasses.YFilter
    policyClasses.EntityData.YangName = "policy-classes"
    policyClasses.EntityData.BundleName = "cisco_ios_xr"
    policyClasses.EntityData.ParentYangName = "tunnel-te-attributes"
    policyClasses.EntityData.SegmentPath = "policy-classes"
    policyClasses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyClasses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyClasses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyClasses.EntityData.Children = make(map[string]types.YChild)
    policyClasses.EntityData.Leafs = make(map[string]types.YLeaf)
    policyClasses.EntityData.Leafs["policy-class"] = types.YLeaf{"PolicyClass", policyClasses.PolicyClass}
    return &(policyClasses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes
// Tunnel new style affinity attributes table
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
    NewStyleAffinityAffinityType []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
    NewStyleAffinityAffinityTypeAffinity1 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
    NewStyleAffinityAffinityTypeAffinity1Affinity2 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
}

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypes.EntityData.YFilter = newStyleAffinityAffinityTypes.YFilter
    newStyleAffinityAffinityTypes.EntityData.YangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypes.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypes.EntityData.ParentYangName = "tunnel-te-attributes"
    newStyleAffinityAffinityTypes.EntityData.SegmentPath = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypes.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type"] = types.YChild{"NewStyleAffinityAffinityType", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i])] = types.YChild{"NewStyleAffinityAffinityType", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1-affinity2"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1-affinity2-affinity3"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Children["new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10"] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", nil}
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
        newStyleAffinityAffinityTypes.EntityData.Children[types.GetSegmentPath(&newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i])] = types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]}
    }
    newStyleAffinityAffinityTypes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(newStyleAffinityAffinityTypes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}
}

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityType.EntityData.YFilter = newStyleAffinityAffinityType.YFilter
    newStyleAffinityAffinityType.EntityData.YangName = "new-style-affinity-affinity-type"
    newStyleAffinityAffinityType.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityType.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityType.EntityData.SegmentPath = "new-style-affinity-affinity-type" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityType.AffinityType) + "']"
    newStyleAffinityAffinityType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityType.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityType.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityType.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityType.AffinityType}
    return &(newStyleAffinityAffinityType.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1.YFilter
    newStyleAffinityAffinityTypeAffinity1.EntityData.YangName = "new-style-affinity-affinity-type-affinity1"
    newStyleAffinityAffinityTypeAffinity1.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.Affinity1) + "']"
    newStyleAffinityAffinityTypeAffinity1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1.AffinityType}
    newStyleAffinityAffinityTypeAffinity1.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1.Affinity1}
    return &(newStyleAffinityAffinityTypeAffinity1.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2"
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2) + "']"
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType}
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1}
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2}
    return &(newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3) + "']"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs["affinity3"] = types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3}
    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4) + "']"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs["affinity3"] = types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs["affinity4"] = types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4}
    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5) + "']"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs["affinity3"] = types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs["affinity4"] = types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs["affinity5"] = types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5}
    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6) + "']"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs["affinity3"] = types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs["affinity4"] = types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs["affinity5"] = types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs["affinity6"] = types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6}
    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7) + "']"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs["affinity3"] = types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs["affinity4"] = types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs["affinity5"] = types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs["affinity6"] = types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs["affinity7"] = types.YLeaf{"Affinity7", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7}
    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity8 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8) + "']"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs["affinity3"] = types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs["affinity4"] = types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs["affinity5"] = types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs["affinity6"] = types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs["affinity7"] = types.YLeaf{"Affinity7", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs["affinity8"] = types.YLeaf{"Affinity8", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8}
    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity9 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9) + "']"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity3"] = types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity4"] = types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity5"] = types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity6"] = types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity7"] = types.YLeaf{"Affinity7", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity8"] = types.YLeaf{"Affinity8", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs["affinity9"] = types.YLeaf{"Affinity9", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9}
    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity10 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10) + "']"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity3"] = types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity4"] = types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity5"] = types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity6"] = types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity7"] = types.YLeaf{"Affinity7", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity8"] = types.YLeaf{"Affinity8", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity9"] = types.YLeaf{"Affinity9", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9}
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs["affinity10"] = types.YLeaf{"Affinity10", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10}
    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute
// Specify MPLS tunnel can be fast-rerouted
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth Protection. The type is interface{} with range: 0..1. This
    // attribute is mandatory.
    BandwidthProtection interface{}

    // Node Protection. The type is interface{} with range: 0..1. This attribute
    // is mandatory.
    NodeProtection interface{}
}

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "tunnel-te-attributes"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["bandwidth-protection"] = types.YLeaf{"BandwidthProtection", fastReroute.BandwidthProtection}
    fastReroute.EntityData.Leafs["node-protection"] = types.YLeaf{"NodeProtection", fastReroute.NodeProtection}
    return &(fastReroute.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel
// MPLS-TP tunnel attributes
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Transport profile node identifier in IPv4 address format. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Configure BFD parameters.
    Bfd InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd

    // Working LSP.
    WorkingLsp InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp

    // Node identifier and optional global identifier and tunnel identifier at
    // destination.
    Destination InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination

    // Fault management.
    Fault InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault

    // Protect LSP.
    ProtectLsp InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp
}

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetEntityData() *types.CommonEntityData {
    transportProfileTunnel.EntityData.YFilter = transportProfileTunnel.YFilter
    transportProfileTunnel.EntityData.YangName = "transport-profile-tunnel"
    transportProfileTunnel.EntityData.BundleName = "cisco_ios_xr"
    transportProfileTunnel.EntityData.ParentYangName = "interface-configuration"
    transportProfileTunnel.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel"
    transportProfileTunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transportProfileTunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transportProfileTunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transportProfileTunnel.EntityData.Children = make(map[string]types.YChild)
    transportProfileTunnel.EntityData.Children["bfd"] = types.YChild{"Bfd", &transportProfileTunnel.Bfd}
    transportProfileTunnel.EntityData.Children["working-lsp"] = types.YChild{"WorkingLsp", &transportProfileTunnel.WorkingLsp}
    transportProfileTunnel.EntityData.Children["destination"] = types.YChild{"Destination", &transportProfileTunnel.Destination}
    transportProfileTunnel.EntityData.Children["fault"] = types.YChild{"Fault", &transportProfileTunnel.Fault}
    transportProfileTunnel.EntityData.Children["protect-lsp"] = types.YChild{"ProtectLsp", &transportProfileTunnel.ProtectLsp}
    transportProfileTunnel.EntityData.Leafs = make(map[string]types.YLeaf)
    transportProfileTunnel.EntityData.Leafs["source"] = types.YLeaf{"Source", transportProfileTunnel.Source}
    return &(transportProfileTunnel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd
// Configure BFD parameters
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detect multiplier. The type is interface{} with range: 2..10.
    DetectionMultiplier interface{}

    // Configure BFD parameters. The type is interface{}.
    Enable interface{}

    // Detect multiplier for standby transport profile LSP. The type is
    // interface{} with range: 2..10.
    MultiplierStandby interface{}

    // Hello interval, either in milli-seconds or in micro-seconds.
    MinInterval InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval

    // Hello interval for standby transport profile LSP, either in milli-seconds
    // or in micro-seconds.
    MinIntervalStandby InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "transport-profile-tunnel"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Children["min-interval"] = types.YChild{"MinInterval", &bfd.MinInterval}
    bfd.EntityData.Children["min-interval-standby"] = types.YChild{"MinIntervalStandby", &bfd.MinIntervalStandby}
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["enable"] = types.YLeaf{"Enable", bfd.Enable}
    bfd.EntityData.Leafs["multiplier-standby"] = types.YLeaf{"MultiplierStandby", bfd.MultiplierStandby}
    return &(bfd.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval
// Hello interval, either in milli-seconds or in
// micro-seconds
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..5000.
    IntervalMs interface{}

    // Hello interval in micro-seconds. The type is interface{} with range:
    // 3000..5000000.
    IntervalUs interface{}
}

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetEntityData() *types.CommonEntityData {
    minInterval.EntityData.YFilter = minInterval.YFilter
    minInterval.EntityData.YangName = "min-interval"
    minInterval.EntityData.BundleName = "cisco_ios_xr"
    minInterval.EntityData.ParentYangName = "bfd"
    minInterval.EntityData.SegmentPath = "min-interval"
    minInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minInterval.EntityData.Children = make(map[string]types.YChild)
    minInterval.EntityData.Leafs = make(map[string]types.YLeaf)
    minInterval.EntityData.Leafs["interval-ms"] = types.YLeaf{"IntervalMs", minInterval.IntervalMs}
    minInterval.EntityData.Leafs["interval-us"] = types.YLeaf{"IntervalUs", minInterval.IntervalUs}
    return &(minInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby
// Hello interval for standby transport profile
// LSP, either in milli-seconds or in
// micro-seconds
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..5000.
    IntervalStandbyMs interface{}

    // Hello interval in micro-seconds. The type is interface{} with range:
    // 3000..5000000.
    IntervalStandbyUs interface{}
}

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetEntityData() *types.CommonEntityData {
    minIntervalStandby.EntityData.YFilter = minIntervalStandby.YFilter
    minIntervalStandby.EntityData.YangName = "min-interval-standby"
    minIntervalStandby.EntityData.BundleName = "cisco_ios_xr"
    minIntervalStandby.EntityData.ParentYangName = "bfd"
    minIntervalStandby.EntityData.SegmentPath = "min-interval-standby"
    minIntervalStandby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minIntervalStandby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minIntervalStandby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minIntervalStandby.EntityData.Children = make(map[string]types.YChild)
    minIntervalStandby.EntityData.Leafs = make(map[string]types.YLeaf)
    minIntervalStandby.EntityData.Leafs["interval-standby-ms"] = types.YLeaf{"IntervalStandbyMs", minIntervalStandby.IntervalStandbyMs}
    minIntervalStandby.EntityData.Leafs["interval-standby-us"] = types.YLeaf{"IntervalStandbyUs", minIntervalStandby.IntervalStandbyUs}
    return &(minIntervalStandby.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp
// Working LSP
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Incoming MPLS label of the working LSP. The type is interface{} with range:
    // 16..4015.
    InLabel interface{}

    // Enable lockout of working LSP. The type is interface{}.
    Lockout interface{}

    // LSP Identifier of the working LSP. The type is interface{} with range:
    // 0..65535. The default value is 0.
    LspId interface{}

    // Outgoing MPLS label of the working LSP.
    OutLabel InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel
}

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetEntityData() *types.CommonEntityData {
    workingLsp.EntityData.YFilter = workingLsp.YFilter
    workingLsp.EntityData.YangName = "working-lsp"
    workingLsp.EntityData.BundleName = "cisco_ios_xr"
    workingLsp.EntityData.ParentYangName = "transport-profile-tunnel"
    workingLsp.EntityData.SegmentPath = "working-lsp"
    workingLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    workingLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    workingLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    workingLsp.EntityData.Children = make(map[string]types.YChild)
    workingLsp.EntityData.Children["out-label"] = types.YChild{"OutLabel", &workingLsp.OutLabel}
    workingLsp.EntityData.Leafs = make(map[string]types.YLeaf)
    workingLsp.EntityData.Leafs["in-label"] = types.YLeaf{"InLabel", workingLsp.InLabel}
    workingLsp.EntityData.Leafs["lockout"] = types.YLeaf{"Lockout", workingLsp.Lockout}
    workingLsp.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", workingLsp.LspId}
    return &(workingLsp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel
// Outgoing MPLS label of the working LSP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS label. The type is interface{} with range: 16..1048575.
    Label interface{}

    // Transport profile identifier of outgoing link. The type is interface{} with
    // range: 1..65535. This attribute is mandatory.
    Link interface{}
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetEntityData() *types.CommonEntityData {
    outLabel.EntityData.YFilter = outLabel.YFilter
    outLabel.EntityData.YangName = "out-label"
    outLabel.EntityData.BundleName = "cisco_ios_xr"
    outLabel.EntityData.ParentYangName = "working-lsp"
    outLabel.EntityData.SegmentPath = "out-label"
    outLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outLabel.EntityData.Children = make(map[string]types.YChild)
    outLabel.EntityData.Leafs = make(map[string]types.YLeaf)
    outLabel.EntityData.Leafs["label"] = types.YLeaf{"Label", outLabel.Label}
    outLabel.EntityData.Leafs["link"] = types.YLeaf{"Link", outLabel.Link}
    return &(outLabel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination
// Node identifier and optional global identifier
// and tunnel identifier at destination
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Node identifier in IPv4 address format. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeId interface{}

    // Numeric global identifier. The type is interface{} with range: 1..65535.
    GlobalId interface{}

    // Numeric tunnel identifier. The type is interface{} with range: 0..65535.
    TunnelId interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "transport-profile-tunnel"
    destination.EntityData.SegmentPath = "destination"
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = make(map[string]types.YChild)
    destination.EntityData.Leafs = make(map[string]types.YLeaf)
    destination.EntityData.Leafs["node-id"] = types.YLeaf{"NodeId", destination.NodeId}
    destination.EntityData.Leafs["global-id"] = types.YLeaf{"GlobalId", destination.GlobalId}
    destination.EntityData.Leafs["tunnel-id"] = types.YLeaf{"TunnelId", destination.TunnelId}
    return &(destination.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault
// Fault management
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enter transport profile tunnel fault configuration. The type is
    // interface{}.
    Enable interface{}

    // OAM events that trigger protection switching.
    ProtectionTrigger InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger
}

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetEntityData() *types.CommonEntityData {
    fault.EntityData.YFilter = fault.YFilter
    fault.EntityData.YangName = "fault"
    fault.EntityData.BundleName = "cisco_ios_xr"
    fault.EntityData.ParentYangName = "transport-profile-tunnel"
    fault.EntityData.SegmentPath = "fault"
    fault.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fault.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fault.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fault.EntityData.Children = make(map[string]types.YChild)
    fault.EntityData.Children["protection-trigger"] = types.YChild{"ProtectionTrigger", &fault.ProtectionTrigger}
    fault.EntityData.Leafs = make(map[string]types.YLeaf)
    fault.EntityData.Leafs["enable"] = types.YLeaf{"Enable", fault.Enable}
    return &(fault.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger
// OAM events that trigger protection switching
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable protection switching due to LDI event. The type is bool.
    Ldi interface{}

    // Enable protection switching due to AIS event. The type is bool.
    Ais interface{}

    // Enable protection switching due to LKR event. The type is bool.
    Lkr interface{}
}

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetEntityData() *types.CommonEntityData {
    protectionTrigger.EntityData.YFilter = protectionTrigger.YFilter
    protectionTrigger.EntityData.YangName = "protection-trigger"
    protectionTrigger.EntityData.BundleName = "cisco_ios_xr"
    protectionTrigger.EntityData.ParentYangName = "fault"
    protectionTrigger.EntityData.SegmentPath = "protection-trigger"
    protectionTrigger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protectionTrigger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protectionTrigger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protectionTrigger.EntityData.Children = make(map[string]types.YChild)
    protectionTrigger.EntityData.Leafs = make(map[string]types.YLeaf)
    protectionTrigger.EntityData.Leafs["ldi"] = types.YLeaf{"Ldi", protectionTrigger.Ldi}
    protectionTrigger.EntityData.Leafs["ais"] = types.YLeaf{"Ais", protectionTrigger.Ais}
    protectionTrigger.EntityData.Leafs["lkr"] = types.YLeaf{"Lkr", protectionTrigger.Lkr}
    return &(protectionTrigger.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp
// Protect LSP
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Incoming MPLS label of the protect LSP. The type is interface{} with range:
    // 16..4015.
    InLabel interface{}

    // Enable lockout of protect LSP. The type is interface{}.
    Lockout interface{}

    // LSP Identifier of the protect LSP. The type is interface{} with range:
    // 0..65535. The default value is 1.
    LspId interface{}

    // Outgoing MPLS label of the protect LSP.
    OutLabel InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel
}

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetEntityData() *types.CommonEntityData {
    protectLsp.EntityData.YFilter = protectLsp.YFilter
    protectLsp.EntityData.YangName = "protect-lsp"
    protectLsp.EntityData.BundleName = "cisco_ios_xr"
    protectLsp.EntityData.ParentYangName = "transport-profile-tunnel"
    protectLsp.EntityData.SegmentPath = "protect-lsp"
    protectLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protectLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protectLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protectLsp.EntityData.Children = make(map[string]types.YChild)
    protectLsp.EntityData.Children["out-label"] = types.YChild{"OutLabel", &protectLsp.OutLabel}
    protectLsp.EntityData.Leafs = make(map[string]types.YLeaf)
    protectLsp.EntityData.Leafs["in-label"] = types.YLeaf{"InLabel", protectLsp.InLabel}
    protectLsp.EntityData.Leafs["lockout"] = types.YLeaf{"Lockout", protectLsp.Lockout}
    protectLsp.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", protectLsp.LspId}
    return &(protectLsp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel
// Outgoing MPLS label of the protect LSP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS label. The type is interface{} with range: 16..1048575.
    Label interface{}

    // Transport profile identifier of outgoing link. The type is interface{} with
    // range: 1..65535. This attribute is mandatory.
    Link interface{}
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetEntityData() *types.CommonEntityData {
    outLabel.EntityData.YFilter = outLabel.YFilter
    outLabel.EntityData.YangName = "out-label"
    outLabel.EntityData.BundleName = "cisco_ios_xr"
    outLabel.EntityData.ParentYangName = "protect-lsp"
    outLabel.EntityData.SegmentPath = "out-label"
    outLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outLabel.EntityData.Children = make(map[string]types.YChild)
    outLabel.EntityData.Leafs = make(map[string]types.YLeaf)
    outLabel.EntityData.Leafs["label"] = types.YLeaf{"Label", outLabel.Label}
    outLabel.EntityData.Leafs["link"] = types.YLeaf{"Link", outLabel.Link}
    return &(outLabel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes
// MPLS P2MP tunnel attributes
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Record route used by individual P2MP S2L(s). The type is interface{}.
    RecordRoute interface{}

    // The name of the P2MP tunnel to be included in signalling messages. The type
    // is string with length: 1..254.
    SignalledName interface{}

    // Path selection configuration for this specific tunnel. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // P2MP tunnel ipv6 signalled payload. The type is string with pattern:
    // b'[0-9a-fA-F]{1,8}'.
    SignalledPayload interface{}

    // Specify P2MP tunnel can be fast-rerouted. The type is interface{}.
    FastReroute interface{}

    // Impose an explicit null bellow the TE label. The type is interface{}.
    ImposeExplicitNull interface{}

    // P2MP destination table.
    DestinationLeafs InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs

    // P2MP tunnel setup and hold priorities.
    Priority InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority

    // P2MP tunnel new style affinity attributes table.
    NewStyleAffinities InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities

    // P2MP tunnel bandwidth requirement.
    Bandwidth InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth

    // P2MP tunnel affinity and mask.
    AffinityMask InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask

    // Log tunnel LSP messages.
    Logging InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging
}

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetEntityData() *types.CommonEntityData {
    mteTunnelAttributes.EntityData.YFilter = mteTunnelAttributes.YFilter
    mteTunnelAttributes.EntityData.YangName = "mte-tunnel-attributes"
    mteTunnelAttributes.EntityData.BundleName = "cisco_ios_xr"
    mteTunnelAttributes.EntityData.ParentYangName = "interface-configuration"
    mteTunnelAttributes.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes"
    mteTunnelAttributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mteTunnelAttributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mteTunnelAttributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mteTunnelAttributes.EntityData.Children = make(map[string]types.YChild)
    mteTunnelAttributes.EntityData.Children["destination-leafs"] = types.YChild{"DestinationLeafs", &mteTunnelAttributes.DestinationLeafs}
    mteTunnelAttributes.EntityData.Children["priority"] = types.YChild{"Priority", &mteTunnelAttributes.Priority}
    mteTunnelAttributes.EntityData.Children["new-style-affinities"] = types.YChild{"NewStyleAffinities", &mteTunnelAttributes.NewStyleAffinities}
    mteTunnelAttributes.EntityData.Children["bandwidth"] = types.YChild{"Bandwidth", &mteTunnelAttributes.Bandwidth}
    mteTunnelAttributes.EntityData.Children["affinity-mask"] = types.YChild{"AffinityMask", &mteTunnelAttributes.AffinityMask}
    mteTunnelAttributes.EntityData.Children["logging"] = types.YChild{"Logging", &mteTunnelAttributes.Logging}
    mteTunnelAttributes.EntityData.Leafs = make(map[string]types.YLeaf)
    mteTunnelAttributes.EntityData.Leafs["record-route"] = types.YLeaf{"RecordRoute", mteTunnelAttributes.RecordRoute}
    mteTunnelAttributes.EntityData.Leafs["signalled-name"] = types.YLeaf{"SignalledName", mteTunnelAttributes.SignalledName}
    mteTunnelAttributes.EntityData.Leafs["path-selection-metric"] = types.YLeaf{"PathSelectionMetric", mteTunnelAttributes.PathSelectionMetric}
    mteTunnelAttributes.EntityData.Leafs["signalled-payload"] = types.YLeaf{"SignalledPayload", mteTunnelAttributes.SignalledPayload}
    mteTunnelAttributes.EntityData.Leafs["fast-reroute"] = types.YLeaf{"FastReroute", mteTunnelAttributes.FastReroute}
    mteTunnelAttributes.EntityData.Leafs["impose-explicit-null"] = types.YLeaf{"ImposeExplicitNull", mteTunnelAttributes.ImposeExplicitNull}
    return &(mteTunnelAttributes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs
// P2MP destination table
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // P2MP destination leaf. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf.
    DestinationLeaf []InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf
}

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetEntityData() *types.CommonEntityData {
    destinationLeafs.EntityData.YFilter = destinationLeafs.YFilter
    destinationLeafs.EntityData.YangName = "destination-leafs"
    destinationLeafs.EntityData.BundleName = "cisco_ios_xr"
    destinationLeafs.EntityData.ParentYangName = "mte-tunnel-attributes"
    destinationLeafs.EntityData.SegmentPath = "destination-leafs"
    destinationLeafs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationLeafs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationLeafs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationLeafs.EntityData.Children = make(map[string]types.YChild)
    destinationLeafs.EntityData.Children["destination-leaf"] = types.YChild{"DestinationLeaf", nil}
    for i := range destinationLeafs.DestinationLeaf {
        destinationLeafs.EntityData.Children[types.GetSegmentPath(&destinationLeafs.DestinationLeaf[i])] = types.YChild{"DestinationLeaf", &destinationLeafs.DestinationLeaf[i]}
    }
    destinationLeafs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(destinationLeafs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf
// P2MP destination leaf
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Address of P2MP destination. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Disables P2MP destination. The type is interface{}.
    DestinationDisable interface{}

    // Always set to true. The type is interface{}.
    Destination interface{}

    // Log tunnel destination s2l messages.
    S2LLogging InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging

    // P2MP destination path-options attributes table.
    PathOptions InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions
}

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetEntityData() *types.CommonEntityData {
    destinationLeaf.EntityData.YFilter = destinationLeaf.YFilter
    destinationLeaf.EntityData.YangName = "destination-leaf"
    destinationLeaf.EntityData.BundleName = "cisco_ios_xr"
    destinationLeaf.EntityData.ParentYangName = "destination-leafs"
    destinationLeaf.EntityData.SegmentPath = "destination-leaf" + "[address='" + fmt.Sprintf("%v", destinationLeaf.Address) + "']"
    destinationLeaf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationLeaf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationLeaf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationLeaf.EntityData.Children = make(map[string]types.YChild)
    destinationLeaf.EntityData.Children["s2l-logging"] = types.YChild{"S2LLogging", &destinationLeaf.S2LLogging}
    destinationLeaf.EntityData.Children["path-options"] = types.YChild{"PathOptions", &destinationLeaf.PathOptions}
    destinationLeaf.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationLeaf.EntityData.Leafs["address"] = types.YLeaf{"Address", destinationLeaf.Address}
    destinationLeaf.EntityData.Leafs["destination-disable"] = types.YLeaf{"DestinationDisable", destinationLeaf.DestinationDisable}
    destinationLeaf.EntityData.Leafs["destination"] = types.YLeaf{"Destination", destinationLeaf.Destination}
    return &(destinationLeaf.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging
// Log tunnel destination s2l messages
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log tunnel destination s2l rereoute messages. The type is interface{}.
    S2LRerouteMesssage interface{}

    // Log tunnel destination s2l insufficient BW messages. The type is
    // interface{}.
    S2LInsufficientBwMesssage interface{}

    // Enable logging for destination s2l path-calculation failures. The type is
    // interface{}.
    S2LPcalcFailureMessage interface{}

    // Log tunnel destination s2l state messages. The type is interface{}.
    S2LStateMessage interface{}
}

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetEntityData() *types.CommonEntityData {
    s2LLogging.EntityData.YFilter = s2LLogging.YFilter
    s2LLogging.EntityData.YangName = "s2l-logging"
    s2LLogging.EntityData.BundleName = "cisco_ios_xr"
    s2LLogging.EntityData.ParentYangName = "destination-leaf"
    s2LLogging.EntityData.SegmentPath = "s2l-logging"
    s2LLogging.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2LLogging.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2LLogging.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2LLogging.EntityData.Children = make(map[string]types.YChild)
    s2LLogging.EntityData.Leafs = make(map[string]types.YLeaf)
    s2LLogging.EntityData.Leafs["s2l-reroute-messsage"] = types.YLeaf{"S2LRerouteMesssage", s2LLogging.S2LRerouteMesssage}
    s2LLogging.EntityData.Leafs["s2l-insufficient-bw-messsage"] = types.YLeaf{"S2LInsufficientBwMesssage", s2LLogging.S2LInsufficientBwMesssage}
    s2LLogging.EntityData.Leafs["s2l-pcalc-failure-message"] = types.YLeaf{"S2LPcalcFailureMessage", s2LLogging.S2LPcalcFailureMessage}
    s2LLogging.EntityData.Leafs["s2l-state-message"] = types.YLeaf{"S2LStateMessage", s2LLogging.S2LStateMessage}
    return &(s2LLogging.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions
// P2MP destination path-options attributes
// table
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // P2MP destination path option. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption.
    PathOption []InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetEntityData() *types.CommonEntityData {
    pathOptions.EntityData.YFilter = pathOptions.YFilter
    pathOptions.EntityData.YangName = "path-options"
    pathOptions.EntityData.BundleName = "cisco_ios_xr"
    pathOptions.EntityData.ParentYangName = "destination-leaf"
    pathOptions.EntityData.SegmentPath = "path-options"
    pathOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOptions.EntityData.Children = make(map[string]types.YChild)
    pathOptions.EntityData.Children["path-option"] = types.YChild{"PathOption", nil}
    for i := range pathOptions.PathOption {
        pathOptions.EntityData.Children[types.GetSegmentPath(&pathOptions.PathOption[i])] = types.YChild{"PathOption", &pathOptions.PathOption[i]}
    }
    pathOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(pathOptions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption
// P2MP destination path option
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Preference level for this path option. The type is
    // interface{} with range: 1..1000.
    PreferenceLevel interface{}

    // The type of the path option. The type is MplsTePathOption.
    PathType interface{}

    // The ID of the IP explicit path associated with this option. The type is
    // interface{} with range: 1..65535.
    PathId interface{}

    // The name of the IP explicit path associated with this option. The type is
    // string.
    PathName interface{}

    // Path option properties. The type is MplsTePathOptionProperty.
    Lockdown interface{}

    // Path option properties. The type is MplsTePathOptionProperty.
    Verbatim interface{}
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetEntityData() *types.CommonEntityData {
    pathOption.EntityData.YFilter = pathOption.YFilter
    pathOption.EntityData.YangName = "path-option"
    pathOption.EntityData.BundleName = "cisco_ios_xr"
    pathOption.EntityData.ParentYangName = "path-options"
    pathOption.EntityData.SegmentPath = "path-option" + "[preference-level='" + fmt.Sprintf("%v", pathOption.PreferenceLevel) + "']"
    pathOption.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOption.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOption.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOption.EntityData.Children = make(map[string]types.YChild)
    pathOption.EntityData.Leafs = make(map[string]types.YLeaf)
    pathOption.EntityData.Leafs["preference-level"] = types.YLeaf{"PreferenceLevel", pathOption.PreferenceLevel}
    pathOption.EntityData.Leafs["path-type"] = types.YLeaf{"PathType", pathOption.PathType}
    pathOption.EntityData.Leafs["path-id"] = types.YLeaf{"PathId", pathOption.PathId}
    pathOption.EntityData.Leafs["path-name"] = types.YLeaf{"PathName", pathOption.PathName}
    pathOption.EntityData.Leafs["lockdown"] = types.YLeaf{"Lockdown", pathOption.Lockdown}
    pathOption.EntityData.Leafs["verbatim"] = types.YLeaf{"Verbatim", pathOption.Verbatim}
    return &(pathOption.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority
// P2MP tunnel setup and hold priorities
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetEntityData() *types.CommonEntityData {
    priority.EntityData.YFilter = priority.YFilter
    priority.EntityData.YangName = "priority"
    priority.EntityData.BundleName = "cisco_ios_xr"
    priority.EntityData.ParentYangName = "mte-tunnel-attributes"
    priority.EntityData.SegmentPath = "priority"
    priority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    priority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    priority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    priority.EntityData.Children = make(map[string]types.YChild)
    priority.EntityData.Leafs = make(map[string]types.YLeaf)
    priority.EntityData.Leafs["setup-priority"] = types.YLeaf{"SetupPriority", priority.SetupPriority}
    priority.EntityData.Leafs["hold-priority"] = types.YLeaf{"HoldPriority", priority.HoldPriority}
    return &(priority.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities
// P2MP tunnel new style affinity attributes table
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity.
    NewStyleAffinity []InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity
}

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetEntityData() *types.CommonEntityData {
    newStyleAffinities.EntityData.YFilter = newStyleAffinities.YFilter
    newStyleAffinities.EntityData.YangName = "new-style-affinities"
    newStyleAffinities.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinities.EntityData.ParentYangName = "mte-tunnel-attributes"
    newStyleAffinities.EntityData.SegmentPath = "new-style-affinities"
    newStyleAffinities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinities.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinities.EntityData.Children["new-style-affinity"] = types.YChild{"NewStyleAffinity", nil}
    for i := range newStyleAffinities.NewStyleAffinity {
        newStyleAffinities.EntityData.Children[types.GetSegmentPath(&newStyleAffinities.NewStyleAffinity[i])] = types.YChild{"NewStyleAffinity", &newStyleAffinities.NewStyleAffinity[i]}
    }
    newStyleAffinities.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(newStyleAffinities.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity10 interface{}
}

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetEntityData() *types.CommonEntityData {
    newStyleAffinity.EntityData.YFilter = newStyleAffinity.YFilter
    newStyleAffinity.EntityData.YangName = "new-style-affinity"
    newStyleAffinity.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinity.EntityData.ParentYangName = "new-style-affinities"
    newStyleAffinity.EntityData.SegmentPath = "new-style-affinity" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinity.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinity.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinity.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinity.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinity.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinity.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinity.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinity.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinity.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinity.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinity.Affinity10) + "']"
    newStyleAffinity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinity.EntityData.Children = make(map[string]types.YChild)
    newStyleAffinity.EntityData.Leafs = make(map[string]types.YLeaf)
    newStyleAffinity.EntityData.Leafs["affinity-type"] = types.YLeaf{"AffinityType", newStyleAffinity.AffinityType}
    newStyleAffinity.EntityData.Leafs["affinity1"] = types.YLeaf{"Affinity1", newStyleAffinity.Affinity1}
    newStyleAffinity.EntityData.Leafs["affinity2"] = types.YLeaf{"Affinity2", newStyleAffinity.Affinity2}
    newStyleAffinity.EntityData.Leafs["affinity3"] = types.YLeaf{"Affinity3", newStyleAffinity.Affinity3}
    newStyleAffinity.EntityData.Leafs["affinity4"] = types.YLeaf{"Affinity4", newStyleAffinity.Affinity4}
    newStyleAffinity.EntityData.Leafs["affinity5"] = types.YLeaf{"Affinity5", newStyleAffinity.Affinity5}
    newStyleAffinity.EntityData.Leafs["affinity6"] = types.YLeaf{"Affinity6", newStyleAffinity.Affinity6}
    newStyleAffinity.EntityData.Leafs["affinity7"] = types.YLeaf{"Affinity7", newStyleAffinity.Affinity7}
    newStyleAffinity.EntityData.Leafs["affinity8"] = types.YLeaf{"Affinity8", newStyleAffinity.Affinity8}
    newStyleAffinity.EntityData.Leafs["affinity9"] = types.YLeaf{"Affinity9", newStyleAffinity.Affinity9}
    newStyleAffinity.EntityData.Leafs["affinity10"] = types.YLeaf{"Affinity10", newStyleAffinity.Affinity10}
    return &(newStyleAffinity.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth
// P2MP tunnel bandwidth requirement
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295.
    Bandwidth interface{}
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetEntityData() *types.CommonEntityData {
    bandwidth.EntityData.YFilter = bandwidth.YFilter
    bandwidth.EntityData.YangName = "bandwidth"
    bandwidth.EntityData.BundleName = "cisco_ios_xr"
    bandwidth.EntityData.ParentYangName = "mte-tunnel-attributes"
    bandwidth.EntityData.SegmentPath = "bandwidth"
    bandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidth.EntityData.Children = make(map[string]types.YChild)
    bandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    bandwidth.EntityData.Leafs["dste-type"] = types.YLeaf{"DsteType", bandwidth.DsteType}
    bandwidth.EntityData.Leafs["class-or-pool-type"] = types.YLeaf{"ClassOrPoolType", bandwidth.ClassOrPoolType}
    bandwidth.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", bandwidth.Bandwidth}
    return &(bandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask
// P2MP tunnel affinity and mask
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: b'[0-9a-fA-F]{1,8}'.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: b'[0-9a-fA-F]{1,8}'.
    Mask interface{}
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetEntityData() *types.CommonEntityData {
    affinityMask.EntityData.YFilter = affinityMask.YFilter
    affinityMask.EntityData.YangName = "affinity-mask"
    affinityMask.EntityData.BundleName = "cisco_ios_xr"
    affinityMask.EntityData.ParentYangName = "mte-tunnel-attributes"
    affinityMask.EntityData.SegmentPath = "affinity-mask"
    affinityMask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    affinityMask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    affinityMask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    affinityMask.EntityData.Children = make(map[string]types.YChild)
    affinityMask.EntityData.Leafs = make(map[string]types.YLeaf)
    affinityMask.EntityData.Leafs["affinity"] = types.YLeaf{"Affinity", affinityMask.Affinity}
    affinityMask.EntityData.Leafs["mask"] = types.YLeaf{"Mask", affinityMask.Mask}
    return &(affinityMask.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging
// Log tunnel LSP messages
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Log tunnel bandwidth change messages. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log all events for a tunnel. The type is interface{}.
    All interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log all tunnel sub-LSP state messages. The type is interface{}.
    SubLspStateMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetEntityData() *types.CommonEntityData {
    logging.EntityData.YFilter = logging.YFilter
    logging.EntityData.YangName = "logging"
    logging.EntityData.BundleName = "cisco_ios_xr"
    logging.EntityData.ParentYangName = "mte-tunnel-attributes"
    logging.EntityData.SegmentPath = "logging"
    logging.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logging.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logging.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logging.EntityData.Children = make(map[string]types.YChild)
    logging.EntityData.Leafs = make(map[string]types.YLeaf)
    logging.EntityData.Leafs["insufficient-bw-message"] = types.YLeaf{"InsufficientBwMessage", logging.InsufficientBwMessage}
    logging.EntityData.Leafs["reoptimized-message"] = types.YLeaf{"ReoptimizedMessage", logging.ReoptimizedMessage}
    logging.EntityData.Leafs["bandwidth-change-message"] = types.YLeaf{"BandwidthChangeMessage", logging.BandwidthChangeMessage}
    logging.EntityData.Leafs["all"] = types.YLeaf{"All", logging.All}
    logging.EntityData.Leafs["pcalc-failure-message"] = types.YLeaf{"PcalcFailureMessage", logging.PcalcFailureMessage}
    logging.EntityData.Leafs["state-message"] = types.YLeaf{"StateMessage", logging.StateMessage}
    logging.EntityData.Leafs["reoptimize-attempts-message"] = types.YLeaf{"ReoptimizeAttemptsMessage", logging.ReoptimizeAttemptsMessage}
    logging.EntityData.Leafs["sub-lsp-state-message"] = types.YLeaf{"SubLspStateMessage", logging.SubLspStateMessage}
    logging.EntityData.Leafs["reroute-messsage"] = types.YLeaf{"RerouteMesssage", logging.RerouteMesssage}
    return &(logging.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Portmode
// Configure through port-mode
type InterfaceConfigurations_InterfaceConfiguration_Portmode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Select speed. The type is SpeedSel.
    SpeedSel interface{}

    // Select Fec. The type is FecSel.
    FecSel interface{}

    // Select Diff. The type is DiffSel.
    DiffSel interface{}
}

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetEntityData() *types.CommonEntityData {
    portmode.EntityData.YFilter = portmode.YFilter
    portmode.EntityData.YangName = "portmode"
    portmode.EntityData.BundleName = "cisco_ios_xr"
    portmode.EntityData.ParentYangName = "interface-configuration"
    portmode.EntityData.SegmentPath = "Cisco-IOS-XR-ncs5500-coherent-portmode-cfg:portmode"
    portmode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portmode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portmode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portmode.EntityData.Children = make(map[string]types.YChild)
    portmode.EntityData.Leafs = make(map[string]types.YLeaf)
    portmode.EntityData.Leafs["speed-sel"] = types.YLeaf{"SpeedSel", portmode.SpeedSel}
    portmode.EntityData.Leafs["fec-sel"] = types.YLeaf{"FecSel", portmode.FecSel}
    portmode.EntityData.Leafs["diff-sel"] = types.YLeaf{"DiffSel", portmode.DiffSel}
    return &(portmode.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Pbr
// Interface PBR configuration
type InterfaceConfigurations_InterfaceConfiguration_Pbr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Class for subscriber ingress policy. The type is string.
    ServicePolicyIn interface{}

    // PBR service policy configuration.
    ServicePolicy InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy
}

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetEntityData() *types.CommonEntityData {
    pbr.EntityData.YFilter = pbr.YFilter
    pbr.EntityData.YangName = "pbr"
    pbr.EntityData.BundleName = "cisco_ios_xr"
    pbr.EntityData.ParentYangName = "interface-configuration"
    pbr.EntityData.SegmentPath = "Cisco-IOS-XR-pbr-cfg:pbr"
    pbr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pbr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pbr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pbr.EntityData.Children = make(map[string]types.YChild)
    pbr.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", &pbr.ServicePolicy}
    pbr.EntityData.Leafs = make(map[string]types.YLeaf)
    pbr.EntityData.Leafs["service-policy-in"] = types.YLeaf{"ServicePolicyIn", pbr.ServicePolicyIn}
    return &(pbr.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy
// PBR service policy configuration
type InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Ingress service policy. The type is string.
    Input interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "pbr"
    servicePolicy.EntityData.SegmentPath = "service-policy"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["input"] = types.YLeaf{"Input", servicePolicy.Input}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement
// Configure pm parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set STM threshold.
    StmHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24

    // set opr min threshold.
    Minute15Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp

    // set Sonet threshold.
    SonetMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15

    // Configure pm parameters of gfp 24 hour interval.
    Hour24Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp

    // Configure pm parameters of 24 hour interval.
    EthernetHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24

    // set opr min threshold.
    Minute15OtnTcms InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms

    // set Oc threshold.
    OcHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24

    // set opr min threshold.
    EthernetMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15

    // set HO_VC threshold.
    HoVcHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24

    // Configure optics performance monitoring for 30 sec.
    Second30 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30

    // Configure pm parameters of tcm's 24 hour interval.
    Hour24OtnTcms InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms

    // set STS threshold.
    StsMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15

    // Configure pm parameters of 24 hour interval.
    Hour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24

    // set HO_VC threshold.
    HoVcMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15

    // set STS threshold.
    StsHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24

    // set STM threshold.
    StmMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15

    // set Sonet threshold.
    SonetHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24

    // set opr min threshold.
    Minute15Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path

    // set OC threshold.
    OcMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15

    // Configure ethernet performance monitoring for 30 sec.
    EthernetSecond30 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30

    // Configure pm parameters of pathmonitor 24 hour interval.
    Hour24Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path

    // set opr min threshold.
    Minute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15
}

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetEntityData() *types.CommonEntityData {
    performanceManagement.EntityData.YFilter = performanceManagement.YFilter
    performanceManagement.EntityData.YangName = "performance-management"
    performanceManagement.EntityData.BundleName = "cisco_ios_xr"
    performanceManagement.EntityData.ParentYangName = "interface-configuration"
    performanceManagement.EntityData.SegmentPath = "Cisco-IOS-XR-pmengine-cfg:performance-management"
    performanceManagement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    performanceManagement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    performanceManagement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    performanceManagement.EntityData.Children = make(map[string]types.YChild)
    performanceManagement.EntityData.Children["stm-hour24"] = types.YChild{"StmHour24", &performanceManagement.StmHour24}
    performanceManagement.EntityData.Children["minute15-gfp"] = types.YChild{"Minute15Gfp", &performanceManagement.Minute15Gfp}
    performanceManagement.EntityData.Children["sonet-minute15"] = types.YChild{"SonetMinute15", &performanceManagement.SonetMinute15}
    performanceManagement.EntityData.Children["hour24-gfp"] = types.YChild{"Hour24Gfp", &performanceManagement.Hour24Gfp}
    performanceManagement.EntityData.Children["ethernet-hour24"] = types.YChild{"EthernetHour24", &performanceManagement.EthernetHour24}
    performanceManagement.EntityData.Children["minute15otn-tcms"] = types.YChild{"Minute15OtnTcms", &performanceManagement.Minute15OtnTcms}
    performanceManagement.EntityData.Children["oc-hour24"] = types.YChild{"OcHour24", &performanceManagement.OcHour24}
    performanceManagement.EntityData.Children["ethernet-minute15"] = types.YChild{"EthernetMinute15", &performanceManagement.EthernetMinute15}
    performanceManagement.EntityData.Children["ho-vc-hour24"] = types.YChild{"HoVcHour24", &performanceManagement.HoVcHour24}
    performanceManagement.EntityData.Children["second30"] = types.YChild{"Second30", &performanceManagement.Second30}
    performanceManagement.EntityData.Children["hour24otn-tcms"] = types.YChild{"Hour24OtnTcms", &performanceManagement.Hour24OtnTcms}
    performanceManagement.EntityData.Children["sts-minute15"] = types.YChild{"StsMinute15", &performanceManagement.StsMinute15}
    performanceManagement.EntityData.Children["hour24"] = types.YChild{"Hour24", &performanceManagement.Hour24}
    performanceManagement.EntityData.Children["ho-vc-minute15"] = types.YChild{"HoVcMinute15", &performanceManagement.HoVcMinute15}
    performanceManagement.EntityData.Children["sts-hour24"] = types.YChild{"StsHour24", &performanceManagement.StsHour24}
    performanceManagement.EntityData.Children["stm-minute15"] = types.YChild{"StmMinute15", &performanceManagement.StmMinute15}
    performanceManagement.EntityData.Children["sonet-hour24"] = types.YChild{"SonetHour24", &performanceManagement.SonetHour24}
    performanceManagement.EntityData.Children["minute15-path"] = types.YChild{"Minute15Path", &performanceManagement.Minute15Path}
    performanceManagement.EntityData.Children["oc-minute15"] = types.YChild{"OcMinute15", &performanceManagement.OcMinute15}
    performanceManagement.EntityData.Children["ethernet-second30"] = types.YChild{"EthernetSecond30", &performanceManagement.EthernetSecond30}
    performanceManagement.EntityData.Children["hour24-path"] = types.YChild{"Hour24Path", &performanceManagement.Hour24Path}
    performanceManagement.EntityData.Children["minute15"] = types.YChild{"Minute15", &performanceManagement.Minute15}
    performanceManagement.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(performanceManagement.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24
// set STM threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure stm performance monitoring.
    StmHour24Stm InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm
}

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetEntityData() *types.CommonEntityData {
    stmHour24.EntityData.YFilter = stmHour24.YFilter
    stmHour24.EntityData.YangName = "stm-hour24"
    stmHour24.EntityData.BundleName = "cisco_ios_xr"
    stmHour24.EntityData.ParentYangName = "performance-management"
    stmHour24.EntityData.SegmentPath = "stm-hour24"
    stmHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24.EntityData.Children = make(map[string]types.YChild)
    stmHour24.EntityData.Children["stm-hour24-stm"] = types.YChild{"StmHour24Stm", &stmHour24.StmHour24Stm}
    stmHour24.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stmHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm
// Configure stm performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set stm TCA reporting status.
    StmHour24StmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports

    // Configure threshold on stm parameters.
    StmHour24StmThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds
}

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetEntityData() *types.CommonEntityData {
    stmHour24Stm.EntityData.YFilter = stmHour24Stm.YFilter
    stmHour24Stm.EntityData.YangName = "stm-hour24-stm"
    stmHour24Stm.EntityData.BundleName = "cisco_ios_xr"
    stmHour24Stm.EntityData.ParentYangName = "stm-hour24"
    stmHour24Stm.EntityData.SegmentPath = "stm-hour24-stm"
    stmHour24Stm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24Stm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24Stm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24Stm.EntityData.Children = make(map[string]types.YChild)
    stmHour24Stm.EntityData.Children["stm-hour24-stm-reports"] = types.YChild{"StmHour24StmReports", &stmHour24Stm.StmHour24StmReports}
    stmHour24Stm.EntityData.Children["stm-hour24-stm-thresholds"] = types.YChild{"StmHour24StmThresholds", &stmHour24Stm.StmHour24StmThresholds}
    stmHour24Stm.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stmHour24Stm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports
// set stm TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport.
    StmHour24StmReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport
}

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetEntityData() *types.CommonEntityData {
    stmHour24StmReports.EntityData.YFilter = stmHour24StmReports.YFilter
    stmHour24StmReports.EntityData.YangName = "stm-hour24-stm-reports"
    stmHour24StmReports.EntityData.BundleName = "cisco_ios_xr"
    stmHour24StmReports.EntityData.ParentYangName = "stm-hour24-stm"
    stmHour24StmReports.EntityData.SegmentPath = "stm-hour24-stm-reports"
    stmHour24StmReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24StmReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24StmReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24StmReports.EntityData.Children = make(map[string]types.YChild)
    stmHour24StmReports.EntityData.Children["stm-hour24-stm-report"] = types.YChild{"StmHour24StmReport", nil}
    for i := range stmHour24StmReports.StmHour24StmReport {
        stmHour24StmReports.EntityData.Children[types.GetSegmentPath(&stmHour24StmReports.StmHour24StmReport[i])] = types.YChild{"StmHour24StmReport", &stmHour24StmReports.StmHour24StmReport[i]}
    }
    stmHour24StmReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stmHour24StmReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Stm Report Type. The type is StmReport.
    StmReport interface{}

    // Stm Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetEntityData() *types.CommonEntityData {
    stmHour24StmReport.EntityData.YFilter = stmHour24StmReport.YFilter
    stmHour24StmReport.EntityData.YangName = "stm-hour24-stm-report"
    stmHour24StmReport.EntityData.BundleName = "cisco_ios_xr"
    stmHour24StmReport.EntityData.ParentYangName = "stm-hour24-stm-reports"
    stmHour24StmReport.EntityData.SegmentPath = "stm-hour24-stm-report" + "[stm-report='" + fmt.Sprintf("%v", stmHour24StmReport.StmReport) + "']"
    stmHour24StmReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24StmReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24StmReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24StmReport.EntityData.Children = make(map[string]types.YChild)
    stmHour24StmReport.EntityData.Leafs = make(map[string]types.YLeaf)
    stmHour24StmReport.EntityData.Leafs["stm-report"] = types.YLeaf{"StmReport", stmHour24StmReport.StmReport}
    stmHour24StmReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", stmHour24StmReport.Enable}
    return &(stmHour24StmReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds
// Configure threshold on stm parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold.
    StmHour24StmThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold
}

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetEntityData() *types.CommonEntityData {
    stmHour24StmThresholds.EntityData.YFilter = stmHour24StmThresholds.YFilter
    stmHour24StmThresholds.EntityData.YangName = "stm-hour24-stm-thresholds"
    stmHour24StmThresholds.EntityData.BundleName = "cisco_ios_xr"
    stmHour24StmThresholds.EntityData.ParentYangName = "stm-hour24-stm"
    stmHour24StmThresholds.EntityData.SegmentPath = "stm-hour24-stm-thresholds"
    stmHour24StmThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24StmThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24StmThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24StmThresholds.EntityData.Children = make(map[string]types.YChild)
    stmHour24StmThresholds.EntityData.Children["stm-hour24-stm-threshold"] = types.YChild{"StmHour24StmThreshold", nil}
    for i := range stmHour24StmThresholds.StmHour24StmThreshold {
        stmHour24StmThresholds.EntityData.Children[types.GetSegmentPath(&stmHour24StmThresholds.StmHour24StmThreshold[i])] = types.YChild{"StmHour24StmThreshold", &stmHour24StmThresholds.StmHour24StmThreshold[i]}
    }
    stmHour24StmThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stmHour24StmThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Stm Threshold Type. The type is StmThreshold.
    StmThreshold interface{}

    // Stm Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    StmThresholdValue interface{}
}

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetEntityData() *types.CommonEntityData {
    stmHour24StmThreshold.EntityData.YFilter = stmHour24StmThreshold.YFilter
    stmHour24StmThreshold.EntityData.YangName = "stm-hour24-stm-threshold"
    stmHour24StmThreshold.EntityData.BundleName = "cisco_ios_xr"
    stmHour24StmThreshold.EntityData.ParentYangName = "stm-hour24-stm-thresholds"
    stmHour24StmThreshold.EntityData.SegmentPath = "stm-hour24-stm-threshold" + "[stm-threshold='" + fmt.Sprintf("%v", stmHour24StmThreshold.StmThreshold) + "']"
    stmHour24StmThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24StmThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24StmThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24StmThreshold.EntityData.Children = make(map[string]types.YChild)
    stmHour24StmThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    stmHour24StmThreshold.EntityData.Leafs["stm-threshold"] = types.YLeaf{"StmThreshold", stmHour24StmThreshold.StmThreshold}
    stmHour24StmThreshold.EntityData.Leafs["stm-threshold-value"] = types.YLeaf{"StmThresholdValue", stmHour24StmThreshold.StmThresholdValue}
    return &(stmHour24StmThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure gfp performance monitoring.
    Minute15Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetEntityData() *types.CommonEntityData {
    minute15Gfp.EntityData.YFilter = minute15Gfp.YFilter
    minute15Gfp.EntityData.YangName = "minute15-gfp"
    minute15Gfp.EntityData.BundleName = "cisco_ios_xr"
    minute15Gfp.EntityData.ParentYangName = "performance-management"
    minute15Gfp.EntityData.SegmentPath = "minute15-gfp"
    minute15Gfp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Gfp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Gfp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Gfp.EntityData.Children = make(map[string]types.YChild)
    minute15Gfp.EntityData.Children["minute15-gfp"] = types.YChild{"Minute15Gfp", &minute15Gfp.Minute15Gfp}
    minute15Gfp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Gfp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_
// Configure gfp performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set gfp TCA reporting status.
    Minute15GfpReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpReports

    // Configure threshold on gfp parameters.
    Minute15GfpThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpThresholds
}

func (minute15Gfp_ *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_) GetEntityData() *types.CommonEntityData {
    minute15Gfp_.EntityData.YFilter = minute15Gfp_.YFilter
    minute15Gfp_.EntityData.YangName = "minute15-gfp"
    minute15Gfp_.EntityData.BundleName = "cisco_ios_xr"
    minute15Gfp_.EntityData.ParentYangName = "minute15-gfp"
    minute15Gfp_.EntityData.SegmentPath = "minute15-gfp"
    minute15Gfp_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Gfp_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Gfp_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Gfp_.EntityData.Children = make(map[string]types.YChild)
    minute15Gfp_.EntityData.Children["minute15-gfp-reports"] = types.YChild{"Minute15GfpReports", &minute15Gfp_.Minute15GfpReports}
    minute15Gfp_.EntityData.Children["minute15-gfp-thresholds"] = types.YChild{"Minute15GfpThresholds", &minute15Gfp_.Minute15GfpThresholds}
    minute15Gfp_.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Gfp_.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpReports
// set gfp TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpReports_Minute15GfpReport.
    Minute15GfpReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpReports_Minute15GfpReport
}

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpReports) GetEntityData() *types.CommonEntityData {
    minute15GfpReports.EntityData.YFilter = minute15GfpReports.YFilter
    minute15GfpReports.EntityData.YangName = "minute15-gfp-reports"
    minute15GfpReports.EntityData.BundleName = "cisco_ios_xr"
    minute15GfpReports.EntityData.ParentYangName = "minute15-gfp"
    minute15GfpReports.EntityData.SegmentPath = "minute15-gfp-reports"
    minute15GfpReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15GfpReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15GfpReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15GfpReports.EntityData.Children = make(map[string]types.YChild)
    minute15GfpReports.EntityData.Children["minute15-gfp-report"] = types.YChild{"Minute15GfpReport", nil}
    for i := range minute15GfpReports.Minute15GfpReport {
        minute15GfpReports.EntityData.Children[types.GetSegmentPath(&minute15GfpReports.Minute15GfpReport[i])] = types.YChild{"Minute15GfpReport", &minute15GfpReports.Minute15GfpReport[i]}
    }
    minute15GfpReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15GfpReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpReports_Minute15GfpReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpReports_Minute15GfpReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Gfp Report Type. The type is GfpReport.
    GfpReport interface{}
}

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpReports_Minute15GfpReport) GetEntityData() *types.CommonEntityData {
    minute15GfpReport.EntityData.YFilter = minute15GfpReport.YFilter
    minute15GfpReport.EntityData.YangName = "minute15-gfp-report"
    minute15GfpReport.EntityData.BundleName = "cisco_ios_xr"
    minute15GfpReport.EntityData.ParentYangName = "minute15-gfp-reports"
    minute15GfpReport.EntityData.SegmentPath = "minute15-gfp-report" + "[gfp-report='" + fmt.Sprintf("%v", minute15GfpReport.GfpReport) + "']"
    minute15GfpReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15GfpReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15GfpReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15GfpReport.EntityData.Children = make(map[string]types.YChild)
    minute15GfpReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15GfpReport.EntityData.Leafs["gfp-report"] = types.YLeaf{"GfpReport", minute15GfpReport.GfpReport}
    return &(minute15GfpReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpThresholds
// Configure threshold on gfp parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpThresholds_Minute15GfpThreshold.
    Minute15GfpThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpThresholds_Minute15GfpThreshold
}

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpThresholds) GetEntityData() *types.CommonEntityData {
    minute15GfpThresholds.EntityData.YFilter = minute15GfpThresholds.YFilter
    minute15GfpThresholds.EntityData.YangName = "minute15-gfp-thresholds"
    minute15GfpThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15GfpThresholds.EntityData.ParentYangName = "minute15-gfp"
    minute15GfpThresholds.EntityData.SegmentPath = "minute15-gfp-thresholds"
    minute15GfpThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15GfpThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15GfpThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15GfpThresholds.EntityData.Children = make(map[string]types.YChild)
    minute15GfpThresholds.EntityData.Children["minute15-gfp-threshold"] = types.YChild{"Minute15GfpThreshold", nil}
    for i := range minute15GfpThresholds.Minute15GfpThreshold {
        minute15GfpThresholds.EntityData.Children[types.GetSegmentPath(&minute15GfpThresholds.Minute15GfpThreshold[i])] = types.YChild{"Minute15GfpThreshold", &minute15GfpThresholds.Minute15GfpThreshold[i]}
    }
    minute15GfpThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15GfpThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpThresholds_Minute15GfpThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpThresholds_Minute15GfpThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Gfp Threshold Type. The type is GfpThreshold.
    GfpThreshold interface{}

    // Gfp Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    GfpThresholdValue interface{}
}

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp__Minute15GfpThresholds_Minute15GfpThreshold) GetEntityData() *types.CommonEntityData {
    minute15GfpThreshold.EntityData.YFilter = minute15GfpThreshold.YFilter
    minute15GfpThreshold.EntityData.YangName = "minute15-gfp-threshold"
    minute15GfpThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15GfpThreshold.EntityData.ParentYangName = "minute15-gfp-thresholds"
    minute15GfpThreshold.EntityData.SegmentPath = "minute15-gfp-threshold" + "[gfp-threshold='" + fmt.Sprintf("%v", minute15GfpThreshold.GfpThreshold) + "']"
    minute15GfpThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15GfpThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15GfpThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15GfpThreshold.EntityData.Children = make(map[string]types.YChild)
    minute15GfpThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15GfpThreshold.EntityData.Leafs["gfp-threshold"] = types.YLeaf{"GfpThreshold", minute15GfpThreshold.GfpThreshold}
    minute15GfpThreshold.EntityData.Leafs["gfp-threshold-value"] = types.YLeaf{"GfpThresholdValue", minute15GfpThreshold.GfpThresholdValue}
    return &(minute15GfpThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15
// set Sonet threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    SonetMinute15Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path

    // Configure ocn performance monitoring.
    SonetMinute15Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn
}

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetEntityData() *types.CommonEntityData {
    sonetMinute15.EntityData.YFilter = sonetMinute15.YFilter
    sonetMinute15.EntityData.YangName = "sonet-minute15"
    sonetMinute15.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15.EntityData.ParentYangName = "performance-management"
    sonetMinute15.EntityData.SegmentPath = "sonet-minute15"
    sonetMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15.EntityData.Children["sonet-minute15-path"] = types.YChild{"SonetMinute15Path", &sonetMinute15.SonetMinute15Path}
    sonetMinute15.EntityData.Children["sonet-minute15-ocn"] = types.YChild{"SonetMinute15Ocn", &sonetMinute15.SonetMinute15Ocn}
    sonetMinute15.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set Path TCA reporting status.
    SonetMinute15PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports

    // Configure threshold on Path parameters.
    SonetMinute15PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds
}

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetEntityData() *types.CommonEntityData {
    sonetMinute15Path.EntityData.YFilter = sonetMinute15Path.YFilter
    sonetMinute15Path.EntityData.YangName = "sonet-minute15-path"
    sonetMinute15Path.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15Path.EntityData.ParentYangName = "sonet-minute15"
    sonetMinute15Path.EntityData.SegmentPath = "sonet-minute15-path"
    sonetMinute15Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15Path.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15Path.EntityData.Children["sonet-minute15-path-reports"] = types.YChild{"SonetMinute15PathReports", &sonetMinute15Path.SonetMinute15PathReports}
    sonetMinute15Path.EntityData.Children["sonet-minute15-path-thresholds"] = types.YChild{"SonetMinute15PathThresholds", &sonetMinute15Path.SonetMinute15PathThresholds}
    sonetMinute15Path.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetMinute15Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport.
    SonetMinute15PathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport
}

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetEntityData() *types.CommonEntityData {
    sonetMinute15PathReports.EntityData.YFilter = sonetMinute15PathReports.YFilter
    sonetMinute15PathReports.EntityData.YangName = "sonet-minute15-path-reports"
    sonetMinute15PathReports.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15PathReports.EntityData.ParentYangName = "sonet-minute15-path"
    sonetMinute15PathReports.EntityData.SegmentPath = "sonet-minute15-path-reports"
    sonetMinute15PathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15PathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15PathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15PathReports.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15PathReports.EntityData.Children["sonet-minute15-path-report"] = types.YChild{"SonetMinute15PathReport", nil}
    for i := range sonetMinute15PathReports.SonetMinute15PathReport {
        sonetMinute15PathReports.EntityData.Children[types.GetSegmentPath(&sonetMinute15PathReports.SonetMinute15PathReport[i])] = types.YChild{"SonetMinute15PathReport", &sonetMinute15PathReports.SonetMinute15PathReport[i]}
    }
    sonetMinute15PathReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetMinute15PathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Path Report Type. The type is PathReport.
    PathReport interface{}
}

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetEntityData() *types.CommonEntityData {
    sonetMinute15PathReport.EntityData.YFilter = sonetMinute15PathReport.YFilter
    sonetMinute15PathReport.EntityData.YangName = "sonet-minute15-path-report"
    sonetMinute15PathReport.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15PathReport.EntityData.ParentYangName = "sonet-minute15-path-reports"
    sonetMinute15PathReport.EntityData.SegmentPath = "sonet-minute15-path-report" + "[path-report='" + fmt.Sprintf("%v", sonetMinute15PathReport.PathReport) + "']"
    sonetMinute15PathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15PathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15PathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15PathReport.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15PathReport.EntityData.Leafs = make(map[string]types.YLeaf)
    sonetMinute15PathReport.EntityData.Leafs["path-report"] = types.YLeaf{"PathReport", sonetMinute15PathReport.PathReport}
    return &(sonetMinute15PathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold.
    SonetMinute15PathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold
}

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetEntityData() *types.CommonEntityData {
    sonetMinute15PathThresholds.EntityData.YFilter = sonetMinute15PathThresholds.YFilter
    sonetMinute15PathThresholds.EntityData.YangName = "sonet-minute15-path-thresholds"
    sonetMinute15PathThresholds.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15PathThresholds.EntityData.ParentYangName = "sonet-minute15-path"
    sonetMinute15PathThresholds.EntityData.SegmentPath = "sonet-minute15-path-thresholds"
    sonetMinute15PathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15PathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15PathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15PathThresholds.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15PathThresholds.EntityData.Children["sonet-minute15-path-threshold"] = types.YChild{"SonetMinute15PathThreshold", nil}
    for i := range sonetMinute15PathThresholds.SonetMinute15PathThreshold {
        sonetMinute15PathThresholds.EntityData.Children[types.GetSegmentPath(&sonetMinute15PathThresholds.SonetMinute15PathThreshold[i])] = types.YChild{"SonetMinute15PathThreshold", &sonetMinute15PathThresholds.SonetMinute15PathThreshold[i]}
    }
    sonetMinute15PathThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetMinute15PathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Path Threshold Type. The type is PathThreshold.
    PathThreshold interface{}

    // Path Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    PathThresholdValue interface{}
}

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetEntityData() *types.CommonEntityData {
    sonetMinute15PathThreshold.EntityData.YFilter = sonetMinute15PathThreshold.YFilter
    sonetMinute15PathThreshold.EntityData.YangName = "sonet-minute15-path-threshold"
    sonetMinute15PathThreshold.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15PathThreshold.EntityData.ParentYangName = "sonet-minute15-path-thresholds"
    sonetMinute15PathThreshold.EntityData.SegmentPath = "sonet-minute15-path-threshold" + "[path-threshold='" + fmt.Sprintf("%v", sonetMinute15PathThreshold.PathThreshold) + "']"
    sonetMinute15PathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15PathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15PathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15PathThreshold.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15PathThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    sonetMinute15PathThreshold.EntityData.Leafs["path-threshold"] = types.YLeaf{"PathThreshold", sonetMinute15PathThreshold.PathThreshold}
    sonetMinute15PathThreshold.EntityData.Leafs["path-threshold-value"] = types.YLeaf{"PathThresholdValue", sonetMinute15PathThreshold.PathThresholdValue}
    return &(sonetMinute15PathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ocn TCA reporting status.
    SonetMinute15OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports

    // Configure threshold on ocn parameters.
    SonetMinute15OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds
}

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetEntityData() *types.CommonEntityData {
    sonetMinute15Ocn.EntityData.YFilter = sonetMinute15Ocn.YFilter
    sonetMinute15Ocn.EntityData.YangName = "sonet-minute15-ocn"
    sonetMinute15Ocn.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15Ocn.EntityData.ParentYangName = "sonet-minute15"
    sonetMinute15Ocn.EntityData.SegmentPath = "sonet-minute15-ocn"
    sonetMinute15Ocn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15Ocn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15Ocn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15Ocn.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15Ocn.EntityData.Children["sonet-minute15-ocn-reports"] = types.YChild{"SonetMinute15OcnReports", &sonetMinute15Ocn.SonetMinute15OcnReports}
    sonetMinute15Ocn.EntityData.Children["sonet-minute15-ocn-thresholds"] = types.YChild{"SonetMinute15OcnThresholds", &sonetMinute15Ocn.SonetMinute15OcnThresholds}
    sonetMinute15Ocn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetMinute15Ocn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport.
    SonetMinute15OcnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport
}

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetEntityData() *types.CommonEntityData {
    sonetMinute15OcnReports.EntityData.YFilter = sonetMinute15OcnReports.YFilter
    sonetMinute15OcnReports.EntityData.YangName = "sonet-minute15-ocn-reports"
    sonetMinute15OcnReports.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15OcnReports.EntityData.ParentYangName = "sonet-minute15-ocn"
    sonetMinute15OcnReports.EntityData.SegmentPath = "sonet-minute15-ocn-reports"
    sonetMinute15OcnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15OcnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15OcnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15OcnReports.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15OcnReports.EntityData.Children["sonet-minute15-ocn-report"] = types.YChild{"SonetMinute15OcnReport", nil}
    for i := range sonetMinute15OcnReports.SonetMinute15OcnReport {
        sonetMinute15OcnReports.EntityData.Children[types.GetSegmentPath(&sonetMinute15OcnReports.SonetMinute15OcnReport[i])] = types.YChild{"SonetMinute15OcnReport", &sonetMinute15OcnReports.SonetMinute15OcnReport[i]}
    }
    sonetMinute15OcnReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetMinute15OcnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}
}

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetEntityData() *types.CommonEntityData {
    sonetMinute15OcnReport.EntityData.YFilter = sonetMinute15OcnReport.YFilter
    sonetMinute15OcnReport.EntityData.YangName = "sonet-minute15-ocn-report"
    sonetMinute15OcnReport.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15OcnReport.EntityData.ParentYangName = "sonet-minute15-ocn-reports"
    sonetMinute15OcnReport.EntityData.SegmentPath = "sonet-minute15-ocn-report" + "[ocn-report='" + fmt.Sprintf("%v", sonetMinute15OcnReport.OcnReport) + "']"
    sonetMinute15OcnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15OcnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15OcnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15OcnReport.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15OcnReport.EntityData.Leafs = make(map[string]types.YLeaf)
    sonetMinute15OcnReport.EntityData.Leafs["ocn-report"] = types.YLeaf{"OcnReport", sonetMinute15OcnReport.OcnReport}
    return &(sonetMinute15OcnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold.
    SonetMinute15OcnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold
}

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetEntityData() *types.CommonEntityData {
    sonetMinute15OcnThresholds.EntityData.YFilter = sonetMinute15OcnThresholds.YFilter
    sonetMinute15OcnThresholds.EntityData.YangName = "sonet-minute15-ocn-thresholds"
    sonetMinute15OcnThresholds.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15OcnThresholds.EntityData.ParentYangName = "sonet-minute15-ocn"
    sonetMinute15OcnThresholds.EntityData.SegmentPath = "sonet-minute15-ocn-thresholds"
    sonetMinute15OcnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15OcnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15OcnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15OcnThresholds.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15OcnThresholds.EntityData.Children["sonet-minute15-ocn-threshold"] = types.YChild{"SonetMinute15OcnThreshold", nil}
    for i := range sonetMinute15OcnThresholds.SonetMinute15OcnThreshold {
        sonetMinute15OcnThresholds.EntityData.Children[types.GetSegmentPath(&sonetMinute15OcnThresholds.SonetMinute15OcnThreshold[i])] = types.YChild{"SonetMinute15OcnThreshold", &sonetMinute15OcnThresholds.SonetMinute15OcnThreshold[i]}
    }
    sonetMinute15OcnThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetMinute15OcnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetEntityData() *types.CommonEntityData {
    sonetMinute15OcnThreshold.EntityData.YFilter = sonetMinute15OcnThreshold.YFilter
    sonetMinute15OcnThreshold.EntityData.YangName = "sonet-minute15-ocn-threshold"
    sonetMinute15OcnThreshold.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15OcnThreshold.EntityData.ParentYangName = "sonet-minute15-ocn-thresholds"
    sonetMinute15OcnThreshold.EntityData.SegmentPath = "sonet-minute15-ocn-threshold" + "[ocn-threshold='" + fmt.Sprintf("%v", sonetMinute15OcnThreshold.OcnThreshold) + "']"
    sonetMinute15OcnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15OcnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15OcnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15OcnThreshold.EntityData.Children = make(map[string]types.YChild)
    sonetMinute15OcnThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    sonetMinute15OcnThreshold.EntityData.Leafs["ocn-threshold"] = types.YLeaf{"OcnThreshold", sonetMinute15OcnThreshold.OcnThreshold}
    sonetMinute15OcnThreshold.EntityData.Leafs["ocn-threshold-value"] = types.YLeaf{"OcnThresholdValue", sonetMinute15OcnThreshold.OcnThresholdValue}
    return &(sonetMinute15OcnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp
// Configure pm parameters of gfp 24 hour interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure gfp performance monitoring.
    Hour24Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetEntityData() *types.CommonEntityData {
    hour24Gfp.EntityData.YFilter = hour24Gfp.YFilter
    hour24Gfp.EntityData.YangName = "hour24-gfp"
    hour24Gfp.EntityData.BundleName = "cisco_ios_xr"
    hour24Gfp.EntityData.ParentYangName = "performance-management"
    hour24Gfp.EntityData.SegmentPath = "hour24-gfp"
    hour24Gfp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Gfp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Gfp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Gfp.EntityData.Children = make(map[string]types.YChild)
    hour24Gfp.EntityData.Children["hour24-gfp"] = types.YChild{"Hour24Gfp", &hour24Gfp.Hour24Gfp}
    hour24Gfp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Gfp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_
// Configure gfp performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set gfp TCA reporting status.
    Hour24GfpReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpReports

    // Configure threshold on gfp parameters.
    Hour24GfpThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpThresholds
}

func (hour24Gfp_ *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_) GetEntityData() *types.CommonEntityData {
    hour24Gfp_.EntityData.YFilter = hour24Gfp_.YFilter
    hour24Gfp_.EntityData.YangName = "hour24-gfp"
    hour24Gfp_.EntityData.BundleName = "cisco_ios_xr"
    hour24Gfp_.EntityData.ParentYangName = "hour24-gfp"
    hour24Gfp_.EntityData.SegmentPath = "hour24-gfp"
    hour24Gfp_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Gfp_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Gfp_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Gfp_.EntityData.Children = make(map[string]types.YChild)
    hour24Gfp_.EntityData.Children["hour24-gfp-reports"] = types.YChild{"Hour24GfpReports", &hour24Gfp_.Hour24GfpReports}
    hour24Gfp_.EntityData.Children["hour24-gfp-thresholds"] = types.YChild{"Hour24GfpThresholds", &hour24Gfp_.Hour24GfpThresholds}
    hour24Gfp_.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Gfp_.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpReports
// set gfp TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpReports_Hour24GfpReport.
    Hour24GfpReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpReports_Hour24GfpReport
}

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpReports) GetEntityData() *types.CommonEntityData {
    hour24GfpReports.EntityData.YFilter = hour24GfpReports.YFilter
    hour24GfpReports.EntityData.YangName = "hour24-gfp-reports"
    hour24GfpReports.EntityData.BundleName = "cisco_ios_xr"
    hour24GfpReports.EntityData.ParentYangName = "hour24-gfp"
    hour24GfpReports.EntityData.SegmentPath = "hour24-gfp-reports"
    hour24GfpReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24GfpReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24GfpReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24GfpReports.EntityData.Children = make(map[string]types.YChild)
    hour24GfpReports.EntityData.Children["hour24-gfp-report"] = types.YChild{"Hour24GfpReport", nil}
    for i := range hour24GfpReports.Hour24GfpReport {
        hour24GfpReports.EntityData.Children[types.GetSegmentPath(&hour24GfpReports.Hour24GfpReport[i])] = types.YChild{"Hour24GfpReport", &hour24GfpReports.Hour24GfpReport[i]}
    }
    hour24GfpReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24GfpReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpReports_Hour24GfpReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpReports_Hour24GfpReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Gfp Report Type. The type is GfpReport.
    GfpReport interface{}
}

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpReports_Hour24GfpReport) GetEntityData() *types.CommonEntityData {
    hour24GfpReport.EntityData.YFilter = hour24GfpReport.YFilter
    hour24GfpReport.EntityData.YangName = "hour24-gfp-report"
    hour24GfpReport.EntityData.BundleName = "cisco_ios_xr"
    hour24GfpReport.EntityData.ParentYangName = "hour24-gfp-reports"
    hour24GfpReport.EntityData.SegmentPath = "hour24-gfp-report" + "[gfp-report='" + fmt.Sprintf("%v", hour24GfpReport.GfpReport) + "']"
    hour24GfpReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24GfpReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24GfpReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24GfpReport.EntityData.Children = make(map[string]types.YChild)
    hour24GfpReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24GfpReport.EntityData.Leafs["gfp-report"] = types.YLeaf{"GfpReport", hour24GfpReport.GfpReport}
    return &(hour24GfpReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpThresholds
// Configure threshold on gfp parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpThresholds_Hour24GfpThreshold.
    Hour24GfpThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpThresholds_Hour24GfpThreshold
}

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpThresholds) GetEntityData() *types.CommonEntityData {
    hour24GfpThresholds.EntityData.YFilter = hour24GfpThresholds.YFilter
    hour24GfpThresholds.EntityData.YangName = "hour24-gfp-thresholds"
    hour24GfpThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24GfpThresholds.EntityData.ParentYangName = "hour24-gfp"
    hour24GfpThresholds.EntityData.SegmentPath = "hour24-gfp-thresholds"
    hour24GfpThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24GfpThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24GfpThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24GfpThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24GfpThresholds.EntityData.Children["hour24-gfp-threshold"] = types.YChild{"Hour24GfpThreshold", nil}
    for i := range hour24GfpThresholds.Hour24GfpThreshold {
        hour24GfpThresholds.EntityData.Children[types.GetSegmentPath(&hour24GfpThresholds.Hour24GfpThreshold[i])] = types.YChild{"Hour24GfpThreshold", &hour24GfpThresholds.Hour24GfpThreshold[i]}
    }
    hour24GfpThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24GfpThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpThresholds_Hour24GfpThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpThresholds_Hour24GfpThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Gfp Threshold Type. The type is GfpThreshold.
    GfpThreshold interface{}

    // Gfp Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    GfpThresholdValue interface{}
}

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp__Hour24GfpThresholds_Hour24GfpThreshold) GetEntityData() *types.CommonEntityData {
    hour24GfpThreshold.EntityData.YFilter = hour24GfpThreshold.YFilter
    hour24GfpThreshold.EntityData.YangName = "hour24-gfp-threshold"
    hour24GfpThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24GfpThreshold.EntityData.ParentYangName = "hour24-gfp-thresholds"
    hour24GfpThreshold.EntityData.SegmentPath = "hour24-gfp-threshold" + "[gfp-threshold='" + fmt.Sprintf("%v", hour24GfpThreshold.GfpThreshold) + "']"
    hour24GfpThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24GfpThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24GfpThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24GfpThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24GfpThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24GfpThreshold.EntityData.Leafs["gfp-threshold"] = types.YLeaf{"GfpThreshold", hour24GfpThreshold.GfpThreshold}
    hour24GfpThreshold.EntityData.Leafs["gfp-threshold-value"] = types.YLeaf{"GfpThresholdValue", hour24GfpThreshold.GfpThresholdValue}
    return &(hour24GfpThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24
// Configure pm parameters of 24 hour interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ether performance monitoring.
    Hour24Ether InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether
}

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetEntityData() *types.CommonEntityData {
    ethernetHour24.EntityData.YFilter = ethernetHour24.YFilter
    ethernetHour24.EntityData.YangName = "ethernet-hour24"
    ethernetHour24.EntityData.BundleName = "cisco_ios_xr"
    ethernetHour24.EntityData.ParentYangName = "performance-management"
    ethernetHour24.EntityData.SegmentPath = "ethernet-hour24"
    ethernetHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetHour24.EntityData.Children = make(map[string]types.YChild)
    ethernetHour24.EntityData.Children["hour24-ether"] = types.YChild{"Hour24Ether", &ethernetHour24.Hour24Ether}
    ethernetHour24.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ethernetHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether
// Configure ether performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on ether parameters.
    Hour24EtherThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds

    // set ether TCA reporting status.
    Hour24EtherReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports
}

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetEntityData() *types.CommonEntityData {
    hour24Ether.EntityData.YFilter = hour24Ether.YFilter
    hour24Ether.EntityData.YangName = "hour24-ether"
    hour24Ether.EntityData.BundleName = "cisco_ios_xr"
    hour24Ether.EntityData.ParentYangName = "ethernet-hour24"
    hour24Ether.EntityData.SegmentPath = "hour24-ether"
    hour24Ether.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Ether.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Ether.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Ether.EntityData.Children = make(map[string]types.YChild)
    hour24Ether.EntityData.Children["hour24-ether-thresholds"] = types.YChild{"Hour24EtherThresholds", &hour24Ether.Hour24EtherThresholds}
    hour24Ether.EntityData.Children["hour24-ether-reports"] = types.YChild{"Hour24EtherReports", &hour24Ether.Hour24EtherReports}
    hour24Ether.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Ether.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds
// Configure threshold on ether parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold.
    Hour24EtherThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold
}

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetEntityData() *types.CommonEntityData {
    hour24EtherThresholds.EntityData.YFilter = hour24EtherThresholds.YFilter
    hour24EtherThresholds.EntityData.YangName = "hour24-ether-thresholds"
    hour24EtherThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24EtherThresholds.EntityData.ParentYangName = "hour24-ether"
    hour24EtherThresholds.EntityData.SegmentPath = "hour24-ether-thresholds"
    hour24EtherThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24EtherThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24EtherThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24EtherThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24EtherThresholds.EntityData.Children["hour24-ether-threshold"] = types.YChild{"Hour24EtherThreshold", nil}
    for i := range hour24EtherThresholds.Hour24EtherThreshold {
        hour24EtherThresholds.EntityData.Children[types.GetSegmentPath(&hour24EtherThresholds.Hour24EtherThreshold[i])] = types.YChild{"Hour24EtherThreshold", &hour24EtherThresholds.Hour24EtherThreshold[i]}
    }
    hour24EtherThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24EtherThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Threshold Type. The type is EtherThreshold.
    EtherThreshold interface{}

    // Ether Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    EtherThresholdValue interface{}
}

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetEntityData() *types.CommonEntityData {
    hour24EtherThreshold.EntityData.YFilter = hour24EtherThreshold.YFilter
    hour24EtherThreshold.EntityData.YangName = "hour24-ether-threshold"
    hour24EtherThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24EtherThreshold.EntityData.ParentYangName = "hour24-ether-thresholds"
    hour24EtherThreshold.EntityData.SegmentPath = "hour24-ether-threshold" + "[ether-threshold='" + fmt.Sprintf("%v", hour24EtherThreshold.EtherThreshold) + "']"
    hour24EtherThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24EtherThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24EtherThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24EtherThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24EtherThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24EtherThreshold.EntityData.Leafs["ether-threshold"] = types.YLeaf{"EtherThreshold", hour24EtherThreshold.EtherThreshold}
    hour24EtherThreshold.EntityData.Leafs["ether-threshold-value"] = types.YLeaf{"EtherThresholdValue", hour24EtherThreshold.EtherThresholdValue}
    return &(hour24EtherThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports
// set ether TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport.
    Hour24EtherReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport
}

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetEntityData() *types.CommonEntityData {
    hour24EtherReports.EntityData.YFilter = hour24EtherReports.YFilter
    hour24EtherReports.EntityData.YangName = "hour24-ether-reports"
    hour24EtherReports.EntityData.BundleName = "cisco_ios_xr"
    hour24EtherReports.EntityData.ParentYangName = "hour24-ether"
    hour24EtherReports.EntityData.SegmentPath = "hour24-ether-reports"
    hour24EtherReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24EtherReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24EtherReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24EtherReports.EntityData.Children = make(map[string]types.YChild)
    hour24EtherReports.EntityData.Children["hour24-ether-report"] = types.YChild{"Hour24EtherReport", nil}
    for i := range hour24EtherReports.Hour24EtherReport {
        hour24EtherReports.EntityData.Children[types.GetSegmentPath(&hour24EtherReports.Hour24EtherReport[i])] = types.YChild{"Hour24EtherReport", &hour24EtherReports.Hour24EtherReport[i]}
    }
    hour24EtherReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24EtherReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Report Type. The type is EtherReport.
    EtherReport interface{}
}

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetEntityData() *types.CommonEntityData {
    hour24EtherReport.EntityData.YFilter = hour24EtherReport.YFilter
    hour24EtherReport.EntityData.YangName = "hour24-ether-report"
    hour24EtherReport.EntityData.BundleName = "cisco_ios_xr"
    hour24EtherReport.EntityData.ParentYangName = "hour24-ether-reports"
    hour24EtherReport.EntityData.SegmentPath = "hour24-ether-report" + "[ether-report='" + fmt.Sprintf("%v", hour24EtherReport.EtherReport) + "']"
    hour24EtherReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24EtherReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24EtherReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24EtherReport.EntityData.Children = make(map[string]types.YChild)
    hour24EtherReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24EtherReport.EntityData.Leafs["ether-report"] = types.YLeaf{"EtherReport", hour24EtherReport.EtherReport}
    return &(hour24EtherReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 tcm's performance monitoring. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm.
    Minute15OtnTcm []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm
}

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetEntityData() *types.CommonEntityData {
    minute15OtnTcms.EntityData.YFilter = minute15OtnTcms.YFilter
    minute15OtnTcms.EntityData.YangName = "minute15otn-tcms"
    minute15OtnTcms.EntityData.BundleName = "cisco_ios_xr"
    minute15OtnTcms.EntityData.ParentYangName = "performance-management"
    minute15OtnTcms.EntityData.SegmentPath = "minute15otn-tcms"
    minute15OtnTcms.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OtnTcms.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OtnTcms.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OtnTcms.EntityData.Children = make(map[string]types.YChild)
    minute15OtnTcms.EntityData.Children["minute15otn-tcm"] = types.YChild{"Minute15OtnTcm", nil}
    for i := range minute15OtnTcms.Minute15OtnTcm {
        minute15OtnTcms.EntityData.Children[types.GetSegmentPath(&minute15OtnTcms.Minute15OtnTcm[i])] = types.YChild{"Minute15OtnTcm", &minute15OtnTcms.Minute15OtnTcm[i]}
    }
    minute15OtnTcms.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15OtnTcms.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm
// configure otn g709 tcm's performance
// monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. TCM number. The type is interface{} with range:
    // -2147483648..2147483647.
    TcmNumber interface{}

    // Configure threshold on otn parameters.
    Min15OtnTcmThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes

    // set otn TCA reporting status.
    Minute15OtnTcmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports
}

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetEntityData() *types.CommonEntityData {
    minute15OtnTcm.EntityData.YFilter = minute15OtnTcm.YFilter
    minute15OtnTcm.EntityData.YangName = "minute15otn-tcm"
    minute15OtnTcm.EntityData.BundleName = "cisco_ios_xr"
    minute15OtnTcm.EntityData.ParentYangName = "minute15otn-tcms"
    minute15OtnTcm.EntityData.SegmentPath = "minute15otn-tcm" + "[tcm-number='" + fmt.Sprintf("%v", minute15OtnTcm.TcmNumber) + "']"
    minute15OtnTcm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OtnTcm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OtnTcm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OtnTcm.EntityData.Children = make(map[string]types.YChild)
    minute15OtnTcm.EntityData.Children["min15-otn-tcm-threshes"] = types.YChild{"Min15OtnTcmThreshes", &minute15OtnTcm.Min15OtnTcmThreshes}
    minute15OtnTcm.EntityData.Children["minute15otn-tcm-reports"] = types.YChild{"Minute15OtnTcmReports", &minute15OtnTcm.Minute15OtnTcmReports}
    minute15OtnTcm.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15OtnTcm.EntityData.Leafs["tcm-number"] = types.YLeaf{"TcmNumber", minute15OtnTcm.TcmNumber}
    return &(minute15OtnTcm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh.
    Min15OtnTcmThresh []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh
}

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetEntityData() *types.CommonEntityData {
    min15OtnTcmThreshes.EntityData.YFilter = min15OtnTcmThreshes.YFilter
    min15OtnTcmThreshes.EntityData.YangName = "min15-otn-tcm-threshes"
    min15OtnTcmThreshes.EntityData.BundleName = "cisco_ios_xr"
    min15OtnTcmThreshes.EntityData.ParentYangName = "minute15otn-tcm"
    min15OtnTcmThreshes.EntityData.SegmentPath = "min15-otn-tcm-threshes"
    min15OtnTcmThreshes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnTcmThreshes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnTcmThreshes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnTcmThreshes.EntityData.Children = make(map[string]types.YChild)
    min15OtnTcmThreshes.EntityData.Children["min15-otn-tcm-thresh"] = types.YChild{"Min15OtnTcmThresh", nil}
    for i := range min15OtnTcmThreshes.Min15OtnTcmThresh {
        min15OtnTcmThreshes.EntityData.Children[types.GetSegmentPath(&min15OtnTcmThreshes.Min15OtnTcmThresh[i])] = types.YChild{"Min15OtnTcmThresh", &min15OtnTcmThreshes.Min15OtnTcmThresh[i]}
    }
    min15OtnTcmThreshes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(min15OtnTcmThreshes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnTcmThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetEntityData() *types.CommonEntityData {
    min15OtnTcmThresh.EntityData.YFilter = min15OtnTcmThresh.YFilter
    min15OtnTcmThresh.EntityData.YangName = "min15-otn-tcm-thresh"
    min15OtnTcmThresh.EntityData.BundleName = "cisco_ios_xr"
    min15OtnTcmThresh.EntityData.ParentYangName = "min15-otn-tcm-threshes"
    min15OtnTcmThresh.EntityData.SegmentPath = "min15-otn-tcm-thresh" + "[otn-threshold='" + fmt.Sprintf("%v", min15OtnTcmThresh.OtnThreshold) + "']"
    min15OtnTcmThresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnTcmThresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnTcmThresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnTcmThresh.EntityData.Children = make(map[string]types.YChild)
    min15OtnTcmThresh.EntityData.Leafs = make(map[string]types.YLeaf)
    min15OtnTcmThresh.EntityData.Leafs["otn-threshold"] = types.YLeaf{"OtnThreshold", min15OtnTcmThresh.OtnThreshold}
    min15OtnTcmThresh.EntityData.Leafs["otn-threshold-value"] = types.YLeaf{"OtnThresholdValue", min15OtnTcmThresh.OtnThresholdValue}
    return &(min15OtnTcmThresh.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport.
    Minute15OtnTcmReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport
}

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetEntityData() *types.CommonEntityData {
    minute15OtnTcmReports.EntityData.YFilter = minute15OtnTcmReports.YFilter
    minute15OtnTcmReports.EntityData.YangName = "minute15otn-tcm-reports"
    minute15OtnTcmReports.EntityData.BundleName = "cisco_ios_xr"
    minute15OtnTcmReports.EntityData.ParentYangName = "minute15otn-tcm"
    minute15OtnTcmReports.EntityData.SegmentPath = "minute15otn-tcm-reports"
    minute15OtnTcmReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OtnTcmReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OtnTcmReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OtnTcmReports.EntityData.Children = make(map[string]types.YChild)
    minute15OtnTcmReports.EntityData.Children["minute15otn-tcm-report"] = types.YChild{"Minute15OtnTcmReport", nil}
    for i := range minute15OtnTcmReports.Minute15OtnTcmReport {
        minute15OtnTcmReports.EntityData.Children[types.GetSegmentPath(&minute15OtnTcmReports.Minute15OtnTcmReport[i])] = types.YChild{"Minute15OtnTcmReport", &minute15OtnTcmReports.Minute15OtnTcmReport[i]}
    }
    minute15OtnTcmReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15OtnTcmReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnTcmReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetEntityData() *types.CommonEntityData {
    minute15OtnTcmReport.EntityData.YFilter = minute15OtnTcmReport.YFilter
    minute15OtnTcmReport.EntityData.YangName = "minute15otn-tcm-report"
    minute15OtnTcmReport.EntityData.BundleName = "cisco_ios_xr"
    minute15OtnTcmReport.EntityData.ParentYangName = "minute15otn-tcm-reports"
    minute15OtnTcmReport.EntityData.SegmentPath = "minute15otn-tcm-report" + "[otn-report='" + fmt.Sprintf("%v", minute15OtnTcmReport.OtnReport) + "']"
    minute15OtnTcmReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OtnTcmReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OtnTcmReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OtnTcmReport.EntityData.Children = make(map[string]types.YChild)
    minute15OtnTcmReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15OtnTcmReport.EntityData.Leafs["otn-report"] = types.YLeaf{"OtnReport", minute15OtnTcmReport.OtnReport}
    minute15OtnTcmReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", minute15OtnTcmReport.Enable}
    return &(minute15OtnTcmReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24
// set Oc threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ocn performance monitoring.
    OcHour24Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn
}

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetEntityData() *types.CommonEntityData {
    ocHour24.EntityData.YFilter = ocHour24.YFilter
    ocHour24.EntityData.YangName = "oc-hour24"
    ocHour24.EntityData.BundleName = "cisco_ios_xr"
    ocHour24.EntityData.ParentYangName = "performance-management"
    ocHour24.EntityData.SegmentPath = "oc-hour24"
    ocHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24.EntityData.Children = make(map[string]types.YChild)
    ocHour24.EntityData.Children["oc-hour24-ocn"] = types.YChild{"OcHour24Ocn", &ocHour24.OcHour24Ocn}
    ocHour24.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ocHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ocn TCA reporting status.
    OcHour24OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports

    // Configure threshold on ocn parameters.
    OcHour24OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds
}

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetEntityData() *types.CommonEntityData {
    ocHour24Ocn.EntityData.YFilter = ocHour24Ocn.YFilter
    ocHour24Ocn.EntityData.YangName = "oc-hour24-ocn"
    ocHour24Ocn.EntityData.BundleName = "cisco_ios_xr"
    ocHour24Ocn.EntityData.ParentYangName = "oc-hour24"
    ocHour24Ocn.EntityData.SegmentPath = "oc-hour24-ocn"
    ocHour24Ocn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24Ocn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24Ocn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24Ocn.EntityData.Children = make(map[string]types.YChild)
    ocHour24Ocn.EntityData.Children["oc-hour24-ocn-reports"] = types.YChild{"OcHour24OcnReports", &ocHour24Ocn.OcHour24OcnReports}
    ocHour24Ocn.EntityData.Children["oc-hour24-ocn-thresholds"] = types.YChild{"OcHour24OcnThresholds", &ocHour24Ocn.OcHour24OcnThresholds}
    ocHour24Ocn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ocHour24Ocn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport.
    OcHour24OcnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport
}

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetEntityData() *types.CommonEntityData {
    ocHour24OcnReports.EntityData.YFilter = ocHour24OcnReports.YFilter
    ocHour24OcnReports.EntityData.YangName = "oc-hour24-ocn-reports"
    ocHour24OcnReports.EntityData.BundleName = "cisco_ios_xr"
    ocHour24OcnReports.EntityData.ParentYangName = "oc-hour24-ocn"
    ocHour24OcnReports.EntityData.SegmentPath = "oc-hour24-ocn-reports"
    ocHour24OcnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24OcnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24OcnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24OcnReports.EntityData.Children = make(map[string]types.YChild)
    ocHour24OcnReports.EntityData.Children["oc-hour24-ocn-report"] = types.YChild{"OcHour24OcnReport", nil}
    for i := range ocHour24OcnReports.OcHour24OcnReport {
        ocHour24OcnReports.EntityData.Children[types.GetSegmentPath(&ocHour24OcnReports.OcHour24OcnReport[i])] = types.YChild{"OcHour24OcnReport", &ocHour24OcnReports.OcHour24OcnReport[i]}
    }
    ocHour24OcnReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ocHour24OcnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}

    // Ocn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetEntityData() *types.CommonEntityData {
    ocHour24OcnReport.EntityData.YFilter = ocHour24OcnReport.YFilter
    ocHour24OcnReport.EntityData.YangName = "oc-hour24-ocn-report"
    ocHour24OcnReport.EntityData.BundleName = "cisco_ios_xr"
    ocHour24OcnReport.EntityData.ParentYangName = "oc-hour24-ocn-reports"
    ocHour24OcnReport.EntityData.SegmentPath = "oc-hour24-ocn-report" + "[ocn-report='" + fmt.Sprintf("%v", ocHour24OcnReport.OcnReport) + "']"
    ocHour24OcnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24OcnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24OcnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24OcnReport.EntityData.Children = make(map[string]types.YChild)
    ocHour24OcnReport.EntityData.Leafs = make(map[string]types.YLeaf)
    ocHour24OcnReport.EntityData.Leafs["ocn-report"] = types.YLeaf{"OcnReport", ocHour24OcnReport.OcnReport}
    ocHour24OcnReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ocHour24OcnReport.Enable}
    return &(ocHour24OcnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold.
    OcHour24OcnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold
}

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetEntityData() *types.CommonEntityData {
    ocHour24OcnThresholds.EntityData.YFilter = ocHour24OcnThresholds.YFilter
    ocHour24OcnThresholds.EntityData.YangName = "oc-hour24-ocn-thresholds"
    ocHour24OcnThresholds.EntityData.BundleName = "cisco_ios_xr"
    ocHour24OcnThresholds.EntityData.ParentYangName = "oc-hour24-ocn"
    ocHour24OcnThresholds.EntityData.SegmentPath = "oc-hour24-ocn-thresholds"
    ocHour24OcnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24OcnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24OcnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24OcnThresholds.EntityData.Children = make(map[string]types.YChild)
    ocHour24OcnThresholds.EntityData.Children["oc-hour24-ocn-threshold"] = types.YChild{"OcHour24OcnThreshold", nil}
    for i := range ocHour24OcnThresholds.OcHour24OcnThreshold {
        ocHour24OcnThresholds.EntityData.Children[types.GetSegmentPath(&ocHour24OcnThresholds.OcHour24OcnThreshold[i])] = types.YChild{"OcHour24OcnThreshold", &ocHour24OcnThresholds.OcHour24OcnThreshold[i]}
    }
    ocHour24OcnThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ocHour24OcnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetEntityData() *types.CommonEntityData {
    ocHour24OcnThreshold.EntityData.YFilter = ocHour24OcnThreshold.YFilter
    ocHour24OcnThreshold.EntityData.YangName = "oc-hour24-ocn-threshold"
    ocHour24OcnThreshold.EntityData.BundleName = "cisco_ios_xr"
    ocHour24OcnThreshold.EntityData.ParentYangName = "oc-hour24-ocn-thresholds"
    ocHour24OcnThreshold.EntityData.SegmentPath = "oc-hour24-ocn-threshold" + "[ocn-threshold='" + fmt.Sprintf("%v", ocHour24OcnThreshold.OcnThreshold) + "']"
    ocHour24OcnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24OcnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24OcnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24OcnThreshold.EntityData.Children = make(map[string]types.YChild)
    ocHour24OcnThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    ocHour24OcnThreshold.EntityData.Leafs["ocn-threshold"] = types.YLeaf{"OcnThreshold", ocHour24OcnThreshold.OcnThreshold}
    ocHour24OcnThreshold.EntityData.Leafs["ocn-threshold-value"] = types.YLeaf{"OcnThresholdValue", ocHour24OcnThreshold.OcnThresholdValue}
    return &(ocHour24OcnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ether performance monitoring.
    Minute15Ether InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether
}

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetEntityData() *types.CommonEntityData {
    ethernetMinute15.EntityData.YFilter = ethernetMinute15.YFilter
    ethernetMinute15.EntityData.YangName = "ethernet-minute15"
    ethernetMinute15.EntityData.BundleName = "cisco_ios_xr"
    ethernetMinute15.EntityData.ParentYangName = "performance-management"
    ethernetMinute15.EntityData.SegmentPath = "ethernet-minute15"
    ethernetMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetMinute15.EntityData.Children = make(map[string]types.YChild)
    ethernetMinute15.EntityData.Children["minute15-ether"] = types.YChild{"Minute15Ether", &ethernetMinute15.Minute15Ether}
    ethernetMinute15.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ethernetMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether
// Configure ether performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on ether parameters.
    Minute15EtherThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds

    // set ether TCA reporting status.
    Minute15EtherReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports
}

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetEntityData() *types.CommonEntityData {
    minute15Ether.EntityData.YFilter = minute15Ether.YFilter
    minute15Ether.EntityData.YangName = "minute15-ether"
    minute15Ether.EntityData.BundleName = "cisco_ios_xr"
    minute15Ether.EntityData.ParentYangName = "ethernet-minute15"
    minute15Ether.EntityData.SegmentPath = "minute15-ether"
    minute15Ether.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Ether.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Ether.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Ether.EntityData.Children = make(map[string]types.YChild)
    minute15Ether.EntityData.Children["minute15-ether-thresholds"] = types.YChild{"Minute15EtherThresholds", &minute15Ether.Minute15EtherThresholds}
    minute15Ether.EntityData.Children["minute15-ether-reports"] = types.YChild{"Minute15EtherReports", &minute15Ether.Minute15EtherReports}
    minute15Ether.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Ether.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds
// Configure threshold on ether parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold.
    Minute15EtherThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold
}

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetEntityData() *types.CommonEntityData {
    minute15EtherThresholds.EntityData.YFilter = minute15EtherThresholds.YFilter
    minute15EtherThresholds.EntityData.YangName = "minute15-ether-thresholds"
    minute15EtherThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15EtherThresholds.EntityData.ParentYangName = "minute15-ether"
    minute15EtherThresholds.EntityData.SegmentPath = "minute15-ether-thresholds"
    minute15EtherThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15EtherThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15EtherThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15EtherThresholds.EntityData.Children = make(map[string]types.YChild)
    minute15EtherThresholds.EntityData.Children["minute15-ether-threshold"] = types.YChild{"Minute15EtherThreshold", nil}
    for i := range minute15EtherThresholds.Minute15EtherThreshold {
        minute15EtherThresholds.EntityData.Children[types.GetSegmentPath(&minute15EtherThresholds.Minute15EtherThreshold[i])] = types.YChild{"Minute15EtherThreshold", &minute15EtherThresholds.Minute15EtherThreshold[i]}
    }
    minute15EtherThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15EtherThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Threshold Type. The type is EtherThreshold.
    EtherThreshold interface{}

    // Ether Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    EtherThresholdValue interface{}
}

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetEntityData() *types.CommonEntityData {
    minute15EtherThreshold.EntityData.YFilter = minute15EtherThreshold.YFilter
    minute15EtherThreshold.EntityData.YangName = "minute15-ether-threshold"
    minute15EtherThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15EtherThreshold.EntityData.ParentYangName = "minute15-ether-thresholds"
    minute15EtherThreshold.EntityData.SegmentPath = "minute15-ether-threshold" + "[ether-threshold='" + fmt.Sprintf("%v", minute15EtherThreshold.EtherThreshold) + "']"
    minute15EtherThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15EtherThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15EtherThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15EtherThreshold.EntityData.Children = make(map[string]types.YChild)
    minute15EtherThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15EtherThreshold.EntityData.Leafs["ether-threshold"] = types.YLeaf{"EtherThreshold", minute15EtherThreshold.EtherThreshold}
    minute15EtherThreshold.EntityData.Leafs["ether-threshold-value"] = types.YLeaf{"EtherThresholdValue", minute15EtherThreshold.EtherThresholdValue}
    return &(minute15EtherThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports
// set ether TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport.
    Minute15EtherReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport
}

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetEntityData() *types.CommonEntityData {
    minute15EtherReports.EntityData.YFilter = minute15EtherReports.YFilter
    minute15EtherReports.EntityData.YangName = "minute15-ether-reports"
    minute15EtherReports.EntityData.BundleName = "cisco_ios_xr"
    minute15EtherReports.EntityData.ParentYangName = "minute15-ether"
    minute15EtherReports.EntityData.SegmentPath = "minute15-ether-reports"
    minute15EtherReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15EtherReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15EtherReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15EtherReports.EntityData.Children = make(map[string]types.YChild)
    minute15EtherReports.EntityData.Children["minute15-ether-report"] = types.YChild{"Minute15EtherReport", nil}
    for i := range minute15EtherReports.Minute15EtherReport {
        minute15EtherReports.EntityData.Children[types.GetSegmentPath(&minute15EtherReports.Minute15EtherReport[i])] = types.YChild{"Minute15EtherReport", &minute15EtherReports.Minute15EtherReport[i]}
    }
    minute15EtherReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15EtherReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Report Type. The type is EtherReport.
    EtherReport interface{}
}

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetEntityData() *types.CommonEntityData {
    minute15EtherReport.EntityData.YFilter = minute15EtherReport.YFilter
    minute15EtherReport.EntityData.YangName = "minute15-ether-report"
    minute15EtherReport.EntityData.BundleName = "cisco_ios_xr"
    minute15EtherReport.EntityData.ParentYangName = "minute15-ether-reports"
    minute15EtherReport.EntityData.SegmentPath = "minute15-ether-report" + "[ether-report='" + fmt.Sprintf("%v", minute15EtherReport.EtherReport) + "']"
    minute15EtherReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15EtherReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15EtherReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15EtherReport.EntityData.Children = make(map[string]types.YChild)
    minute15EtherReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15EtherReport.EntityData.Leafs["ether-report"] = types.YLeaf{"EtherReport", minute15EtherReport.EtherReport}
    return &(minute15EtherReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24
// set HO_VC threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ho_vc performance monitoring.
    HoVcHour24HoVc InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc
}

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetEntityData() *types.CommonEntityData {
    hoVcHour24.EntityData.YFilter = hoVcHour24.YFilter
    hoVcHour24.EntityData.YangName = "ho-vc-hour24"
    hoVcHour24.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24.EntityData.ParentYangName = "performance-management"
    hoVcHour24.EntityData.SegmentPath = "ho-vc-hour24"
    hoVcHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24.EntityData.Children = make(map[string]types.YChild)
    hoVcHour24.EntityData.Children["ho-vc-hour24ho-vc"] = types.YChild{"HoVcHour24HoVc", &hoVcHour24.HoVcHour24HoVc}
    hoVcHour24.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hoVcHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc
// Configure ho_vc performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ho_vc TCA reporting status.
    HoVcHour24HoVcReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports

    // Configure threshold on ho_vc parameters.
    HoVcHour24HoVcThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds
}

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetEntityData() *types.CommonEntityData {
    hoVcHour24HoVc.EntityData.YFilter = hoVcHour24HoVc.YFilter
    hoVcHour24HoVc.EntityData.YangName = "ho-vc-hour24ho-vc"
    hoVcHour24HoVc.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24HoVc.EntityData.ParentYangName = "ho-vc-hour24"
    hoVcHour24HoVc.EntityData.SegmentPath = "ho-vc-hour24ho-vc"
    hoVcHour24HoVc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24HoVc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24HoVc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24HoVc.EntityData.Children = make(map[string]types.YChild)
    hoVcHour24HoVc.EntityData.Children["ho-vc-hour24ho-vc-reports"] = types.YChild{"HoVcHour24HoVcReports", &hoVcHour24HoVc.HoVcHour24HoVcReports}
    hoVcHour24HoVc.EntityData.Children["ho-vc-hour24ho-vc-thresholds"] = types.YChild{"HoVcHour24HoVcThresholds", &hoVcHour24HoVc.HoVcHour24HoVcThresholds}
    hoVcHour24HoVc.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hoVcHour24HoVc.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports
// set ho_vc TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport.
    HoVcHour24HoVcReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport
}

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetEntityData() *types.CommonEntityData {
    hoVcHour24HoVcReports.EntityData.YFilter = hoVcHour24HoVcReports.YFilter
    hoVcHour24HoVcReports.EntityData.YangName = "ho-vc-hour24ho-vc-reports"
    hoVcHour24HoVcReports.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24HoVcReports.EntityData.ParentYangName = "ho-vc-hour24ho-vc"
    hoVcHour24HoVcReports.EntityData.SegmentPath = "ho-vc-hour24ho-vc-reports"
    hoVcHour24HoVcReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24HoVcReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24HoVcReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24HoVcReports.EntityData.Children = make(map[string]types.YChild)
    hoVcHour24HoVcReports.EntityData.Children["ho-vc-hour24ho-vc-report"] = types.YChild{"HoVcHour24HoVcReport", nil}
    for i := range hoVcHour24HoVcReports.HoVcHour24HoVcReport {
        hoVcHour24HoVcReports.EntityData.Children[types.GetSegmentPath(&hoVcHour24HoVcReports.HoVcHour24HoVcReport[i])] = types.YChild{"HoVcHour24HoVcReport", &hoVcHour24HoVcReports.HoVcHour24HoVcReport[i]}
    }
    hoVcHour24HoVcReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hoVcHour24HoVcReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ho_vc Report Type. The type is HoVcReport.
    HoVcReport interface{}

    // ho_vc Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetEntityData() *types.CommonEntityData {
    hoVcHour24HoVcReport.EntityData.YFilter = hoVcHour24HoVcReport.YFilter
    hoVcHour24HoVcReport.EntityData.YangName = "ho-vc-hour24ho-vc-report"
    hoVcHour24HoVcReport.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24HoVcReport.EntityData.ParentYangName = "ho-vc-hour24ho-vc-reports"
    hoVcHour24HoVcReport.EntityData.SegmentPath = "ho-vc-hour24ho-vc-report" + "[ho-vc-report='" + fmt.Sprintf("%v", hoVcHour24HoVcReport.HoVcReport) + "']"
    hoVcHour24HoVcReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24HoVcReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24HoVcReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24HoVcReport.EntityData.Children = make(map[string]types.YChild)
    hoVcHour24HoVcReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hoVcHour24HoVcReport.EntityData.Leafs["ho-vc-report"] = types.YLeaf{"HoVcReport", hoVcHour24HoVcReport.HoVcReport}
    hoVcHour24HoVcReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", hoVcHour24HoVcReport.Enable}
    return &(hoVcHour24HoVcReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds
// Configure threshold on ho_vc parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold.
    HoVcHour24HoVcThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold
}

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetEntityData() *types.CommonEntityData {
    hoVcHour24HoVcThresholds.EntityData.YFilter = hoVcHour24HoVcThresholds.YFilter
    hoVcHour24HoVcThresholds.EntityData.YangName = "ho-vc-hour24ho-vc-thresholds"
    hoVcHour24HoVcThresholds.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24HoVcThresholds.EntityData.ParentYangName = "ho-vc-hour24ho-vc"
    hoVcHour24HoVcThresholds.EntityData.SegmentPath = "ho-vc-hour24ho-vc-thresholds"
    hoVcHour24HoVcThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24HoVcThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24HoVcThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24HoVcThresholds.EntityData.Children = make(map[string]types.YChild)
    hoVcHour24HoVcThresholds.EntityData.Children["ho-vc-hour24ho-vc-threshold"] = types.YChild{"HoVcHour24HoVcThreshold", nil}
    for i := range hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold {
        hoVcHour24HoVcThresholds.EntityData.Children[types.GetSegmentPath(&hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold[i])] = types.YChild{"HoVcHour24HoVcThreshold", &hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold[i]}
    }
    hoVcHour24HoVcThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hoVcHour24HoVcThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ho_vc Threshold Type. The type is HoVcThreshold.
    HoVcThreshold interface{}

    // ho_vc Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    HoVcThresholdValue interface{}
}

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetEntityData() *types.CommonEntityData {
    hoVcHour24HoVcThreshold.EntityData.YFilter = hoVcHour24HoVcThreshold.YFilter
    hoVcHour24HoVcThreshold.EntityData.YangName = "ho-vc-hour24ho-vc-threshold"
    hoVcHour24HoVcThreshold.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24HoVcThreshold.EntityData.ParentYangName = "ho-vc-hour24ho-vc-thresholds"
    hoVcHour24HoVcThreshold.EntityData.SegmentPath = "ho-vc-hour24ho-vc-threshold" + "[ho-vc-threshold='" + fmt.Sprintf("%v", hoVcHour24HoVcThreshold.HoVcThreshold) + "']"
    hoVcHour24HoVcThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24HoVcThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24HoVcThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24HoVcThreshold.EntityData.Children = make(map[string]types.YChild)
    hoVcHour24HoVcThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hoVcHour24HoVcThreshold.EntityData.Leafs["ho-vc-threshold"] = types.YLeaf{"HoVcThreshold", hoVcHour24HoVcThreshold.HoVcThreshold}
    hoVcHour24HoVcThreshold.EntityData.Leafs["ho-vc-threshold-value"] = types.YLeaf{"HoVcThresholdValue", hoVcHour24HoVcThreshold.HoVcThresholdValue}
    return &(hoVcHour24HoVcThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30
// Configure optics performance monitoring for 30
// sec
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure fec g709 performance monitoring.
    Second30Fec InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec

    // Configure optics performance monitoring.
    Second30Optics InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics

    // Configure secy-if performance monitoring.
    Second30Secyif InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif

    // Configure secy-rx performance monitoring.
    Second30Secyrx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx

    // configure otn g709 performance monitoring.
    Second30Otn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn

    // Configure secy-tx performance monitoring.
    Second30Secytx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx
}

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetEntityData() *types.CommonEntityData {
    second30.EntityData.YFilter = second30.YFilter
    second30.EntityData.YangName = "second30"
    second30.EntityData.BundleName = "cisco_ios_xr"
    second30.EntityData.ParentYangName = "performance-management"
    second30.EntityData.SegmentPath = "second30"
    second30.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30.EntityData.Children = make(map[string]types.YChild)
    second30.EntityData.Children["second30fec"] = types.YChild{"Second30Fec", &second30.Second30Fec}
    second30.EntityData.Children["second30-optics"] = types.YChild{"Second30Optics", &second30.Second30Optics}
    second30.EntityData.Children["second30secyif"] = types.YChild{"Second30Secyif", &second30.Second30Secyif}
    second30.EntityData.Children["second30secyrx"] = types.YChild{"Second30Secyrx", &second30.Second30Secyrx}
    second30.EntityData.Children["second30otn"] = types.YChild{"Second30Otn", &second30.Second30Otn}
    second30.EntityData.Children["second30secytx"] = types.YChild{"Second30Secytx", &second30.Second30Secytx}
    second30.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec
// Configure fec g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure fec threshold.
    Second30FecThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds

    // set fec TCA reporting status.
    Second30FecReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports
}

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetEntityData() *types.CommonEntityData {
    second30Fec.EntityData.YFilter = second30Fec.YFilter
    second30Fec.EntityData.YangName = "second30fec"
    second30Fec.EntityData.BundleName = "cisco_ios_xr"
    second30Fec.EntityData.ParentYangName = "second30"
    second30Fec.EntityData.SegmentPath = "second30fec"
    second30Fec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30Fec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30Fec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30Fec.EntityData.Children = make(map[string]types.YChild)
    second30Fec.EntityData.Children["second30fec-thresholds"] = types.YChild{"Second30FecThresholds", &second30Fec.Second30FecThresholds}
    second30Fec.EntityData.Children["second30fec-reports"] = types.YChild{"Second30FecReports", &second30Fec.Second30FecReports}
    second30Fec.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30Fec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds
// Configure fec threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold.
    Second30FecThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold
}

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetEntityData() *types.CommonEntityData {
    second30FecThresholds.EntityData.YFilter = second30FecThresholds.YFilter
    second30FecThresholds.EntityData.YangName = "second30fec-thresholds"
    second30FecThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30FecThresholds.EntityData.ParentYangName = "second30fec"
    second30FecThresholds.EntityData.SegmentPath = "second30fec-thresholds"
    second30FecThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30FecThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30FecThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30FecThresholds.EntityData.Children = make(map[string]types.YChild)
    second30FecThresholds.EntityData.Children["second30fec-threshold"] = types.YChild{"Second30FecThreshold", nil}
    for i := range second30FecThresholds.Second30FecThreshold {
        second30FecThresholds.EntityData.Children[types.GetSegmentPath(&second30FecThresholds.Second30FecThreshold[i])] = types.YChild{"Second30FecThreshold", &second30FecThresholds.Second30FecThreshold[i]}
    }
    second30FecThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30FecThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Threshold Type. The type is FecThreshold.
    FecThreshold interface{}

    // Fec Threshold Value. The type is string with length: 1..20. This attribute
    // is mandatory.
    FecThresholdValue interface{}
}

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetEntityData() *types.CommonEntityData {
    second30FecThreshold.EntityData.YFilter = second30FecThreshold.YFilter
    second30FecThreshold.EntityData.YangName = "second30fec-threshold"
    second30FecThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30FecThreshold.EntityData.ParentYangName = "second30fec-thresholds"
    second30FecThreshold.EntityData.SegmentPath = "second30fec-threshold" + "[fec-threshold='" + fmt.Sprintf("%v", second30FecThreshold.FecThreshold) + "']"
    second30FecThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30FecThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30FecThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30FecThreshold.EntityData.Children = make(map[string]types.YChild)
    second30FecThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    second30FecThreshold.EntityData.Leafs["fec-threshold"] = types.YLeaf{"FecThreshold", second30FecThreshold.FecThreshold}
    second30FecThreshold.EntityData.Leafs["fec-threshold-value"] = types.YLeaf{"FecThresholdValue", second30FecThreshold.FecThresholdValue}
    return &(second30FecThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports
// set fec TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport.
    Second30FecReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport
}

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetEntityData() *types.CommonEntityData {
    second30FecReports.EntityData.YFilter = second30FecReports.YFilter
    second30FecReports.EntityData.YangName = "second30fec-reports"
    second30FecReports.EntityData.BundleName = "cisco_ios_xr"
    second30FecReports.EntityData.ParentYangName = "second30fec"
    second30FecReports.EntityData.SegmentPath = "second30fec-reports"
    second30FecReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30FecReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30FecReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30FecReports.EntityData.Children = make(map[string]types.YChild)
    second30FecReports.EntityData.Children["second30fec-report"] = types.YChild{"Second30FecReport", nil}
    for i := range second30FecReports.Second30FecReport {
        second30FecReports.EntityData.Children[types.GetSegmentPath(&second30FecReports.Second30FecReport[i])] = types.YChild{"Second30FecReport", &second30FecReports.Second30FecReport[i]}
    }
    second30FecReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30FecReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Report Type. The type is FecReport.
    FecReport interface{}

    // Fec Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetEntityData() *types.CommonEntityData {
    second30FecReport.EntityData.YFilter = second30FecReport.YFilter
    second30FecReport.EntityData.YangName = "second30fec-report"
    second30FecReport.EntityData.BundleName = "cisco_ios_xr"
    second30FecReport.EntityData.ParentYangName = "second30fec-reports"
    second30FecReport.EntityData.SegmentPath = "second30fec-report" + "[fec-report='" + fmt.Sprintf("%v", second30FecReport.FecReport) + "']"
    second30FecReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30FecReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30FecReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30FecReport.EntityData.Children = make(map[string]types.YChild)
    second30FecReport.EntityData.Leafs = make(map[string]types.YLeaf)
    second30FecReport.EntityData.Leafs["fec-report"] = types.YLeaf{"FecReport", second30FecReport.FecReport}
    second30FecReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", second30FecReport.Enable}
    return &(second30FecReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics
// Configure optics performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set optics TCA reporting status.
    Second30OpticsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports

    // Configure threshold on optics parameters.
    Second30OpticsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds
}

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetEntityData() *types.CommonEntityData {
    second30Optics.EntityData.YFilter = second30Optics.YFilter
    second30Optics.EntityData.YangName = "second30-optics"
    second30Optics.EntityData.BundleName = "cisco_ios_xr"
    second30Optics.EntityData.ParentYangName = "second30"
    second30Optics.EntityData.SegmentPath = "second30-optics"
    second30Optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30Optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30Optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30Optics.EntityData.Children = make(map[string]types.YChild)
    second30Optics.EntityData.Children["second30-optics-reports"] = types.YChild{"Second30OpticsReports", &second30Optics.Second30OpticsReports}
    second30Optics.EntityData.Children["second30-optics-thresholds"] = types.YChild{"Second30OpticsThresholds", &second30Optics.Second30OpticsThresholds}
    second30Optics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30Optics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports
// set optics TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport.
    Second30OpticsReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport
}

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetEntityData() *types.CommonEntityData {
    second30OpticsReports.EntityData.YFilter = second30OpticsReports.YFilter
    second30OpticsReports.EntityData.YangName = "second30-optics-reports"
    second30OpticsReports.EntityData.BundleName = "cisco_ios_xr"
    second30OpticsReports.EntityData.ParentYangName = "second30-optics"
    second30OpticsReports.EntityData.SegmentPath = "second30-optics-reports"
    second30OpticsReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OpticsReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OpticsReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OpticsReports.EntityData.Children = make(map[string]types.YChild)
    second30OpticsReports.EntityData.Children["second30-optics-report"] = types.YChild{"Second30OpticsReport", nil}
    for i := range second30OpticsReports.Second30OpticsReport {
        second30OpticsReports.EntityData.Children[types.GetSegmentPath(&second30OpticsReports.Second30OpticsReport[i])] = types.YChild{"Second30OpticsReport", &second30OpticsReports.Second30OpticsReport[i]}
    }
    second30OpticsReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30OpticsReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Report Type. The type is OpticsReport.
    OpticsReport interface{}
}

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetEntityData() *types.CommonEntityData {
    second30OpticsReport.EntityData.YFilter = second30OpticsReport.YFilter
    second30OpticsReport.EntityData.YangName = "second30-optics-report"
    second30OpticsReport.EntityData.BundleName = "cisco_ios_xr"
    second30OpticsReport.EntityData.ParentYangName = "second30-optics-reports"
    second30OpticsReport.EntityData.SegmentPath = "second30-optics-report" + "[optics-report='" + fmt.Sprintf("%v", second30OpticsReport.OpticsReport) + "']"
    second30OpticsReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OpticsReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OpticsReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OpticsReport.EntityData.Children = make(map[string]types.YChild)
    second30OpticsReport.EntityData.Leafs = make(map[string]types.YLeaf)
    second30OpticsReport.EntityData.Leafs["optics-report"] = types.YLeaf{"OpticsReport", second30OpticsReport.OpticsReport}
    return &(second30OpticsReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds
// Configure threshold on optics parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold.
    Second30OpticsThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold
}

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetEntityData() *types.CommonEntityData {
    second30OpticsThresholds.EntityData.YFilter = second30OpticsThresholds.YFilter
    second30OpticsThresholds.EntityData.YangName = "second30-optics-thresholds"
    second30OpticsThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30OpticsThresholds.EntityData.ParentYangName = "second30-optics"
    second30OpticsThresholds.EntityData.SegmentPath = "second30-optics-thresholds"
    second30OpticsThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OpticsThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OpticsThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OpticsThresholds.EntityData.Children = make(map[string]types.YChild)
    second30OpticsThresholds.EntityData.Children["second30-optics-threshold"] = types.YChild{"Second30OpticsThreshold", nil}
    for i := range second30OpticsThresholds.Second30OpticsThreshold {
        second30OpticsThresholds.EntityData.Children[types.GetSegmentPath(&second30OpticsThresholds.Second30OpticsThreshold[i])] = types.YChild{"Second30OpticsThreshold", &second30OpticsThresholds.Second30OpticsThreshold[i]}
    }
    second30OpticsThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30OpticsThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Threshold Type. The type is
    // OpticsThreshold.
    OpticsThreshold interface{}

    // Optics Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647.
    OpticsThresholdValue interface{}

    // Used only for Opt and Opr,To Enter Threshold in dbm use 1. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    Dbm interface{}
}

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetEntityData() *types.CommonEntityData {
    second30OpticsThreshold.EntityData.YFilter = second30OpticsThreshold.YFilter
    second30OpticsThreshold.EntityData.YangName = "second30-optics-threshold"
    second30OpticsThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30OpticsThreshold.EntityData.ParentYangName = "second30-optics-thresholds"
    second30OpticsThreshold.EntityData.SegmentPath = "second30-optics-threshold" + "[optics-threshold='" + fmt.Sprintf("%v", second30OpticsThreshold.OpticsThreshold) + "']"
    second30OpticsThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OpticsThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OpticsThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OpticsThreshold.EntityData.Children = make(map[string]types.YChild)
    second30OpticsThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    second30OpticsThreshold.EntityData.Leafs["optics-threshold"] = types.YLeaf{"OpticsThreshold", second30OpticsThreshold.OpticsThreshold}
    second30OpticsThreshold.EntityData.Leafs["optics-threshold-value"] = types.YLeaf{"OpticsThresholdValue", second30OpticsThreshold.OpticsThresholdValue}
    second30OpticsThreshold.EntityData.Leafs["dbm"] = types.YLeaf{"Dbm", second30OpticsThreshold.Dbm}
    return &(second30OpticsThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif
// Configure secy-if performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on secyif parameters.
    Second30SecyifThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds

    // set secyif TCA reporting status.
    Second30SecyifReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports
}

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetEntityData() *types.CommonEntityData {
    second30Secyif.EntityData.YFilter = second30Secyif.YFilter
    second30Secyif.EntityData.YangName = "second30secyif"
    second30Secyif.EntityData.BundleName = "cisco_ios_xr"
    second30Secyif.EntityData.ParentYangName = "second30"
    second30Secyif.EntityData.SegmentPath = "second30secyif"
    second30Secyif.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30Secyif.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30Secyif.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30Secyif.EntityData.Children = make(map[string]types.YChild)
    second30Secyif.EntityData.Children["second30secyif-thresholds"] = types.YChild{"Second30SecyifThresholds", &second30Secyif.Second30SecyifThresholds}
    second30Secyif.EntityData.Children["second30secyif-reports"] = types.YChild{"Second30SecyifReports", &second30Secyif.Second30SecyifReports}
    second30Secyif.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30Secyif.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds
// Configure threshold on secyif parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold.
    Second30SecyifThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold
}

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetEntityData() *types.CommonEntityData {
    second30SecyifThresholds.EntityData.YFilter = second30SecyifThresholds.YFilter
    second30SecyifThresholds.EntityData.YangName = "second30secyif-thresholds"
    second30SecyifThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30SecyifThresholds.EntityData.ParentYangName = "second30secyif"
    second30SecyifThresholds.EntityData.SegmentPath = "second30secyif-thresholds"
    second30SecyifThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecyifThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecyifThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecyifThresholds.EntityData.Children = make(map[string]types.YChild)
    second30SecyifThresholds.EntityData.Children["second30secyif-threshold"] = types.YChild{"Second30SecyifThreshold", nil}
    for i := range second30SecyifThresholds.Second30SecyifThreshold {
        second30SecyifThresholds.EntityData.Children[types.GetSegmentPath(&second30SecyifThresholds.Second30SecyifThreshold[i])] = types.YChild{"Second30SecyifThreshold", &second30SecyifThresholds.Second30SecyifThreshold[i]}
    }
    second30SecyifThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30SecyifThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Threshold Type. The type is
    // SecyifThreshold.
    SecyifThreshold interface{}

    // Secyif Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyifThresholdValue interface{}
}

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetEntityData() *types.CommonEntityData {
    second30SecyifThreshold.EntityData.YFilter = second30SecyifThreshold.YFilter
    second30SecyifThreshold.EntityData.YangName = "second30secyif-threshold"
    second30SecyifThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30SecyifThreshold.EntityData.ParentYangName = "second30secyif-thresholds"
    second30SecyifThreshold.EntityData.SegmentPath = "second30secyif-threshold" + "[secyif-threshold='" + fmt.Sprintf("%v", second30SecyifThreshold.SecyifThreshold) + "']"
    second30SecyifThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecyifThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecyifThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecyifThreshold.EntityData.Children = make(map[string]types.YChild)
    second30SecyifThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    second30SecyifThreshold.EntityData.Leafs["secyif-threshold"] = types.YLeaf{"SecyifThreshold", second30SecyifThreshold.SecyifThreshold}
    second30SecyifThreshold.EntityData.Leafs["secyif-threshold-value"] = types.YLeaf{"SecyifThresholdValue", second30SecyifThreshold.SecyifThresholdValue}
    return &(second30SecyifThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports
// set secyif TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport.
    Second30SecyifReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport
}

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetEntityData() *types.CommonEntityData {
    second30SecyifReports.EntityData.YFilter = second30SecyifReports.YFilter
    second30SecyifReports.EntityData.YangName = "second30secyif-reports"
    second30SecyifReports.EntityData.BundleName = "cisco_ios_xr"
    second30SecyifReports.EntityData.ParentYangName = "second30secyif"
    second30SecyifReports.EntityData.SegmentPath = "second30secyif-reports"
    second30SecyifReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecyifReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecyifReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecyifReports.EntityData.Children = make(map[string]types.YChild)
    second30SecyifReports.EntityData.Children["second30secyif-report"] = types.YChild{"Second30SecyifReport", nil}
    for i := range second30SecyifReports.Second30SecyifReport {
        second30SecyifReports.EntityData.Children[types.GetSegmentPath(&second30SecyifReports.Second30SecyifReport[i])] = types.YChild{"Second30SecyifReport", &second30SecyifReports.Second30SecyifReport[i]}
    }
    second30SecyifReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30SecyifReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Report Type. The type is SecyifReport.
    SecyifReport interface{}

    // Enabled Secyif Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetEntityData() *types.CommonEntityData {
    second30SecyifReport.EntityData.YFilter = second30SecyifReport.YFilter
    second30SecyifReport.EntityData.YangName = "second30secyif-report"
    second30SecyifReport.EntityData.BundleName = "cisco_ios_xr"
    second30SecyifReport.EntityData.ParentYangName = "second30secyif-reports"
    second30SecyifReport.EntityData.SegmentPath = "second30secyif-report" + "[secyif-report='" + fmt.Sprintf("%v", second30SecyifReport.SecyifReport) + "']"
    second30SecyifReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecyifReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecyifReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecyifReport.EntityData.Children = make(map[string]types.YChild)
    second30SecyifReport.EntityData.Leafs = make(map[string]types.YLeaf)
    second30SecyifReport.EntityData.Leafs["secyif-report"] = types.YLeaf{"SecyifReport", second30SecyifReport.SecyifReport}
    second30SecyifReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", second30SecyifReport.Enable}
    return &(second30SecyifReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx
// Configure secy-rx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on secyrx parameters.
    Second30SecyrxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds

    // set secyrx TCA reporting status.
    Second30SecyrxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports
}

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetEntityData() *types.CommonEntityData {
    second30Secyrx.EntityData.YFilter = second30Secyrx.YFilter
    second30Secyrx.EntityData.YangName = "second30secyrx"
    second30Secyrx.EntityData.BundleName = "cisco_ios_xr"
    second30Secyrx.EntityData.ParentYangName = "second30"
    second30Secyrx.EntityData.SegmentPath = "second30secyrx"
    second30Secyrx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30Secyrx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30Secyrx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30Secyrx.EntityData.Children = make(map[string]types.YChild)
    second30Secyrx.EntityData.Children["second30secyrx-thresholds"] = types.YChild{"Second30SecyrxThresholds", &second30Secyrx.Second30SecyrxThresholds}
    second30Secyrx.EntityData.Children["second30secyrx-reports"] = types.YChild{"Second30SecyrxReports", &second30Secyrx.Second30SecyrxReports}
    second30Secyrx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30Secyrx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds
// Configure threshold on secyrx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold.
    Second30SecyrxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold
}

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetEntityData() *types.CommonEntityData {
    second30SecyrxThresholds.EntityData.YFilter = second30SecyrxThresholds.YFilter
    second30SecyrxThresholds.EntityData.YangName = "second30secyrx-thresholds"
    second30SecyrxThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30SecyrxThresholds.EntityData.ParentYangName = "second30secyrx"
    second30SecyrxThresholds.EntityData.SegmentPath = "second30secyrx-thresholds"
    second30SecyrxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecyrxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecyrxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecyrxThresholds.EntityData.Children = make(map[string]types.YChild)
    second30SecyrxThresholds.EntityData.Children["second30secyrx-threshold"] = types.YChild{"Second30SecyrxThreshold", nil}
    for i := range second30SecyrxThresholds.Second30SecyrxThreshold {
        second30SecyrxThresholds.EntityData.Children[types.GetSegmentPath(&second30SecyrxThresholds.Second30SecyrxThreshold[i])] = types.YChild{"Second30SecyrxThreshold", &second30SecyrxThresholds.Second30SecyrxThreshold[i]}
    }
    second30SecyrxThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30SecyrxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Threshold Type. The type is
    // SecyrxThreshold.
    SecyrxThreshold interface{}

    // Secyrx Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyrxThresholdValue interface{}
}

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetEntityData() *types.CommonEntityData {
    second30SecyrxThreshold.EntityData.YFilter = second30SecyrxThreshold.YFilter
    second30SecyrxThreshold.EntityData.YangName = "second30secyrx-threshold"
    second30SecyrxThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30SecyrxThreshold.EntityData.ParentYangName = "second30secyrx-thresholds"
    second30SecyrxThreshold.EntityData.SegmentPath = "second30secyrx-threshold" + "[secyrx-threshold='" + fmt.Sprintf("%v", second30SecyrxThreshold.SecyrxThreshold) + "']"
    second30SecyrxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecyrxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecyrxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecyrxThreshold.EntityData.Children = make(map[string]types.YChild)
    second30SecyrxThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    second30SecyrxThreshold.EntityData.Leafs["secyrx-threshold"] = types.YLeaf{"SecyrxThreshold", second30SecyrxThreshold.SecyrxThreshold}
    second30SecyrxThreshold.EntityData.Leafs["secyrx-threshold-value"] = types.YLeaf{"SecyrxThresholdValue", second30SecyrxThreshold.SecyrxThresholdValue}
    return &(second30SecyrxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports
// set secyrx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport.
    Second30SecyrxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport
}

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetEntityData() *types.CommonEntityData {
    second30SecyrxReports.EntityData.YFilter = second30SecyrxReports.YFilter
    second30SecyrxReports.EntityData.YangName = "second30secyrx-reports"
    second30SecyrxReports.EntityData.BundleName = "cisco_ios_xr"
    second30SecyrxReports.EntityData.ParentYangName = "second30secyrx"
    second30SecyrxReports.EntityData.SegmentPath = "second30secyrx-reports"
    second30SecyrxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecyrxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecyrxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecyrxReports.EntityData.Children = make(map[string]types.YChild)
    second30SecyrxReports.EntityData.Children["second30secyrx-report"] = types.YChild{"Second30SecyrxReport", nil}
    for i := range second30SecyrxReports.Second30SecyrxReport {
        second30SecyrxReports.EntityData.Children[types.GetSegmentPath(&second30SecyrxReports.Second30SecyrxReport[i])] = types.YChild{"Second30SecyrxReport", &second30SecyrxReports.Second30SecyrxReport[i]}
    }
    second30SecyrxReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30SecyrxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Report Type. The type is SecyrxReport.
    SecyrxReport interface{}

    // Enabled Secyrx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetEntityData() *types.CommonEntityData {
    second30SecyrxReport.EntityData.YFilter = second30SecyrxReport.YFilter
    second30SecyrxReport.EntityData.YangName = "second30secyrx-report"
    second30SecyrxReport.EntityData.BundleName = "cisco_ios_xr"
    second30SecyrxReport.EntityData.ParentYangName = "second30secyrx-reports"
    second30SecyrxReport.EntityData.SegmentPath = "second30secyrx-report" + "[secyrx-report='" + fmt.Sprintf("%v", second30SecyrxReport.SecyrxReport) + "']"
    second30SecyrxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecyrxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecyrxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecyrxReport.EntityData.Children = make(map[string]types.YChild)
    second30SecyrxReport.EntityData.Leafs = make(map[string]types.YLeaf)
    second30SecyrxReport.EntityData.Leafs["secyrx-report"] = types.YLeaf{"SecyrxReport", second30SecyrxReport.SecyrxReport}
    second30SecyrxReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", second30SecyrxReport.Enable}
    return &(second30SecyrxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on otn parameters.
    Second30OtnThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes

    // set otn TCA reporting status.
    Second30OtnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports
}

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetEntityData() *types.CommonEntityData {
    second30Otn.EntityData.YFilter = second30Otn.YFilter
    second30Otn.EntityData.YangName = "second30otn"
    second30Otn.EntityData.BundleName = "cisco_ios_xr"
    second30Otn.EntityData.ParentYangName = "second30"
    second30Otn.EntityData.SegmentPath = "second30otn"
    second30Otn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30Otn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30Otn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30Otn.EntityData.Children = make(map[string]types.YChild)
    second30Otn.EntityData.Children["second30-otn-threshes"] = types.YChild{"Second30OtnThreshes", &second30Otn.Second30OtnThreshes}
    second30Otn.EntityData.Children["second30otn-reports"] = types.YChild{"Second30OtnReports", &second30Otn.Second30OtnReports}
    second30Otn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30Otn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh.
    Second30OtnThresh []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh
}

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetEntityData() *types.CommonEntityData {
    second30OtnThreshes.EntityData.YFilter = second30OtnThreshes.YFilter
    second30OtnThreshes.EntityData.YangName = "second30-otn-threshes"
    second30OtnThreshes.EntityData.BundleName = "cisco_ios_xr"
    second30OtnThreshes.EntityData.ParentYangName = "second30otn"
    second30OtnThreshes.EntityData.SegmentPath = "second30-otn-threshes"
    second30OtnThreshes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OtnThreshes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OtnThreshes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OtnThreshes.EntityData.Children = make(map[string]types.YChild)
    second30OtnThreshes.EntityData.Children["second30-otn-thresh"] = types.YChild{"Second30OtnThresh", nil}
    for i := range second30OtnThreshes.Second30OtnThresh {
        second30OtnThreshes.EntityData.Children[types.GetSegmentPath(&second30OtnThreshes.Second30OtnThresh[i])] = types.YChild{"Second30OtnThresh", &second30OtnThreshes.Second30OtnThresh[i]}
    }
    second30OtnThreshes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30OtnThreshes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetEntityData() *types.CommonEntityData {
    second30OtnThresh.EntityData.YFilter = second30OtnThresh.YFilter
    second30OtnThresh.EntityData.YangName = "second30-otn-thresh"
    second30OtnThresh.EntityData.BundleName = "cisco_ios_xr"
    second30OtnThresh.EntityData.ParentYangName = "second30-otn-threshes"
    second30OtnThresh.EntityData.SegmentPath = "second30-otn-thresh" + "[otn-threshold='" + fmt.Sprintf("%v", second30OtnThresh.OtnThreshold) + "']"
    second30OtnThresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OtnThresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OtnThresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OtnThresh.EntityData.Children = make(map[string]types.YChild)
    second30OtnThresh.EntityData.Leafs = make(map[string]types.YLeaf)
    second30OtnThresh.EntityData.Leafs["otn-threshold"] = types.YLeaf{"OtnThreshold", second30OtnThresh.OtnThreshold}
    second30OtnThresh.EntityData.Leafs["otn-threshold-value"] = types.YLeaf{"OtnThresholdValue", second30OtnThresh.OtnThresholdValue}
    return &(second30OtnThresh.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport.
    Second30OtnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport
}

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetEntityData() *types.CommonEntityData {
    second30OtnReports.EntityData.YFilter = second30OtnReports.YFilter
    second30OtnReports.EntityData.YangName = "second30otn-reports"
    second30OtnReports.EntityData.BundleName = "cisco_ios_xr"
    second30OtnReports.EntityData.ParentYangName = "second30otn"
    second30OtnReports.EntityData.SegmentPath = "second30otn-reports"
    second30OtnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OtnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OtnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OtnReports.EntityData.Children = make(map[string]types.YChild)
    second30OtnReports.EntityData.Children["second30otn-report"] = types.YChild{"Second30OtnReport", nil}
    for i := range second30OtnReports.Second30OtnReport {
        second30OtnReports.EntityData.Children[types.GetSegmentPath(&second30OtnReports.Second30OtnReport[i])] = types.YChild{"Second30OtnReport", &second30OtnReports.Second30OtnReport[i]}
    }
    second30OtnReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30OtnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetEntityData() *types.CommonEntityData {
    second30OtnReport.EntityData.YFilter = second30OtnReport.YFilter
    second30OtnReport.EntityData.YangName = "second30otn-report"
    second30OtnReport.EntityData.BundleName = "cisco_ios_xr"
    second30OtnReport.EntityData.ParentYangName = "second30otn-reports"
    second30OtnReport.EntityData.SegmentPath = "second30otn-report" + "[otn-report='" + fmt.Sprintf("%v", second30OtnReport.OtnReport) + "']"
    second30OtnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OtnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OtnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OtnReport.EntityData.Children = make(map[string]types.YChild)
    second30OtnReport.EntityData.Leafs = make(map[string]types.YLeaf)
    second30OtnReport.EntityData.Leafs["otn-report"] = types.YLeaf{"OtnReport", second30OtnReport.OtnReport}
    second30OtnReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", second30OtnReport.Enable}
    return &(second30OtnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx
// Configure secy-tx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on secytx parameters.
    Second30SecytxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds

    // set secytx TCA reporting status.
    Second30SecytxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports
}

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetEntityData() *types.CommonEntityData {
    second30Secytx.EntityData.YFilter = second30Secytx.YFilter
    second30Secytx.EntityData.YangName = "second30secytx"
    second30Secytx.EntityData.BundleName = "cisco_ios_xr"
    second30Secytx.EntityData.ParentYangName = "second30"
    second30Secytx.EntityData.SegmentPath = "second30secytx"
    second30Secytx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30Secytx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30Secytx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30Secytx.EntityData.Children = make(map[string]types.YChild)
    second30Secytx.EntityData.Children["second30secytx-thresholds"] = types.YChild{"Second30SecytxThresholds", &second30Secytx.Second30SecytxThresholds}
    second30Secytx.EntityData.Children["second30secytx-reports"] = types.YChild{"Second30SecytxReports", &second30Secytx.Second30SecytxReports}
    second30Secytx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30Secytx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds
// Configure threshold on secytx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold.
    Second30SecytxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold
}

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetEntityData() *types.CommonEntityData {
    second30SecytxThresholds.EntityData.YFilter = second30SecytxThresholds.YFilter
    second30SecytxThresholds.EntityData.YangName = "second30secytx-thresholds"
    second30SecytxThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30SecytxThresholds.EntityData.ParentYangName = "second30secytx"
    second30SecytxThresholds.EntityData.SegmentPath = "second30secytx-thresholds"
    second30SecytxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecytxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecytxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecytxThresholds.EntityData.Children = make(map[string]types.YChild)
    second30SecytxThresholds.EntityData.Children["second30secytx-threshold"] = types.YChild{"Second30SecytxThreshold", nil}
    for i := range second30SecytxThresholds.Second30SecytxThreshold {
        second30SecytxThresholds.EntityData.Children[types.GetSegmentPath(&second30SecytxThresholds.Second30SecytxThreshold[i])] = types.YChild{"Second30SecytxThreshold", &second30SecytxThresholds.Second30SecytxThreshold[i]}
    }
    second30SecytxThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30SecytxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Threshold Type. The type is
    // SecytxThreshold.
    SecytxThreshold interface{}

    // Secytx Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecytxThresholdValue interface{}
}

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetEntityData() *types.CommonEntityData {
    second30SecytxThreshold.EntityData.YFilter = second30SecytxThreshold.YFilter
    second30SecytxThreshold.EntityData.YangName = "second30secytx-threshold"
    second30SecytxThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30SecytxThreshold.EntityData.ParentYangName = "second30secytx-thresholds"
    second30SecytxThreshold.EntityData.SegmentPath = "second30secytx-threshold" + "[secytx-threshold='" + fmt.Sprintf("%v", second30SecytxThreshold.SecytxThreshold) + "']"
    second30SecytxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecytxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecytxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecytxThreshold.EntityData.Children = make(map[string]types.YChild)
    second30SecytxThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    second30SecytxThreshold.EntityData.Leafs["secytx-threshold"] = types.YLeaf{"SecytxThreshold", second30SecytxThreshold.SecytxThreshold}
    second30SecytxThreshold.EntityData.Leafs["secytx-threshold-value"] = types.YLeaf{"SecytxThresholdValue", second30SecytxThreshold.SecytxThresholdValue}
    return &(second30SecytxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports
// set secytx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport.
    Second30SecytxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport
}

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetEntityData() *types.CommonEntityData {
    second30SecytxReports.EntityData.YFilter = second30SecytxReports.YFilter
    second30SecytxReports.EntityData.YangName = "second30secytx-reports"
    second30SecytxReports.EntityData.BundleName = "cisco_ios_xr"
    second30SecytxReports.EntityData.ParentYangName = "second30secytx"
    second30SecytxReports.EntityData.SegmentPath = "second30secytx-reports"
    second30SecytxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecytxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecytxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecytxReports.EntityData.Children = make(map[string]types.YChild)
    second30SecytxReports.EntityData.Children["second30secytx-report"] = types.YChild{"Second30SecytxReport", nil}
    for i := range second30SecytxReports.Second30SecytxReport {
        second30SecytxReports.EntityData.Children[types.GetSegmentPath(&second30SecytxReports.Second30SecytxReport[i])] = types.YChild{"Second30SecytxReport", &second30SecytxReports.Second30SecytxReport[i]}
    }
    second30SecytxReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30SecytxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Report Type. The type is SecytxReport.
    SecytxReport interface{}

    // Enabled Secytx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetEntityData() *types.CommonEntityData {
    second30SecytxReport.EntityData.YFilter = second30SecytxReport.YFilter
    second30SecytxReport.EntityData.YangName = "second30secytx-report"
    second30SecytxReport.EntityData.BundleName = "cisco_ios_xr"
    second30SecytxReport.EntityData.ParentYangName = "second30secytx-reports"
    second30SecytxReport.EntityData.SegmentPath = "second30secytx-report" + "[secytx-report='" + fmt.Sprintf("%v", second30SecytxReport.SecytxReport) + "']"
    second30SecytxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30SecytxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30SecytxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30SecytxReport.EntityData.Children = make(map[string]types.YChild)
    second30SecytxReport.EntityData.Leafs = make(map[string]types.YLeaf)
    second30SecytxReport.EntityData.Leafs["secytx-report"] = types.YLeaf{"SecytxReport", second30SecytxReport.SecytxReport}
    second30SecytxReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", second30SecytxReport.Enable}
    return &(second30SecytxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms
// Configure pm parameters of tcm's 24 hour
// interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 tcm's performance monitoring. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm.
    Hour24OtnTcm []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm
}

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetEntityData() *types.CommonEntityData {
    hour24OtnTcms.EntityData.YFilter = hour24OtnTcms.YFilter
    hour24OtnTcms.EntityData.YangName = "hour24otn-tcms"
    hour24OtnTcms.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnTcms.EntityData.ParentYangName = "performance-management"
    hour24OtnTcms.EntityData.SegmentPath = "hour24otn-tcms"
    hour24OtnTcms.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnTcms.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnTcms.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnTcms.EntityData.Children = make(map[string]types.YChild)
    hour24OtnTcms.EntityData.Children["hour24otn-tcm"] = types.YChild{"Hour24OtnTcm", nil}
    for i := range hour24OtnTcms.Hour24OtnTcm {
        hour24OtnTcms.EntityData.Children[types.GetSegmentPath(&hour24OtnTcms.Hour24OtnTcm[i])] = types.YChild{"Hour24OtnTcm", &hour24OtnTcms.Hour24OtnTcm[i]}
    }
    hour24OtnTcms.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OtnTcms.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm
// configure otn g709 tcm's performance
// monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. TCM number. The type is interface{} with range:
    // -2147483648..2147483647.
    TcmNumber interface{}

    // Configure threshold on otn parameters.
    Hour24OtnTcmThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds

    // set otn TCA reporting status.
    Hour24OtnTcmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports
}

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetEntityData() *types.CommonEntityData {
    hour24OtnTcm.EntityData.YFilter = hour24OtnTcm.YFilter
    hour24OtnTcm.EntityData.YangName = "hour24otn-tcm"
    hour24OtnTcm.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnTcm.EntityData.ParentYangName = "hour24otn-tcms"
    hour24OtnTcm.EntityData.SegmentPath = "hour24otn-tcm" + "[tcm-number='" + fmt.Sprintf("%v", hour24OtnTcm.TcmNumber) + "']"
    hour24OtnTcm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnTcm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnTcm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnTcm.EntityData.Children = make(map[string]types.YChild)
    hour24OtnTcm.EntityData.Children["hour24otn-tcm-thresholds"] = types.YChild{"Hour24OtnTcmThresholds", &hour24OtnTcm.Hour24OtnTcmThresholds}
    hour24OtnTcm.EntityData.Children["hour24otn-tcm-reports"] = types.YChild{"Hour24OtnTcmReports", &hour24OtnTcm.Hour24OtnTcmReports}
    hour24OtnTcm.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24OtnTcm.EntityData.Leafs["tcm-number"] = types.YLeaf{"TcmNumber", hour24OtnTcm.TcmNumber}
    return &(hour24OtnTcm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold.
    Hour24OtnTcmThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold
}

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetEntityData() *types.CommonEntityData {
    hour24OtnTcmThresholds.EntityData.YFilter = hour24OtnTcmThresholds.YFilter
    hour24OtnTcmThresholds.EntityData.YangName = "hour24otn-tcm-thresholds"
    hour24OtnTcmThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnTcmThresholds.EntityData.ParentYangName = "hour24otn-tcm"
    hour24OtnTcmThresholds.EntityData.SegmentPath = "hour24otn-tcm-thresholds"
    hour24OtnTcmThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnTcmThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnTcmThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnTcmThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24OtnTcmThresholds.EntityData.Children["hour24otn-tcm-threshold"] = types.YChild{"Hour24OtnTcmThreshold", nil}
    for i := range hour24OtnTcmThresholds.Hour24OtnTcmThreshold {
        hour24OtnTcmThresholds.EntityData.Children[types.GetSegmentPath(&hour24OtnTcmThresholds.Hour24OtnTcmThreshold[i])] = types.YChild{"Hour24OtnTcmThreshold", &hour24OtnTcmThresholds.Hour24OtnTcmThreshold[i]}
    }
    hour24OtnTcmThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OtnTcmThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnTcmThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetEntityData() *types.CommonEntityData {
    hour24OtnTcmThreshold.EntityData.YFilter = hour24OtnTcmThreshold.YFilter
    hour24OtnTcmThreshold.EntityData.YangName = "hour24otn-tcm-threshold"
    hour24OtnTcmThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnTcmThreshold.EntityData.ParentYangName = "hour24otn-tcm-thresholds"
    hour24OtnTcmThreshold.EntityData.SegmentPath = "hour24otn-tcm-threshold" + "[otn-threshold='" + fmt.Sprintf("%v", hour24OtnTcmThreshold.OtnThreshold) + "']"
    hour24OtnTcmThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnTcmThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnTcmThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnTcmThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24OtnTcmThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24OtnTcmThreshold.EntityData.Leafs["otn-threshold"] = types.YLeaf{"OtnThreshold", hour24OtnTcmThreshold.OtnThreshold}
    hour24OtnTcmThreshold.EntityData.Leafs["otn-threshold-value"] = types.YLeaf{"OtnThresholdValue", hour24OtnTcmThreshold.OtnThresholdValue}
    return &(hour24OtnTcmThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport.
    Hour24OtnTcmReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport
}

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetEntityData() *types.CommonEntityData {
    hour24OtnTcmReports.EntityData.YFilter = hour24OtnTcmReports.YFilter
    hour24OtnTcmReports.EntityData.YangName = "hour24otn-tcm-reports"
    hour24OtnTcmReports.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnTcmReports.EntityData.ParentYangName = "hour24otn-tcm"
    hour24OtnTcmReports.EntityData.SegmentPath = "hour24otn-tcm-reports"
    hour24OtnTcmReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnTcmReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnTcmReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnTcmReports.EntityData.Children = make(map[string]types.YChild)
    hour24OtnTcmReports.EntityData.Children["hour24otn-tcm-report"] = types.YChild{"Hour24OtnTcmReport", nil}
    for i := range hour24OtnTcmReports.Hour24OtnTcmReport {
        hour24OtnTcmReports.EntityData.Children[types.GetSegmentPath(&hour24OtnTcmReports.Hour24OtnTcmReport[i])] = types.YChild{"Hour24OtnTcmReport", &hour24OtnTcmReports.Hour24OtnTcmReport[i]}
    }
    hour24OtnTcmReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OtnTcmReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnTcmReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetEntityData() *types.CommonEntityData {
    hour24OtnTcmReport.EntityData.YFilter = hour24OtnTcmReport.YFilter
    hour24OtnTcmReport.EntityData.YangName = "hour24otn-tcm-report"
    hour24OtnTcmReport.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnTcmReport.EntityData.ParentYangName = "hour24otn-tcm-reports"
    hour24OtnTcmReport.EntityData.SegmentPath = "hour24otn-tcm-report" + "[otn-report='" + fmt.Sprintf("%v", hour24OtnTcmReport.OtnReport) + "']"
    hour24OtnTcmReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnTcmReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnTcmReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnTcmReport.EntityData.Children = make(map[string]types.YChild)
    hour24OtnTcmReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24OtnTcmReport.EntityData.Leafs["otn-report"] = types.YLeaf{"OtnReport", hour24OtnTcmReport.OtnReport}
    hour24OtnTcmReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", hour24OtnTcmReport.Enable}
    return &(hour24OtnTcmReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15
// set STS threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    StsMinute15Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path
}

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetEntityData() *types.CommonEntityData {
    stsMinute15.EntityData.YFilter = stsMinute15.YFilter
    stsMinute15.EntityData.YangName = "sts-minute15"
    stsMinute15.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15.EntityData.ParentYangName = "performance-management"
    stsMinute15.EntityData.SegmentPath = "sts-minute15"
    stsMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15.EntityData.Children = make(map[string]types.YChild)
    stsMinute15.EntityData.Children["sts-minute15-path"] = types.YChild{"StsMinute15Path", &stsMinute15.StsMinute15Path}
    stsMinute15.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stsMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set Path TCA reporting status.
    StsMinute15PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports

    // Configure threshold on Path parameters.
    StsMinute15PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds
}

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetEntityData() *types.CommonEntityData {
    stsMinute15Path.EntityData.YFilter = stsMinute15Path.YFilter
    stsMinute15Path.EntityData.YangName = "sts-minute15-path"
    stsMinute15Path.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15Path.EntityData.ParentYangName = "sts-minute15"
    stsMinute15Path.EntityData.SegmentPath = "sts-minute15-path"
    stsMinute15Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15Path.EntityData.Children = make(map[string]types.YChild)
    stsMinute15Path.EntityData.Children["sts-minute15-path-reports"] = types.YChild{"StsMinute15PathReports", &stsMinute15Path.StsMinute15PathReports}
    stsMinute15Path.EntityData.Children["sts-minute15-path-thresholds"] = types.YChild{"StsMinute15PathThresholds", &stsMinute15Path.StsMinute15PathThresholds}
    stsMinute15Path.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stsMinute15Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport.
    StsMinute15PathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport
}

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetEntityData() *types.CommonEntityData {
    stsMinute15PathReports.EntityData.YFilter = stsMinute15PathReports.YFilter
    stsMinute15PathReports.EntityData.YangName = "sts-minute15-path-reports"
    stsMinute15PathReports.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15PathReports.EntityData.ParentYangName = "sts-minute15-path"
    stsMinute15PathReports.EntityData.SegmentPath = "sts-minute15-path-reports"
    stsMinute15PathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15PathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15PathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15PathReports.EntityData.Children = make(map[string]types.YChild)
    stsMinute15PathReports.EntityData.Children["sts-minute15-path-report"] = types.YChild{"StsMinute15PathReport", nil}
    for i := range stsMinute15PathReports.StsMinute15PathReport {
        stsMinute15PathReports.EntityData.Children[types.GetSegmentPath(&stsMinute15PathReports.StsMinute15PathReport[i])] = types.YChild{"StsMinute15PathReport", &stsMinute15PathReports.StsMinute15PathReport[i]}
    }
    stsMinute15PathReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stsMinute15PathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Path Report Type. The type is StsReport.
    PathReport interface{}

    // Path Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetEntityData() *types.CommonEntityData {
    stsMinute15PathReport.EntityData.YFilter = stsMinute15PathReport.YFilter
    stsMinute15PathReport.EntityData.YangName = "sts-minute15-path-report"
    stsMinute15PathReport.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15PathReport.EntityData.ParentYangName = "sts-minute15-path-reports"
    stsMinute15PathReport.EntityData.SegmentPath = "sts-minute15-path-report" + "[path-report='" + fmt.Sprintf("%v", stsMinute15PathReport.PathReport) + "']"
    stsMinute15PathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15PathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15PathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15PathReport.EntityData.Children = make(map[string]types.YChild)
    stsMinute15PathReport.EntityData.Leafs = make(map[string]types.YLeaf)
    stsMinute15PathReport.EntityData.Leafs["path-report"] = types.YLeaf{"PathReport", stsMinute15PathReport.PathReport}
    stsMinute15PathReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", stsMinute15PathReport.Enable}
    return &(stsMinute15PathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold.
    StsMinute15PathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold
}

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetEntityData() *types.CommonEntityData {
    stsMinute15PathThresholds.EntityData.YFilter = stsMinute15PathThresholds.YFilter
    stsMinute15PathThresholds.EntityData.YangName = "sts-minute15-path-thresholds"
    stsMinute15PathThresholds.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15PathThresholds.EntityData.ParentYangName = "sts-minute15-path"
    stsMinute15PathThresholds.EntityData.SegmentPath = "sts-minute15-path-thresholds"
    stsMinute15PathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15PathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15PathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15PathThresholds.EntityData.Children = make(map[string]types.YChild)
    stsMinute15PathThresholds.EntityData.Children["sts-minute15-path-threshold"] = types.YChild{"StsMinute15PathThreshold", nil}
    for i := range stsMinute15PathThresholds.StsMinute15PathThreshold {
        stsMinute15PathThresholds.EntityData.Children[types.GetSegmentPath(&stsMinute15PathThresholds.StsMinute15PathThreshold[i])] = types.YChild{"StsMinute15PathThreshold", &stsMinute15PathThresholds.StsMinute15PathThreshold[i]}
    }
    stsMinute15PathThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stsMinute15PathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Path Threshold Type. The type is StsThreshold.
    PathThreshold interface{}

    // Path Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    PathThresholdValue interface{}
}

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetEntityData() *types.CommonEntityData {
    stsMinute15PathThreshold.EntityData.YFilter = stsMinute15PathThreshold.YFilter
    stsMinute15PathThreshold.EntityData.YangName = "sts-minute15-path-threshold"
    stsMinute15PathThreshold.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15PathThreshold.EntityData.ParentYangName = "sts-minute15-path-thresholds"
    stsMinute15PathThreshold.EntityData.SegmentPath = "sts-minute15-path-threshold" + "[path-threshold='" + fmt.Sprintf("%v", stsMinute15PathThreshold.PathThreshold) + "']"
    stsMinute15PathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15PathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15PathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15PathThreshold.EntityData.Children = make(map[string]types.YChild)
    stsMinute15PathThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    stsMinute15PathThreshold.EntityData.Leafs["path-threshold"] = types.YLeaf{"PathThreshold", stsMinute15PathThreshold.PathThreshold}
    stsMinute15PathThreshold.EntityData.Leafs["path-threshold-value"] = types.YLeaf{"PathThresholdValue", stsMinute15PathThreshold.PathThresholdValue}
    return &(stsMinute15PathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24
// Configure pm parameters of 24 hour interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 performance monitoring.
    Hour24Otn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn

    // Configure optics performance monitoring.
    Hour24Optics InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics

    // Configure fec g709 performance monitoring.
    Hour24Fec InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec

    // Configure secy-if performance monitoring.
    Hour24Secyif InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif

    // Configure secy-rx performance monitoring.
    Hour24Secyrx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx

    // Configure secy-tx performance monitoring.
    Hour24Secytx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx
}

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetEntityData() *types.CommonEntityData {
    hour24.EntityData.YFilter = hour24.YFilter
    hour24.EntityData.YangName = "hour24"
    hour24.EntityData.BundleName = "cisco_ios_xr"
    hour24.EntityData.ParentYangName = "performance-management"
    hour24.EntityData.SegmentPath = "hour24"
    hour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24.EntityData.Children = make(map[string]types.YChild)
    hour24.EntityData.Children["hour24otn"] = types.YChild{"Hour24Otn", &hour24.Hour24Otn}
    hour24.EntityData.Children["hour24-optics"] = types.YChild{"Hour24Optics", &hour24.Hour24Optics}
    hour24.EntityData.Children["hour24fec"] = types.YChild{"Hour24Fec", &hour24.Hour24Fec}
    hour24.EntityData.Children["hour24secyif"] = types.YChild{"Hour24Secyif", &hour24.Hour24Secyif}
    hour24.EntityData.Children["hour24secyrx"] = types.YChild{"Hour24Secyrx", &hour24.Hour24Secyrx}
    hour24.EntityData.Children["hour24secytx"] = types.YChild{"Hour24Secytx", &hour24.Hour24Secytx}
    hour24.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on otn parameters.
    Hour24OtnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds

    // set otn TCA reporting status.
    Hour24OtnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports
}

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetEntityData() *types.CommonEntityData {
    hour24Otn.EntityData.YFilter = hour24Otn.YFilter
    hour24Otn.EntityData.YangName = "hour24otn"
    hour24Otn.EntityData.BundleName = "cisco_ios_xr"
    hour24Otn.EntityData.ParentYangName = "hour24"
    hour24Otn.EntityData.SegmentPath = "hour24otn"
    hour24Otn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Otn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Otn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Otn.EntityData.Children = make(map[string]types.YChild)
    hour24Otn.EntityData.Children["hour24otn-thresholds"] = types.YChild{"Hour24OtnThresholds", &hour24Otn.Hour24OtnThresholds}
    hour24Otn.EntityData.Children["hour24otn-reports"] = types.YChild{"Hour24OtnReports", &hour24Otn.Hour24OtnReports}
    hour24Otn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Otn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold.
    Hour24OtnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold
}

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetEntityData() *types.CommonEntityData {
    hour24OtnThresholds.EntityData.YFilter = hour24OtnThresholds.YFilter
    hour24OtnThresholds.EntityData.YangName = "hour24otn-thresholds"
    hour24OtnThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnThresholds.EntityData.ParentYangName = "hour24otn"
    hour24OtnThresholds.EntityData.SegmentPath = "hour24otn-thresholds"
    hour24OtnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24OtnThresholds.EntityData.Children["hour24otn-threshold"] = types.YChild{"Hour24OtnThreshold", nil}
    for i := range hour24OtnThresholds.Hour24OtnThreshold {
        hour24OtnThresholds.EntityData.Children[types.GetSegmentPath(&hour24OtnThresholds.Hour24OtnThreshold[i])] = types.YChild{"Hour24OtnThreshold", &hour24OtnThresholds.Hour24OtnThreshold[i]}
    }
    hour24OtnThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OtnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetEntityData() *types.CommonEntityData {
    hour24OtnThreshold.EntityData.YFilter = hour24OtnThreshold.YFilter
    hour24OtnThreshold.EntityData.YangName = "hour24otn-threshold"
    hour24OtnThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnThreshold.EntityData.ParentYangName = "hour24otn-thresholds"
    hour24OtnThreshold.EntityData.SegmentPath = "hour24otn-threshold" + "[otn-threshold='" + fmt.Sprintf("%v", hour24OtnThreshold.OtnThreshold) + "']"
    hour24OtnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24OtnThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24OtnThreshold.EntityData.Leafs["otn-threshold"] = types.YLeaf{"OtnThreshold", hour24OtnThreshold.OtnThreshold}
    hour24OtnThreshold.EntityData.Leafs["otn-threshold-value"] = types.YLeaf{"OtnThresholdValue", hour24OtnThreshold.OtnThresholdValue}
    return &(hour24OtnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport.
    Hour24OtnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport
}

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetEntityData() *types.CommonEntityData {
    hour24OtnReports.EntityData.YFilter = hour24OtnReports.YFilter
    hour24OtnReports.EntityData.YangName = "hour24otn-reports"
    hour24OtnReports.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnReports.EntityData.ParentYangName = "hour24otn"
    hour24OtnReports.EntityData.SegmentPath = "hour24otn-reports"
    hour24OtnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnReports.EntityData.Children = make(map[string]types.YChild)
    hour24OtnReports.EntityData.Children["hour24otn-report"] = types.YChild{"Hour24OtnReport", nil}
    for i := range hour24OtnReports.Hour24OtnReport {
        hour24OtnReports.EntityData.Children[types.GetSegmentPath(&hour24OtnReports.Hour24OtnReport[i])] = types.YChild{"Hour24OtnReport", &hour24OtnReports.Hour24OtnReport[i]}
    }
    hour24OtnReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OtnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetEntityData() *types.CommonEntityData {
    hour24OtnReport.EntityData.YFilter = hour24OtnReport.YFilter
    hour24OtnReport.EntityData.YangName = "hour24otn-report"
    hour24OtnReport.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnReport.EntityData.ParentYangName = "hour24otn-reports"
    hour24OtnReport.EntityData.SegmentPath = "hour24otn-report" + "[otn-report='" + fmt.Sprintf("%v", hour24OtnReport.OtnReport) + "']"
    hour24OtnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnReport.EntityData.Children = make(map[string]types.YChild)
    hour24OtnReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24OtnReport.EntityData.Leafs["otn-report"] = types.YLeaf{"OtnReport", hour24OtnReport.OtnReport}
    hour24OtnReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", hour24OtnReport.Enable}
    return &(hour24OtnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics
// Configure optics performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on optics parameters.
    Hour24OpticsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds

    // set optics TCA reporting status.
    Hour24OpticsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports
}

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetEntityData() *types.CommonEntityData {
    hour24Optics.EntityData.YFilter = hour24Optics.YFilter
    hour24Optics.EntityData.YangName = "hour24-optics"
    hour24Optics.EntityData.BundleName = "cisco_ios_xr"
    hour24Optics.EntityData.ParentYangName = "hour24"
    hour24Optics.EntityData.SegmentPath = "hour24-optics"
    hour24Optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Optics.EntityData.Children = make(map[string]types.YChild)
    hour24Optics.EntityData.Children["hour24-optics-thresholds"] = types.YChild{"Hour24OpticsThresholds", &hour24Optics.Hour24OpticsThresholds}
    hour24Optics.EntityData.Children["hour24-optics-reports"] = types.YChild{"Hour24OpticsReports", &hour24Optics.Hour24OpticsReports}
    hour24Optics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Optics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds
// Configure threshold on optics parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold.
    Hour24OpticsThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold
}

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetEntityData() *types.CommonEntityData {
    hour24OpticsThresholds.EntityData.YFilter = hour24OpticsThresholds.YFilter
    hour24OpticsThresholds.EntityData.YangName = "hour24-optics-thresholds"
    hour24OpticsThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24OpticsThresholds.EntityData.ParentYangName = "hour24-optics"
    hour24OpticsThresholds.EntityData.SegmentPath = "hour24-optics-thresholds"
    hour24OpticsThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OpticsThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OpticsThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OpticsThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24OpticsThresholds.EntityData.Children["hour24-optics-threshold"] = types.YChild{"Hour24OpticsThreshold", nil}
    for i := range hour24OpticsThresholds.Hour24OpticsThreshold {
        hour24OpticsThresholds.EntityData.Children[types.GetSegmentPath(&hour24OpticsThresholds.Hour24OpticsThreshold[i])] = types.YChild{"Hour24OpticsThreshold", &hour24OpticsThresholds.Hour24OpticsThreshold[i]}
    }
    hour24OpticsThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OpticsThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Threshold Type. The type is
    // OpticsThreshold.
    OpticsThreshold interface{}

    // Optics Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647.
    OpticsThresholdValue interface{}

    // Used only for Opt and Opr,To Enter Threshold in dbm use 1. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    Dbm interface{}
}

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetEntityData() *types.CommonEntityData {
    hour24OpticsThreshold.EntityData.YFilter = hour24OpticsThreshold.YFilter
    hour24OpticsThreshold.EntityData.YangName = "hour24-optics-threshold"
    hour24OpticsThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24OpticsThreshold.EntityData.ParentYangName = "hour24-optics-thresholds"
    hour24OpticsThreshold.EntityData.SegmentPath = "hour24-optics-threshold" + "[optics-threshold='" + fmt.Sprintf("%v", hour24OpticsThreshold.OpticsThreshold) + "']"
    hour24OpticsThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OpticsThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OpticsThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OpticsThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24OpticsThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24OpticsThreshold.EntityData.Leafs["optics-threshold"] = types.YLeaf{"OpticsThreshold", hour24OpticsThreshold.OpticsThreshold}
    hour24OpticsThreshold.EntityData.Leafs["optics-threshold-value"] = types.YLeaf{"OpticsThresholdValue", hour24OpticsThreshold.OpticsThresholdValue}
    hour24OpticsThreshold.EntityData.Leafs["dbm"] = types.YLeaf{"Dbm", hour24OpticsThreshold.Dbm}
    return &(hour24OpticsThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports
// set optics TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport.
    Hour24OpticsReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport
}

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetEntityData() *types.CommonEntityData {
    hour24OpticsReports.EntityData.YFilter = hour24OpticsReports.YFilter
    hour24OpticsReports.EntityData.YangName = "hour24-optics-reports"
    hour24OpticsReports.EntityData.BundleName = "cisco_ios_xr"
    hour24OpticsReports.EntityData.ParentYangName = "hour24-optics"
    hour24OpticsReports.EntityData.SegmentPath = "hour24-optics-reports"
    hour24OpticsReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OpticsReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OpticsReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OpticsReports.EntityData.Children = make(map[string]types.YChild)
    hour24OpticsReports.EntityData.Children["hour24-optics-report"] = types.YChild{"Hour24OpticsReport", nil}
    for i := range hour24OpticsReports.Hour24OpticsReport {
        hour24OpticsReports.EntityData.Children[types.GetSegmentPath(&hour24OpticsReports.Hour24OpticsReport[i])] = types.YChild{"Hour24OpticsReport", &hour24OpticsReports.Hour24OpticsReport[i]}
    }
    hour24OpticsReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OpticsReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Report Type. The type is OpticsReport.
    OpticsReport interface{}
}

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetEntityData() *types.CommonEntityData {
    hour24OpticsReport.EntityData.YFilter = hour24OpticsReport.YFilter
    hour24OpticsReport.EntityData.YangName = "hour24-optics-report"
    hour24OpticsReport.EntityData.BundleName = "cisco_ios_xr"
    hour24OpticsReport.EntityData.ParentYangName = "hour24-optics-reports"
    hour24OpticsReport.EntityData.SegmentPath = "hour24-optics-report" + "[optics-report='" + fmt.Sprintf("%v", hour24OpticsReport.OpticsReport) + "']"
    hour24OpticsReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OpticsReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OpticsReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OpticsReport.EntityData.Children = make(map[string]types.YChild)
    hour24OpticsReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24OpticsReport.EntityData.Leafs["optics-report"] = types.YLeaf{"OpticsReport", hour24OpticsReport.OpticsReport}
    return &(hour24OpticsReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec
// Configure fec g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure fec threshold.
    Hour24FecThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds

    // set fec TCA reporting status.
    Hour24FecReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports
}

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetEntityData() *types.CommonEntityData {
    hour24Fec.EntityData.YFilter = hour24Fec.YFilter
    hour24Fec.EntityData.YangName = "hour24fec"
    hour24Fec.EntityData.BundleName = "cisco_ios_xr"
    hour24Fec.EntityData.ParentYangName = "hour24"
    hour24Fec.EntityData.SegmentPath = "hour24fec"
    hour24Fec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Fec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Fec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Fec.EntityData.Children = make(map[string]types.YChild)
    hour24Fec.EntityData.Children["hour24fec-thresholds"] = types.YChild{"Hour24FecThresholds", &hour24Fec.Hour24FecThresholds}
    hour24Fec.EntityData.Children["hour24fec-reports"] = types.YChild{"Hour24FecReports", &hour24Fec.Hour24FecReports}
    hour24Fec.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Fec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds
// Configure fec threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold.
    Hour24FecThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold
}

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetEntityData() *types.CommonEntityData {
    hour24FecThresholds.EntityData.YFilter = hour24FecThresholds.YFilter
    hour24FecThresholds.EntityData.YangName = "hour24fec-thresholds"
    hour24FecThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24FecThresholds.EntityData.ParentYangName = "hour24fec"
    hour24FecThresholds.EntityData.SegmentPath = "hour24fec-thresholds"
    hour24FecThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24FecThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24FecThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24FecThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24FecThresholds.EntityData.Children["hour24fec-threshold"] = types.YChild{"Hour24FecThreshold", nil}
    for i := range hour24FecThresholds.Hour24FecThreshold {
        hour24FecThresholds.EntityData.Children[types.GetSegmentPath(&hour24FecThresholds.Hour24FecThreshold[i])] = types.YChild{"Hour24FecThreshold", &hour24FecThresholds.Hour24FecThreshold[i]}
    }
    hour24FecThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24FecThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Threshold Type. The type is FecThreshold.
    FecThreshold interface{}

    // Fec threshold value. The type is string with length: 1..20. This attribute
    // is mandatory.
    FecThresholdValue interface{}
}

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetEntityData() *types.CommonEntityData {
    hour24FecThreshold.EntityData.YFilter = hour24FecThreshold.YFilter
    hour24FecThreshold.EntityData.YangName = "hour24fec-threshold"
    hour24FecThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24FecThreshold.EntityData.ParentYangName = "hour24fec-thresholds"
    hour24FecThreshold.EntityData.SegmentPath = "hour24fec-threshold" + "[fec-threshold='" + fmt.Sprintf("%v", hour24FecThreshold.FecThreshold) + "']"
    hour24FecThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24FecThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24FecThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24FecThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24FecThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24FecThreshold.EntityData.Leafs["fec-threshold"] = types.YLeaf{"FecThreshold", hour24FecThreshold.FecThreshold}
    hour24FecThreshold.EntityData.Leafs["fec-threshold-value"] = types.YLeaf{"FecThresholdValue", hour24FecThreshold.FecThresholdValue}
    return &(hour24FecThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports
// set fec TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport.
    Hour24FecReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport
}

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetEntityData() *types.CommonEntityData {
    hour24FecReports.EntityData.YFilter = hour24FecReports.YFilter
    hour24FecReports.EntityData.YangName = "hour24fec-reports"
    hour24FecReports.EntityData.BundleName = "cisco_ios_xr"
    hour24FecReports.EntityData.ParentYangName = "hour24fec"
    hour24FecReports.EntityData.SegmentPath = "hour24fec-reports"
    hour24FecReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24FecReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24FecReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24FecReports.EntityData.Children = make(map[string]types.YChild)
    hour24FecReports.EntityData.Children["hour24fec-report"] = types.YChild{"Hour24FecReport", nil}
    for i := range hour24FecReports.Hour24FecReport {
        hour24FecReports.EntityData.Children[types.GetSegmentPath(&hour24FecReports.Hour24FecReport[i])] = types.YChild{"Hour24FecReport", &hour24FecReports.Hour24FecReport[i]}
    }
    hour24FecReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24FecReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Report type. The type is FecReport.
    FecReport interface{}

    // Fec Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetEntityData() *types.CommonEntityData {
    hour24FecReport.EntityData.YFilter = hour24FecReport.YFilter
    hour24FecReport.EntityData.YangName = "hour24fec-report"
    hour24FecReport.EntityData.BundleName = "cisco_ios_xr"
    hour24FecReport.EntityData.ParentYangName = "hour24fec-reports"
    hour24FecReport.EntityData.SegmentPath = "hour24fec-report" + "[fec-report='" + fmt.Sprintf("%v", hour24FecReport.FecReport) + "']"
    hour24FecReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24FecReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24FecReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24FecReport.EntityData.Children = make(map[string]types.YChild)
    hour24FecReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24FecReport.EntityData.Leafs["fec-report"] = types.YLeaf{"FecReport", hour24FecReport.FecReport}
    hour24FecReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", hour24FecReport.Enable}
    return &(hour24FecReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif
// Configure secy-if performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secyif TCA reporting status.
    Hour24SecyifReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports

    // Configure secyif threshold.
    Hour24SecyifThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds
}

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetEntityData() *types.CommonEntityData {
    hour24Secyif.EntityData.YFilter = hour24Secyif.YFilter
    hour24Secyif.EntityData.YangName = "hour24secyif"
    hour24Secyif.EntityData.BundleName = "cisco_ios_xr"
    hour24Secyif.EntityData.ParentYangName = "hour24"
    hour24Secyif.EntityData.SegmentPath = "hour24secyif"
    hour24Secyif.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Secyif.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Secyif.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Secyif.EntityData.Children = make(map[string]types.YChild)
    hour24Secyif.EntityData.Children["hour24secyif-reports"] = types.YChild{"Hour24SecyifReports", &hour24Secyif.Hour24SecyifReports}
    hour24Secyif.EntityData.Children["hour24secyif-thresholds"] = types.YChild{"Hour24SecyifThresholds", &hour24Secyif.Hour24SecyifThresholds}
    hour24Secyif.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Secyif.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports
// set secyif TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport.
    Hour24SecyifReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport
}

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetEntityData() *types.CommonEntityData {
    hour24SecyifReports.EntityData.YFilter = hour24SecyifReports.YFilter
    hour24SecyifReports.EntityData.YangName = "hour24secyif-reports"
    hour24SecyifReports.EntityData.BundleName = "cisco_ios_xr"
    hour24SecyifReports.EntityData.ParentYangName = "hour24secyif"
    hour24SecyifReports.EntityData.SegmentPath = "hour24secyif-reports"
    hour24SecyifReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecyifReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecyifReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecyifReports.EntityData.Children = make(map[string]types.YChild)
    hour24SecyifReports.EntityData.Children["hour24secyif-report"] = types.YChild{"Hour24SecyifReport", nil}
    for i := range hour24SecyifReports.Hour24SecyifReport {
        hour24SecyifReports.EntityData.Children[types.GetSegmentPath(&hour24SecyifReports.Hour24SecyifReport[i])] = types.YChild{"Hour24SecyifReport", &hour24SecyifReports.Hour24SecyifReport[i]}
    }
    hour24SecyifReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24SecyifReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Report type. The type is SecyifReport.
    SecyifReport interface{}

    // Secyif Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetEntityData() *types.CommonEntityData {
    hour24SecyifReport.EntityData.YFilter = hour24SecyifReport.YFilter
    hour24SecyifReport.EntityData.YangName = "hour24secyif-report"
    hour24SecyifReport.EntityData.BundleName = "cisco_ios_xr"
    hour24SecyifReport.EntityData.ParentYangName = "hour24secyif-reports"
    hour24SecyifReport.EntityData.SegmentPath = "hour24secyif-report" + "[secyif-report='" + fmt.Sprintf("%v", hour24SecyifReport.SecyifReport) + "']"
    hour24SecyifReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecyifReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecyifReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecyifReport.EntityData.Children = make(map[string]types.YChild)
    hour24SecyifReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24SecyifReport.EntityData.Leafs["secyif-report"] = types.YLeaf{"SecyifReport", hour24SecyifReport.SecyifReport}
    hour24SecyifReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", hour24SecyifReport.Enable}
    return &(hour24SecyifReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds
// Configure secyif threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold.
    Hour24SecyifThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold
}

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetEntityData() *types.CommonEntityData {
    hour24SecyifThresholds.EntityData.YFilter = hour24SecyifThresholds.YFilter
    hour24SecyifThresholds.EntityData.YangName = "hour24secyif-thresholds"
    hour24SecyifThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24SecyifThresholds.EntityData.ParentYangName = "hour24secyif"
    hour24SecyifThresholds.EntityData.SegmentPath = "hour24secyif-thresholds"
    hour24SecyifThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecyifThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecyifThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecyifThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24SecyifThresholds.EntityData.Children["hour24secyif-threshold"] = types.YChild{"Hour24SecyifThreshold", nil}
    for i := range hour24SecyifThresholds.Hour24SecyifThreshold {
        hour24SecyifThresholds.EntityData.Children[types.GetSegmentPath(&hour24SecyifThresholds.Hour24SecyifThreshold[i])] = types.YChild{"Hour24SecyifThreshold", &hour24SecyifThresholds.Hour24SecyifThreshold[i]}
    }
    hour24SecyifThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24SecyifThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Threshold Type. The type is
    // SecyifThreshold.
    SecyifThreshold interface{}

    // Secyif threshold value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyifThresholdValue interface{}
}

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetEntityData() *types.CommonEntityData {
    hour24SecyifThreshold.EntityData.YFilter = hour24SecyifThreshold.YFilter
    hour24SecyifThreshold.EntityData.YangName = "hour24secyif-threshold"
    hour24SecyifThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24SecyifThreshold.EntityData.ParentYangName = "hour24secyif-thresholds"
    hour24SecyifThreshold.EntityData.SegmentPath = "hour24secyif-threshold" + "[secyif-threshold='" + fmt.Sprintf("%v", hour24SecyifThreshold.SecyifThreshold) + "']"
    hour24SecyifThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecyifThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecyifThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecyifThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24SecyifThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24SecyifThreshold.EntityData.Leafs["secyif-threshold"] = types.YLeaf{"SecyifThreshold", hour24SecyifThreshold.SecyifThreshold}
    hour24SecyifThreshold.EntityData.Leafs["secyif-threshold-value"] = types.YLeaf{"SecyifThresholdValue", hour24SecyifThreshold.SecyifThresholdValue}
    return &(hour24SecyifThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx
// Configure secy-rx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secyrx TCA reporting status.
    Hour24SecyrxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports

    // Configure secyrx threshold.
    Hour24SecyrxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds
}

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetEntityData() *types.CommonEntityData {
    hour24Secyrx.EntityData.YFilter = hour24Secyrx.YFilter
    hour24Secyrx.EntityData.YangName = "hour24secyrx"
    hour24Secyrx.EntityData.BundleName = "cisco_ios_xr"
    hour24Secyrx.EntityData.ParentYangName = "hour24"
    hour24Secyrx.EntityData.SegmentPath = "hour24secyrx"
    hour24Secyrx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Secyrx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Secyrx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Secyrx.EntityData.Children = make(map[string]types.YChild)
    hour24Secyrx.EntityData.Children["hour24secyrx-reports"] = types.YChild{"Hour24SecyrxReports", &hour24Secyrx.Hour24SecyrxReports}
    hour24Secyrx.EntityData.Children["hour24secyrx-thresholds"] = types.YChild{"Hour24SecyrxThresholds", &hour24Secyrx.Hour24SecyrxThresholds}
    hour24Secyrx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Secyrx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports
// set secyrx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport.
    Hour24SecyrxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport
}

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetEntityData() *types.CommonEntityData {
    hour24SecyrxReports.EntityData.YFilter = hour24SecyrxReports.YFilter
    hour24SecyrxReports.EntityData.YangName = "hour24secyrx-reports"
    hour24SecyrxReports.EntityData.BundleName = "cisco_ios_xr"
    hour24SecyrxReports.EntityData.ParentYangName = "hour24secyrx"
    hour24SecyrxReports.EntityData.SegmentPath = "hour24secyrx-reports"
    hour24SecyrxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecyrxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecyrxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecyrxReports.EntityData.Children = make(map[string]types.YChild)
    hour24SecyrxReports.EntityData.Children["hour24secyrx-report"] = types.YChild{"Hour24SecyrxReport", nil}
    for i := range hour24SecyrxReports.Hour24SecyrxReport {
        hour24SecyrxReports.EntityData.Children[types.GetSegmentPath(&hour24SecyrxReports.Hour24SecyrxReport[i])] = types.YChild{"Hour24SecyrxReport", &hour24SecyrxReports.Hour24SecyrxReport[i]}
    }
    hour24SecyrxReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24SecyrxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Report type. The type is SecyrxReport.
    SecyrxReport interface{}

    // Secyrx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetEntityData() *types.CommonEntityData {
    hour24SecyrxReport.EntityData.YFilter = hour24SecyrxReport.YFilter
    hour24SecyrxReport.EntityData.YangName = "hour24secyrx-report"
    hour24SecyrxReport.EntityData.BundleName = "cisco_ios_xr"
    hour24SecyrxReport.EntityData.ParentYangName = "hour24secyrx-reports"
    hour24SecyrxReport.EntityData.SegmentPath = "hour24secyrx-report" + "[secyrx-report='" + fmt.Sprintf("%v", hour24SecyrxReport.SecyrxReport) + "']"
    hour24SecyrxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecyrxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecyrxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecyrxReport.EntityData.Children = make(map[string]types.YChild)
    hour24SecyrxReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24SecyrxReport.EntityData.Leafs["secyrx-report"] = types.YLeaf{"SecyrxReport", hour24SecyrxReport.SecyrxReport}
    hour24SecyrxReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", hour24SecyrxReport.Enable}
    return &(hour24SecyrxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds
// Configure secyrx threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold.
    Hour24SecyrxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold
}

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetEntityData() *types.CommonEntityData {
    hour24SecyrxThresholds.EntityData.YFilter = hour24SecyrxThresholds.YFilter
    hour24SecyrxThresholds.EntityData.YangName = "hour24secyrx-thresholds"
    hour24SecyrxThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24SecyrxThresholds.EntityData.ParentYangName = "hour24secyrx"
    hour24SecyrxThresholds.EntityData.SegmentPath = "hour24secyrx-thresholds"
    hour24SecyrxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecyrxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecyrxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecyrxThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24SecyrxThresholds.EntityData.Children["hour24secyrx-threshold"] = types.YChild{"Hour24SecyrxThreshold", nil}
    for i := range hour24SecyrxThresholds.Hour24SecyrxThreshold {
        hour24SecyrxThresholds.EntityData.Children[types.GetSegmentPath(&hour24SecyrxThresholds.Hour24SecyrxThreshold[i])] = types.YChild{"Hour24SecyrxThreshold", &hour24SecyrxThresholds.Hour24SecyrxThreshold[i]}
    }
    hour24SecyrxThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24SecyrxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Threshold Type. The type is
    // SecyrxThreshold.
    SecyrxThreshold interface{}

    // Secyrx threshold value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyrxThresholdValue interface{}
}

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetEntityData() *types.CommonEntityData {
    hour24SecyrxThreshold.EntityData.YFilter = hour24SecyrxThreshold.YFilter
    hour24SecyrxThreshold.EntityData.YangName = "hour24secyrx-threshold"
    hour24SecyrxThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24SecyrxThreshold.EntityData.ParentYangName = "hour24secyrx-thresholds"
    hour24SecyrxThreshold.EntityData.SegmentPath = "hour24secyrx-threshold" + "[secyrx-threshold='" + fmt.Sprintf("%v", hour24SecyrxThreshold.SecyrxThreshold) + "']"
    hour24SecyrxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecyrxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecyrxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecyrxThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24SecyrxThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24SecyrxThreshold.EntityData.Leafs["secyrx-threshold"] = types.YLeaf{"SecyrxThreshold", hour24SecyrxThreshold.SecyrxThreshold}
    hour24SecyrxThreshold.EntityData.Leafs["secyrx-threshold-value"] = types.YLeaf{"SecyrxThresholdValue", hour24SecyrxThreshold.SecyrxThresholdValue}
    return &(hour24SecyrxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx
// Configure secy-tx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure secytx threshold.
    Hour24SecytxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds

    // set secytx TCA reporting status.
    Hour24SecytxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports
}

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetEntityData() *types.CommonEntityData {
    hour24Secytx.EntityData.YFilter = hour24Secytx.YFilter
    hour24Secytx.EntityData.YangName = "hour24secytx"
    hour24Secytx.EntityData.BundleName = "cisco_ios_xr"
    hour24Secytx.EntityData.ParentYangName = "hour24"
    hour24Secytx.EntityData.SegmentPath = "hour24secytx"
    hour24Secytx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Secytx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Secytx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Secytx.EntityData.Children = make(map[string]types.YChild)
    hour24Secytx.EntityData.Children["hour24secytx-thresholds"] = types.YChild{"Hour24SecytxThresholds", &hour24Secytx.Hour24SecytxThresholds}
    hour24Secytx.EntityData.Children["hour24secytx-reports"] = types.YChild{"Hour24SecytxReports", &hour24Secytx.Hour24SecytxReports}
    hour24Secytx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Secytx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds
// Configure secytx threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold.
    Hour24SecytxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold
}

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetEntityData() *types.CommonEntityData {
    hour24SecytxThresholds.EntityData.YFilter = hour24SecytxThresholds.YFilter
    hour24SecytxThresholds.EntityData.YangName = "hour24secytx-thresholds"
    hour24SecytxThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24SecytxThresholds.EntityData.ParentYangName = "hour24secytx"
    hour24SecytxThresholds.EntityData.SegmentPath = "hour24secytx-thresholds"
    hour24SecytxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecytxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecytxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecytxThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24SecytxThresholds.EntityData.Children["hour24secytx-threshold"] = types.YChild{"Hour24SecytxThreshold", nil}
    for i := range hour24SecytxThresholds.Hour24SecytxThreshold {
        hour24SecytxThresholds.EntityData.Children[types.GetSegmentPath(&hour24SecytxThresholds.Hour24SecytxThreshold[i])] = types.YChild{"Hour24SecytxThreshold", &hour24SecytxThresholds.Hour24SecytxThreshold[i]}
    }
    hour24SecytxThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24SecytxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Threshold Type. The type is
    // SecytxThreshold.
    SecytxThreshold interface{}

    // Secytx threshold value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecytxThresholdValue interface{}
}

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetEntityData() *types.CommonEntityData {
    hour24SecytxThreshold.EntityData.YFilter = hour24SecytxThreshold.YFilter
    hour24SecytxThreshold.EntityData.YangName = "hour24secytx-threshold"
    hour24SecytxThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24SecytxThreshold.EntityData.ParentYangName = "hour24secytx-thresholds"
    hour24SecytxThreshold.EntityData.SegmentPath = "hour24secytx-threshold" + "[secytx-threshold='" + fmt.Sprintf("%v", hour24SecytxThreshold.SecytxThreshold) + "']"
    hour24SecytxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecytxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecytxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecytxThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24SecytxThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24SecytxThreshold.EntityData.Leafs["secytx-threshold"] = types.YLeaf{"SecytxThreshold", hour24SecytxThreshold.SecytxThreshold}
    hour24SecytxThreshold.EntityData.Leafs["secytx-threshold-value"] = types.YLeaf{"SecytxThresholdValue", hour24SecytxThreshold.SecytxThresholdValue}
    return &(hour24SecytxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports
// set secytx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport.
    Hour24SecytxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport
}

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetEntityData() *types.CommonEntityData {
    hour24SecytxReports.EntityData.YFilter = hour24SecytxReports.YFilter
    hour24SecytxReports.EntityData.YangName = "hour24secytx-reports"
    hour24SecytxReports.EntityData.BundleName = "cisco_ios_xr"
    hour24SecytxReports.EntityData.ParentYangName = "hour24secytx"
    hour24SecytxReports.EntityData.SegmentPath = "hour24secytx-reports"
    hour24SecytxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecytxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecytxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecytxReports.EntityData.Children = make(map[string]types.YChild)
    hour24SecytxReports.EntityData.Children["hour24secytx-report"] = types.YChild{"Hour24SecytxReport", nil}
    for i := range hour24SecytxReports.Hour24SecytxReport {
        hour24SecytxReports.EntityData.Children[types.GetSegmentPath(&hour24SecytxReports.Hour24SecytxReport[i])] = types.YChild{"Hour24SecytxReport", &hour24SecytxReports.Hour24SecytxReport[i]}
    }
    hour24SecytxReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24SecytxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Report type. The type is SecytxReport.
    SecytxReport interface{}

    // Secytx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetEntityData() *types.CommonEntityData {
    hour24SecytxReport.EntityData.YFilter = hour24SecytxReport.YFilter
    hour24SecytxReport.EntityData.YangName = "hour24secytx-report"
    hour24SecytxReport.EntityData.BundleName = "cisco_ios_xr"
    hour24SecytxReport.EntityData.ParentYangName = "hour24secytx-reports"
    hour24SecytxReport.EntityData.SegmentPath = "hour24secytx-report" + "[secytx-report='" + fmt.Sprintf("%v", hour24SecytxReport.SecytxReport) + "']"
    hour24SecytxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24SecytxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24SecytxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24SecytxReport.EntityData.Children = make(map[string]types.YChild)
    hour24SecytxReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24SecytxReport.EntityData.Leafs["secytx-report"] = types.YLeaf{"SecytxReport", hour24SecytxReport.SecytxReport}
    hour24SecytxReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", hour24SecytxReport.Enable}
    return &(hour24SecytxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15
// set HO_VC threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ho_vc performance monitoring.
    HoVcMinute15HoVc InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc
}

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetEntityData() *types.CommonEntityData {
    hoVcMinute15.EntityData.YFilter = hoVcMinute15.YFilter
    hoVcMinute15.EntityData.YangName = "ho-vc-minute15"
    hoVcMinute15.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15.EntityData.ParentYangName = "performance-management"
    hoVcMinute15.EntityData.SegmentPath = "ho-vc-minute15"
    hoVcMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15.EntityData.Children = make(map[string]types.YChild)
    hoVcMinute15.EntityData.Children["ho-vc-minute15ho-vc"] = types.YChild{"HoVcMinute15HoVc", &hoVcMinute15.HoVcMinute15HoVc}
    hoVcMinute15.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hoVcMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc
// Configure ho_vc performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ho_vc TCA reporting status.
    HoVcMinute15HoVcReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports

    // Configure threshold on ho_vc parameters.
    HoVcMinute15HoVcThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds
}

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetEntityData() *types.CommonEntityData {
    hoVcMinute15HoVc.EntityData.YFilter = hoVcMinute15HoVc.YFilter
    hoVcMinute15HoVc.EntityData.YangName = "ho-vc-minute15ho-vc"
    hoVcMinute15HoVc.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15HoVc.EntityData.ParentYangName = "ho-vc-minute15"
    hoVcMinute15HoVc.EntityData.SegmentPath = "ho-vc-minute15ho-vc"
    hoVcMinute15HoVc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15HoVc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15HoVc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15HoVc.EntityData.Children = make(map[string]types.YChild)
    hoVcMinute15HoVc.EntityData.Children["ho-vc-minute15ho-vc-reports"] = types.YChild{"HoVcMinute15HoVcReports", &hoVcMinute15HoVc.HoVcMinute15HoVcReports}
    hoVcMinute15HoVc.EntityData.Children["ho-vc-minute15ho-vc-thresholds"] = types.YChild{"HoVcMinute15HoVcThresholds", &hoVcMinute15HoVc.HoVcMinute15HoVcThresholds}
    hoVcMinute15HoVc.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hoVcMinute15HoVc.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports
// set ho_vc TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport.
    HoVcMinute15HoVcReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport
}

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetEntityData() *types.CommonEntityData {
    hoVcMinute15HoVcReports.EntityData.YFilter = hoVcMinute15HoVcReports.YFilter
    hoVcMinute15HoVcReports.EntityData.YangName = "ho-vc-minute15ho-vc-reports"
    hoVcMinute15HoVcReports.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15HoVcReports.EntityData.ParentYangName = "ho-vc-minute15ho-vc"
    hoVcMinute15HoVcReports.EntityData.SegmentPath = "ho-vc-minute15ho-vc-reports"
    hoVcMinute15HoVcReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15HoVcReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15HoVcReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15HoVcReports.EntityData.Children = make(map[string]types.YChild)
    hoVcMinute15HoVcReports.EntityData.Children["ho-vc-minute15ho-vc-report"] = types.YChild{"HoVcMinute15HoVcReport", nil}
    for i := range hoVcMinute15HoVcReports.HoVcMinute15HoVcReport {
        hoVcMinute15HoVcReports.EntityData.Children[types.GetSegmentPath(&hoVcMinute15HoVcReports.HoVcMinute15HoVcReport[i])] = types.YChild{"HoVcMinute15HoVcReport", &hoVcMinute15HoVcReports.HoVcMinute15HoVcReport[i]}
    }
    hoVcMinute15HoVcReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hoVcMinute15HoVcReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ho_vc Report Type. The type is HoVcReport.
    HoVcReport interface{}

    // ho_vc Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetEntityData() *types.CommonEntityData {
    hoVcMinute15HoVcReport.EntityData.YFilter = hoVcMinute15HoVcReport.YFilter
    hoVcMinute15HoVcReport.EntityData.YangName = "ho-vc-minute15ho-vc-report"
    hoVcMinute15HoVcReport.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15HoVcReport.EntityData.ParentYangName = "ho-vc-minute15ho-vc-reports"
    hoVcMinute15HoVcReport.EntityData.SegmentPath = "ho-vc-minute15ho-vc-report" + "[ho-vc-report='" + fmt.Sprintf("%v", hoVcMinute15HoVcReport.HoVcReport) + "']"
    hoVcMinute15HoVcReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15HoVcReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15HoVcReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15HoVcReport.EntityData.Children = make(map[string]types.YChild)
    hoVcMinute15HoVcReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hoVcMinute15HoVcReport.EntityData.Leafs["ho-vc-report"] = types.YLeaf{"HoVcReport", hoVcMinute15HoVcReport.HoVcReport}
    hoVcMinute15HoVcReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", hoVcMinute15HoVcReport.Enable}
    return &(hoVcMinute15HoVcReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds
// Configure threshold on ho_vc parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold.
    HoVcMinute15HoVcThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold
}

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetEntityData() *types.CommonEntityData {
    hoVcMinute15HoVcThresholds.EntityData.YFilter = hoVcMinute15HoVcThresholds.YFilter
    hoVcMinute15HoVcThresholds.EntityData.YangName = "ho-vc-minute15ho-vc-thresholds"
    hoVcMinute15HoVcThresholds.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15HoVcThresholds.EntityData.ParentYangName = "ho-vc-minute15ho-vc"
    hoVcMinute15HoVcThresholds.EntityData.SegmentPath = "ho-vc-minute15ho-vc-thresholds"
    hoVcMinute15HoVcThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15HoVcThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15HoVcThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15HoVcThresholds.EntityData.Children = make(map[string]types.YChild)
    hoVcMinute15HoVcThresholds.EntityData.Children["ho-vc-minute15ho-vc-threshold"] = types.YChild{"HoVcMinute15HoVcThreshold", nil}
    for i := range hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold {
        hoVcMinute15HoVcThresholds.EntityData.Children[types.GetSegmentPath(&hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold[i])] = types.YChild{"HoVcMinute15HoVcThreshold", &hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold[i]}
    }
    hoVcMinute15HoVcThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hoVcMinute15HoVcThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ho_vc Threshold Type. The type is HoVcThreshold.
    HoVcThreshold interface{}

    // ho_vc Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    HoVcThresholdValue interface{}
}

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetEntityData() *types.CommonEntityData {
    hoVcMinute15HoVcThreshold.EntityData.YFilter = hoVcMinute15HoVcThreshold.YFilter
    hoVcMinute15HoVcThreshold.EntityData.YangName = "ho-vc-minute15ho-vc-threshold"
    hoVcMinute15HoVcThreshold.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15HoVcThreshold.EntityData.ParentYangName = "ho-vc-minute15ho-vc-thresholds"
    hoVcMinute15HoVcThreshold.EntityData.SegmentPath = "ho-vc-minute15ho-vc-threshold" + "[ho-vc-threshold='" + fmt.Sprintf("%v", hoVcMinute15HoVcThreshold.HoVcThreshold) + "']"
    hoVcMinute15HoVcThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15HoVcThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15HoVcThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15HoVcThreshold.EntityData.Children = make(map[string]types.YChild)
    hoVcMinute15HoVcThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hoVcMinute15HoVcThreshold.EntityData.Leafs["ho-vc-threshold"] = types.YLeaf{"HoVcThreshold", hoVcMinute15HoVcThreshold.HoVcThreshold}
    hoVcMinute15HoVcThreshold.EntityData.Leafs["ho-vc-threshold-value"] = types.YLeaf{"HoVcThresholdValue", hoVcMinute15HoVcThreshold.HoVcThresholdValue}
    return &(hoVcMinute15HoVcThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24
// set STS threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    StsHour24Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path
}

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetEntityData() *types.CommonEntityData {
    stsHour24.EntityData.YFilter = stsHour24.YFilter
    stsHour24.EntityData.YangName = "sts-hour24"
    stsHour24.EntityData.BundleName = "cisco_ios_xr"
    stsHour24.EntityData.ParentYangName = "performance-management"
    stsHour24.EntityData.SegmentPath = "sts-hour24"
    stsHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24.EntityData.Children = make(map[string]types.YChild)
    stsHour24.EntityData.Children["sts-hour24-path"] = types.YChild{"StsHour24Path", &stsHour24.StsHour24Path}
    stsHour24.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stsHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on Path parameters.
    StsHour24PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds

    // set Path TCA reporting status.
    StsHour24PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports
}

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetEntityData() *types.CommonEntityData {
    stsHour24Path.EntityData.YFilter = stsHour24Path.YFilter
    stsHour24Path.EntityData.YangName = "sts-hour24-path"
    stsHour24Path.EntityData.BundleName = "cisco_ios_xr"
    stsHour24Path.EntityData.ParentYangName = "sts-hour24"
    stsHour24Path.EntityData.SegmentPath = "sts-hour24-path"
    stsHour24Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24Path.EntityData.Children = make(map[string]types.YChild)
    stsHour24Path.EntityData.Children["sts-hour24-path-thresholds"] = types.YChild{"StsHour24PathThresholds", &stsHour24Path.StsHour24PathThresholds}
    stsHour24Path.EntityData.Children["sts-hour24-path-reports"] = types.YChild{"StsHour24PathReports", &stsHour24Path.StsHour24PathReports}
    stsHour24Path.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stsHour24Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold.
    StsHour24PathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold
}

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetEntityData() *types.CommonEntityData {
    stsHour24PathThresholds.EntityData.YFilter = stsHour24PathThresholds.YFilter
    stsHour24PathThresholds.EntityData.YangName = "sts-hour24-path-thresholds"
    stsHour24PathThresholds.EntityData.BundleName = "cisco_ios_xr"
    stsHour24PathThresholds.EntityData.ParentYangName = "sts-hour24-path"
    stsHour24PathThresholds.EntityData.SegmentPath = "sts-hour24-path-thresholds"
    stsHour24PathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24PathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24PathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24PathThresholds.EntityData.Children = make(map[string]types.YChild)
    stsHour24PathThresholds.EntityData.Children["sts-hour24-path-threshold"] = types.YChild{"StsHour24PathThreshold", nil}
    for i := range stsHour24PathThresholds.StsHour24PathThreshold {
        stsHour24PathThresholds.EntityData.Children[types.GetSegmentPath(&stsHour24PathThresholds.StsHour24PathThreshold[i])] = types.YChild{"StsHour24PathThreshold", &stsHour24PathThresholds.StsHour24PathThreshold[i]}
    }
    stsHour24PathThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stsHour24PathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Path Threshold Type. The type is StsThreshold.
    PathThreshold interface{}

    // Path Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    PathThresholdValue interface{}
}

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetEntityData() *types.CommonEntityData {
    stsHour24PathThreshold.EntityData.YFilter = stsHour24PathThreshold.YFilter
    stsHour24PathThreshold.EntityData.YangName = "sts-hour24-path-threshold"
    stsHour24PathThreshold.EntityData.BundleName = "cisco_ios_xr"
    stsHour24PathThreshold.EntityData.ParentYangName = "sts-hour24-path-thresholds"
    stsHour24PathThreshold.EntityData.SegmentPath = "sts-hour24-path-threshold" + "[path-threshold='" + fmt.Sprintf("%v", stsHour24PathThreshold.PathThreshold) + "']"
    stsHour24PathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24PathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24PathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24PathThreshold.EntityData.Children = make(map[string]types.YChild)
    stsHour24PathThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    stsHour24PathThreshold.EntityData.Leafs["path-threshold"] = types.YLeaf{"PathThreshold", stsHour24PathThreshold.PathThreshold}
    stsHour24PathThreshold.EntityData.Leafs["path-threshold-value"] = types.YLeaf{"PathThresholdValue", stsHour24PathThreshold.PathThresholdValue}
    return &(stsHour24PathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport.
    StsHour24PathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport
}

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetEntityData() *types.CommonEntityData {
    stsHour24PathReports.EntityData.YFilter = stsHour24PathReports.YFilter
    stsHour24PathReports.EntityData.YangName = "sts-hour24-path-reports"
    stsHour24PathReports.EntityData.BundleName = "cisco_ios_xr"
    stsHour24PathReports.EntityData.ParentYangName = "sts-hour24-path"
    stsHour24PathReports.EntityData.SegmentPath = "sts-hour24-path-reports"
    stsHour24PathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24PathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24PathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24PathReports.EntityData.Children = make(map[string]types.YChild)
    stsHour24PathReports.EntityData.Children["sts-hour24-path-report"] = types.YChild{"StsHour24PathReport", nil}
    for i := range stsHour24PathReports.StsHour24PathReport {
        stsHour24PathReports.EntityData.Children[types.GetSegmentPath(&stsHour24PathReports.StsHour24PathReport[i])] = types.YChild{"StsHour24PathReport", &stsHour24PathReports.StsHour24PathReport[i]}
    }
    stsHour24PathReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stsHour24PathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Path Report Type. The type is StsReport.
    PathReport interface{}

    // Path Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetEntityData() *types.CommonEntityData {
    stsHour24PathReport.EntityData.YFilter = stsHour24PathReport.YFilter
    stsHour24PathReport.EntityData.YangName = "sts-hour24-path-report"
    stsHour24PathReport.EntityData.BundleName = "cisco_ios_xr"
    stsHour24PathReport.EntityData.ParentYangName = "sts-hour24-path-reports"
    stsHour24PathReport.EntityData.SegmentPath = "sts-hour24-path-report" + "[path-report='" + fmt.Sprintf("%v", stsHour24PathReport.PathReport) + "']"
    stsHour24PathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24PathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24PathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24PathReport.EntityData.Children = make(map[string]types.YChild)
    stsHour24PathReport.EntityData.Leafs = make(map[string]types.YLeaf)
    stsHour24PathReport.EntityData.Leafs["path-report"] = types.YLeaf{"PathReport", stsHour24PathReport.PathReport}
    stsHour24PathReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", stsHour24PathReport.Enable}
    return &(stsHour24PathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15
// set STM threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure stm performance monitoring.
    StmMinute15Stm InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm
}

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetEntityData() *types.CommonEntityData {
    stmMinute15.EntityData.YFilter = stmMinute15.YFilter
    stmMinute15.EntityData.YangName = "stm-minute15"
    stmMinute15.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15.EntityData.ParentYangName = "performance-management"
    stmMinute15.EntityData.SegmentPath = "stm-minute15"
    stmMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15.EntityData.Children = make(map[string]types.YChild)
    stmMinute15.EntityData.Children["stm-minute15-stm"] = types.YChild{"StmMinute15Stm", &stmMinute15.StmMinute15Stm}
    stmMinute15.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stmMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm
// Configure stm performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set stm TCA reporting status.
    StmMinute15StmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports

    // Configure threshold on stm parameters.
    StmMinute15StmThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds
}

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetEntityData() *types.CommonEntityData {
    stmMinute15Stm.EntityData.YFilter = stmMinute15Stm.YFilter
    stmMinute15Stm.EntityData.YangName = "stm-minute15-stm"
    stmMinute15Stm.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15Stm.EntityData.ParentYangName = "stm-minute15"
    stmMinute15Stm.EntityData.SegmentPath = "stm-minute15-stm"
    stmMinute15Stm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15Stm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15Stm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15Stm.EntityData.Children = make(map[string]types.YChild)
    stmMinute15Stm.EntityData.Children["stm-minute15-stm-reports"] = types.YChild{"StmMinute15StmReports", &stmMinute15Stm.StmMinute15StmReports}
    stmMinute15Stm.EntityData.Children["stm-minute15-stm-thresholds"] = types.YChild{"StmMinute15StmThresholds", &stmMinute15Stm.StmMinute15StmThresholds}
    stmMinute15Stm.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stmMinute15Stm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports
// set stm TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport.
    StmMinute15StmReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport
}

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetEntityData() *types.CommonEntityData {
    stmMinute15StmReports.EntityData.YFilter = stmMinute15StmReports.YFilter
    stmMinute15StmReports.EntityData.YangName = "stm-minute15-stm-reports"
    stmMinute15StmReports.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15StmReports.EntityData.ParentYangName = "stm-minute15-stm"
    stmMinute15StmReports.EntityData.SegmentPath = "stm-minute15-stm-reports"
    stmMinute15StmReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15StmReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15StmReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15StmReports.EntityData.Children = make(map[string]types.YChild)
    stmMinute15StmReports.EntityData.Children["stm-minute15-stm-report"] = types.YChild{"StmMinute15StmReport", nil}
    for i := range stmMinute15StmReports.StmMinute15StmReport {
        stmMinute15StmReports.EntityData.Children[types.GetSegmentPath(&stmMinute15StmReports.StmMinute15StmReport[i])] = types.YChild{"StmMinute15StmReport", &stmMinute15StmReports.StmMinute15StmReport[i]}
    }
    stmMinute15StmReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stmMinute15StmReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Stm Report Type. The type is StmReport.
    StmReport interface{}

    // Stm Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetEntityData() *types.CommonEntityData {
    stmMinute15StmReport.EntityData.YFilter = stmMinute15StmReport.YFilter
    stmMinute15StmReport.EntityData.YangName = "stm-minute15-stm-report"
    stmMinute15StmReport.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15StmReport.EntityData.ParentYangName = "stm-minute15-stm-reports"
    stmMinute15StmReport.EntityData.SegmentPath = "stm-minute15-stm-report" + "[stm-report='" + fmt.Sprintf("%v", stmMinute15StmReport.StmReport) + "']"
    stmMinute15StmReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15StmReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15StmReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15StmReport.EntityData.Children = make(map[string]types.YChild)
    stmMinute15StmReport.EntityData.Leafs = make(map[string]types.YLeaf)
    stmMinute15StmReport.EntityData.Leafs["stm-report"] = types.YLeaf{"StmReport", stmMinute15StmReport.StmReport}
    stmMinute15StmReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", stmMinute15StmReport.Enable}
    return &(stmMinute15StmReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds
// Configure threshold on stm parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold.
    StmMinute15StmThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold
}

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetEntityData() *types.CommonEntityData {
    stmMinute15StmThresholds.EntityData.YFilter = stmMinute15StmThresholds.YFilter
    stmMinute15StmThresholds.EntityData.YangName = "stm-minute15-stm-thresholds"
    stmMinute15StmThresholds.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15StmThresholds.EntityData.ParentYangName = "stm-minute15-stm"
    stmMinute15StmThresholds.EntityData.SegmentPath = "stm-minute15-stm-thresholds"
    stmMinute15StmThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15StmThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15StmThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15StmThresholds.EntityData.Children = make(map[string]types.YChild)
    stmMinute15StmThresholds.EntityData.Children["stm-minute15-stm-threshold"] = types.YChild{"StmMinute15StmThreshold", nil}
    for i := range stmMinute15StmThresholds.StmMinute15StmThreshold {
        stmMinute15StmThresholds.EntityData.Children[types.GetSegmentPath(&stmMinute15StmThresholds.StmMinute15StmThreshold[i])] = types.YChild{"StmMinute15StmThreshold", &stmMinute15StmThresholds.StmMinute15StmThreshold[i]}
    }
    stmMinute15StmThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stmMinute15StmThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Stm Threshold Type. The type is StmThreshold.
    StmThreshold interface{}

    // Stm Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    StmThresholdValue interface{}
}

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetEntityData() *types.CommonEntityData {
    stmMinute15StmThreshold.EntityData.YFilter = stmMinute15StmThreshold.YFilter
    stmMinute15StmThreshold.EntityData.YangName = "stm-minute15-stm-threshold"
    stmMinute15StmThreshold.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15StmThreshold.EntityData.ParentYangName = "stm-minute15-stm-thresholds"
    stmMinute15StmThreshold.EntityData.SegmentPath = "stm-minute15-stm-threshold" + "[stm-threshold='" + fmt.Sprintf("%v", stmMinute15StmThreshold.StmThreshold) + "']"
    stmMinute15StmThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15StmThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15StmThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15StmThreshold.EntityData.Children = make(map[string]types.YChild)
    stmMinute15StmThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    stmMinute15StmThreshold.EntityData.Leafs["stm-threshold"] = types.YLeaf{"StmThreshold", stmMinute15StmThreshold.StmThreshold}
    stmMinute15StmThreshold.EntityData.Leafs["stm-threshold-value"] = types.YLeaf{"StmThresholdValue", stmMinute15StmThreshold.StmThresholdValue}
    return &(stmMinute15StmThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24
// set Sonet threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    SonetHour24Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path

    // Configure ocn performance monitoring.
    SonetHour24Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn
}

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetEntityData() *types.CommonEntityData {
    sonetHour24.EntityData.YFilter = sonetHour24.YFilter
    sonetHour24.EntityData.YangName = "sonet-hour24"
    sonetHour24.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24.EntityData.ParentYangName = "performance-management"
    sonetHour24.EntityData.SegmentPath = "sonet-hour24"
    sonetHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24.EntityData.Children = make(map[string]types.YChild)
    sonetHour24.EntityData.Children["sonet-hour24-path"] = types.YChild{"SonetHour24Path", &sonetHour24.SonetHour24Path}
    sonetHour24.EntityData.Children["sonet-hour24-ocn"] = types.YChild{"SonetHour24Ocn", &sonetHour24.SonetHour24Ocn}
    sonetHour24.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on Path parameters.
    SonetHour24PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds

    // set Path TCA reporting status.
    SonetHour24PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports
}

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetEntityData() *types.CommonEntityData {
    sonetHour24Path.EntityData.YFilter = sonetHour24Path.YFilter
    sonetHour24Path.EntityData.YangName = "sonet-hour24-path"
    sonetHour24Path.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24Path.EntityData.ParentYangName = "sonet-hour24"
    sonetHour24Path.EntityData.SegmentPath = "sonet-hour24-path"
    sonetHour24Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24Path.EntityData.Children = make(map[string]types.YChild)
    sonetHour24Path.EntityData.Children["sonet-hour24-path-thresholds"] = types.YChild{"SonetHour24PathThresholds", &sonetHour24Path.SonetHour24PathThresholds}
    sonetHour24Path.EntityData.Children["sonet-hour24-path-reports"] = types.YChild{"SonetHour24PathReports", &sonetHour24Path.SonetHour24PathReports}
    sonetHour24Path.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetHour24Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold.
    SonetHour24PathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold
}

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetEntityData() *types.CommonEntityData {
    sonetHour24PathThresholds.EntityData.YFilter = sonetHour24PathThresholds.YFilter
    sonetHour24PathThresholds.EntityData.YangName = "sonet-hour24-path-thresholds"
    sonetHour24PathThresholds.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24PathThresholds.EntityData.ParentYangName = "sonet-hour24-path"
    sonetHour24PathThresholds.EntityData.SegmentPath = "sonet-hour24-path-thresholds"
    sonetHour24PathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24PathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24PathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24PathThresholds.EntityData.Children = make(map[string]types.YChild)
    sonetHour24PathThresholds.EntityData.Children["sonet-hour24-path-threshold"] = types.YChild{"SonetHour24PathThreshold", nil}
    for i := range sonetHour24PathThresholds.SonetHour24PathThreshold {
        sonetHour24PathThresholds.EntityData.Children[types.GetSegmentPath(&sonetHour24PathThresholds.SonetHour24PathThreshold[i])] = types.YChild{"SonetHour24PathThreshold", &sonetHour24PathThresholds.SonetHour24PathThreshold[i]}
    }
    sonetHour24PathThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetHour24PathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Path Threshold Type. The type is PathThreshold.
    PathThreshold interface{}

    // Path Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    PathThresholdValue interface{}
}

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetEntityData() *types.CommonEntityData {
    sonetHour24PathThreshold.EntityData.YFilter = sonetHour24PathThreshold.YFilter
    sonetHour24PathThreshold.EntityData.YangName = "sonet-hour24-path-threshold"
    sonetHour24PathThreshold.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24PathThreshold.EntityData.ParentYangName = "sonet-hour24-path-thresholds"
    sonetHour24PathThreshold.EntityData.SegmentPath = "sonet-hour24-path-threshold" + "[path-threshold='" + fmt.Sprintf("%v", sonetHour24PathThreshold.PathThreshold) + "']"
    sonetHour24PathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24PathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24PathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24PathThreshold.EntityData.Children = make(map[string]types.YChild)
    sonetHour24PathThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    sonetHour24PathThreshold.EntityData.Leafs["path-threshold"] = types.YLeaf{"PathThreshold", sonetHour24PathThreshold.PathThreshold}
    sonetHour24PathThreshold.EntityData.Leafs["path-threshold-value"] = types.YLeaf{"PathThresholdValue", sonetHour24PathThreshold.PathThresholdValue}
    return &(sonetHour24PathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport.
    SonetHour24PathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport
}

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetEntityData() *types.CommonEntityData {
    sonetHour24PathReports.EntityData.YFilter = sonetHour24PathReports.YFilter
    sonetHour24PathReports.EntityData.YangName = "sonet-hour24-path-reports"
    sonetHour24PathReports.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24PathReports.EntityData.ParentYangName = "sonet-hour24-path"
    sonetHour24PathReports.EntityData.SegmentPath = "sonet-hour24-path-reports"
    sonetHour24PathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24PathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24PathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24PathReports.EntityData.Children = make(map[string]types.YChild)
    sonetHour24PathReports.EntityData.Children["sonet-hour24-path-report"] = types.YChild{"SonetHour24PathReport", nil}
    for i := range sonetHour24PathReports.SonetHour24PathReport {
        sonetHour24PathReports.EntityData.Children[types.GetSegmentPath(&sonetHour24PathReports.SonetHour24PathReport[i])] = types.YChild{"SonetHour24PathReport", &sonetHour24PathReports.SonetHour24PathReport[i]}
    }
    sonetHour24PathReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetHour24PathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Path Report Type. The type is PathReport.
    PathReport interface{}
}

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetEntityData() *types.CommonEntityData {
    sonetHour24PathReport.EntityData.YFilter = sonetHour24PathReport.YFilter
    sonetHour24PathReport.EntityData.YangName = "sonet-hour24-path-report"
    sonetHour24PathReport.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24PathReport.EntityData.ParentYangName = "sonet-hour24-path-reports"
    sonetHour24PathReport.EntityData.SegmentPath = "sonet-hour24-path-report" + "[path-report='" + fmt.Sprintf("%v", sonetHour24PathReport.PathReport) + "']"
    sonetHour24PathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24PathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24PathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24PathReport.EntityData.Children = make(map[string]types.YChild)
    sonetHour24PathReport.EntityData.Leafs = make(map[string]types.YLeaf)
    sonetHour24PathReport.EntityData.Leafs["path-report"] = types.YLeaf{"PathReport", sonetHour24PathReport.PathReport}
    return &(sonetHour24PathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on ocn parameters.
    SonetHour24OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds

    // set ocn TCA reporting status.
    SonetHour24OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports
}

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetEntityData() *types.CommonEntityData {
    sonetHour24Ocn.EntityData.YFilter = sonetHour24Ocn.YFilter
    sonetHour24Ocn.EntityData.YangName = "sonet-hour24-ocn"
    sonetHour24Ocn.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24Ocn.EntityData.ParentYangName = "sonet-hour24"
    sonetHour24Ocn.EntityData.SegmentPath = "sonet-hour24-ocn"
    sonetHour24Ocn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24Ocn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24Ocn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24Ocn.EntityData.Children = make(map[string]types.YChild)
    sonetHour24Ocn.EntityData.Children["sonet-hour24-ocn-thresholds"] = types.YChild{"SonetHour24OcnThresholds", &sonetHour24Ocn.SonetHour24OcnThresholds}
    sonetHour24Ocn.EntityData.Children["sonet-hour24-ocn-reports"] = types.YChild{"SonetHour24OcnReports", &sonetHour24Ocn.SonetHour24OcnReports}
    sonetHour24Ocn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetHour24Ocn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold.
    SonetHour24OcnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold
}

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetEntityData() *types.CommonEntityData {
    sonetHour24OcnThresholds.EntityData.YFilter = sonetHour24OcnThresholds.YFilter
    sonetHour24OcnThresholds.EntityData.YangName = "sonet-hour24-ocn-thresholds"
    sonetHour24OcnThresholds.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24OcnThresholds.EntityData.ParentYangName = "sonet-hour24-ocn"
    sonetHour24OcnThresholds.EntityData.SegmentPath = "sonet-hour24-ocn-thresholds"
    sonetHour24OcnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24OcnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24OcnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24OcnThresholds.EntityData.Children = make(map[string]types.YChild)
    sonetHour24OcnThresholds.EntityData.Children["sonet-hour24-ocn-threshold"] = types.YChild{"SonetHour24OcnThreshold", nil}
    for i := range sonetHour24OcnThresholds.SonetHour24OcnThreshold {
        sonetHour24OcnThresholds.EntityData.Children[types.GetSegmentPath(&sonetHour24OcnThresholds.SonetHour24OcnThreshold[i])] = types.YChild{"SonetHour24OcnThreshold", &sonetHour24OcnThresholds.SonetHour24OcnThreshold[i]}
    }
    sonetHour24OcnThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetHour24OcnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetEntityData() *types.CommonEntityData {
    sonetHour24OcnThreshold.EntityData.YFilter = sonetHour24OcnThreshold.YFilter
    sonetHour24OcnThreshold.EntityData.YangName = "sonet-hour24-ocn-threshold"
    sonetHour24OcnThreshold.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24OcnThreshold.EntityData.ParentYangName = "sonet-hour24-ocn-thresholds"
    sonetHour24OcnThreshold.EntityData.SegmentPath = "sonet-hour24-ocn-threshold" + "[ocn-threshold='" + fmt.Sprintf("%v", sonetHour24OcnThreshold.OcnThreshold) + "']"
    sonetHour24OcnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24OcnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24OcnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24OcnThreshold.EntityData.Children = make(map[string]types.YChild)
    sonetHour24OcnThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    sonetHour24OcnThreshold.EntityData.Leafs["ocn-threshold"] = types.YLeaf{"OcnThreshold", sonetHour24OcnThreshold.OcnThreshold}
    sonetHour24OcnThreshold.EntityData.Leafs["ocn-threshold-value"] = types.YLeaf{"OcnThresholdValue", sonetHour24OcnThreshold.OcnThresholdValue}
    return &(sonetHour24OcnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport.
    SonetHour24OcnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport
}

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetEntityData() *types.CommonEntityData {
    sonetHour24OcnReports.EntityData.YFilter = sonetHour24OcnReports.YFilter
    sonetHour24OcnReports.EntityData.YangName = "sonet-hour24-ocn-reports"
    sonetHour24OcnReports.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24OcnReports.EntityData.ParentYangName = "sonet-hour24-ocn"
    sonetHour24OcnReports.EntityData.SegmentPath = "sonet-hour24-ocn-reports"
    sonetHour24OcnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24OcnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24OcnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24OcnReports.EntityData.Children = make(map[string]types.YChild)
    sonetHour24OcnReports.EntityData.Children["sonet-hour24-ocn-report"] = types.YChild{"SonetHour24OcnReport", nil}
    for i := range sonetHour24OcnReports.SonetHour24OcnReport {
        sonetHour24OcnReports.EntityData.Children[types.GetSegmentPath(&sonetHour24OcnReports.SonetHour24OcnReport[i])] = types.YChild{"SonetHour24OcnReport", &sonetHour24OcnReports.SonetHour24OcnReport[i]}
    }
    sonetHour24OcnReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sonetHour24OcnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}
}

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetEntityData() *types.CommonEntityData {
    sonetHour24OcnReport.EntityData.YFilter = sonetHour24OcnReport.YFilter
    sonetHour24OcnReport.EntityData.YangName = "sonet-hour24-ocn-report"
    sonetHour24OcnReport.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24OcnReport.EntityData.ParentYangName = "sonet-hour24-ocn-reports"
    sonetHour24OcnReport.EntityData.SegmentPath = "sonet-hour24-ocn-report" + "[ocn-report='" + fmt.Sprintf("%v", sonetHour24OcnReport.OcnReport) + "']"
    sonetHour24OcnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24OcnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24OcnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24OcnReport.EntityData.Children = make(map[string]types.YChild)
    sonetHour24OcnReport.EntityData.Leafs = make(map[string]types.YLeaf)
    sonetHour24OcnReport.EntityData.Leafs["ocn-report"] = types.YLeaf{"OcnReport", sonetHour24OcnReport.OcnReport}
    return &(sonetHour24OcnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 performance monitoring.
    Minute15OtnPath InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath
}

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetEntityData() *types.CommonEntityData {
    minute15Path.EntityData.YFilter = minute15Path.YFilter
    minute15Path.EntityData.YangName = "minute15-path"
    minute15Path.EntityData.BundleName = "cisco_ios_xr"
    minute15Path.EntityData.ParentYangName = "performance-management"
    minute15Path.EntityData.SegmentPath = "minute15-path"
    minute15Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Path.EntityData.Children = make(map[string]types.YChild)
    minute15Path.EntityData.Children["minute15otn-path"] = types.YChild{"Minute15OtnPath", &minute15Path.Minute15OtnPath}
    minute15Path.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set otn TCA reporting status.
    Minute15OtnPathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports

    // Configure threshold on otn parameters.
    Min15OtnPathThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes
}

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetEntityData() *types.CommonEntityData {
    minute15OtnPath.EntityData.YFilter = minute15OtnPath.YFilter
    minute15OtnPath.EntityData.YangName = "minute15otn-path"
    minute15OtnPath.EntityData.BundleName = "cisco_ios_xr"
    minute15OtnPath.EntityData.ParentYangName = "minute15-path"
    minute15OtnPath.EntityData.SegmentPath = "minute15otn-path"
    minute15OtnPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OtnPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OtnPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OtnPath.EntityData.Children = make(map[string]types.YChild)
    minute15OtnPath.EntityData.Children["minute15otn-path-reports"] = types.YChild{"Minute15OtnPathReports", &minute15OtnPath.Minute15OtnPathReports}
    minute15OtnPath.EntityData.Children["min15-otn-path-threshes"] = types.YChild{"Min15OtnPathThreshes", &minute15OtnPath.Min15OtnPathThreshes}
    minute15OtnPath.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15OtnPath.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport.
    Minute15OtnPathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport
}

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetEntityData() *types.CommonEntityData {
    minute15OtnPathReports.EntityData.YFilter = minute15OtnPathReports.YFilter
    minute15OtnPathReports.EntityData.YangName = "minute15otn-path-reports"
    minute15OtnPathReports.EntityData.BundleName = "cisco_ios_xr"
    minute15OtnPathReports.EntityData.ParentYangName = "minute15otn-path"
    minute15OtnPathReports.EntityData.SegmentPath = "minute15otn-path-reports"
    minute15OtnPathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OtnPathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OtnPathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OtnPathReports.EntityData.Children = make(map[string]types.YChild)
    minute15OtnPathReports.EntityData.Children["minute15otn-path-report"] = types.YChild{"Minute15OtnPathReport", nil}
    for i := range minute15OtnPathReports.Minute15OtnPathReport {
        minute15OtnPathReports.EntityData.Children[types.GetSegmentPath(&minute15OtnPathReports.Minute15OtnPathReport[i])] = types.YChild{"Minute15OtnPathReport", &minute15OtnPathReports.Minute15OtnPathReport[i]}
    }
    minute15OtnPathReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15OtnPathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetEntityData() *types.CommonEntityData {
    minute15OtnPathReport.EntityData.YFilter = minute15OtnPathReport.YFilter
    minute15OtnPathReport.EntityData.YangName = "minute15otn-path-report"
    minute15OtnPathReport.EntityData.BundleName = "cisco_ios_xr"
    minute15OtnPathReport.EntityData.ParentYangName = "minute15otn-path-reports"
    minute15OtnPathReport.EntityData.SegmentPath = "minute15otn-path-report" + "[otn-report='" + fmt.Sprintf("%v", minute15OtnPathReport.OtnReport) + "']"
    minute15OtnPathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OtnPathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OtnPathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OtnPathReport.EntityData.Children = make(map[string]types.YChild)
    minute15OtnPathReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15OtnPathReport.EntityData.Leafs["otn-report"] = types.YLeaf{"OtnReport", minute15OtnPathReport.OtnReport}
    minute15OtnPathReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", minute15OtnPathReport.Enable}
    return &(minute15OtnPathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh.
    Min15OtnPathThresh []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh
}

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetEntityData() *types.CommonEntityData {
    min15OtnPathThreshes.EntityData.YFilter = min15OtnPathThreshes.YFilter
    min15OtnPathThreshes.EntityData.YangName = "min15-otn-path-threshes"
    min15OtnPathThreshes.EntityData.BundleName = "cisco_ios_xr"
    min15OtnPathThreshes.EntityData.ParentYangName = "minute15otn-path"
    min15OtnPathThreshes.EntityData.SegmentPath = "min15-otn-path-threshes"
    min15OtnPathThreshes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnPathThreshes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnPathThreshes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnPathThreshes.EntityData.Children = make(map[string]types.YChild)
    min15OtnPathThreshes.EntityData.Children["min15-otn-path-thresh"] = types.YChild{"Min15OtnPathThresh", nil}
    for i := range min15OtnPathThreshes.Min15OtnPathThresh {
        min15OtnPathThreshes.EntityData.Children[types.GetSegmentPath(&min15OtnPathThreshes.Min15OtnPathThresh[i])] = types.YChild{"Min15OtnPathThresh", &min15OtnPathThreshes.Min15OtnPathThresh[i]}
    }
    min15OtnPathThreshes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(min15OtnPathThreshes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetEntityData() *types.CommonEntityData {
    min15OtnPathThresh.EntityData.YFilter = min15OtnPathThresh.YFilter
    min15OtnPathThresh.EntityData.YangName = "min15-otn-path-thresh"
    min15OtnPathThresh.EntityData.BundleName = "cisco_ios_xr"
    min15OtnPathThresh.EntityData.ParentYangName = "min15-otn-path-threshes"
    min15OtnPathThresh.EntityData.SegmentPath = "min15-otn-path-thresh" + "[otn-threshold='" + fmt.Sprintf("%v", min15OtnPathThresh.OtnThreshold) + "']"
    min15OtnPathThresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnPathThresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnPathThresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnPathThresh.EntityData.Children = make(map[string]types.YChild)
    min15OtnPathThresh.EntityData.Leafs = make(map[string]types.YLeaf)
    min15OtnPathThresh.EntityData.Leafs["otn-threshold"] = types.YLeaf{"OtnThreshold", min15OtnPathThresh.OtnThreshold}
    min15OtnPathThresh.EntityData.Leafs["otn-threshold-value"] = types.YLeaf{"OtnThresholdValue", min15OtnPathThresh.OtnThresholdValue}
    return &(min15OtnPathThresh.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15
// set OC threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ocn performance monitoring.
    OcMinute15Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn
}

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetEntityData() *types.CommonEntityData {
    ocMinute15.EntityData.YFilter = ocMinute15.YFilter
    ocMinute15.EntityData.YangName = "oc-minute15"
    ocMinute15.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15.EntityData.ParentYangName = "performance-management"
    ocMinute15.EntityData.SegmentPath = "oc-minute15"
    ocMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15.EntityData.Children = make(map[string]types.YChild)
    ocMinute15.EntityData.Children["oc-minute15-ocn"] = types.YChild{"OcMinute15Ocn", &ocMinute15.OcMinute15Ocn}
    ocMinute15.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ocMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ocn TCA reporting status.
    OcMinute15OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports

    // Configure threshold on ocn parameters.
    OcMinute15OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds
}

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetEntityData() *types.CommonEntityData {
    ocMinute15Ocn.EntityData.YFilter = ocMinute15Ocn.YFilter
    ocMinute15Ocn.EntityData.YangName = "oc-minute15-ocn"
    ocMinute15Ocn.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15Ocn.EntityData.ParentYangName = "oc-minute15"
    ocMinute15Ocn.EntityData.SegmentPath = "oc-minute15-ocn"
    ocMinute15Ocn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15Ocn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15Ocn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15Ocn.EntityData.Children = make(map[string]types.YChild)
    ocMinute15Ocn.EntityData.Children["oc-minute15-ocn-reports"] = types.YChild{"OcMinute15OcnReports", &ocMinute15Ocn.OcMinute15OcnReports}
    ocMinute15Ocn.EntityData.Children["oc-minute15-ocn-thresholds"] = types.YChild{"OcMinute15OcnThresholds", &ocMinute15Ocn.OcMinute15OcnThresholds}
    ocMinute15Ocn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ocMinute15Ocn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport.
    OcMinute15OcnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport
}

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetEntityData() *types.CommonEntityData {
    ocMinute15OcnReports.EntityData.YFilter = ocMinute15OcnReports.YFilter
    ocMinute15OcnReports.EntityData.YangName = "oc-minute15-ocn-reports"
    ocMinute15OcnReports.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15OcnReports.EntityData.ParentYangName = "oc-minute15-ocn"
    ocMinute15OcnReports.EntityData.SegmentPath = "oc-minute15-ocn-reports"
    ocMinute15OcnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15OcnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15OcnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15OcnReports.EntityData.Children = make(map[string]types.YChild)
    ocMinute15OcnReports.EntityData.Children["oc-minute15-ocn-report"] = types.YChild{"OcMinute15OcnReport", nil}
    for i := range ocMinute15OcnReports.OcMinute15OcnReport {
        ocMinute15OcnReports.EntityData.Children[types.GetSegmentPath(&ocMinute15OcnReports.OcMinute15OcnReport[i])] = types.YChild{"OcMinute15OcnReport", &ocMinute15OcnReports.OcMinute15OcnReport[i]}
    }
    ocMinute15OcnReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ocMinute15OcnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}

    // Ocn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetEntityData() *types.CommonEntityData {
    ocMinute15OcnReport.EntityData.YFilter = ocMinute15OcnReport.YFilter
    ocMinute15OcnReport.EntityData.YangName = "oc-minute15-ocn-report"
    ocMinute15OcnReport.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15OcnReport.EntityData.ParentYangName = "oc-minute15-ocn-reports"
    ocMinute15OcnReport.EntityData.SegmentPath = "oc-minute15-ocn-report" + "[ocn-report='" + fmt.Sprintf("%v", ocMinute15OcnReport.OcnReport) + "']"
    ocMinute15OcnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15OcnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15OcnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15OcnReport.EntityData.Children = make(map[string]types.YChild)
    ocMinute15OcnReport.EntityData.Leafs = make(map[string]types.YLeaf)
    ocMinute15OcnReport.EntityData.Leafs["ocn-report"] = types.YLeaf{"OcnReport", ocMinute15OcnReport.OcnReport}
    ocMinute15OcnReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ocMinute15OcnReport.Enable}
    return &(ocMinute15OcnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold.
    OcMinute15OcnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold
}

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetEntityData() *types.CommonEntityData {
    ocMinute15OcnThresholds.EntityData.YFilter = ocMinute15OcnThresholds.YFilter
    ocMinute15OcnThresholds.EntityData.YangName = "oc-minute15-ocn-thresholds"
    ocMinute15OcnThresholds.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15OcnThresholds.EntityData.ParentYangName = "oc-minute15-ocn"
    ocMinute15OcnThresholds.EntityData.SegmentPath = "oc-minute15-ocn-thresholds"
    ocMinute15OcnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15OcnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15OcnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15OcnThresholds.EntityData.Children = make(map[string]types.YChild)
    ocMinute15OcnThresholds.EntityData.Children["oc-minute15-ocn-threshold"] = types.YChild{"OcMinute15OcnThreshold", nil}
    for i := range ocMinute15OcnThresholds.OcMinute15OcnThreshold {
        ocMinute15OcnThresholds.EntityData.Children[types.GetSegmentPath(&ocMinute15OcnThresholds.OcMinute15OcnThreshold[i])] = types.YChild{"OcMinute15OcnThreshold", &ocMinute15OcnThresholds.OcMinute15OcnThreshold[i]}
    }
    ocMinute15OcnThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ocMinute15OcnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetEntityData() *types.CommonEntityData {
    ocMinute15OcnThreshold.EntityData.YFilter = ocMinute15OcnThreshold.YFilter
    ocMinute15OcnThreshold.EntityData.YangName = "oc-minute15-ocn-threshold"
    ocMinute15OcnThreshold.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15OcnThreshold.EntityData.ParentYangName = "oc-minute15-ocn-thresholds"
    ocMinute15OcnThreshold.EntityData.SegmentPath = "oc-minute15-ocn-threshold" + "[ocn-threshold='" + fmt.Sprintf("%v", ocMinute15OcnThreshold.OcnThreshold) + "']"
    ocMinute15OcnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15OcnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15OcnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15OcnThreshold.EntityData.Children = make(map[string]types.YChild)
    ocMinute15OcnThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    ocMinute15OcnThreshold.EntityData.Leafs["ocn-threshold"] = types.YLeaf{"OcnThreshold", ocMinute15OcnThreshold.OcnThreshold}
    ocMinute15OcnThreshold.EntityData.Leafs["ocn-threshold-value"] = types.YLeaf{"OcnThresholdValue", ocMinute15OcnThreshold.OcnThresholdValue}
    return &(ocMinute15OcnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30
// Configure ethernet performance monitoring for
// 30 sec
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ether performance monitoring.
    Second30Ether InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether
}

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetEntityData() *types.CommonEntityData {
    ethernetSecond30.EntityData.YFilter = ethernetSecond30.YFilter
    ethernetSecond30.EntityData.YangName = "ethernet-second30"
    ethernetSecond30.EntityData.BundleName = "cisco_ios_xr"
    ethernetSecond30.EntityData.ParentYangName = "performance-management"
    ethernetSecond30.EntityData.SegmentPath = "ethernet-second30"
    ethernetSecond30.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetSecond30.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetSecond30.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetSecond30.EntityData.Children = make(map[string]types.YChild)
    ethernetSecond30.EntityData.Children["second30-ether"] = types.YChild{"Second30Ether", &ethernetSecond30.Second30Ether}
    ethernetSecond30.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ethernetSecond30.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether
// Configure ether performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on ether parameters.
    Second30EtherThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds

    // set ether TCA reporting status.
    Second30EtherReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports
}

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetEntityData() *types.CommonEntityData {
    second30Ether.EntityData.YFilter = second30Ether.YFilter
    second30Ether.EntityData.YangName = "second30-ether"
    second30Ether.EntityData.BundleName = "cisco_ios_xr"
    second30Ether.EntityData.ParentYangName = "ethernet-second30"
    second30Ether.EntityData.SegmentPath = "second30-ether"
    second30Ether.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30Ether.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30Ether.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30Ether.EntityData.Children = make(map[string]types.YChild)
    second30Ether.EntityData.Children["second30-ether-thresholds"] = types.YChild{"Second30EtherThresholds", &second30Ether.Second30EtherThresholds}
    second30Ether.EntityData.Children["second30-ether-reports"] = types.YChild{"Second30EtherReports", &second30Ether.Second30EtherReports}
    second30Ether.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30Ether.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds
// Configure threshold on ether parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold.
    Second30EtherThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold
}

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetEntityData() *types.CommonEntityData {
    second30EtherThresholds.EntityData.YFilter = second30EtherThresholds.YFilter
    second30EtherThresholds.EntityData.YangName = "second30-ether-thresholds"
    second30EtherThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30EtherThresholds.EntityData.ParentYangName = "second30-ether"
    second30EtherThresholds.EntityData.SegmentPath = "second30-ether-thresholds"
    second30EtherThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30EtherThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30EtherThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30EtherThresholds.EntityData.Children = make(map[string]types.YChild)
    second30EtherThresholds.EntityData.Children["second30-ether-threshold"] = types.YChild{"Second30EtherThreshold", nil}
    for i := range second30EtherThresholds.Second30EtherThreshold {
        second30EtherThresholds.EntityData.Children[types.GetSegmentPath(&second30EtherThresholds.Second30EtherThreshold[i])] = types.YChild{"Second30EtherThreshold", &second30EtherThresholds.Second30EtherThreshold[i]}
    }
    second30EtherThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30EtherThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Threshold Type. The type is EtherThreshold.
    EtherThreshold interface{}

    // Ether Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    EtherThresholdValue interface{}
}

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetEntityData() *types.CommonEntityData {
    second30EtherThreshold.EntityData.YFilter = second30EtherThreshold.YFilter
    second30EtherThreshold.EntityData.YangName = "second30-ether-threshold"
    second30EtherThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30EtherThreshold.EntityData.ParentYangName = "second30-ether-thresholds"
    second30EtherThreshold.EntityData.SegmentPath = "second30-ether-threshold" + "[ether-threshold='" + fmt.Sprintf("%v", second30EtherThreshold.EtherThreshold) + "']"
    second30EtherThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30EtherThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30EtherThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30EtherThreshold.EntityData.Children = make(map[string]types.YChild)
    second30EtherThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    second30EtherThreshold.EntityData.Leafs["ether-threshold"] = types.YLeaf{"EtherThreshold", second30EtherThreshold.EtherThreshold}
    second30EtherThreshold.EntityData.Leafs["ether-threshold-value"] = types.YLeaf{"EtherThresholdValue", second30EtherThreshold.EtherThresholdValue}
    return &(second30EtherThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports
// set ether TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport.
    Second30EtherReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport
}

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetEntityData() *types.CommonEntityData {
    second30EtherReports.EntityData.YFilter = second30EtherReports.YFilter
    second30EtherReports.EntityData.YangName = "second30-ether-reports"
    second30EtherReports.EntityData.BundleName = "cisco_ios_xr"
    second30EtherReports.EntityData.ParentYangName = "second30-ether"
    second30EtherReports.EntityData.SegmentPath = "second30-ether-reports"
    second30EtherReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30EtherReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30EtherReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30EtherReports.EntityData.Children = make(map[string]types.YChild)
    second30EtherReports.EntityData.Children["second30-ether-report"] = types.YChild{"Second30EtherReport", nil}
    for i := range second30EtherReports.Second30EtherReport {
        second30EtherReports.EntityData.Children[types.GetSegmentPath(&second30EtherReports.Second30EtherReport[i])] = types.YChild{"Second30EtherReport", &second30EtherReports.Second30EtherReport[i]}
    }
    second30EtherReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(second30EtherReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Report Type. The type is EtherReport.
    EtherReport interface{}
}

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetEntityData() *types.CommonEntityData {
    second30EtherReport.EntityData.YFilter = second30EtherReport.YFilter
    second30EtherReport.EntityData.YangName = "second30-ether-report"
    second30EtherReport.EntityData.BundleName = "cisco_ios_xr"
    second30EtherReport.EntityData.ParentYangName = "second30-ether-reports"
    second30EtherReport.EntityData.SegmentPath = "second30-ether-report" + "[ether-report='" + fmt.Sprintf("%v", second30EtherReport.EtherReport) + "']"
    second30EtherReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30EtherReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30EtherReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30EtherReport.EntityData.Children = make(map[string]types.YChild)
    second30EtherReport.EntityData.Leafs = make(map[string]types.YLeaf)
    second30EtherReport.EntityData.Leafs["ether-report"] = types.YLeaf{"EtherReport", second30EtherReport.EtherReport}
    return &(second30EtherReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path
// Configure pm parameters of pathmonitor 24 hour
// interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 performance monitoring.
    Hour24OtnPath InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath
}

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetEntityData() *types.CommonEntityData {
    hour24Path.EntityData.YFilter = hour24Path.YFilter
    hour24Path.EntityData.YangName = "hour24-path"
    hour24Path.EntityData.BundleName = "cisco_ios_xr"
    hour24Path.EntityData.ParentYangName = "performance-management"
    hour24Path.EntityData.SegmentPath = "hour24-path"
    hour24Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Path.EntityData.Children = make(map[string]types.YChild)
    hour24Path.EntityData.Children["hour24otn-path"] = types.YChild{"Hour24OtnPath", &hour24Path.Hour24OtnPath}
    hour24Path.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set otn TCA reporting status.
    Hour24OtnPathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports

    // Configure threshold on otn parameters.
    Hour24OtnPathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds
}

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetEntityData() *types.CommonEntityData {
    hour24OtnPath.EntityData.YFilter = hour24OtnPath.YFilter
    hour24OtnPath.EntityData.YangName = "hour24otn-path"
    hour24OtnPath.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnPath.EntityData.ParentYangName = "hour24-path"
    hour24OtnPath.EntityData.SegmentPath = "hour24otn-path"
    hour24OtnPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnPath.EntityData.Children = make(map[string]types.YChild)
    hour24OtnPath.EntityData.Children["hour24otn-path-reports"] = types.YChild{"Hour24OtnPathReports", &hour24OtnPath.Hour24OtnPathReports}
    hour24OtnPath.EntityData.Children["hour24otn-path-thresholds"] = types.YChild{"Hour24OtnPathThresholds", &hour24OtnPath.Hour24OtnPathThresholds}
    hour24OtnPath.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OtnPath.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport.
    Hour24OtnPathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport
}

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetEntityData() *types.CommonEntityData {
    hour24OtnPathReports.EntityData.YFilter = hour24OtnPathReports.YFilter
    hour24OtnPathReports.EntityData.YangName = "hour24otn-path-reports"
    hour24OtnPathReports.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnPathReports.EntityData.ParentYangName = "hour24otn-path"
    hour24OtnPathReports.EntityData.SegmentPath = "hour24otn-path-reports"
    hour24OtnPathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnPathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnPathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnPathReports.EntityData.Children = make(map[string]types.YChild)
    hour24OtnPathReports.EntityData.Children["hour24otn-path-report"] = types.YChild{"Hour24OtnPathReport", nil}
    for i := range hour24OtnPathReports.Hour24OtnPathReport {
        hour24OtnPathReports.EntityData.Children[types.GetSegmentPath(&hour24OtnPathReports.Hour24OtnPathReport[i])] = types.YChild{"Hour24OtnPathReport", &hour24OtnPathReports.Hour24OtnPathReport[i]}
    }
    hour24OtnPathReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OtnPathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetEntityData() *types.CommonEntityData {
    hour24OtnPathReport.EntityData.YFilter = hour24OtnPathReport.YFilter
    hour24OtnPathReport.EntityData.YangName = "hour24otn-path-report"
    hour24OtnPathReport.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnPathReport.EntityData.ParentYangName = "hour24otn-path-reports"
    hour24OtnPathReport.EntityData.SegmentPath = "hour24otn-path-report" + "[otn-report='" + fmt.Sprintf("%v", hour24OtnPathReport.OtnReport) + "']"
    hour24OtnPathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnPathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnPathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnPathReport.EntityData.Children = make(map[string]types.YChild)
    hour24OtnPathReport.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24OtnPathReport.EntityData.Leafs["otn-report"] = types.YLeaf{"OtnReport", hour24OtnPathReport.OtnReport}
    hour24OtnPathReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", hour24OtnPathReport.Enable}
    return &(hour24OtnPathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold.
    Hour24OtnPathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold
}

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetEntityData() *types.CommonEntityData {
    hour24OtnPathThresholds.EntityData.YFilter = hour24OtnPathThresholds.YFilter
    hour24OtnPathThresholds.EntityData.YangName = "hour24otn-path-thresholds"
    hour24OtnPathThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnPathThresholds.EntityData.ParentYangName = "hour24otn-path"
    hour24OtnPathThresholds.EntityData.SegmentPath = "hour24otn-path-thresholds"
    hour24OtnPathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnPathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnPathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnPathThresholds.EntityData.Children = make(map[string]types.YChild)
    hour24OtnPathThresholds.EntityData.Children["hour24otn-path-threshold"] = types.YChild{"Hour24OtnPathThreshold", nil}
    for i := range hour24OtnPathThresholds.Hour24OtnPathThreshold {
        hour24OtnPathThresholds.EntityData.Children[types.GetSegmentPath(&hour24OtnPathThresholds.Hour24OtnPathThreshold[i])] = types.YChild{"Hour24OtnPathThreshold", &hour24OtnPathThresholds.Hour24OtnPathThreshold[i]}
    }
    hour24OtnPathThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hour24OtnPathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetEntityData() *types.CommonEntityData {
    hour24OtnPathThreshold.EntityData.YFilter = hour24OtnPathThreshold.YFilter
    hour24OtnPathThreshold.EntityData.YangName = "hour24otn-path-threshold"
    hour24OtnPathThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24OtnPathThreshold.EntityData.ParentYangName = "hour24otn-path-thresholds"
    hour24OtnPathThreshold.EntityData.SegmentPath = "hour24otn-path-threshold" + "[otn-threshold='" + fmt.Sprintf("%v", hour24OtnPathThreshold.OtnThreshold) + "']"
    hour24OtnPathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OtnPathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OtnPathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OtnPathThreshold.EntityData.Children = make(map[string]types.YChild)
    hour24OtnPathThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    hour24OtnPathThreshold.EntityData.Leafs["otn-threshold"] = types.YLeaf{"OtnThreshold", hour24OtnPathThreshold.OtnThreshold}
    hour24OtnPathThreshold.EntityData.Leafs["otn-threshold-value"] = types.YLeaf{"OtnThresholdValue", hour24OtnPathThreshold.OtnThresholdValue}
    return &(hour24OtnPathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure optics performance monitoring.
    Minute15Optics InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics

    // Configure secy-if performance monitoring.
    Minute15Secyif InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif

    // Configure secy-rx performance monitoring.
    Minute15Secyrx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx

    // Configure fec g709 performance monitoring.
    Minute15Fec InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec

    // Configure secy-tx performance monitoring.
    Minute15Secytx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx

    // configure otn g709 performance monitoring.
    Minute15Otn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn
}

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetEntityData() *types.CommonEntityData {
    minute15.EntityData.YFilter = minute15.YFilter
    minute15.EntityData.YangName = "minute15"
    minute15.EntityData.BundleName = "cisco_ios_xr"
    minute15.EntityData.ParentYangName = "performance-management"
    minute15.EntityData.SegmentPath = "minute15"
    minute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15.EntityData.Children = make(map[string]types.YChild)
    minute15.EntityData.Children["minute15-optics"] = types.YChild{"Minute15Optics", &minute15.Minute15Optics}
    minute15.EntityData.Children["minute15secyif"] = types.YChild{"Minute15Secyif", &minute15.Minute15Secyif}
    minute15.EntityData.Children["minute15secyrx"] = types.YChild{"Minute15Secyrx", &minute15.Minute15Secyrx}
    minute15.EntityData.Children["minute15fec"] = types.YChild{"Minute15Fec", &minute15.Minute15Fec}
    minute15.EntityData.Children["minute15secytx"] = types.YChild{"Minute15Secytx", &minute15.Minute15Secytx}
    minute15.EntityData.Children["minute15otn"] = types.YChild{"Minute15Otn", &minute15.Minute15Otn}
    minute15.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics
// Configure optics performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on optics parameters.
    Minute15OpticsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds

    // set optics TCA reporting status.
    Minute15OpticsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports
}

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetEntityData() *types.CommonEntityData {
    minute15Optics.EntityData.YFilter = minute15Optics.YFilter
    minute15Optics.EntityData.YangName = "minute15-optics"
    minute15Optics.EntityData.BundleName = "cisco_ios_xr"
    minute15Optics.EntityData.ParentYangName = "minute15"
    minute15Optics.EntityData.SegmentPath = "minute15-optics"
    minute15Optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Optics.EntityData.Children = make(map[string]types.YChild)
    minute15Optics.EntityData.Children["minute15-optics-thresholds"] = types.YChild{"Minute15OpticsThresholds", &minute15Optics.Minute15OpticsThresholds}
    minute15Optics.EntityData.Children["minute15-optics-reports"] = types.YChild{"Minute15OpticsReports", &minute15Optics.Minute15OpticsReports}
    minute15Optics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Optics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds
// Configure threshold on optics parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold.
    Minute15OpticsThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold
}

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetEntityData() *types.CommonEntityData {
    minute15OpticsThresholds.EntityData.YFilter = minute15OpticsThresholds.YFilter
    minute15OpticsThresholds.EntityData.YangName = "minute15-optics-thresholds"
    minute15OpticsThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15OpticsThresholds.EntityData.ParentYangName = "minute15-optics"
    minute15OpticsThresholds.EntityData.SegmentPath = "minute15-optics-thresholds"
    minute15OpticsThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OpticsThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OpticsThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OpticsThresholds.EntityData.Children = make(map[string]types.YChild)
    minute15OpticsThresholds.EntityData.Children["minute15-optics-threshold"] = types.YChild{"Minute15OpticsThreshold", nil}
    for i := range minute15OpticsThresholds.Minute15OpticsThreshold {
        minute15OpticsThresholds.EntityData.Children[types.GetSegmentPath(&minute15OpticsThresholds.Minute15OpticsThreshold[i])] = types.YChild{"Minute15OpticsThreshold", &minute15OpticsThresholds.Minute15OpticsThreshold[i]}
    }
    minute15OpticsThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15OpticsThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Threshold Type. The type is
    // OpticsThreshold.
    OpticsThreshold interface{}

    // Optics Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647.
    OpticsThresholdValue interface{}

    // Used only for Opt and Opr,To Enter Threshold in dbm use 1. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    Dbm interface{}
}

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetEntityData() *types.CommonEntityData {
    minute15OpticsThreshold.EntityData.YFilter = minute15OpticsThreshold.YFilter
    minute15OpticsThreshold.EntityData.YangName = "minute15-optics-threshold"
    minute15OpticsThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15OpticsThreshold.EntityData.ParentYangName = "minute15-optics-thresholds"
    minute15OpticsThreshold.EntityData.SegmentPath = "minute15-optics-threshold" + "[optics-threshold='" + fmt.Sprintf("%v", minute15OpticsThreshold.OpticsThreshold) + "']"
    minute15OpticsThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OpticsThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OpticsThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OpticsThreshold.EntityData.Children = make(map[string]types.YChild)
    minute15OpticsThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15OpticsThreshold.EntityData.Leafs["optics-threshold"] = types.YLeaf{"OpticsThreshold", minute15OpticsThreshold.OpticsThreshold}
    minute15OpticsThreshold.EntityData.Leafs["optics-threshold-value"] = types.YLeaf{"OpticsThresholdValue", minute15OpticsThreshold.OpticsThresholdValue}
    minute15OpticsThreshold.EntityData.Leafs["dbm"] = types.YLeaf{"Dbm", minute15OpticsThreshold.Dbm}
    return &(minute15OpticsThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports
// set optics TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport.
    Minute15OpticsReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport
}

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetEntityData() *types.CommonEntityData {
    minute15OpticsReports.EntityData.YFilter = minute15OpticsReports.YFilter
    minute15OpticsReports.EntityData.YangName = "minute15-optics-reports"
    minute15OpticsReports.EntityData.BundleName = "cisco_ios_xr"
    minute15OpticsReports.EntityData.ParentYangName = "minute15-optics"
    minute15OpticsReports.EntityData.SegmentPath = "minute15-optics-reports"
    minute15OpticsReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OpticsReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OpticsReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OpticsReports.EntityData.Children = make(map[string]types.YChild)
    minute15OpticsReports.EntityData.Children["minute15-optics-report"] = types.YChild{"Minute15OpticsReport", nil}
    for i := range minute15OpticsReports.Minute15OpticsReport {
        minute15OpticsReports.EntityData.Children[types.GetSegmentPath(&minute15OpticsReports.Minute15OpticsReport[i])] = types.YChild{"Minute15OpticsReport", &minute15OpticsReports.Minute15OpticsReport[i]}
    }
    minute15OpticsReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15OpticsReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Report Type. The type is OpticsReport.
    OpticsReport interface{}
}

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetEntityData() *types.CommonEntityData {
    minute15OpticsReport.EntityData.YFilter = minute15OpticsReport.YFilter
    minute15OpticsReport.EntityData.YangName = "minute15-optics-report"
    minute15OpticsReport.EntityData.BundleName = "cisco_ios_xr"
    minute15OpticsReport.EntityData.ParentYangName = "minute15-optics-reports"
    minute15OpticsReport.EntityData.SegmentPath = "minute15-optics-report" + "[optics-report='" + fmt.Sprintf("%v", minute15OpticsReport.OpticsReport) + "']"
    minute15OpticsReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OpticsReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OpticsReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OpticsReport.EntityData.Children = make(map[string]types.YChild)
    minute15OpticsReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15OpticsReport.EntityData.Leafs["optics-report"] = types.YLeaf{"OpticsReport", minute15OpticsReport.OpticsReport}
    return &(minute15OpticsReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif
// Configure secy-if performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secyif TCA reporting status.
    Minute15SecyifReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports

    // Configure threshold on secyif parameters.
    Minute15SecyifThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds
}

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetEntityData() *types.CommonEntityData {
    minute15Secyif.EntityData.YFilter = minute15Secyif.YFilter
    minute15Secyif.EntityData.YangName = "minute15secyif"
    minute15Secyif.EntityData.BundleName = "cisco_ios_xr"
    minute15Secyif.EntityData.ParentYangName = "minute15"
    minute15Secyif.EntityData.SegmentPath = "minute15secyif"
    minute15Secyif.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Secyif.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Secyif.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Secyif.EntityData.Children = make(map[string]types.YChild)
    minute15Secyif.EntityData.Children["minute15secyif-reports"] = types.YChild{"Minute15SecyifReports", &minute15Secyif.Minute15SecyifReports}
    minute15Secyif.EntityData.Children["minute15secyif-thresholds"] = types.YChild{"Minute15SecyifThresholds", &minute15Secyif.Minute15SecyifThresholds}
    minute15Secyif.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Secyif.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports
// set secyif TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport.
    Minute15SecyifReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport
}

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetEntityData() *types.CommonEntityData {
    minute15SecyifReports.EntityData.YFilter = minute15SecyifReports.YFilter
    minute15SecyifReports.EntityData.YangName = "minute15secyif-reports"
    minute15SecyifReports.EntityData.BundleName = "cisco_ios_xr"
    minute15SecyifReports.EntityData.ParentYangName = "minute15secyif"
    minute15SecyifReports.EntityData.SegmentPath = "minute15secyif-reports"
    minute15SecyifReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecyifReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecyifReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecyifReports.EntityData.Children = make(map[string]types.YChild)
    minute15SecyifReports.EntityData.Children["minute15secyif-report"] = types.YChild{"Minute15SecyifReport", nil}
    for i := range minute15SecyifReports.Minute15SecyifReport {
        minute15SecyifReports.EntityData.Children[types.GetSegmentPath(&minute15SecyifReports.Minute15SecyifReport[i])] = types.YChild{"Minute15SecyifReport", &minute15SecyifReports.Minute15SecyifReport[i]}
    }
    minute15SecyifReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15SecyifReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Report Type. The type is SecyifReport.
    SecyifReport interface{}

    // Enabled Secyif Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetEntityData() *types.CommonEntityData {
    minute15SecyifReport.EntityData.YFilter = minute15SecyifReport.YFilter
    minute15SecyifReport.EntityData.YangName = "minute15secyif-report"
    minute15SecyifReport.EntityData.BundleName = "cisco_ios_xr"
    minute15SecyifReport.EntityData.ParentYangName = "minute15secyif-reports"
    minute15SecyifReport.EntityData.SegmentPath = "minute15secyif-report" + "[secyif-report='" + fmt.Sprintf("%v", minute15SecyifReport.SecyifReport) + "']"
    minute15SecyifReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecyifReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecyifReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecyifReport.EntityData.Children = make(map[string]types.YChild)
    minute15SecyifReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15SecyifReport.EntityData.Leafs["secyif-report"] = types.YLeaf{"SecyifReport", minute15SecyifReport.SecyifReport}
    minute15SecyifReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", minute15SecyifReport.Enable}
    return &(minute15SecyifReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds
// Configure threshold on secyif parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold.
    Minute15SecyifThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold
}

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetEntityData() *types.CommonEntityData {
    minute15SecyifThresholds.EntityData.YFilter = minute15SecyifThresholds.YFilter
    minute15SecyifThresholds.EntityData.YangName = "minute15secyif-thresholds"
    minute15SecyifThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15SecyifThresholds.EntityData.ParentYangName = "minute15secyif"
    minute15SecyifThresholds.EntityData.SegmentPath = "minute15secyif-thresholds"
    minute15SecyifThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecyifThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecyifThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecyifThresholds.EntityData.Children = make(map[string]types.YChild)
    minute15SecyifThresholds.EntityData.Children["minute15secyif-threshold"] = types.YChild{"Minute15SecyifThreshold", nil}
    for i := range minute15SecyifThresholds.Minute15SecyifThreshold {
        minute15SecyifThresholds.EntityData.Children[types.GetSegmentPath(&minute15SecyifThresholds.Minute15SecyifThreshold[i])] = types.YChild{"Minute15SecyifThreshold", &minute15SecyifThresholds.Minute15SecyifThreshold[i]}
    }
    minute15SecyifThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15SecyifThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Threshold Type. The type is
    // SecyifThreshold.
    SecyifThreshold interface{}

    // Secyif Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyifThresholdValue interface{}
}

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetEntityData() *types.CommonEntityData {
    minute15SecyifThreshold.EntityData.YFilter = minute15SecyifThreshold.YFilter
    minute15SecyifThreshold.EntityData.YangName = "minute15secyif-threshold"
    minute15SecyifThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15SecyifThreshold.EntityData.ParentYangName = "minute15secyif-thresholds"
    minute15SecyifThreshold.EntityData.SegmentPath = "minute15secyif-threshold" + "[secyif-threshold='" + fmt.Sprintf("%v", minute15SecyifThreshold.SecyifThreshold) + "']"
    minute15SecyifThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecyifThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecyifThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecyifThreshold.EntityData.Children = make(map[string]types.YChild)
    minute15SecyifThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15SecyifThreshold.EntityData.Leafs["secyif-threshold"] = types.YLeaf{"SecyifThreshold", minute15SecyifThreshold.SecyifThreshold}
    minute15SecyifThreshold.EntityData.Leafs["secyif-threshold-value"] = types.YLeaf{"SecyifThresholdValue", minute15SecyifThreshold.SecyifThresholdValue}
    return &(minute15SecyifThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx
// Configure secy-rx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secyrx TCA reporting status.
    Minute15SecyrxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports

    // Configure threshold on secyrx parameters.
    Minute15SecyrxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds
}

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetEntityData() *types.CommonEntityData {
    minute15Secyrx.EntityData.YFilter = minute15Secyrx.YFilter
    minute15Secyrx.EntityData.YangName = "minute15secyrx"
    minute15Secyrx.EntityData.BundleName = "cisco_ios_xr"
    minute15Secyrx.EntityData.ParentYangName = "minute15"
    minute15Secyrx.EntityData.SegmentPath = "minute15secyrx"
    minute15Secyrx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Secyrx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Secyrx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Secyrx.EntityData.Children = make(map[string]types.YChild)
    minute15Secyrx.EntityData.Children["minute15secyrx-reports"] = types.YChild{"Minute15SecyrxReports", &minute15Secyrx.Minute15SecyrxReports}
    minute15Secyrx.EntityData.Children["minute15secyrx-thresholds"] = types.YChild{"Minute15SecyrxThresholds", &minute15Secyrx.Minute15SecyrxThresholds}
    minute15Secyrx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Secyrx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports
// set secyrx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport.
    Minute15SecyrxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport
}

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetEntityData() *types.CommonEntityData {
    minute15SecyrxReports.EntityData.YFilter = minute15SecyrxReports.YFilter
    minute15SecyrxReports.EntityData.YangName = "minute15secyrx-reports"
    minute15SecyrxReports.EntityData.BundleName = "cisco_ios_xr"
    minute15SecyrxReports.EntityData.ParentYangName = "minute15secyrx"
    minute15SecyrxReports.EntityData.SegmentPath = "minute15secyrx-reports"
    minute15SecyrxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecyrxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecyrxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecyrxReports.EntityData.Children = make(map[string]types.YChild)
    minute15SecyrxReports.EntityData.Children["minute15secyrx-report"] = types.YChild{"Minute15SecyrxReport", nil}
    for i := range minute15SecyrxReports.Minute15SecyrxReport {
        minute15SecyrxReports.EntityData.Children[types.GetSegmentPath(&minute15SecyrxReports.Minute15SecyrxReport[i])] = types.YChild{"Minute15SecyrxReport", &minute15SecyrxReports.Minute15SecyrxReport[i]}
    }
    minute15SecyrxReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15SecyrxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Report Type. The type is SecyrxReport.
    SecyrxReport interface{}

    // Enabled Secyrx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetEntityData() *types.CommonEntityData {
    minute15SecyrxReport.EntityData.YFilter = minute15SecyrxReport.YFilter
    minute15SecyrxReport.EntityData.YangName = "minute15secyrx-report"
    minute15SecyrxReport.EntityData.BundleName = "cisco_ios_xr"
    minute15SecyrxReport.EntityData.ParentYangName = "minute15secyrx-reports"
    minute15SecyrxReport.EntityData.SegmentPath = "minute15secyrx-report" + "[secyrx-report='" + fmt.Sprintf("%v", minute15SecyrxReport.SecyrxReport) + "']"
    minute15SecyrxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecyrxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecyrxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecyrxReport.EntityData.Children = make(map[string]types.YChild)
    minute15SecyrxReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15SecyrxReport.EntityData.Leafs["secyrx-report"] = types.YLeaf{"SecyrxReport", minute15SecyrxReport.SecyrxReport}
    minute15SecyrxReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", minute15SecyrxReport.Enable}
    return &(minute15SecyrxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds
// Configure threshold on secyrx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold.
    Minute15SecyrxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold
}

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetEntityData() *types.CommonEntityData {
    minute15SecyrxThresholds.EntityData.YFilter = minute15SecyrxThresholds.YFilter
    minute15SecyrxThresholds.EntityData.YangName = "minute15secyrx-thresholds"
    minute15SecyrxThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15SecyrxThresholds.EntityData.ParentYangName = "minute15secyrx"
    minute15SecyrxThresholds.EntityData.SegmentPath = "minute15secyrx-thresholds"
    minute15SecyrxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecyrxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecyrxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecyrxThresholds.EntityData.Children = make(map[string]types.YChild)
    minute15SecyrxThresholds.EntityData.Children["minute15secyrx-threshold"] = types.YChild{"Minute15SecyrxThreshold", nil}
    for i := range minute15SecyrxThresholds.Minute15SecyrxThreshold {
        minute15SecyrxThresholds.EntityData.Children[types.GetSegmentPath(&minute15SecyrxThresholds.Minute15SecyrxThreshold[i])] = types.YChild{"Minute15SecyrxThreshold", &minute15SecyrxThresholds.Minute15SecyrxThreshold[i]}
    }
    minute15SecyrxThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15SecyrxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Threshold Type. The type is
    // SecyrxThreshold.
    SecyrxThreshold interface{}

    // Secyrx Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyrxThresholdValue interface{}
}

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetEntityData() *types.CommonEntityData {
    minute15SecyrxThreshold.EntityData.YFilter = minute15SecyrxThreshold.YFilter
    minute15SecyrxThreshold.EntityData.YangName = "minute15secyrx-threshold"
    minute15SecyrxThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15SecyrxThreshold.EntityData.ParentYangName = "minute15secyrx-thresholds"
    minute15SecyrxThreshold.EntityData.SegmentPath = "minute15secyrx-threshold" + "[secyrx-threshold='" + fmt.Sprintf("%v", minute15SecyrxThreshold.SecyrxThreshold) + "']"
    minute15SecyrxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecyrxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecyrxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecyrxThreshold.EntityData.Children = make(map[string]types.YChild)
    minute15SecyrxThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15SecyrxThreshold.EntityData.Leafs["secyrx-threshold"] = types.YLeaf{"SecyrxThreshold", minute15SecyrxThreshold.SecyrxThreshold}
    minute15SecyrxThreshold.EntityData.Leafs["secyrx-threshold-value"] = types.YLeaf{"SecyrxThresholdValue", minute15SecyrxThreshold.SecyrxThresholdValue}
    return &(minute15SecyrxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec
// Configure fec g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure fec threshold.
    Minute15FecThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds

    // set fec TCA reporting status.
    Minute15FecReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports
}

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetEntityData() *types.CommonEntityData {
    minute15Fec.EntityData.YFilter = minute15Fec.YFilter
    minute15Fec.EntityData.YangName = "minute15fec"
    minute15Fec.EntityData.BundleName = "cisco_ios_xr"
    minute15Fec.EntityData.ParentYangName = "minute15"
    minute15Fec.EntityData.SegmentPath = "minute15fec"
    minute15Fec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Fec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Fec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Fec.EntityData.Children = make(map[string]types.YChild)
    minute15Fec.EntityData.Children["minute15fec-thresholds"] = types.YChild{"Minute15FecThresholds", &minute15Fec.Minute15FecThresholds}
    minute15Fec.EntityData.Children["minute15fec-reports"] = types.YChild{"Minute15FecReports", &minute15Fec.Minute15FecReports}
    minute15Fec.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Fec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds
// Configure fec threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold.
    Minute15FecThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold
}

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetEntityData() *types.CommonEntityData {
    minute15FecThresholds.EntityData.YFilter = minute15FecThresholds.YFilter
    minute15FecThresholds.EntityData.YangName = "minute15fec-thresholds"
    minute15FecThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15FecThresholds.EntityData.ParentYangName = "minute15fec"
    minute15FecThresholds.EntityData.SegmentPath = "minute15fec-thresholds"
    minute15FecThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15FecThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15FecThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15FecThresholds.EntityData.Children = make(map[string]types.YChild)
    minute15FecThresholds.EntityData.Children["minute15fec-threshold"] = types.YChild{"Minute15FecThreshold", nil}
    for i := range minute15FecThresholds.Minute15FecThreshold {
        minute15FecThresholds.EntityData.Children[types.GetSegmentPath(&minute15FecThresholds.Minute15FecThreshold[i])] = types.YChild{"Minute15FecThreshold", &minute15FecThresholds.Minute15FecThreshold[i]}
    }
    minute15FecThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15FecThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Threshold Type. The type is FecThreshold.
    FecThreshold interface{}

    // Fec Threshold Value. The type is string with length: 1..20. This attribute
    // is mandatory.
    FecThresholdValue interface{}
}

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetEntityData() *types.CommonEntityData {
    minute15FecThreshold.EntityData.YFilter = minute15FecThreshold.YFilter
    minute15FecThreshold.EntityData.YangName = "minute15fec-threshold"
    minute15FecThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15FecThreshold.EntityData.ParentYangName = "minute15fec-thresholds"
    minute15FecThreshold.EntityData.SegmentPath = "minute15fec-threshold" + "[fec-threshold='" + fmt.Sprintf("%v", minute15FecThreshold.FecThreshold) + "']"
    minute15FecThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15FecThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15FecThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15FecThreshold.EntityData.Children = make(map[string]types.YChild)
    minute15FecThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15FecThreshold.EntityData.Leafs["fec-threshold"] = types.YLeaf{"FecThreshold", minute15FecThreshold.FecThreshold}
    minute15FecThreshold.EntityData.Leafs["fec-threshold-value"] = types.YLeaf{"FecThresholdValue", minute15FecThreshold.FecThresholdValue}
    return &(minute15FecThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports
// set fec TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport.
    Minute15FecReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport
}

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetEntityData() *types.CommonEntityData {
    minute15FecReports.EntityData.YFilter = minute15FecReports.YFilter
    minute15FecReports.EntityData.YangName = "minute15fec-reports"
    minute15FecReports.EntityData.BundleName = "cisco_ios_xr"
    minute15FecReports.EntityData.ParentYangName = "minute15fec"
    minute15FecReports.EntityData.SegmentPath = "minute15fec-reports"
    minute15FecReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15FecReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15FecReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15FecReports.EntityData.Children = make(map[string]types.YChild)
    minute15FecReports.EntityData.Children["minute15fec-report"] = types.YChild{"Minute15FecReport", nil}
    for i := range minute15FecReports.Minute15FecReport {
        minute15FecReports.EntityData.Children[types.GetSegmentPath(&minute15FecReports.Minute15FecReport[i])] = types.YChild{"Minute15FecReport", &minute15FecReports.Minute15FecReport[i]}
    }
    minute15FecReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15FecReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Report Type. The type is FecReport.
    FecReport interface{}

    // Fec Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetEntityData() *types.CommonEntityData {
    minute15FecReport.EntityData.YFilter = minute15FecReport.YFilter
    minute15FecReport.EntityData.YangName = "minute15fec-report"
    minute15FecReport.EntityData.BundleName = "cisco_ios_xr"
    minute15FecReport.EntityData.ParentYangName = "minute15fec-reports"
    minute15FecReport.EntityData.SegmentPath = "minute15fec-report" + "[fec-report='" + fmt.Sprintf("%v", minute15FecReport.FecReport) + "']"
    minute15FecReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15FecReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15FecReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15FecReport.EntityData.Children = make(map[string]types.YChild)
    minute15FecReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15FecReport.EntityData.Leafs["fec-report"] = types.YLeaf{"FecReport", minute15FecReport.FecReport}
    minute15FecReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", minute15FecReport.Enable}
    return &(minute15FecReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx
// Configure secy-tx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secytx TCA reporting status.
    Minute15SecytxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports

    // Configure threshold on secytx parameters.
    Minute15SecytxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds
}

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetEntityData() *types.CommonEntityData {
    minute15Secytx.EntityData.YFilter = minute15Secytx.YFilter
    minute15Secytx.EntityData.YangName = "minute15secytx"
    minute15Secytx.EntityData.BundleName = "cisco_ios_xr"
    minute15Secytx.EntityData.ParentYangName = "minute15"
    minute15Secytx.EntityData.SegmentPath = "minute15secytx"
    minute15Secytx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Secytx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Secytx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Secytx.EntityData.Children = make(map[string]types.YChild)
    minute15Secytx.EntityData.Children["minute15secytx-reports"] = types.YChild{"Minute15SecytxReports", &minute15Secytx.Minute15SecytxReports}
    minute15Secytx.EntityData.Children["minute15secytx-thresholds"] = types.YChild{"Minute15SecytxThresholds", &minute15Secytx.Minute15SecytxThresholds}
    minute15Secytx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Secytx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports
// set secytx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport.
    Minute15SecytxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport
}

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetEntityData() *types.CommonEntityData {
    minute15SecytxReports.EntityData.YFilter = minute15SecytxReports.YFilter
    minute15SecytxReports.EntityData.YangName = "minute15secytx-reports"
    minute15SecytxReports.EntityData.BundleName = "cisco_ios_xr"
    minute15SecytxReports.EntityData.ParentYangName = "minute15secytx"
    minute15SecytxReports.EntityData.SegmentPath = "minute15secytx-reports"
    minute15SecytxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecytxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecytxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecytxReports.EntityData.Children = make(map[string]types.YChild)
    minute15SecytxReports.EntityData.Children["minute15secytx-report"] = types.YChild{"Minute15SecytxReport", nil}
    for i := range minute15SecytxReports.Minute15SecytxReport {
        minute15SecytxReports.EntityData.Children[types.GetSegmentPath(&minute15SecytxReports.Minute15SecytxReport[i])] = types.YChild{"Minute15SecytxReport", &minute15SecytxReports.Minute15SecytxReport[i]}
    }
    minute15SecytxReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15SecytxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Report Type. The type is SecytxReport.
    SecytxReport interface{}

    // Enabled Secytx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetEntityData() *types.CommonEntityData {
    minute15SecytxReport.EntityData.YFilter = minute15SecytxReport.YFilter
    minute15SecytxReport.EntityData.YangName = "minute15secytx-report"
    minute15SecytxReport.EntityData.BundleName = "cisco_ios_xr"
    minute15SecytxReport.EntityData.ParentYangName = "minute15secytx-reports"
    minute15SecytxReport.EntityData.SegmentPath = "minute15secytx-report" + "[secytx-report='" + fmt.Sprintf("%v", minute15SecytxReport.SecytxReport) + "']"
    minute15SecytxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecytxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecytxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecytxReport.EntityData.Children = make(map[string]types.YChild)
    minute15SecytxReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15SecytxReport.EntityData.Leafs["secytx-report"] = types.YLeaf{"SecytxReport", minute15SecytxReport.SecytxReport}
    minute15SecytxReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", minute15SecytxReport.Enable}
    return &(minute15SecytxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds
// Configure threshold on secytx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold.
    Minute15SecytxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold
}

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetEntityData() *types.CommonEntityData {
    minute15SecytxThresholds.EntityData.YFilter = minute15SecytxThresholds.YFilter
    minute15SecytxThresholds.EntityData.YangName = "minute15secytx-thresholds"
    minute15SecytxThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15SecytxThresholds.EntityData.ParentYangName = "minute15secytx"
    minute15SecytxThresholds.EntityData.SegmentPath = "minute15secytx-thresholds"
    minute15SecytxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecytxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecytxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecytxThresholds.EntityData.Children = make(map[string]types.YChild)
    minute15SecytxThresholds.EntityData.Children["minute15secytx-threshold"] = types.YChild{"Minute15SecytxThreshold", nil}
    for i := range minute15SecytxThresholds.Minute15SecytxThreshold {
        minute15SecytxThresholds.EntityData.Children[types.GetSegmentPath(&minute15SecytxThresholds.Minute15SecytxThreshold[i])] = types.YChild{"Minute15SecytxThreshold", &minute15SecytxThresholds.Minute15SecytxThreshold[i]}
    }
    minute15SecytxThresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15SecytxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Threshold Type. The type is
    // SecytxThreshold.
    SecytxThreshold interface{}

    // Secytx Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecytxThresholdValue interface{}
}

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetEntityData() *types.CommonEntityData {
    minute15SecytxThreshold.EntityData.YFilter = minute15SecytxThreshold.YFilter
    minute15SecytxThreshold.EntityData.YangName = "minute15secytx-threshold"
    minute15SecytxThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15SecytxThreshold.EntityData.ParentYangName = "minute15secytx-thresholds"
    minute15SecytxThreshold.EntityData.SegmentPath = "minute15secytx-threshold" + "[secytx-threshold='" + fmt.Sprintf("%v", minute15SecytxThreshold.SecytxThreshold) + "']"
    minute15SecytxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15SecytxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15SecytxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15SecytxThreshold.EntityData.Children = make(map[string]types.YChild)
    minute15SecytxThreshold.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15SecytxThreshold.EntityData.Leafs["secytx-threshold"] = types.YLeaf{"SecytxThreshold", minute15SecytxThreshold.SecytxThreshold}
    minute15SecytxThreshold.EntityData.Leafs["secytx-threshold-value"] = types.YLeaf{"SecytxThresholdValue", minute15SecytxThreshold.SecytxThresholdValue}
    return &(minute15SecytxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on otn parameters.
    Min15OtnThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes

    // set otn TCA reporting status.
    Minute15OtnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports
}

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetEntityData() *types.CommonEntityData {
    minute15Otn.EntityData.YFilter = minute15Otn.YFilter
    minute15Otn.EntityData.YangName = "minute15otn"
    minute15Otn.EntityData.BundleName = "cisco_ios_xr"
    minute15Otn.EntityData.ParentYangName = "minute15"
    minute15Otn.EntityData.SegmentPath = "minute15otn"
    minute15Otn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Otn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Otn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Otn.EntityData.Children = make(map[string]types.YChild)
    minute15Otn.EntityData.Children["min15-otn-threshes"] = types.YChild{"Min15OtnThreshes", &minute15Otn.Min15OtnThreshes}
    minute15Otn.EntityData.Children["minute15otn-reports"] = types.YChild{"Minute15OtnReports", &minute15Otn.Minute15OtnReports}
    minute15Otn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15Otn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh.
    Min15OtnThresh []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh
}

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetEntityData() *types.CommonEntityData {
    min15OtnThreshes.EntityData.YFilter = min15OtnThreshes.YFilter
    min15OtnThreshes.EntityData.YangName = "min15-otn-threshes"
    min15OtnThreshes.EntityData.BundleName = "cisco_ios_xr"
    min15OtnThreshes.EntityData.ParentYangName = "minute15otn"
    min15OtnThreshes.EntityData.SegmentPath = "min15-otn-threshes"
    min15OtnThreshes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnThreshes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnThreshes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnThreshes.EntityData.Children = make(map[string]types.YChild)
    min15OtnThreshes.EntityData.Children["min15-otn-thresh"] = types.YChild{"Min15OtnThresh", nil}
    for i := range min15OtnThreshes.Min15OtnThresh {
        min15OtnThreshes.EntityData.Children[types.GetSegmentPath(&min15OtnThreshes.Min15OtnThresh[i])] = types.YChild{"Min15OtnThresh", &min15OtnThreshes.Min15OtnThresh[i]}
    }
    min15OtnThreshes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(min15OtnThreshes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetEntityData() *types.CommonEntityData {
    min15OtnThresh.EntityData.YFilter = min15OtnThresh.YFilter
    min15OtnThresh.EntityData.YangName = "min15-otn-thresh"
    min15OtnThresh.EntityData.BundleName = "cisco_ios_xr"
    min15OtnThresh.EntityData.ParentYangName = "min15-otn-threshes"
    min15OtnThresh.EntityData.SegmentPath = "min15-otn-thresh" + "[otn-threshold='" + fmt.Sprintf("%v", min15OtnThresh.OtnThreshold) + "']"
    min15OtnThresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnThresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnThresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnThresh.EntityData.Children = make(map[string]types.YChild)
    min15OtnThresh.EntityData.Leafs = make(map[string]types.YLeaf)
    min15OtnThresh.EntityData.Leafs["otn-threshold"] = types.YLeaf{"OtnThreshold", min15OtnThresh.OtnThreshold}
    min15OtnThresh.EntityData.Leafs["otn-threshold-value"] = types.YLeaf{"OtnThresholdValue", min15OtnThresh.OtnThresholdValue}
    return &(min15OtnThresh.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport.
    Minute15OtnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport
}

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetEntityData() *types.CommonEntityData {
    minute15OtnReports.EntityData.YFilter = minute15OtnReports.YFilter
    minute15OtnReports.EntityData.YangName = "minute15otn-reports"
    minute15OtnReports.EntityData.BundleName = "cisco_ios_xr"
    minute15OtnReports.EntityData.ParentYangName = "minute15otn"
    minute15OtnReports.EntityData.SegmentPath = "minute15otn-reports"
    minute15OtnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OtnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OtnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OtnReports.EntityData.Children = make(map[string]types.YChild)
    minute15OtnReports.EntityData.Children["minute15otn-report"] = types.YChild{"Minute15OtnReport", nil}
    for i := range minute15OtnReports.Minute15OtnReport {
        minute15OtnReports.EntityData.Children[types.GetSegmentPath(&minute15OtnReports.Minute15OtnReport[i])] = types.YChild{"Minute15OtnReport", &minute15OtnReports.Minute15OtnReport[i]}
    }
    minute15OtnReports.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minute15OtnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetEntityData() *types.CommonEntityData {
    minute15OtnReport.EntityData.YFilter = minute15OtnReport.YFilter
    minute15OtnReport.EntityData.YangName = "minute15otn-report"
    minute15OtnReport.EntityData.BundleName = "cisco_ios_xr"
    minute15OtnReport.EntityData.ParentYangName = "minute15otn-reports"
    minute15OtnReport.EntityData.SegmentPath = "minute15otn-report" + "[otn-report='" + fmt.Sprintf("%v", minute15OtnReport.OtnReport) + "']"
    minute15OtnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OtnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OtnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OtnReport.EntityData.Children = make(map[string]types.YChild)
    minute15OtnReport.EntityData.Leafs = make(map[string]types.YLeaf)
    minute15OtnReport.EntityData.Leafs["otn-report"] = types.YLeaf{"OtnReport", minute15OtnReport.OtnReport}
    minute15OtnReport.EntityData.Leafs["enable"] = types.YLeaf{"Enable", minute15OtnReport.Enable}
    return &(minute15OtnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaCfgPpp.YFilter
    ciscoIOSXRPppMaCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-cfg:ppp"
    ciscoIOSXRPppMaCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaCfgPpp.EntityData.Children = make(map[string]types.YChild)
    ciscoIOSXRPppMaCfgPpp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciscoIOSXRPppMaCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PPP FSM configuration data.
    Fsm InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm
}

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaFsmCfgPpp.YFilter
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp"
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaFsmCfgPpp.EntityData.Children = make(map[string]types.YChild)
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.Children["fsm"] = types.YChild{"Fsm", &ciscoIOSXRPppMaFsmCfgPpp.Fsm}
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciscoIOSXRPppMaFsmCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm
// PPP FSM configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies the maximum time to wait for a response during PPP
    // negotiation. The type is interface{} with range: 1..10. The default value
    // is 3.
    RetryTimeout interface{}

    // This specifies the maximum number of Term-Requests. The type is interface{}
    // with range: 2..10. The default value is 2.
    MaxUnacknowledgedTermRequests interface{}

    // This specifies the maximum number of consecutive Conf-Naks. The type is
    // interface{} with range: 2..10. The default value is 5.
    MaxConsecutiveConfNaks interface{}

    // This specifies the maximum number of unacknowledged Conf-Requests. The type
    // is interface{} with range: 4..20. The default value is 10.
    MaxUnacknowledgedConfRequests interface{}
}

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetEntityData() *types.CommonEntityData {
    fsm.EntityData.YFilter = fsm.YFilter
    fsm.EntityData.YangName = "fsm"
    fsm.EntityData.BundleName = "cisco_ios_xr"
    fsm.EntityData.ParentYangName = "ppp"
    fsm.EntityData.SegmentPath = "fsm"
    fsm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsm.EntityData.Children = make(map[string]types.YChild)
    fsm.EntityData.Leafs = make(map[string]types.YLeaf)
    fsm.EntityData.Leafs["retry-timeout"] = types.YLeaf{"RetryTimeout", fsm.RetryTimeout}
    fsm.EntityData.Leafs["max-unacknowledged-term-requests"] = types.YLeaf{"MaxUnacknowledgedTermRequests", fsm.MaxUnacknowledgedTermRequests}
    fsm.EntityData.Leafs["max-consecutive-conf-naks"] = types.YLeaf{"MaxConsecutiveConfNaks", fsm.MaxConsecutiveConfNaks}
    fsm.EntityData.Leafs["max-unacknowledged-conf-requests"] = types.YLeaf{"MaxUnacknowledgedConfRequests", fsm.MaxUnacknowledgedConfRequests}
    return &(fsm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PPP IPCP configuration data.
    Ipcp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp
}

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaIpcpCfgPpp.YFilter
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp"
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.Children = make(map[string]types.YChild)
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.Children["ipcp"] = types.YChild{"Ipcp", &ciscoIOSXRPppMaIpcpCfgPpp.Ipcp}
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciscoIOSXRPppMaIpcpCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp
// PPP IPCP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable Neighbor Route installation. The type is interface{}.
    NeighborRouteDisable interface{}

    // IPCP address parameters.
    PeerAddress InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress

    // IPCP DNS parameters.
    Dns InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns
}

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetEntityData() *types.CommonEntityData {
    ipcp.EntityData.YFilter = ipcp.YFilter
    ipcp.EntityData.YangName = "ipcp"
    ipcp.EntityData.BundleName = "cisco_ios_xr"
    ipcp.EntityData.ParentYangName = "ppp"
    ipcp.EntityData.SegmentPath = "ipcp"
    ipcp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipcp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipcp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipcp.EntityData.Children = make(map[string]types.YChild)
    ipcp.EntityData.Children["peer-address"] = types.YChild{"PeerAddress", &ipcp.PeerAddress}
    ipcp.EntityData.Children["dns"] = types.YChild{"Dns", &ipcp.Dns}
    ipcp.EntityData.Leafs = make(map[string]types.YLeaf)
    ipcp.EntityData.Leafs["neighbor-route-disable"] = types.YLeaf{"NeighborRouteDisable", ipcp.NeighborRouteDisable}
    return &(ipcp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress
// IPCP address parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify an IP address to assign to peers through IPCP. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Default_ interface{}
}

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetEntityData() *types.CommonEntityData {
    peerAddress.EntityData.YFilter = peerAddress.YFilter
    peerAddress.EntityData.YangName = "peer-address"
    peerAddress.EntityData.BundleName = "cisco_ios_xr"
    peerAddress.EntityData.ParentYangName = "ipcp"
    peerAddress.EntityData.SegmentPath = "peer-address"
    peerAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peerAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peerAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peerAddress.EntityData.Children = make(map[string]types.YChild)
    peerAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    peerAddress.EntityData.Leafs["default"] = types.YLeaf{"Default_", peerAddress.Default_}
    return &(peerAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns
// IPCP DNS parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify DNS address(es) to provide.
    DnsAddresses InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses
}

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetEntityData() *types.CommonEntityData {
    dns.EntityData.YFilter = dns.YFilter
    dns.EntityData.YangName = "dns"
    dns.EntityData.BundleName = "cisco_ios_xr"
    dns.EntityData.ParentYangName = "ipcp"
    dns.EntityData.SegmentPath = "dns"
    dns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dns.EntityData.Children = make(map[string]types.YChild)
    dns.EntityData.Children["dns-addresses"] = types.YChild{"DnsAddresses", &dns.DnsAddresses}
    dns.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(dns.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses
// Specify DNS address(es) to provide
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Primary DNS IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Primary interface{}

    // Secondary DNS IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Secondary interface{}
}

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetEntityData() *types.CommonEntityData {
    dnsAddresses.EntityData.YFilter = dnsAddresses.YFilter
    dnsAddresses.EntityData.YangName = "dns-addresses"
    dnsAddresses.EntityData.BundleName = "cisco_ios_xr"
    dnsAddresses.EntityData.ParentYangName = "dns"
    dnsAddresses.EntityData.SegmentPath = "dns-addresses"
    dnsAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dnsAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dnsAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dnsAddresses.EntityData.Children = make(map[string]types.YChild)
    dnsAddresses.EntityData.Leafs = make(map[string]types.YLeaf)
    dnsAddresses.EntityData.Leafs["primary"] = types.YLeaf{"Primary", dnsAddresses.Primary}
    dnsAddresses.EntityData.Leafs["secondary"] = types.YLeaf{"Secondary", dnsAddresses.Secondary}
    return &(dnsAddresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PPP IPCPIW configuration data.
    Ipcpiw InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw
}

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaIpcpiwCfgPpp.YFilter
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp"
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.Children = make(map[string]types.YChild)
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.Children["ipcpiw"] = types.YChild{"Ipcpiw", &ciscoIOSXRPppMaIpcpiwCfgPpp.Ipcpiw}
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw
// PPP IPCPIW configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify an IP address to publish to peers through IPCPIW. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ProxyAddress interface{}
}

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetEntityData() *types.CommonEntityData {
    ipcpiw.EntityData.YFilter = ipcpiw.YFilter
    ipcpiw.EntityData.YangName = "ipcpiw"
    ipcpiw.EntityData.BundleName = "cisco_ios_xr"
    ipcpiw.EntityData.ParentYangName = "ppp"
    ipcpiw.EntityData.SegmentPath = "ipcpiw"
    ipcpiw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipcpiw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipcpiw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipcpiw.EntityData.Children = make(map[string]types.YChild)
    ipcpiw.EntityData.Leafs = make(map[string]types.YLeaf)
    ipcpiw.EntityData.Leafs["proxy-address"] = types.YLeaf{"ProxyAddress", ipcpiw.ProxyAddress}
    return &(ipcpiw.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PPP Multiclass Multilink parameters.
    Mcmp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp

    // PPP LCP configuration data.
    Lcp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp
}

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaLcpCfgPpp.YFilter
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp"
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaLcpCfgPpp.EntityData.Children = make(map[string]types.YChild)
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.Children["mcmp"] = types.YChild{"Mcmp", &ciscoIOSXRPppMaLcpCfgPpp.Mcmp}
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.Children["lcp"] = types.YChild{"Lcp", &ciscoIOSXRPppMaLcpCfgPpp.Lcp}
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciscoIOSXRPppMaLcpCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp
// PPP Multiclass Multilink parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies that MCMP is enabled on this interface. The type is
    // interface{}.
    Enable interface{}

    // This specifies the MCMP options for the peer. The type is interface{} with
    // range: 1..16. The default value is 2.
    Remote interface{}

    // This specifies the MCMP options for the local host.
    Local InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local
}

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetEntityData() *types.CommonEntityData {
    mcmp.EntityData.YFilter = mcmp.YFilter
    mcmp.EntityData.YangName = "mcmp"
    mcmp.EntityData.BundleName = "cisco_ios_xr"
    mcmp.EntityData.ParentYangName = "ppp"
    mcmp.EntityData.SegmentPath = "mcmp"
    mcmp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mcmp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mcmp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mcmp.EntityData.Children = make(map[string]types.YChild)
    mcmp.EntityData.Children["local"] = types.YChild{"Local", &mcmp.Local}
    mcmp.EntityData.Leafs = make(map[string]types.YLeaf)
    mcmp.EntityData.Leafs["enable"] = types.YLeaf{"Enable", mcmp.Enable}
    mcmp.EntityData.Leafs["remote"] = types.YLeaf{"Remote", mcmp.Remote}
    return &(mcmp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local
// This specifies the MCMP options for the local
// host
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Initial #classes. The type is interface{} with range: 1..16. The
    // default value is 2.
    Initial interface{}

    // Local Maximum #classes. The type is interface{} with range: 1..16. The
    // default value is 4.
    Maximum interface{}
}

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "cisco_ios_xr"
    local.EntityData.ParentYangName = "mcmp"
    local.EntityData.SegmentPath = "local"
    local.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    local.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    local.EntityData.Children = make(map[string]types.YChild)
    local.EntityData.Leafs = make(map[string]types.YLeaf)
    local.EntityData.Leafs["initial"] = types.YLeaf{"Initial", local.Initial}
    local.EntityData.Leafs["maximum"] = types.YLeaf{"Maximum", local.Maximum}
    return &(local.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp
// PPP LCP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies whether to allow multiple authentication failures and, if
    // so, how many. The type is interface{} with range: -2147483648..2147483647.
    ServiceType interface{}

    // Multilink configuration.
    Multilink InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink

    // Password Authentication Protocol (PAP) configuration data.
    Pap InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap

    // Loopback configuration.
    LoopBack InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack

    // Microsoft Challenge Handshake Authentication Protocol (MS-CHAP)
    // configuration data.
    MsChap InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap

    // PPP authentication parameters.
    Authentication InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication

    // Challenge Handshake Authentication Protocol (CHAP) configuration data.
    Chap InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap
}

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetEntityData() *types.CommonEntityData {
    lcp.EntityData.YFilter = lcp.YFilter
    lcp.EntityData.YangName = "lcp"
    lcp.EntityData.BundleName = "cisco_ios_xr"
    lcp.EntityData.ParentYangName = "ppp"
    lcp.EntityData.SegmentPath = "lcp"
    lcp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lcp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lcp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lcp.EntityData.Children = make(map[string]types.YChild)
    lcp.EntityData.Children["multilink"] = types.YChild{"Multilink", &lcp.Multilink}
    lcp.EntityData.Children["pap"] = types.YChild{"Pap", &lcp.Pap}
    lcp.EntityData.Children["loop-back"] = types.YChild{"LoopBack", &lcp.LoopBack}
    lcp.EntityData.Children["ms-chap"] = types.YChild{"MsChap", &lcp.MsChap}
    lcp.EntityData.Children["authentication"] = types.YChild{"Authentication", &lcp.Authentication}
    lcp.EntityData.Children["chap"] = types.YChild{"Chap", &lcp.Chap}
    lcp.EntityData.Leafs = make(map[string]types.YLeaf)
    lcp.EntityData.Leafs["service-type"] = types.YLeaf{"ServiceType", lcp.ServiceType}
    return &(lcp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink
// Multilink configuration
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Minimum criteria for the linestate of a Multilink PPPinterface to be
    // brought up.
    MinimumActive InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive
}

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetEntityData() *types.CommonEntityData {
    multilink.EntityData.YFilter = multilink.YFilter
    multilink.EntityData.YangName = "multilink"
    multilink.EntityData.BundleName = "cisco_ios_xr"
    multilink.EntityData.ParentYangName = "lcp"
    multilink.EntityData.SegmentPath = "multilink"
    multilink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multilink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multilink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multilink.EntityData.Children = make(map[string]types.YChild)
    multilink.EntityData.Children["minimum-active"] = types.YChild{"MinimumActive", &multilink.MinimumActive}
    multilink.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(multilink.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive
// Minimum criteria for the linestate of a
// Multilink PPPinterface to be brought up
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active links needed to bring up an MP interface. The type is
    // interface{} with range: 1..65535. The default value is 1.
    Links interface{}
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetEntityData() *types.CommonEntityData {
    minimumActive.EntityData.YFilter = minimumActive.YFilter
    minimumActive.EntityData.YangName = "minimum-active"
    minimumActive.EntityData.BundleName = "cisco_ios_xr"
    minimumActive.EntityData.ParentYangName = "multilink"
    minimumActive.EntityData.SegmentPath = "minimum-active"
    minimumActive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minimumActive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minimumActive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minimumActive.EntityData.Children = make(map[string]types.YChild)
    minimumActive.EntityData.Leafs = make(map[string]types.YLeaf)
    minimumActive.EntityData.Leafs["links"] = types.YLeaf{"Links", minimumActive.Links}
    return &(minimumActive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap
// Password Authentication Protocol (PAP)
// configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies whether to refuse to authenticate using PAP. The type is
    // interface{}.
    Refuse interface{}

    // This specifies the outbound PAP username and password.
    SendUserInfo InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo
}

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetEntityData() *types.CommonEntityData {
    pap.EntityData.YFilter = pap.YFilter
    pap.EntityData.YangName = "pap"
    pap.EntityData.BundleName = "cisco_ios_xr"
    pap.EntityData.ParentYangName = "lcp"
    pap.EntityData.SegmentPath = "pap"
    pap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pap.EntityData.Children = make(map[string]types.YChild)
    pap.EntityData.Children["send-user-info"] = types.YChild{"SendUserInfo", &pap.SendUserInfo}
    pap.EntityData.Leafs = make(map[string]types.YLeaf)
    pap.EntityData.Leafs["refuse"] = types.YLeaf{"Refuse", pap.Refuse}
    return &(pap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo
// This specifies the outbound PAP username and
// password
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outbound PAP username. The type is string.
    Username interface{}

    // Outbound PAP password. The type is string with pattern: b'(!.+)|([^!].+)'.
    Password interface{}
}

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetEntityData() *types.CommonEntityData {
    sendUserInfo.EntityData.YFilter = sendUserInfo.YFilter
    sendUserInfo.EntityData.YangName = "send-user-info"
    sendUserInfo.EntityData.BundleName = "cisco_ios_xr"
    sendUserInfo.EntityData.ParentYangName = "pap"
    sendUserInfo.EntityData.SegmentPath = "send-user-info"
    sendUserInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendUserInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendUserInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendUserInfo.EntityData.Children = make(map[string]types.YChild)
    sendUserInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    sendUserInfo.EntityData.Leafs["username"] = types.YLeaf{"Username", sendUserInfo.Username}
    sendUserInfo.EntityData.Leafs["password"] = types.YLeaf{"Password", sendUserInfo.Password}
    return &(sendUserInfo.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack
// Loopback configuration
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow magic numbers to be equal. The type is interface{}.
    Ignore interface{}
}

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetEntityData() *types.CommonEntityData {
    loopBack.EntityData.YFilter = loopBack.YFilter
    loopBack.EntityData.YangName = "loop-back"
    loopBack.EntityData.BundleName = "cisco_ios_xr"
    loopBack.EntityData.ParentYangName = "lcp"
    loopBack.EntityData.SegmentPath = "loop-back"
    loopBack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loopBack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loopBack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loopBack.EntityData.Children = make(map[string]types.YChild)
    loopBack.EntityData.Leafs = make(map[string]types.YLeaf)
    loopBack.EntityData.Leafs["ignore"] = types.YLeaf{"Ignore", loopBack.Ignore}
    return &(loopBack.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap
// Microsoft Challenge Handshake Authentication
// Protocol (MS-CHAP) configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies the default MS-CHAP password. The type is string with
    // pattern: b'(!.+)|([^!].+)'.
    Password interface{}

    // This specifies the MS-CHAP hostname. The type is string.
    HostName interface{}

    // This specifies whether to refuse to authenticate using MS-CHAP. The type is
    // interface{}.
    Refuse interface{}
}

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetEntityData() *types.CommonEntityData {
    msChap.EntityData.YFilter = msChap.YFilter
    msChap.EntityData.YangName = "ms-chap"
    msChap.EntityData.BundleName = "cisco_ios_xr"
    msChap.EntityData.ParentYangName = "lcp"
    msChap.EntityData.SegmentPath = "ms-chap"
    msChap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msChap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msChap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msChap.EntityData.Children = make(map[string]types.YChild)
    msChap.EntityData.Leafs = make(map[string]types.YLeaf)
    msChap.EntityData.Leafs["password"] = types.YLeaf{"Password", msChap.Password}
    msChap.EntityData.Leafs["host-name"] = types.YLeaf{"HostName", msChap.HostName}
    msChap.EntityData.Leafs["refuse"] = types.YLeaf{"Refuse", msChap.Refuse}
    return &(msChap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication
// PPP authentication parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies whether to allow multiple authentication failures and, if
    // so, how many. The type is interface{} with range: 0..10.
    MaxAuthenticationFailures interface{}

    // Maximum time to wait for an authentication response. The type is
    // interface{} with range: 3..30. The default value is 10.
    Timeout interface{}

    // This specifies the PPP link authentication method.
    Method InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method
}

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "lcp"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["method"] = types.YChild{"Method", &authentication.Method}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["max-authentication-failures"] = types.YLeaf{"MaxAuthenticationFailures", authentication.MaxAuthenticationFailures}
    authentication.EntityData.Leafs["timeout"] = types.YLeaf{"Timeout", authentication.Timeout}
    return &(authentication.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method
// This specifies the PPP link authentication
// method
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use an authentication list with this name. The type is string.
    Name interface{}

    // Select between one and three authentication methods in order of preference.
    // The type is slice of PppAuthenticationMethod.
    Method []interface{}
}

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetEntityData() *types.CommonEntityData {
    method.EntityData.YFilter = method.YFilter
    method.EntityData.YangName = "method"
    method.EntityData.BundleName = "cisco_ios_xr"
    method.EntityData.ParentYangName = "authentication"
    method.EntityData.SegmentPath = "method"
    method.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    method.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    method.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    method.EntityData.Children = make(map[string]types.YChild)
    method.EntityData.Leafs = make(map[string]types.YLeaf)
    method.EntityData.Leafs["name"] = types.YLeaf{"Name", method.Name}
    method.EntityData.Leafs["method"] = types.YLeaf{"Method", method.Method}
    return &(method.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap
// Challenge Handshake Authentication Protocol
// (CHAP) configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies the default CHAP password. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Password interface{}

    // This specifies the CHAP hostname. The type is string.
    HostName interface{}

    // This specifies whether to refuse to authenticate using CHAP. The type is
    // interface{}.
    Refuse interface{}
}

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetEntityData() *types.CommonEntityData {
    chap.EntityData.YFilter = chap.YFilter
    chap.EntityData.YangName = "chap"
    chap.EntityData.BundleName = "cisco_ios_xr"
    chap.EntityData.ParentYangName = "lcp"
    chap.EntityData.SegmentPath = "chap"
    chap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    chap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    chap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    chap.EntityData.Children = make(map[string]types.YChild)
    chap.EntityData.Leafs = make(map[string]types.YLeaf)
    chap.EntityData.Leafs["password"] = types.YLeaf{"Password", chap.Password}
    chap.EntityData.Leafs["host-name"] = types.YLeaf{"HostName", chap.HostName}
    chap.EntityData.Leafs["refuse"] = types.YLeaf{"Refuse", chap.Refuse}
    return &(chap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SsrpSession
// SSRP Config
type InterfaceConfigurations_InterfaceConfiguration_SsrpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies the SSRP group and session-id.
    GroupId InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId
}

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetEntityData() *types.CommonEntityData {
    ssrpSession.EntityData.YFilter = ssrpSession.YFilter
    ssrpSession.EntityData.YangName = "ssrp-session"
    ssrpSession.EntityData.BundleName = "cisco_ios_xr"
    ssrpSession.EntityData.ParentYangName = "interface-configuration"
    ssrpSession.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session"
    ssrpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssrpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssrpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssrpSession.EntityData.Children = make(map[string]types.YChild)
    ssrpSession.EntityData.Children["group-id"] = types.YChild{"GroupId", &ssrpSession.GroupId}
    ssrpSession.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ssrpSession.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId
// This specifies the SSRP group and session-id
type InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSRP Group-ID. The type is interface{} with range: 1..65535.
    Group interface{}

    // SSRP Session-ID. The type is interface{} with range: 1..4294967295.
    Id interface{}
}

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetEntityData() *types.CommonEntityData {
    groupId.EntityData.YFilter = groupId.YFilter
    groupId.EntityData.YangName = "group-id"
    groupId.EntityData.BundleName = "cisco_ios_xr"
    groupId.EntityData.ParentYangName = "ssrp-session"
    groupId.EntityData.SegmentPath = "group-id"
    groupId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupId.EntityData.Children = make(map[string]types.YChild)
    groupId.EntityData.Leafs = make(map[string]types.YLeaf)
    groupId.EntityData.Leafs["group"] = types.YLeaf{"Group", groupId.Group}
    groupId.EntityData.Leafs["id"] = types.YLeaf{"Id", groupId.Id}
    return &(groupId.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "interface-configuration"
    qos.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-cfg:qos"
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = make(map[string]types.YChild)
    qos.EntityData.Children["output"] = types.YChild{"Output", &qos.Output}
    qos.EntityData.Children["input"] = types.YChild{"Input", &qos.Input}
    qos.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = make(map[string]types.YChild)
    output.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range output.ServicePolicy {
        output.EntityData.Children[types.GetSegmentPath(&output.ServicePolicy[i])] = types.YChild{"ServicePolicy", &output.ServicePolicy[i]}
    }
    output.EntityData.Children["service-policy-qos"] = types.YChild{"ServicePolicyQos", nil}
    for i := range output.ServicePolicyQos {
        output.EntityData.Children[types.GetSegmentPath(&output.ServicePolicyQos[i])] = types.YChild{"ServicePolicyQos", &output.ServicePolicyQos[i]}
    }
    output.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    servicePolicy.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", servicePolicy.AccountType}
    servicePolicy.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined}
    servicePolicy.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", servicePolicy.SpiName}
    servicePolicy.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy}
    servicePolicy.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", servicePolicy.ResourceId}
    servicePolicy.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "output"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = make(map[string]types.YChild)
    servicePolicyQos.EntityData.Children["subscriber-group-names"] = types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames}
    servicePolicyQos.EntityData.Children["subscriber-parent"] = types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent}
    servicePolicyQos.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicyQos.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName}
    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupNames.EntityData.Children["subscriber-group-name"] = types.YChild{"SubscriberGroupName", nil}
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children[types.GetSegmentPath(&subscriberGroupNames.SubscriberGroupName[i])] = types.YChild{"SubscriberGroupName", &subscriberGroupNames.SubscriberGroupName[i]}
    }
    subscriberGroupNames.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupName.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberGroupName.EntityData.Leafs["subscriber-group-string"] = types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString}
    subscriberGroupName.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberGroupName.AccountType}
    subscriberGroupName.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined}
    subscriberGroupName.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberGroupName.SpiName}
    subscriberGroupName.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge}
    subscriberGroupName.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy}
    subscriberGroupName.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberGroupName.ResourceId}
    subscriberGroupName.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy}
    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = make(map[string]types.YChild)
    subscriberParent.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberParent.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberParent.AccountType}
    subscriberParent.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined}
    subscriberParent.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberParent.SpiName}
    subscriberParent.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge}
    subscriberParent.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy}
    subscriberParent.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberParent.ResourceId}
    subscriberParent.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy}
    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = make(map[string]types.YChild)
    input.EntityData.Children["service-policy"] = types.YChild{"ServicePolicy", nil}
    for i := range input.ServicePolicy {
        input.EntityData.Children[types.GetSegmentPath(&input.ServicePolicy[i])] = types.YChild{"ServicePolicy", &input.ServicePolicy[i]}
    }
    input.EntityData.Children["service-policy-qos"] = types.YChild{"ServicePolicyQos", nil}
    for i := range input.ServicePolicyQos {
        input.EntityData.Children[types.GetSegmentPath(&input.ServicePolicyQos[i])] = types.YChild{"ServicePolicyQos", &input.ServicePolicyQos[i]}
    }
    input.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = make(map[string]types.YChild)
    servicePolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicy.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName}
    servicePolicy.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", servicePolicy.AccountType}
    servicePolicy.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined}
    servicePolicy.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", servicePolicy.SpiName}
    servicePolicy.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy}
    servicePolicy.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", servicePolicy.ResourceId}
    servicePolicy.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy}
    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "input"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = make(map[string]types.YChild)
    servicePolicyQos.EntityData.Children["subscriber-group-names"] = types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames}
    servicePolicyQos.EntityData.Children["subscriber-parent"] = types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent}
    servicePolicyQos.EntityData.Leafs = make(map[string]types.YLeaf)
    servicePolicyQos.EntityData.Leafs["service-policy-name"] = types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName}
    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupNames.EntityData.Children["subscriber-group-name"] = types.YChild{"SubscriberGroupName", nil}
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children[types.GetSegmentPath(&subscriberGroupNames.SubscriberGroupName[i])] = types.YChild{"SubscriberGroupName", &subscriberGroupNames.SubscriberGroupName[i]}
    }
    subscriberGroupNames.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = make(map[string]types.YChild)
    subscriberGroupName.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberGroupName.EntityData.Leafs["subscriber-group-string"] = types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString}
    subscriberGroupName.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberGroupName.AccountType}
    subscriberGroupName.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined}
    subscriberGroupName.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberGroupName.SpiName}
    subscriberGroupName.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge}
    subscriberGroupName.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy}
    subscriberGroupName.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberGroupName.ResourceId}
    subscriberGroupName.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy}
    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = make(map[string]types.YChild)
    subscriberParent.EntityData.Leafs = make(map[string]types.YLeaf)
    subscriberParent.EntityData.Leafs["account-type"] = types.YLeaf{"AccountType", subscriberParent.AccountType}
    subscriberParent.EntityData.Leafs["l1-user-defined"] = types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined}
    subscriberParent.EntityData.Leafs["spi-name"] = types.YLeaf{"SpiName", subscriberParent.SpiName}
    subscriberParent.EntityData.Leafs["policy-merge"] = types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge}
    subscriberParent.EntityData.Leafs["subscriber-parent-policy"] = types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy}
    subscriberParent.EntityData.Leafs["resource-id"] = types.YLeaf{"ResourceId", subscriberParent.ResourceId}
    subscriberParent.EntityData.Leafs["service-fragment-parent-policy"] = types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy}
    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber
// Subscribers on interface
type InterfaceConfigurations_InterfaceConfiguration_Subscriber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP subscribers on interface.
    IpSubscriber InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber
}

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetEntityData() *types.CommonEntityData {
    subscriber.EntityData.YFilter = subscriber.YFilter
    subscriber.EntityData.YangName = "subscriber"
    subscriber.EntityData.BundleName = "cisco_ios_xr"
    subscriber.EntityData.ParentYangName = "interface-configuration"
    subscriber.EntityData.SegmentPath = "Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber"
    subscriber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriber.EntityData.Children = make(map[string]types.YChild)
    subscriber.EntityData.Children["ip-subscriber"] = types.YChild{"IpSubscriber", &subscriber.IpSubscriber}
    subscriber.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subscriber.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber
// IP subscribers on interface
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable subscriber templates on this access interface. The type is
    // interface{} with range: 1..10. The default value is 10.
    SubscriberTemplates interface{}

    // Enable IP Static subscriber. The type is interface{}.
    Interface_ interface{}

    // IPv4 subscriber.
    Ipv4 InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4

    // IP subscriber session limit.
    SessionLimit InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit

    // IPv6 subscriber.
    Ipv6 InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6
}

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetEntityData() *types.CommonEntityData {
    ipSubscriber.EntityData.YFilter = ipSubscriber.YFilter
    ipSubscriber.EntityData.YangName = "ip-subscriber"
    ipSubscriber.EntityData.BundleName = "cisco_ios_xr"
    ipSubscriber.EntityData.ParentYangName = "subscriber"
    ipSubscriber.EntityData.SegmentPath = "ip-subscriber"
    ipSubscriber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubscriber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubscriber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubscriber.EntityData.Children = make(map[string]types.YChild)
    ipSubscriber.EntityData.Children["ipv4"] = types.YChild{"Ipv4", &ipSubscriber.Ipv4}
    ipSubscriber.EntityData.Children["session-limit"] = types.YChild{"SessionLimit", &ipSubscriber.SessionLimit}
    ipSubscriber.EntityData.Children["ipv6"] = types.YChild{"Ipv6", &ipSubscriber.Ipv6}
    ipSubscriber.EntityData.Leafs = make(map[string]types.YLeaf)
    ipSubscriber.EntityData.Leafs["subscriber-templates"] = types.YLeaf{"SubscriberTemplates", ipSubscriber.SubscriberTemplates}
    ipSubscriber.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", ipSubscriber.Interface_}
    return &(ipSubscriber.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4
// IPv4 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L2 connected IPv4 subscriber.
    L2Connected InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected

    // Routed IPv4 subscriber.
    Routed InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "ip-subscriber"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = make(map[string]types.YChild)
    ipv4.EntityData.Children["l2-connected"] = types.YChild{"L2Connected", &ipv4.L2Connected}
    ipv4.EntityData.Children["routed"] = types.YChild{"Routed", &ipv4.Routed}
    ipv4.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected
// L2 connected IPv4 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IP subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetEntityData() *types.CommonEntityData {
    l2Connected.EntityData.YFilter = l2Connected.YFilter
    l2Connected.EntityData.YangName = "l2-connected"
    l2Connected.EntityData.BundleName = "cisco_ios_xr"
    l2Connected.EntityData.ParentYangName = "ipv4"
    l2Connected.EntityData.SegmentPath = "l2-connected"
    l2Connected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Connected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Connected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Connected.EntityData.Children = make(map[string]types.YChild)
    l2Connected.EntityData.Children["initiator"] = types.YChild{"Initiator", &l2Connected.Initiator}
    l2Connected.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l2Connected.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator
// Configure IP subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IP subscriber DHCP initiator. The type is interface{}.
    Dhcp interface{}

    // Configure IP subscriber unclassified source initiator.
    UnclassifiedSourceFsol InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetEntityData() *types.CommonEntityData {
    initiator.EntityData.YFilter = initiator.YFilter
    initiator.EntityData.YangName = "initiator"
    initiator.EntityData.BundleName = "cisco_ios_xr"
    initiator.EntityData.ParentYangName = "l2-connected"
    initiator.EntityData.SegmentPath = "initiator"
    initiator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initiator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initiator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initiator.EntityData.Children = make(map[string]types.YChild)
    initiator.EntityData.Children["unclassified-source-fsol"] = types.YChild{"UnclassifiedSourceFsol", &initiator.UnclassifiedSourceFsol}
    initiator.EntityData.Leafs = make(map[string]types.YLeaf)
    initiator.EntityData.Leafs["dhcp"] = types.YLeaf{"Dhcp", initiator.Dhcp}
    return &(initiator.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol
// Configure IP subscriber unclassified source
// initiator
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable unclassified source. The type is interface{}. This attribute is
    // mandatory.
    Enable interface{}

    // Check for subscriber IP uniqueness during first sign of life. The type is
    // bool. The default value is false.
    AddressUnique interface{}
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetEntityData() *types.CommonEntityData {
    unclassifiedSourceFsol.EntityData.YFilter = unclassifiedSourceFsol.YFilter
    unclassifiedSourceFsol.EntityData.YangName = "unclassified-source-fsol"
    unclassifiedSourceFsol.EntityData.BundleName = "cisco_ios_xr"
    unclassifiedSourceFsol.EntityData.ParentYangName = "initiator"
    unclassifiedSourceFsol.EntityData.SegmentPath = "unclassified-source-fsol"
    unclassifiedSourceFsol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unclassifiedSourceFsol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unclassifiedSourceFsol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unclassifiedSourceFsol.EntityData.Children = make(map[string]types.YChild)
    unclassifiedSourceFsol.EntityData.Leafs = make(map[string]types.YLeaf)
    unclassifiedSourceFsol.EntityData.Leafs["enable"] = types.YLeaf{"Enable", unclassifiedSourceFsol.Enable}
    unclassifiedSourceFsol.EntityData.Leafs["address-unique"] = types.YLeaf{"AddressUnique", unclassifiedSourceFsol.AddressUnique}
    return &(unclassifiedSourceFsol.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed
// Routed IPv4 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IP subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetEntityData() *types.CommonEntityData {
    routed.EntityData.YFilter = routed.YFilter
    routed.EntityData.YangName = "routed"
    routed.EntityData.BundleName = "cisco_ios_xr"
    routed.EntityData.ParentYangName = "ipv4"
    routed.EntityData.SegmentPath = "routed"
    routed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routed.EntityData.Children = make(map[string]types.YChild)
    routed.EntityData.Children["initiator"] = types.YChild{"Initiator", &routed.Initiator}
    routed.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routed.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator
// Configure IP subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IPv4 subscriber unclassified source initiator. The type is
    // interface{}.
    UnclassifiedIp interface{}

    // Configure IPv4 subscriber DHCP initiator. The type is interface{}.
    Dhcp interface{}

    // Configure IPv4 subscriber DHCP Snoop initiator. The type is interface{}.
    DhcpSnoop interface{}
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetEntityData() *types.CommonEntityData {
    initiator.EntityData.YFilter = initiator.YFilter
    initiator.EntityData.YangName = "initiator"
    initiator.EntityData.BundleName = "cisco_ios_xr"
    initiator.EntityData.ParentYangName = "routed"
    initiator.EntityData.SegmentPath = "initiator"
    initiator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initiator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initiator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initiator.EntityData.Children = make(map[string]types.YChild)
    initiator.EntityData.Leafs = make(map[string]types.YLeaf)
    initiator.EntityData.Leafs["unclassified-ip"] = types.YLeaf{"UnclassifiedIp", initiator.UnclassifiedIp}
    initiator.EntityData.Leafs["dhcp"] = types.YLeaf{"Dhcp", initiator.Dhcp}
    initiator.EntityData.Leafs["dhcp-snoop"] = types.YLeaf{"DhcpSnoop", initiator.DhcpSnoop}
    return &(initiator.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit
// IP subscriber session limit
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session limit for all sources.
    Total InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total

    // Session limit for unclassified sources.
    UnclassifiedSource InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource
}

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetEntityData() *types.CommonEntityData {
    sessionLimit.EntityData.YFilter = sessionLimit.YFilter
    sessionLimit.EntityData.YangName = "session-limit"
    sessionLimit.EntityData.BundleName = "cisco_ios_xr"
    sessionLimit.EntityData.ParentYangName = "ip-subscriber"
    sessionLimit.EntityData.SegmentPath = "session-limit"
    sessionLimit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionLimit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionLimit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionLimit.EntityData.Children = make(map[string]types.YChild)
    sessionLimit.EntityData.Children["total"] = types.YChild{"Total", &sessionLimit.Total}
    sessionLimit.EntityData.Children["unclassified-source"] = types.YChild{"UnclassifiedSource", &sessionLimit.UnclassifiedSource}
    sessionLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sessionLimit.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total
// Session limit for all sources
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure per-vlan session limit for all sources. The type is interface{}
    // with range: -2147483648..2147483647. The default value is 0.
    PerVlan interface{}
}

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetEntityData() *types.CommonEntityData {
    total.EntityData.YFilter = total.YFilter
    total.EntityData.YangName = "total"
    total.EntityData.BundleName = "cisco_ios_xr"
    total.EntityData.ParentYangName = "session-limit"
    total.EntityData.SegmentPath = "total"
    total.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    total.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    total.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    total.EntityData.Children = make(map[string]types.YChild)
    total.EntityData.Leafs = make(map[string]types.YLeaf)
    total.EntityData.Leafs["per-vlan"] = types.YLeaf{"PerVlan", total.PerVlan}
    return &(total.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource
// Session limit for unclassified sources
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure per-vlan session limit for unclassified sources. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    PerVlan interface{}
}

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetEntityData() *types.CommonEntityData {
    unclassifiedSource.EntityData.YFilter = unclassifiedSource.YFilter
    unclassifiedSource.EntityData.YangName = "unclassified-source"
    unclassifiedSource.EntityData.BundleName = "cisco_ios_xr"
    unclassifiedSource.EntityData.ParentYangName = "session-limit"
    unclassifiedSource.EntityData.SegmentPath = "unclassified-source"
    unclassifiedSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unclassifiedSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unclassifiedSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unclassifiedSource.EntityData.Children = make(map[string]types.YChild)
    unclassifiedSource.EntityData.Leafs = make(map[string]types.YLeaf)
    unclassifiedSource.EntityData.Leafs["per-vlan"] = types.YLeaf{"PerVlan", unclassifiedSource.PerVlan}
    return &(unclassifiedSource.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6
// IPv6 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L2 connected IPv6 subscriber.
    L2Connected InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected

    // Routed IPv6 subscriber.
    Routed InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "ip-subscriber"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = make(map[string]types.YChild)
    ipv6.EntityData.Children["l2-connected"] = types.YChild{"L2Connected", &ipv6.L2Connected}
    ipv6.EntityData.Children["routed"] = types.YChild{"Routed", &ipv6.Routed}
    ipv6.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected
// L2 connected IPv6 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IPv6 subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetEntityData() *types.CommonEntityData {
    l2Connected.EntityData.YFilter = l2Connected.YFilter
    l2Connected.EntityData.YangName = "l2-connected"
    l2Connected.EntityData.BundleName = "cisco_ios_xr"
    l2Connected.EntityData.ParentYangName = "ipv6"
    l2Connected.EntityData.SegmentPath = "l2-connected"
    l2Connected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Connected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Connected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Connected.EntityData.Children = make(map[string]types.YChild)
    l2Connected.EntityData.Children["initiator"] = types.YChild{"Initiator", &l2Connected.Initiator}
    l2Connected.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l2Connected.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator
// Configure IPv6 subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IPv6 subscriber DHCP initiator. The type is interface{}.
    Dhcp interface{}

    // Configure IP subscriber unclassified source initiator.
    UnclassifiedSourceFsol InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetEntityData() *types.CommonEntityData {
    initiator.EntityData.YFilter = initiator.YFilter
    initiator.EntityData.YangName = "initiator"
    initiator.EntityData.BundleName = "cisco_ios_xr"
    initiator.EntityData.ParentYangName = "l2-connected"
    initiator.EntityData.SegmentPath = "initiator"
    initiator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initiator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initiator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initiator.EntityData.Children = make(map[string]types.YChild)
    initiator.EntityData.Children["unclassified-source-fsol"] = types.YChild{"UnclassifiedSourceFsol", &initiator.UnclassifiedSourceFsol}
    initiator.EntityData.Leafs = make(map[string]types.YLeaf)
    initiator.EntityData.Leafs["dhcp"] = types.YLeaf{"Dhcp", initiator.Dhcp}
    return &(initiator.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol
// Configure IP subscriber unclassified source
// initiator
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable unclassified source. The type is interface{}. This attribute is
    // mandatory.
    Enable interface{}

    // Check for subscriber IP uniqueness during first sign of life. The type is
    // bool. The default value is false.
    AddressUnique interface{}
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetEntityData() *types.CommonEntityData {
    unclassifiedSourceFsol.EntityData.YFilter = unclassifiedSourceFsol.YFilter
    unclassifiedSourceFsol.EntityData.YangName = "unclassified-source-fsol"
    unclassifiedSourceFsol.EntityData.BundleName = "cisco_ios_xr"
    unclassifiedSourceFsol.EntityData.ParentYangName = "initiator"
    unclassifiedSourceFsol.EntityData.SegmentPath = "unclassified-source-fsol"
    unclassifiedSourceFsol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unclassifiedSourceFsol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unclassifiedSourceFsol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unclassifiedSourceFsol.EntityData.Children = make(map[string]types.YChild)
    unclassifiedSourceFsol.EntityData.Leafs = make(map[string]types.YLeaf)
    unclassifiedSourceFsol.EntityData.Leafs["enable"] = types.YLeaf{"Enable", unclassifiedSourceFsol.Enable}
    unclassifiedSourceFsol.EntityData.Leafs["address-unique"] = types.YLeaf{"AddressUnique", unclassifiedSourceFsol.AddressUnique}
    return &(unclassifiedSourceFsol.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed
// Routed IPv6 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IP subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetEntityData() *types.CommonEntityData {
    routed.EntityData.YFilter = routed.YFilter
    routed.EntityData.YangName = "routed"
    routed.EntityData.BundleName = "cisco_ios_xr"
    routed.EntityData.ParentYangName = "ipv6"
    routed.EntityData.SegmentPath = "routed"
    routed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routed.EntityData.Children = make(map[string]types.YChild)
    routed.EntityData.Children["initiator"] = types.YChild{"Initiator", &routed.Initiator}
    routed.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routed.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator
// Configure IP subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure unclassified packets as first-sign-of-life for IPv6 subscriber.
    // The type is interface{} with range: 1..128. The default value is 128.
    UnclassifiedIp interface{}

    // Configure IPv6 subscriber DHCP initiator. The type is interface{} with
    // range: 1..128. The default value is 128.
    Dhcp interface{}

    // Configure IPv6 subscriber DHCP Snoop initiator. The type is interface{}
    // with range: 1..128. The default value is 128.
    DhcpSnoop interface{}
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetEntityData() *types.CommonEntityData {
    initiator.EntityData.YFilter = initiator.YFilter
    initiator.EntityData.YangName = "initiator"
    initiator.EntityData.BundleName = "cisco_ios_xr"
    initiator.EntityData.ParentYangName = "routed"
    initiator.EntityData.SegmentPath = "initiator"
    initiator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initiator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initiator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initiator.EntityData.Children = make(map[string]types.YChild)
    initiator.EntityData.Leafs = make(map[string]types.YLeaf)
    initiator.EntityData.Leafs["unclassified-ip"] = types.YLeaf{"UnclassifiedIp", initiator.UnclassifiedIp}
    initiator.EntityData.Leafs["dhcp"] = types.YLeaf{"Dhcp", initiator.Dhcp}
    initiator.EntityData.Leafs["dhcp-snoop"] = types.YLeaf{"DhcpSnoop", initiator.DhcpSnoop}
    return &(initiator.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Pppoe
// Interface PPPoE configuration data
type InterfaceConfigurations_InterfaceConfiguration_Pppoe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use this BBA-Group to enable PPPoE on this interface.
    EnableBbaGroup InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup
}

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetEntityData() *types.CommonEntityData {
    pppoe.EntityData.YFilter = pppoe.YFilter
    pppoe.EntityData.YangName = "pppoe"
    pppoe.EntityData.BundleName = "cisco_ios_xr"
    pppoe.EntityData.ParentYangName = "interface-configuration"
    pppoe.EntityData.SegmentPath = "Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe"
    pppoe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pppoe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pppoe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pppoe.EntityData.Children = make(map[string]types.YChild)
    pppoe.EntityData.Children["enable-bba-group"] = types.YChild{"EnableBbaGroup", &pppoe.EnableBbaGroup}
    pppoe.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(pppoe.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup
// Use this BBA-Group to enable PPPoE on this
// interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable PPPoE on this interface. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // Name of the BBA-Group. The type is string.
    BbaGroupName interface{}
}

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetEntityData() *types.CommonEntityData {
    enableBbaGroup.EntityData.YFilter = enableBbaGroup.YFilter
    enableBbaGroup.EntityData.YangName = "enable-bba-group"
    enableBbaGroup.EntityData.BundleName = "cisco_ios_xr"
    enableBbaGroup.EntityData.ParentYangName = "pppoe"
    enableBbaGroup.EntityData.SegmentPath = "enable-bba-group"
    enableBbaGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    enableBbaGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    enableBbaGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    enableBbaGroup.EntityData.Children = make(map[string]types.YChild)
    enableBbaGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    enableBbaGroup.EntityData.Leafs["enable"] = types.YLeaf{"Enable", enableBbaGroup.Enable}
    enableBbaGroup.EntityData.Leafs["bba-group-name"] = types.YLeaf{"BbaGroupName", enableBbaGroup.BbaGroupName}
    return &(enableBbaGroup.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow
// Interface netflow configuration
type InterfaceConfigurations_InterfaceConfiguration_NetFlow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure datalinkframesection netflow.
    DataLinkFrameSection InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection

    // Configure MPLS netflow.
    Mpls InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls

    // Configure IPv6 netflow.
    Ipv6 InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6

    // Configure IPv4 netflow.
    Ipv4 InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4
}

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetEntityData() *types.CommonEntityData {
    netFlow.EntityData.YFilter = netFlow.YFilter
    netFlow.EntityData.YangName = "net-flow"
    netFlow.EntityData.BundleName = "cisco_ios_xr"
    netFlow.EntityData.ParentYangName = "interface-configuration"
    netFlow.EntityData.SegmentPath = "Cisco-IOS-XR-traffmon-netflow-cfg:net-flow"
    netFlow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    netFlow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    netFlow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    netFlow.EntityData.Children = make(map[string]types.YChild)
    netFlow.EntityData.Children["data-link-frame-section"] = types.YChild{"DataLinkFrameSection", &netFlow.DataLinkFrameSection}
    netFlow.EntityData.Children["mpls"] = types.YChild{"Mpls", &netFlow.Mpls}
    netFlow.EntityData.Children["ipv6"] = types.YChild{"Ipv6", &netFlow.Ipv6}
    netFlow.EntityData.Children["ipv4"] = types.YChild{"Ipv4", &netFlow.Ipv4}
    netFlow.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(netFlow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection
// Configure datalinkframesection netflow
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure a flow monitor map.
    FlowMonitorMap InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap
}

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetEntityData() *types.CommonEntityData {
    dataLinkFrameSection.EntityData.YFilter = dataLinkFrameSection.YFilter
    dataLinkFrameSection.EntityData.YangName = "data-link-frame-section"
    dataLinkFrameSection.EntityData.BundleName = "cisco_ios_xr"
    dataLinkFrameSection.EntityData.ParentYangName = "net-flow"
    dataLinkFrameSection.EntityData.SegmentPath = "data-link-frame-section"
    dataLinkFrameSection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataLinkFrameSection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataLinkFrameSection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataLinkFrameSection.EntityData.Children = make(map[string]types.YChild)
    dataLinkFrameSection.EntityData.Children["flow-monitor-map"] = types.YChild{"FlowMonitorMap", &dataLinkFrameSection.FlowMonitorMap}
    dataLinkFrameSection.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(dataLinkFrameSection.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap
// Configure a flow monitor map
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ingress monitoring direction.
    Ingress InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress

    // Configure egress monitoring direction.
    Egress InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetEntityData() *types.CommonEntityData {
    flowMonitorMap.EntityData.YFilter = flowMonitorMap.YFilter
    flowMonitorMap.EntityData.YangName = "flow-monitor-map"
    flowMonitorMap.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorMap.EntityData.ParentYangName = "data-link-frame-section"
    flowMonitorMap.EntityData.SegmentPath = "flow-monitor-map"
    flowMonitorMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorMap.EntityData.Children = make(map[string]types.YChild)
    flowMonitorMap.EntityData.Children["ingress"] = types.YChild{"Ingress", &flowMonitorMap.Ingress}
    flowMonitorMap.EntityData.Children["egress"] = types.YChild{"Egress", &flowMonitorMap.Egress}
    flowMonitorMap.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flowMonitorMap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress
// Configure ingress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetEntityData() *types.CommonEntityData {
    ingress.EntityData.YFilter = ingress.YFilter
    ingress.EntityData.YangName = "ingress"
    ingress.EntityData.BundleName = "cisco_ios_xr"
    ingress.EntityData.ParentYangName = "flow-monitor-map"
    ingress.EntityData.SegmentPath = "ingress"
    ingress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ingress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ingress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ingress.EntityData.Children = make(map[string]types.YChild)
    ingress.EntityData.Children["flow-monitor-name"] = types.YChild{"FlowMonitorName", nil}
    for i := range ingress.FlowMonitorName {
        ingress.EntityData.Children[types.GetSegmentPath(&ingress.FlowMonitorName[i])] = types.YChild{"FlowMonitorName", &ingress.FlowMonitorName[i]}
    }
    ingress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ingress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetEntityData() *types.CommonEntityData {
    flowMonitorName.EntityData.YFilter = flowMonitorName.YFilter
    flowMonitorName.EntityData.YangName = "flow-monitor-name"
    flowMonitorName.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorName.EntityData.ParentYangName = "ingress"
    flowMonitorName.EntityData.SegmentPath = "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
    flowMonitorName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorName.EntityData.Children = make(map[string]types.YChild)
    flowMonitorName.EntityData.Leafs = make(map[string]types.YLeaf)
    flowMonitorName.EntityData.Leafs["monitor-map-name"] = types.YLeaf{"MonitorMapName", flowMonitorName.MonitorMapName}
    flowMonitorName.EntityData.Leafs["sampler-map-name"] = types.YLeaf{"SamplerMapName", flowMonitorName.SamplerMapName}
    return &(flowMonitorName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress
// Configure egress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetEntityData() *types.CommonEntityData {
    egress.EntityData.YFilter = egress.YFilter
    egress.EntityData.YangName = "egress"
    egress.EntityData.BundleName = "cisco_ios_xr"
    egress.EntityData.ParentYangName = "flow-monitor-map"
    egress.EntityData.SegmentPath = "egress"
    egress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    egress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    egress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    egress.EntityData.Children = make(map[string]types.YChild)
    egress.EntityData.Children["flow-monitor-name"] = types.YChild{"FlowMonitorName", nil}
    for i := range egress.FlowMonitorName {
        egress.EntityData.Children[types.GetSegmentPath(&egress.FlowMonitorName[i])] = types.YChild{"FlowMonitorName", &egress.FlowMonitorName[i]}
    }
    egress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(egress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetEntityData() *types.CommonEntityData {
    flowMonitorName.EntityData.YFilter = flowMonitorName.YFilter
    flowMonitorName.EntityData.YangName = "flow-monitor-name"
    flowMonitorName.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorName.EntityData.ParentYangName = "egress"
    flowMonitorName.EntityData.SegmentPath = "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
    flowMonitorName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorName.EntityData.Children = make(map[string]types.YChild)
    flowMonitorName.EntityData.Leafs = make(map[string]types.YLeaf)
    flowMonitorName.EntityData.Leafs["monitor-map-name"] = types.YLeaf{"MonitorMapName", flowMonitorName.MonitorMapName}
    flowMonitorName.EntityData.Leafs["sampler-map-name"] = types.YLeaf{"SamplerMapName", flowMonitorName.SamplerMapName}
    return &(flowMonitorName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls
// Configure MPLS netflow
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure a flow monitor map.
    FlowMonitorMap InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "net-flow"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = make(map[string]types.YChild)
    mpls.EntityData.Children["flow-monitor-map"] = types.YChild{"FlowMonitorMap", &mpls.FlowMonitorMap}
    mpls.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mpls.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap
// Configure a flow monitor map
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ingress monitoring direction.
    Ingress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress

    // Configure egress monitoring direction.
    Egress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetEntityData() *types.CommonEntityData {
    flowMonitorMap.EntityData.YFilter = flowMonitorMap.YFilter
    flowMonitorMap.EntityData.YangName = "flow-monitor-map"
    flowMonitorMap.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorMap.EntityData.ParentYangName = "mpls"
    flowMonitorMap.EntityData.SegmentPath = "flow-monitor-map"
    flowMonitorMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorMap.EntityData.Children = make(map[string]types.YChild)
    flowMonitorMap.EntityData.Children["ingress"] = types.YChild{"Ingress", &flowMonitorMap.Ingress}
    flowMonitorMap.EntityData.Children["egress"] = types.YChild{"Egress", &flowMonitorMap.Egress}
    flowMonitorMap.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flowMonitorMap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress
// Configure ingress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetEntityData() *types.CommonEntityData {
    ingress.EntityData.YFilter = ingress.YFilter
    ingress.EntityData.YangName = "ingress"
    ingress.EntityData.BundleName = "cisco_ios_xr"
    ingress.EntityData.ParentYangName = "flow-monitor-map"
    ingress.EntityData.SegmentPath = "ingress"
    ingress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ingress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ingress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ingress.EntityData.Children = make(map[string]types.YChild)
    ingress.EntityData.Children["flow-monitor-name"] = types.YChild{"FlowMonitorName", nil}
    for i := range ingress.FlowMonitorName {
        ingress.EntityData.Children[types.GetSegmentPath(&ingress.FlowMonitorName[i])] = types.YChild{"FlowMonitorName", &ingress.FlowMonitorName[i]}
    }
    ingress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ingress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetEntityData() *types.CommonEntityData {
    flowMonitorName.EntityData.YFilter = flowMonitorName.YFilter
    flowMonitorName.EntityData.YangName = "flow-monitor-name"
    flowMonitorName.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorName.EntityData.ParentYangName = "ingress"
    flowMonitorName.EntityData.SegmentPath = "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
    flowMonitorName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorName.EntityData.Children = make(map[string]types.YChild)
    flowMonitorName.EntityData.Leafs = make(map[string]types.YLeaf)
    flowMonitorName.EntityData.Leafs["monitor-map-name"] = types.YLeaf{"MonitorMapName", flowMonitorName.MonitorMapName}
    flowMonitorName.EntityData.Leafs["sampler-map-name"] = types.YLeaf{"SamplerMapName", flowMonitorName.SamplerMapName}
    return &(flowMonitorName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress
// Configure egress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetEntityData() *types.CommonEntityData {
    egress.EntityData.YFilter = egress.YFilter
    egress.EntityData.YangName = "egress"
    egress.EntityData.BundleName = "cisco_ios_xr"
    egress.EntityData.ParentYangName = "flow-monitor-map"
    egress.EntityData.SegmentPath = "egress"
    egress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    egress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    egress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    egress.EntityData.Children = make(map[string]types.YChild)
    egress.EntityData.Children["flow-monitor-name"] = types.YChild{"FlowMonitorName", nil}
    for i := range egress.FlowMonitorName {
        egress.EntityData.Children[types.GetSegmentPath(&egress.FlowMonitorName[i])] = types.YChild{"FlowMonitorName", &egress.FlowMonitorName[i]}
    }
    egress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(egress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetEntityData() *types.CommonEntityData {
    flowMonitorName.EntityData.YFilter = flowMonitorName.YFilter
    flowMonitorName.EntityData.YangName = "flow-monitor-name"
    flowMonitorName.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorName.EntityData.ParentYangName = "egress"
    flowMonitorName.EntityData.SegmentPath = "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
    flowMonitorName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorName.EntityData.Children = make(map[string]types.YChild)
    flowMonitorName.EntityData.Leafs = make(map[string]types.YLeaf)
    flowMonitorName.EntityData.Leafs["monitor-map-name"] = types.YLeaf{"MonitorMapName", flowMonitorName.MonitorMapName}
    flowMonitorName.EntityData.Leafs["sampler-map-name"] = types.YLeaf{"SamplerMapName", flowMonitorName.SamplerMapName}
    return &(flowMonitorName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6
// Configure IPv6 netflow
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure a flow monitor map.
    FlowMonitorMap InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "net-flow"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = make(map[string]types.YChild)
    ipv6.EntityData.Children["flow-monitor-map"] = types.YChild{"FlowMonitorMap", &ipv6.FlowMonitorMap}
    ipv6.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap
// Configure a flow monitor map
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ingress monitoring direction.
    Ingress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress

    // Configure egress monitoring direction.
    Egress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetEntityData() *types.CommonEntityData {
    flowMonitorMap.EntityData.YFilter = flowMonitorMap.YFilter
    flowMonitorMap.EntityData.YangName = "flow-monitor-map"
    flowMonitorMap.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorMap.EntityData.ParentYangName = "ipv6"
    flowMonitorMap.EntityData.SegmentPath = "flow-monitor-map"
    flowMonitorMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorMap.EntityData.Children = make(map[string]types.YChild)
    flowMonitorMap.EntityData.Children["ingress"] = types.YChild{"Ingress", &flowMonitorMap.Ingress}
    flowMonitorMap.EntityData.Children["egress"] = types.YChild{"Egress", &flowMonitorMap.Egress}
    flowMonitorMap.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flowMonitorMap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress
// Configure ingress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetEntityData() *types.CommonEntityData {
    ingress.EntityData.YFilter = ingress.YFilter
    ingress.EntityData.YangName = "ingress"
    ingress.EntityData.BundleName = "cisco_ios_xr"
    ingress.EntityData.ParentYangName = "flow-monitor-map"
    ingress.EntityData.SegmentPath = "ingress"
    ingress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ingress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ingress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ingress.EntityData.Children = make(map[string]types.YChild)
    ingress.EntityData.Children["flow-monitor-name"] = types.YChild{"FlowMonitorName", nil}
    for i := range ingress.FlowMonitorName {
        ingress.EntityData.Children[types.GetSegmentPath(&ingress.FlowMonitorName[i])] = types.YChild{"FlowMonitorName", &ingress.FlowMonitorName[i]}
    }
    ingress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ingress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetEntityData() *types.CommonEntityData {
    flowMonitorName.EntityData.YFilter = flowMonitorName.YFilter
    flowMonitorName.EntityData.YangName = "flow-monitor-name"
    flowMonitorName.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorName.EntityData.ParentYangName = "ingress"
    flowMonitorName.EntityData.SegmentPath = "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
    flowMonitorName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorName.EntityData.Children = make(map[string]types.YChild)
    flowMonitorName.EntityData.Leafs = make(map[string]types.YLeaf)
    flowMonitorName.EntityData.Leafs["monitor-map-name"] = types.YLeaf{"MonitorMapName", flowMonitorName.MonitorMapName}
    flowMonitorName.EntityData.Leafs["sampler-map-name"] = types.YLeaf{"SamplerMapName", flowMonitorName.SamplerMapName}
    return &(flowMonitorName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress
// Configure egress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetEntityData() *types.CommonEntityData {
    egress.EntityData.YFilter = egress.YFilter
    egress.EntityData.YangName = "egress"
    egress.EntityData.BundleName = "cisco_ios_xr"
    egress.EntityData.ParentYangName = "flow-monitor-map"
    egress.EntityData.SegmentPath = "egress"
    egress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    egress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    egress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    egress.EntityData.Children = make(map[string]types.YChild)
    egress.EntityData.Children["flow-monitor-name"] = types.YChild{"FlowMonitorName", nil}
    for i := range egress.FlowMonitorName {
        egress.EntityData.Children[types.GetSegmentPath(&egress.FlowMonitorName[i])] = types.YChild{"FlowMonitorName", &egress.FlowMonitorName[i]}
    }
    egress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(egress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetEntityData() *types.CommonEntityData {
    flowMonitorName.EntityData.YFilter = flowMonitorName.YFilter
    flowMonitorName.EntityData.YangName = "flow-monitor-name"
    flowMonitorName.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorName.EntityData.ParentYangName = "egress"
    flowMonitorName.EntityData.SegmentPath = "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
    flowMonitorName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorName.EntityData.Children = make(map[string]types.YChild)
    flowMonitorName.EntityData.Leafs = make(map[string]types.YLeaf)
    flowMonitorName.EntityData.Leafs["monitor-map-name"] = types.YLeaf{"MonitorMapName", flowMonitorName.MonitorMapName}
    flowMonitorName.EntityData.Leafs["sampler-map-name"] = types.YLeaf{"SamplerMapName", flowMonitorName.SamplerMapName}
    return &(flowMonitorName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4
// Configure IPv4 netflow
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure a flow monitor map.
    FlowMonitorMap InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "net-flow"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = make(map[string]types.YChild)
    ipv4.EntityData.Children["flow-monitor-map"] = types.YChild{"FlowMonitorMap", &ipv4.FlowMonitorMap}
    ipv4.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap
// Configure a flow monitor map
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ingress monitoring direction.
    Ingress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress

    // Configure egress monitoring direction.
    Egress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetEntityData() *types.CommonEntityData {
    flowMonitorMap.EntityData.YFilter = flowMonitorMap.YFilter
    flowMonitorMap.EntityData.YangName = "flow-monitor-map"
    flowMonitorMap.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorMap.EntityData.ParentYangName = "ipv4"
    flowMonitorMap.EntityData.SegmentPath = "flow-monitor-map"
    flowMonitorMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorMap.EntityData.Children = make(map[string]types.YChild)
    flowMonitorMap.EntityData.Children["ingress"] = types.YChild{"Ingress", &flowMonitorMap.Ingress}
    flowMonitorMap.EntityData.Children["egress"] = types.YChild{"Egress", &flowMonitorMap.Egress}
    flowMonitorMap.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flowMonitorMap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress
// Configure ingress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetEntityData() *types.CommonEntityData {
    ingress.EntityData.YFilter = ingress.YFilter
    ingress.EntityData.YangName = "ingress"
    ingress.EntityData.BundleName = "cisco_ios_xr"
    ingress.EntityData.ParentYangName = "flow-monitor-map"
    ingress.EntityData.SegmentPath = "ingress"
    ingress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ingress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ingress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ingress.EntityData.Children = make(map[string]types.YChild)
    ingress.EntityData.Children["flow-monitor-name"] = types.YChild{"FlowMonitorName", nil}
    for i := range ingress.FlowMonitorName {
        ingress.EntityData.Children[types.GetSegmentPath(&ingress.FlowMonitorName[i])] = types.YChild{"FlowMonitorName", &ingress.FlowMonitorName[i]}
    }
    ingress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ingress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetEntityData() *types.CommonEntityData {
    flowMonitorName.EntityData.YFilter = flowMonitorName.YFilter
    flowMonitorName.EntityData.YangName = "flow-monitor-name"
    flowMonitorName.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorName.EntityData.ParentYangName = "ingress"
    flowMonitorName.EntityData.SegmentPath = "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
    flowMonitorName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorName.EntityData.Children = make(map[string]types.YChild)
    flowMonitorName.EntityData.Leafs = make(map[string]types.YLeaf)
    flowMonitorName.EntityData.Leafs["monitor-map-name"] = types.YLeaf{"MonitorMapName", flowMonitorName.MonitorMapName}
    flowMonitorName.EntityData.Leafs["sampler-map-name"] = types.YLeaf{"SamplerMapName", flowMonitorName.SamplerMapName}
    return &(flowMonitorName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress
// Configure egress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetEntityData() *types.CommonEntityData {
    egress.EntityData.YFilter = egress.YFilter
    egress.EntityData.YangName = "egress"
    egress.EntityData.BundleName = "cisco_ios_xr"
    egress.EntityData.ParentYangName = "flow-monitor-map"
    egress.EntityData.SegmentPath = "egress"
    egress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    egress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    egress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    egress.EntityData.Children = make(map[string]types.YChild)
    egress.EntityData.Children["flow-monitor-name"] = types.YChild{"FlowMonitorName", nil}
    for i := range egress.FlowMonitorName {
        egress.EntityData.Children[types.GetSegmentPath(&egress.FlowMonitorName[i])] = types.YChild{"FlowMonitorName", &egress.FlowMonitorName[i]}
    }
    egress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(egress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetEntityData() *types.CommonEntityData {
    flowMonitorName.EntityData.YFilter = flowMonitorName.YFilter
    flowMonitorName.EntityData.YangName = "flow-monitor-name"
    flowMonitorName.EntityData.BundleName = "cisco_ios_xr"
    flowMonitorName.EntityData.ParentYangName = "egress"
    flowMonitorName.EntityData.SegmentPath = "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
    flowMonitorName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowMonitorName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowMonitorName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowMonitorName.EntityData.Children = make(map[string]types.YChild)
    flowMonitorName.EntityData.Leafs = make(map[string]types.YLeaf)
    flowMonitorName.EntityData.Leafs["monitor-map-name"] = types.YLeaf{"MonitorMapName", flowMonitorName.MonitorMapName}
    flowMonitorName.EntityData.Leafs["sampler-map-name"] = types.YLeaf{"SamplerMapName", flowMonitorName.SamplerMapName}
    return &(flowMonitorName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp
// IP over GRE encapsulation
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable flag bit to allow packets with GRE key. The type is interface{}.
    AllowKey interface{}

    // Configure the time-to-live for packets sent over this tunnel. The type is
    // interface{} with range: 1..255.
    Ttl interface{}

    // Tunnel vrf label name. The type is string with length: 1..32.
    TunnelVrf interface{}

    // Configure Type of Service bits for this tunnel. The type is interface{}
    // with range: 0..255.
    Tos interface{}

    // Disable DF bit (i.e. allow fragmentation). The type is interface{} with
    // range: -2147483648..2147483647.
    Disable interface{}

    // Tunnel encapsulation method.
    Mode InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode

    // Configure source of tunnel.
    Source InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source

    // Configure the key value for packets sent over this tunnel.
    Key InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key

    // Enable keepalive packets on this tunnel.
    Keepalive InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive

    // Configure destination of tunnel.
    Destination InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination
}

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetEntityData() *types.CommonEntityData {
    tunnelIp.EntityData.YFilter = tunnelIp.YFilter
    tunnelIp.EntityData.YangName = "tunnel-ip"
    tunnelIp.EntityData.BundleName = "cisco_ios_xr"
    tunnelIp.EntityData.ParentYangName = "interface-configuration"
    tunnelIp.EntityData.SegmentPath = "Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip"
    tunnelIp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelIp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelIp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelIp.EntityData.Children = make(map[string]types.YChild)
    tunnelIp.EntityData.Children["mode"] = types.YChild{"Mode", &tunnelIp.Mode}
    tunnelIp.EntityData.Children["source"] = types.YChild{"Source", &tunnelIp.Source}
    tunnelIp.EntityData.Children["key"] = types.YChild{"Key", &tunnelIp.Key}
    tunnelIp.EntityData.Children["keepalive"] = types.YChild{"Keepalive", &tunnelIp.Keepalive}
    tunnelIp.EntityData.Children["destination"] = types.YChild{"Destination", &tunnelIp.Destination}
    tunnelIp.EntityData.Leafs = make(map[string]types.YLeaf)
    tunnelIp.EntityData.Leafs["allow-key"] = types.YLeaf{"AllowKey", tunnelIp.AllowKey}
    tunnelIp.EntityData.Leafs["ttl"] = types.YLeaf{"Ttl", tunnelIp.Ttl}
    tunnelIp.EntityData.Leafs["tunnel-vrf"] = types.YLeaf{"TunnelVrf", tunnelIp.TunnelVrf}
    tunnelIp.EntityData.Leafs["tos"] = types.YLeaf{"Tos", tunnelIp.Tos}
    tunnelIp.EntityData.Leafs["disable"] = types.YLeaf{"Disable", tunnelIp.Disable}
    return &(tunnelIp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode
// Tunnel encapsulation method
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GRE IPV4 - 1, GRE IPV6 - 2, MGRE IPV4 - 3, MGRE IPV6 -4. IPV4 - 5, IPV6 -
    // 6. The type is interface{} with range: -2147483648..2147483647.
    Value interface{}

    // Tunnel Mode Direction. The type is TunnelModeDirection.
    ModeDirection interface{}
}

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetEntityData() *types.CommonEntityData {
    mode.EntityData.YFilter = mode.YFilter
    mode.EntityData.YangName = "mode"
    mode.EntityData.BundleName = "cisco_ios_xr"
    mode.EntityData.ParentYangName = "tunnel-ip"
    mode.EntityData.SegmentPath = "mode"
    mode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mode.EntityData.Children = make(map[string]types.YChild)
    mode.EntityData.Leafs = make(map[string]types.YLeaf)
    mode.EntityData.Leafs["value"] = types.YLeaf{"Value", mode.Value}
    mode.EntityData.Leafs["mode-direction"] = types.YLeaf{"ModeDirection", mode.ModeDirection}
    return &(mode.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source
// Configure source of tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // 1 for Interface Name, 2 for IPv4 Address, 3 for IPv6 Address. The type is
    // interface{} with range: -2147483648..2147483647.
    Type_ interface{}

    // IPV4 address of the tunnel source. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Name of tunnel source interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // IPV6 address of the tunnel source. The type is string.
    Ipv6Address interface{}
}

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "tunnel-ip"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = make(map[string]types.YChild)
    source.EntityData.Leafs = make(map[string]types.YLeaf)
    source.EntityData.Leafs["type"] = types.YLeaf{"Type_", source.Type_}
    source.EntityData.Leafs["address"] = types.YLeaf{"Address", source.Address}
    source.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", source.InterfaceName}
    source.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", source.Ipv6Address}
    return &(source.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key
// Configure the key value for packets sent over
// this tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Always set to true. The type is interface{}.
    Entropy interface{}

    // Enter the KEY value. The type is interface{} with range: 0..4294967295.
    Value interface{}
}

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "cisco_ios_xr"
    key.EntityData.ParentYangName = "tunnel-ip"
    key.EntityData.SegmentPath = "key"
    key.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    key.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    key.EntityData.Children = make(map[string]types.YChild)
    key.EntityData.Leafs = make(map[string]types.YLeaf)
    key.EntityData.Leafs["entropy"] = types.YLeaf{"Entropy", key.Entropy}
    key.EntityData.Leafs["value"] = types.YLeaf{"Value", key.Value}
    return &(key.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive
// Enable keepalive packets on this tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive period in seconds (default 10 seconds). The type is interface{}
    // with range: 1..32767.
    KeepAlivePeriod interface{}

    // Number of retries (default 3). The type is interface{} with range: 1..255.
    KeepAliveRetries interface{}
}

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetEntityData() *types.CommonEntityData {
    keepalive.EntityData.YFilter = keepalive.YFilter
    keepalive.EntityData.YangName = "keepalive"
    keepalive.EntityData.BundleName = "cisco_ios_xr"
    keepalive.EntityData.ParentYangName = "tunnel-ip"
    keepalive.EntityData.SegmentPath = "keepalive"
    keepalive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    keepalive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    keepalive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    keepalive.EntityData.Children = make(map[string]types.YChild)
    keepalive.EntityData.Leafs = make(map[string]types.YLeaf)
    keepalive.EntityData.Leafs["keep-alive-period"] = types.YLeaf{"KeepAlivePeriod", keepalive.KeepAlivePeriod}
    keepalive.EntityData.Leafs["keep-alive-retries"] = types.YLeaf{"KeepAliveRetries", keepalive.KeepAliveRetries}
    return &(keepalive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination
// Configure destination of tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // 1 for IPv4 Address, 2 for IPv6 Address. The type is interface{} with range:
    // -2147483648..2147483647.
    Type_ interface{}

    // IPV4 address of the tunnel destination. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // IPV6 address of the tunnel destination. The type is string.
    Ipv6Address interface{}

    // IPv4 prefix length of the tunnel destination. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    AddressMask interface{}

    // Prefix-list to validate destination's resolving prefix. The type is string
    // with length: 1..64.
    PrefixListName interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "tunnel-ip"
    destination.EntityData.SegmentPath = "destination"
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = make(map[string]types.YChild)
    destination.EntityData.Leafs = make(map[string]types.YLeaf)
    destination.EntityData.Leafs["type"] = types.YLeaf{"Type_", destination.Type_}
    destination.EntityData.Leafs["address"] = types.YLeaf{"Address", destination.Address}
    destination.EntityData.Leafs["ipv6-address"] = types.YLeaf{"Ipv6Address", destination.Ipv6Address}
    destination.EntityData.Leafs["address-mask"] = types.YLeaf{"AddressMask", destination.AddressMask}
    destination.EntityData.Leafs["prefix-list-name"] = types.YLeaf{"PrefixListName", destination.PrefixListName}
    return &(destination.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve
// NVE operational data
type InterfaceConfigurations_InterfaceConfiguration_Nve struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // UDP port number in VxLAN encapsulation. The type is VxlanUdpPortEnum. The
    // default value is ietf-udp-port.
    VxLanUdpPort interface{}

    // The Overlay Encapsulation for this NVE. The type is OverlayEncapEnum. The
    // default value is vx-lan-encapsulation.
    OverlayEncapsulation interface{}

    // Source Interface for this NVE. The type is string.
    SourceInterface interface{}

    // The Ingress Replication Protocol for this NVE. The type is IrProtocolEnum.
    IngressReplicationProtocol interface{}

    // Enable anycast mode for this NVE interface.
    Anycast InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast

    // Redundancy configuration for this NVE.
    Redundancy InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy

    // VNI configuration Table for this NVE.
    MemberVnis InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis
}

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetEntityData() *types.CommonEntityData {
    nve.EntityData.YFilter = nve.YFilter
    nve.EntityData.YangName = "nve"
    nve.EntityData.BundleName = "cisco_ios_xr"
    nve.EntityData.ParentYangName = "interface-configuration"
    nve.EntityData.SegmentPath = "Cisco-IOS-XR-tunnel-nve-cfg:nve"
    nve.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nve.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nve.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nve.EntityData.Children = make(map[string]types.YChild)
    nve.EntityData.Children["anycast"] = types.YChild{"Anycast", &nve.Anycast}
    nve.EntityData.Children["redundancy"] = types.YChild{"Redundancy", &nve.Redundancy}
    nve.EntityData.Children["member-vnis"] = types.YChild{"MemberVnis", &nve.MemberVnis}
    nve.EntityData.Leafs = make(map[string]types.YLeaf)
    nve.EntityData.Leafs["vx-lan-udp-port"] = types.YLeaf{"VxLanUdpPort", nve.VxLanUdpPort}
    nve.EntityData.Leafs["overlay-encapsulation"] = types.YLeaf{"OverlayEncapsulation", nve.OverlayEncapsulation}
    nve.EntityData.Leafs["source-interface"] = types.YLeaf{"SourceInterface", nve.SourceInterface}
    nve.EntityData.Leafs["ingress-replication-protocol"] = types.YLeaf{"IngressReplicationProtocol", nve.IngressReplicationProtocol}
    return &(nve.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast
// Enable anycast mode for this NVE interface
type InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the Anycast mode source interface. The type is string.
    SourceInterface interface{}

    // MCast group for syncing between Anycast gateways. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SyncGroup interface{}
}

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetEntityData() *types.CommonEntityData {
    anycast.EntityData.YFilter = anycast.YFilter
    anycast.EntityData.YangName = "anycast"
    anycast.EntityData.BundleName = "cisco_ios_xr"
    anycast.EntityData.ParentYangName = "nve"
    anycast.EntityData.SegmentPath = "anycast"
    anycast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    anycast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    anycast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    anycast.EntityData.Children = make(map[string]types.YChild)
    anycast.EntityData.Leafs = make(map[string]types.YLeaf)
    anycast.EntityData.Leafs["source-interface"] = types.YLeaf{"SourceInterface", anycast.SourceInterface}
    anycast.EntityData.Leafs["sync-group"] = types.YLeaf{"SyncGroup", anycast.SyncGroup}
    return &(anycast.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy
// Redundancy configuration for this NVE
type InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable Redundancy. The type is interface{}.
    Enable interface{}

    // VXLAN backbone.
    BackboneVxLan InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan

    // MPLS backbone.
    BackboneMpls InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetEntityData() *types.CommonEntityData {
    redundancy.EntityData.YFilter = redundancy.YFilter
    redundancy.EntityData.YangName = "redundancy"
    redundancy.EntityData.BundleName = "cisco_ios_xr"
    redundancy.EntityData.ParentYangName = "nve"
    redundancy.EntityData.SegmentPath = "redundancy"
    redundancy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redundancy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redundancy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redundancy.EntityData.Children = make(map[string]types.YChild)
    redundancy.EntityData.Children["backbone-vx-lan"] = types.YChild{"BackboneVxLan", &redundancy.BackboneVxLan}
    redundancy.EntityData.Children["backbone-mpls"] = types.YChild{"BackboneMpls", &redundancy.BackboneMpls}
    redundancy.EntityData.Leafs = make(map[string]types.YLeaf)
    redundancy.EntityData.Leafs["enable"] = types.YLeaf{"Enable", redundancy.Enable}
    return &(redundancy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan
// VXLAN backbone
type InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable Backbone VxLAN. The type is interface{}.
    Enable interface{}

    // VxLAN backbone ICCP group. The type is interface{} with range:
    // -2147483648..2147483647.
    BackboneVxLaniccp interface{}
}

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetEntityData() *types.CommonEntityData {
    backboneVxLan.EntityData.YFilter = backboneVxLan.YFilter
    backboneVxLan.EntityData.YangName = "backbone-vx-lan"
    backboneVxLan.EntityData.BundleName = "cisco_ios_xr"
    backboneVxLan.EntityData.ParentYangName = "redundancy"
    backboneVxLan.EntityData.SegmentPath = "backbone-vx-lan"
    backboneVxLan.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backboneVxLan.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backboneVxLan.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backboneVxLan.EntityData.Children = make(map[string]types.YChild)
    backboneVxLan.EntityData.Leafs = make(map[string]types.YLeaf)
    backboneVxLan.EntityData.Leafs["enable"] = types.YLeaf{"Enable", backboneVxLan.Enable}
    backboneVxLan.EntityData.Leafs["backbone-vx-laniccp"] = types.YLeaf{"BackboneVxLaniccp", backboneVxLan.BackboneVxLaniccp}
    return &(backboneVxLan.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls
// MPLS backbone
type InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS backbone ICCP group. The type is interface{} with range:
    // -2147483648..2147483647.
    BackboneMplsiccp interface{}

    // Enable Backbone MPLS. The type is interface{}.
    Enable interface{}
}

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetEntityData() *types.CommonEntityData {
    backboneMpls.EntityData.YFilter = backboneMpls.YFilter
    backboneMpls.EntityData.YangName = "backbone-mpls"
    backboneMpls.EntityData.BundleName = "cisco_ios_xr"
    backboneMpls.EntityData.ParentYangName = "redundancy"
    backboneMpls.EntityData.SegmentPath = "backbone-mpls"
    backboneMpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backboneMpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backboneMpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backboneMpls.EntityData.Children = make(map[string]types.YChild)
    backboneMpls.EntityData.Leafs = make(map[string]types.YLeaf)
    backboneMpls.EntityData.Leafs["backbone-mplsiccp"] = types.YLeaf{"BackboneMplsiccp", backboneMpls.BackboneMplsiccp}
    backboneMpls.EntityData.Leafs["enable"] = types.YLeaf{"Enable", backboneMpls.Enable}
    return &(backboneMpls.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis
// VNI configuration Table for this NVE
type InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VNI member attributes. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni.
    MemberVni []InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni
}

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetEntityData() *types.CommonEntityData {
    memberVnis.EntityData.YFilter = memberVnis.YFilter
    memberVnis.EntityData.YangName = "member-vnis"
    memberVnis.EntityData.BundleName = "cisco_ios_xr"
    memberVnis.EntityData.ParentYangName = "nve"
    memberVnis.EntityData.SegmentPath = "member-vnis"
    memberVnis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberVnis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberVnis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberVnis.EntityData.Children = make(map[string]types.YChild)
    memberVnis.EntityData.Children["member-vni"] = types.YChild{"MemberVni", nil}
    for i := range memberVnis.MemberVni {
        memberVnis.EntityData.Children[types.GetSegmentPath(&memberVnis.MemberVni[i])] = types.YChild{"MemberVni", &memberVnis.MemberVni[i]}
    }
    memberVnis.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(memberVnis.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni
// VNI member attributes
type InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Single VNI or Range Start. The type is interface{}
    // with range: 1..16777215.
    VniStart interface{}

    // This attribute is a key. Range End. The type is interface{} with range:
    // 1..16777215.
    VniEnd interface{}

    // Control protocol for VxLAN tunnel endpoint reachability. The type is
    // HostReachProtocol.
    HostReachability interface{}

    // VRF associated with the VxLAN segment. The type is string.
    Vrf interface{}

    // Suppression of unknown unicast flooding. The type is
    // UnknownUnicastFloodingEnum.
    UnknownUnicastFlooding interface{}

    // Per-evi load balance mode. The type is LoadBalanceEnum.
    LoadBalancePerEvi interface{}

    // Enable VNI. The type is interface{}.
    Enable interface{}

    // Mulitcast core group range associated with the VxLAN segment(s).
    Multicast InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast
}

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetEntityData() *types.CommonEntityData {
    memberVni.EntityData.YFilter = memberVni.YFilter
    memberVni.EntityData.YangName = "member-vni"
    memberVni.EntityData.BundleName = "cisco_ios_xr"
    memberVni.EntityData.ParentYangName = "member-vnis"
    memberVni.EntityData.SegmentPath = "member-vni" + "[vni-start='" + fmt.Sprintf("%v", memberVni.VniStart) + "']" + "[vni-end='" + fmt.Sprintf("%v", memberVni.VniEnd) + "']"
    memberVni.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberVni.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberVni.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberVni.EntityData.Children = make(map[string]types.YChild)
    memberVni.EntityData.Children["multicast"] = types.YChild{"Multicast", &memberVni.Multicast}
    memberVni.EntityData.Leafs = make(map[string]types.YLeaf)
    memberVni.EntityData.Leafs["vni-start"] = types.YLeaf{"VniStart", memberVni.VniStart}
    memberVni.EntityData.Leafs["vni-end"] = types.YLeaf{"VniEnd", memberVni.VniEnd}
    memberVni.EntityData.Leafs["host-reachability"] = types.YLeaf{"HostReachability", memberVni.HostReachability}
    memberVni.EntityData.Leafs["vrf"] = types.YLeaf{"Vrf", memberVni.Vrf}
    memberVni.EntityData.Leafs["unknown-unicast-flooding"] = types.YLeaf{"UnknownUnicastFlooding", memberVni.UnknownUnicastFlooding}
    memberVni.EntityData.Leafs["load-balance-per-evi"] = types.YLeaf{"LoadBalancePerEvi", memberVni.LoadBalancePerEvi}
    memberVni.EntityData.Leafs["enable"] = types.YLeaf{"Enable", memberVni.Enable}
    return &(memberVni.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast
// Mulitcast core group range associated with
// the VxLAN segment(s)
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV4 group address of the tunnel source. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    MulticastGroupMin interface{}

    // IPV4 group address MAX. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    MulticastGroupMax interface{}
}

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetEntityData() *types.CommonEntityData {
    multicast.EntityData.YFilter = multicast.YFilter
    multicast.EntityData.YangName = "multicast"
    multicast.EntityData.BundleName = "cisco_ios_xr"
    multicast.EntityData.ParentYangName = "member-vni"
    multicast.EntityData.SegmentPath = "multicast"
    multicast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicast.EntityData.Children = make(map[string]types.YChild)
    multicast.EntityData.Leafs = make(map[string]types.YLeaf)
    multicast.EntityData.Leafs["multicast-group-min"] = types.YLeaf{"MulticastGroupMin", multicast.MulticastGroupMin}
    multicast.EntityData.Leafs["multicast-group-max"] = types.YLeaf{"MulticastGroupMax", multicast.MulticastGroupMax}
    return &(multicast.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Wanphy
// WANPHY port controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Wanphy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path Remote Defect Indicator reporting. The type is interface{}.
    ReportPathRdi interface{}

    // Configure Loss Of Signal reporting. The type is interface{}.
    ReportLos interface{}

    // Configure Path Loss Of Code-Group Delineation reporting. The type is
    // interface{}.
    ReportPathLcd interface{}

    // Configure Path Far End Payload Label Mismatch reporting. The type is
    // interface{}.
    ReportPathFePlm interface{}

    // Configure LAN Mode. The type is WanphyLanMode.
    LanMode interface{}

    // Configure Path Payload Label Mismatch reporting. The type is interface{}.
    ReportPathPlm interface{}

    // Configure Path Far End Payload Label Mismatch reporting. The type is
    // interface{}.
    ReportPathFeAis interface{}

    // Configure Path Alarm Indication Signal reporting. The type is interface{}.
    ReportPathAis interface{}

    // Configure Line Alarm Indication Signal reporting. The type is interface{}.
    ReportLineAis interface{}

    // Configure Loss Of Frame reporting. The type is interface{}.
    ReportLof interface{}

    // Configure Loss Of Pointer reporting. The type is interface{}.
    ReportLop interface{}

    // Configure Remote Defect Indicator reporting. The type is interface{}.
    ReportRdi interface{}

    // Configure B2 BER in excess of SD threshold reporting. The type is
    // interface{}.
    ReportSdBer interface{}

    // Bit error rate is 10 to the minus n, where n is threshold value. The type
    // is interface{} with range: 3..9. The default value is 6.
    ThresholdSdBer interface{}

    // Configure B2 BER in excess of SF threshold reporting. The type is
    // interface{}.
    ReportSfBer interface{}

    // Bit error rate is 10 to the minus n, where n is threshold value. The type
    // is interface{} with range: 3..9. The default value is 3.
    ThresholdSfBer interface{}

    // Configure WAN Mode. The type is WanphyWanMode.
    WanMode interface{}
}

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetEntityData() *types.CommonEntityData {
    wanphy.EntityData.YFilter = wanphy.YFilter
    wanphy.EntityData.YangName = "wanphy"
    wanphy.EntityData.BundleName = "cisco_ios_xr"
    wanphy.EntityData.ParentYangName = "interface-configuration"
    wanphy.EntityData.SegmentPath = "Cisco-IOS-XR-wanphy-ui-cfg:wanphy"
    wanphy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    wanphy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    wanphy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    wanphy.EntityData.Children = make(map[string]types.YChild)
    wanphy.EntityData.Leafs = make(map[string]types.YLeaf)
    wanphy.EntityData.Leafs["report-path-rdi"] = types.YLeaf{"ReportPathRdi", wanphy.ReportPathRdi}
    wanphy.EntityData.Leafs["report-los"] = types.YLeaf{"ReportLos", wanphy.ReportLos}
    wanphy.EntityData.Leafs["report-path-lcd"] = types.YLeaf{"ReportPathLcd", wanphy.ReportPathLcd}
    wanphy.EntityData.Leafs["report-path-fe-plm"] = types.YLeaf{"ReportPathFePlm", wanphy.ReportPathFePlm}
    wanphy.EntityData.Leafs["lan-mode"] = types.YLeaf{"LanMode", wanphy.LanMode}
    wanphy.EntityData.Leafs["report-path-plm"] = types.YLeaf{"ReportPathPlm", wanphy.ReportPathPlm}
    wanphy.EntityData.Leafs["report-path-fe-ais"] = types.YLeaf{"ReportPathFeAis", wanphy.ReportPathFeAis}
    wanphy.EntityData.Leafs["report-path-ais"] = types.YLeaf{"ReportPathAis", wanphy.ReportPathAis}
    wanphy.EntityData.Leafs["report-line-ais"] = types.YLeaf{"ReportLineAis", wanphy.ReportLineAis}
    wanphy.EntityData.Leafs["report-lof"] = types.YLeaf{"ReportLof", wanphy.ReportLof}
    wanphy.EntityData.Leafs["report-lop"] = types.YLeaf{"ReportLop", wanphy.ReportLop}
    wanphy.EntityData.Leafs["report-rdi"] = types.YLeaf{"ReportRdi", wanphy.ReportRdi}
    wanphy.EntityData.Leafs["report-sd-ber"] = types.YLeaf{"ReportSdBer", wanphy.ReportSdBer}
    wanphy.EntityData.Leafs["threshold-sd-ber"] = types.YLeaf{"ThresholdSdBer", wanphy.ThresholdSdBer}
    wanphy.EntityData.Leafs["report-sf-ber"] = types.YLeaf{"ReportSfBer", wanphy.ReportSfBer}
    wanphy.EntityData.Leafs["threshold-sf-ber"] = types.YLeaf{"ThresholdSfBer", wanphy.ThresholdSfBer}
    wanphy.EntityData.Leafs["wan-mode"] = types.YLeaf{"WanMode", wanphy.WanMode}
    return &(wanphy.EntityData)
}

